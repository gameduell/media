// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_WEB = typeof window === 'object';
// Three configurations we can be running in:
// 1) We could be the application main() thread running in the main JS UI thread. (ENVIRONMENT_IS_WORKER == false and ENVIRONMENT_IS_PTHREAD == false)
// 2) We could be the application main() thread proxied to worker. (with Emscripten -s PROXY_TO_WORKER=1) (ENVIRONMENT_IS_WORKER == true, ENVIRONMENT_IS_PTHREAD == false)
// 3) We could be an application pthread running in a worker. (ENVIRONMENT_IS_WORKER == true and ENVIRONMENT_IS_PTHREAD == true)
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function' && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER;
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) {
    var ret = Module['read'](filename, true);
    if (!ret.buffer) {
      ret = new Uint8Array(ret);
    }
    assert(ret.buffer);
    return ret;
  };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  if (!Module['thisProgram']) {
    if (process['argv'].length > 1) {
      Module['thisProgram'] = process['argv'][1].replace(/\\/g, '/');
    } else {
      Module['thisProgram'] = 'unknown-program';
    }
  }

  Module['arguments'] = process['argv'].slice(2);

  if (typeof module !== 'undefined') {
    module['exports'] = Module;
  }

  process['on']('uncaughtException', function(ex) {
    // suppress ExitStatus exceptions from showing an error
    if (!(ex instanceof ExitStatus)) {
      throw ex;
    }
  });

  Module['inspect'] = function () { return '[Emscripten Module object]'; };
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    if (typeof readbuffer === 'function') {
      return new Uint8Array(readbuffer(f));
    }
    var data = read(f, 'binary');
    assert(typeof data === 'object');
    return data;
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WORKER) {
    Module['load'] = importScripts;
  }

  if (typeof Module['setWindowTitle'] === 'undefined') {
    Module['setWindowTitle'] = function(title) { document.title = title };
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
if (!Module['thisProgram']) {
  Module['thisProgram'] = './this.program';
}

// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Preamble library stuff ===

// Documentation for the public APIs defined in this file must be updated in: 
//    site/source/docs/api_reference/preamble.js.rst
// A prebuilt local version of the documentation is available at: 
//    site/build/text/docs/api_reference/preamble.js.txt
// You can also build docs locally as HTML or other formats in site/
// An online HTML version (which may be of a different version of Emscripten)
//    is up at http://kripken.github.io/emscripten-site/docs/api_reference/preamble.js.html

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  setTempRet0: function (value) {
    tempRet0 = value;
  },
  getTempRet0: function () {
    return tempRet0;
  },
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  STACK_ALIGN: 16,
  prepVararg: function (ptr, type) {
    if (type === 'double' || type === 'i64') {
      // move so the load is aligned
      if (ptr & 7) {
        assert((ptr & 7) === 4);
        ptr += 4;
      }
    } else {
      assert((ptr & 3) === 0);
    }
    return ptr;
  },
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      if (!args.splice) args = Array.prototype.slice.call(args);
      args.splice(0, 0, ptr);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].apply(null, args);
    } else {
      assert(sig.length == 1);
      assert(('dynCall_' + sig) in Module, 'bad function pointer type - no table for sig \'' + sig + '\'');
      return Module['dynCall_' + sig].call(null, ptr);
    }
  },
  functionPointers: [],
  addFunction: function (func) {
    for (var i = 0; i < Runtime.functionPointers.length; i++) {
      if (!Runtime.functionPointers[i]) {
        Runtime.functionPointers[i] = func;
        return 2*(1 + i);
      }
    }
    throw 'Finished up all reserved function pointers. Use a higher value for RESERVED_FUNCTION_POINTERS.';
  },
  removeFunction: function (index) {
    Runtime.functionPointers[(index-2)/2] = null;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[sig]) {
      Runtime.funcWrappers[sig] = {};
    }
    var sigCache = Runtime.funcWrappers[sig];
    if (!sigCache[func]) {
      sigCache[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return sigCache[func];
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+15)&-16);(assert((((STACKTOP|0) < (STACK_MAX|0))|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+15)&-16); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+15)&-16); if (asm) { Runtime.setDynamicTop(DYNAMICTOP); }; if (DYNAMICTOP >= TOTAL_MEMORY) { var success = enlargeMemory(); if (!success) { DYNAMICTOP = ret; if (asm) { Runtime.setDynamicTop(DYNAMICTOP); } return 0; } }; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 16))*(quantum ? quantum : 16); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((+((low>>>0)))+((+((high>>>0)))*(+4294967296))) : ((+((low>>>0)))+((+((high|0)))*(+4294967296)))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



Module["Runtime"] = Runtime;


function getSafeHeapType(bytes, isFloat) {
  switch (bytes) {
    case 1: return 'i8';
    case 2: return 'i16';
    case 4: return isFloat ? 'float' : 'i32';
    case 8: return 'double';
    default: assert(0);
  }
}


function SAFE_HEAP_STORE(dest, value, bytes, isFloat) {
  if (dest <= 0) abort('segmentation fault storing ' + bytes + ' bytes to address ' + dest);
  if (dest % bytes !== 0) abort('alignment error storing to address ' + dest + ', which was expected to be aligned to a multiple of ' + bytes);
  if (dest + bytes > Math.max(DYNAMICTOP, STATICTOP)) abort('segmentation fault, exceeded the top of the available heap when storing ' + bytes + ' bytes to address ' + dest + '. STATICTOP=' + STATICTOP + ', DYNAMICTOP=' + DYNAMICTOP);
  assert(DYNAMICTOP <= TOTAL_MEMORY);
  setValue(dest, value, getSafeHeapType(bytes, isFloat), 1);
}
function SAFE_HEAP_STORE_D(dest, value, bytes) {
  SAFE_HEAP_STORE(dest, value, bytes, true);
}

function SAFE_HEAP_LOAD(dest, bytes, unsigned, isFloat) {
  if (dest <= 0) abort('segmentation fault loading ' + bytes + ' bytes from address ' + dest);
  if (dest % bytes !== 0) abort('alignment error loading from address ' + dest + ', which was expected to be aligned to a multiple of ' + bytes);
  if (dest + bytes > Math.max(DYNAMICTOP, STATICTOP)) abort('segmentation fault, exceeded the top of the available heap when loading ' + bytes + ' bytes from address ' + dest + '. STATICTOP=' + STATICTOP + ', DYNAMICTOP=' + DYNAMICTOP);
  assert(DYNAMICTOP <= TOTAL_MEMORY);
  var type = getSafeHeapType(bytes, isFloat);
  var ret = getValue(dest, type, 1);
  if (unsigned) ret = unSign(ret, parseInt(type.substr(1)), 1);
  return ret;
}
function SAFE_HEAP_LOAD_D(dest, bytes, unsigned) {
  return SAFE_HEAP_LOAD(dest, bytes, unsigned, true);
}

function SAFE_FT_MASK(value, mask) {
  var ret = value & mask;
  if (ret !== value) {
    abort('Function table mask error: function pointer is ' + value + ' which is masked by ' + mask + ', the likely cause of this is that the function pointer is being called by the wrong type.');
  }
  return ret;
}

function segfault() {
  abort('segmentation fault');
}
function alignfault() {
  abort('alignment fault');
}
function ftfault() {
  abort('Function table mask error');
}

//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  var func = Module['_' + ident]; // closure exported function
  if (!func) {
    try {
      func = eval('_' + ident); // explicit lookup
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

var cwrap, ccall;
(function(){
  var JSfuncs = {
    // Helpers for cwrap -- it can't refer to Runtime directly because it might
    // be renamed by closure, instead it calls JSfuncs['stackSave'].body to find
    // out what the minified function name is.
    'stackSave': function() {
      Runtime.stackSave()
    },
    'stackRestore': function() {
      Runtime.stackRestore()
    },
    // type conversion from js to c
    'arrayToC' : function(arr) {
      var ret = Runtime.stackAlloc(arr.length);
      writeArrayToMemory(arr, ret);
      return ret;
    },
    'stringToC' : function(str) {
      var ret = 0;
      if (str !== null && str !== undefined && str !== 0) { // null string
        // at most 4 bytes per UTF-8 code point, +1 for the trailing '\0'
        ret = Runtime.stackAlloc((str.length << 2) + 1);
        writeStringToMemory(str, ret);
      }
      return ret;
    }
  };
  // For fast lookup of conversion functions
  var toC = {'string' : JSfuncs['stringToC'], 'array' : JSfuncs['arrayToC']};

  // C calling interface. 
  ccall = function ccallFunc(ident, returnType, argTypes, args, opts) {
    var func = getCFunc(ident);
    var cArgs = [];
    var stack = 0;
    assert(returnType !== 'array', 'Return type should not be "array".');
    if (args) {
      for (var i = 0; i < args.length; i++) {
        var converter = toC[argTypes[i]];
        if (converter) {
          if (stack === 0) stack = Runtime.stackSave();
          cArgs[i] = converter(args[i]);
        } else {
          cArgs[i] = args[i];
        }
      }
    }
    var ret = func.apply(null, cArgs);
    if ((!opts || !opts.async) && typeof EmterpreterAsync === 'object') {
      assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling ccall');
    }
    if (opts && opts.async) assert(!returnType, 'async ccalls cannot return values');
    if (returnType === 'string') ret = Pointer_stringify(ret);
    if (stack !== 0) {
      if (opts && opts.async) {
        EmterpreterAsync.asyncFinalizers.push(function() {
          Runtime.stackRestore(stack);
        });
        return;
      }
      Runtime.stackRestore(stack);
    }
    return ret;
  }

  var sourceRegex = /^function\s*\(([^)]*)\)\s*{\s*([^*]*?)[\s;]*(?:return\s*(.*?)[;\s]*)?}$/;
  function parseJSFunc(jsfunc) {
    // Match the body and the return value of a javascript function source
    var parsed = jsfunc.toString().match(sourceRegex).slice(1);
    return {arguments : parsed[0], body : parsed[1], returnValue: parsed[2]}
  }
  var JSsource = {};
  for (var fun in JSfuncs) {
    if (JSfuncs.hasOwnProperty(fun)) {
      // Elements of toCsource are arrays of three items:
      // the code, and the return value
      JSsource[fun] = parseJSFunc(JSfuncs[fun]);
    }
  }

  
  cwrap = function cwrap(ident, returnType, argTypes) {
    argTypes = argTypes || [];
    var cfunc = getCFunc(ident);
    // When the function takes numbers and returns a number, we can just return
    // the original function
    var numericArgs = argTypes.every(function(type){ return type === 'number'});
    var numericRet = (returnType !== 'string');
    if ( numericRet && numericArgs) {
      return cfunc;
    }
    // Creation of the arguments list (["$1","$2",...,"$nargs"])
    var argNames = argTypes.map(function(x,i){return '$'+i});
    var funcstr = "(function(" + argNames.join(',') + ") {";
    var nargs = argTypes.length;
    if (!numericArgs) {
      // Generate the code needed to convert the arguments from javascript
      // values to pointers
      funcstr += 'var stack = ' + JSsource['stackSave'].body + ';';
      for (var i = 0; i < nargs; i++) {
        var arg = argNames[i], type = argTypes[i];
        if (type === 'number') continue;
        var convertCode = JSsource[type + 'ToC']; // [code, return]
        funcstr += 'var ' + convertCode.arguments + ' = ' + arg + ';';
        funcstr += convertCode.body + ';';
        funcstr += arg + '=' + convertCode.returnValue + ';';
      }
    }

    // When the code is compressed, the name of cfunc is not literally 'cfunc' anymore
    var cfuncname = parseJSFunc(function(){return cfunc}).returnValue;
    // Call the function
    funcstr += 'var ret = ' + cfuncname + '(' + argNames.join(',') + ');';
    if (!numericRet) { // Return type can only by 'string' or 'number'
      // Convert the result to a string
      var strgfy = parseJSFunc(function(){return Pointer_stringify}).returnValue;
      funcstr += 'ret = ' + strgfy + '(ret);';
    }
    funcstr += "if (typeof EmterpreterAsync === 'object') { assert(!EmterpreterAsync.state, 'cannot start async op with normal JS calling cwrap') }";
    if (!numericArgs) {
      // If we had a stack, restore it
      funcstr += JSsource['stackRestore'].body.replace('()', '(stack)') + ';';
    }
    funcstr += 'return ret})';
    return eval(funcstr);
  };
})();
Module["ccall"] = ccall;
Module["cwrap"] = cwrap;

function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
  if (noSafe) {
    switch(type) {
      case 'i1': HEAP8[((ptr)>>0)]=value; break;
      case 'i8': HEAP8[((ptr)>>0)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
  } else {
    switch(type) {
      case 'i1': SAFE_HEAP_STORE(((ptr)|0), ((value)|0), 1); break;
      case 'i8': SAFE_HEAP_STORE(((ptr)|0), ((value)|0), 1); break;
      case 'i16': SAFE_HEAP_STORE(((ptr)|0), ((value)|0), 2); break;
      case 'i32': SAFE_HEAP_STORE(((ptr)|0), ((value)|0), 4); break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,(+(Math_abs(tempDouble))) >= (+1) ? (tempDouble > (+0) ? ((Math_min((+(Math_floor((tempDouble)/(+4294967296)))), (+4294967295)))|0)>>>0 : (~~((+(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/(+4294967296))))))>>>0) : 0)],SAFE_HEAP_STORE(((ptr)|0), ((tempI64[0])|0), 4),SAFE_HEAP_STORE((((ptr)+(4))|0), ((tempI64[1])|0), 4)); break;
      case 'float': SAFE_HEAP_STORE_D(((ptr)|0), (+(value)), 4); break;
      case 'double': SAFE_HEAP_STORE_D(((ptr)|0), (+(value)), 8); break;
      default: abort('invalid type for setValue: ' + type);
    }
  }
}
Module["setValue"] = setValue;


function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
  if (noSafe) {
    switch(type) {
      case 'i1': return HEAP8[((ptr)>>0)];
      case 'i8': return HEAP8[((ptr)>>0)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  } else {
    switch(type) {
      case 'i1': return ((SAFE_HEAP_LOAD(((ptr)|0), 1, 0))|0);
      case 'i8': return ((SAFE_HEAP_LOAD(((ptr)|0), 1, 0))|0);
      case 'i16': return ((SAFE_HEAP_LOAD(((ptr)|0), 2, 0))|0);
      case 'i32': return ((SAFE_HEAP_LOAD(((ptr)|0), 4, 0))|0);
      case 'i64': return ((SAFE_HEAP_LOAD(((ptr)|0), 8, 0))|0);
      case 'float': return (+(SAFE_HEAP_LOAD_D(((ptr)|0), 4, 0)));
      case 'double': return (+(SAFE_HEAP_LOAD_D(((ptr)|0), 8, 0)));
      default: abort('invalid type for setValue: ' + type);
    }
  }
  return null;
}
Module["getValue"] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module["ALLOC_NORMAL"] = ALLOC_NORMAL;
Module["ALLOC_STACK"] = ALLOC_STACK;
Module["ALLOC_STATIC"] = ALLOC_STATIC;
Module["ALLOC_DYNAMIC"] = ALLOC_DYNAMIC;
Module["ALLOC_NONE"] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)>>0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module["allocate"] = allocate;

// Allocate memory during any stage of startup - static memory early on, dynamic memory later, malloc when ready
function getMemory(size) {
  if (!staticSealed) return Runtime.staticAlloc(size);
  if ((typeof _sbrk !== 'undefined' && !_sbrk.called) || !runtimeInitialized) return Runtime.dynamicAlloc(size);
  return _malloc(size);
}
Module["getMemory"] = getMemory;

function Pointer_stringify(ptr, /* optional */ length) {
  if (length === 0 || !ptr) return '';
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = 0;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = ((SAFE_HEAP_LOAD((((ptr)+(i))|0), 1, 1))|0);
    hasUtf |= t;
    if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (hasUtf < 128) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }
  return Module['UTF8ToString'](ptr);
}
Module["Pointer_stringify"] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated ASCII-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function AsciiToString(ptr) {
  var str = '';
  while (1) {
    var ch = ((SAFE_HEAP_LOAD(((ptr++)|0), 1, 0))|0);
    if (!ch) return str;
    str += String.fromCharCode(ch);
  }
}
Module["AsciiToString"] = AsciiToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in ASCII form. The copy will require at most str.length+1 bytes of space in the HEAP.

function stringToAscii(str, outPtr) {
  return writeAsciiToMemory(str, outPtr, false);
}
Module["stringToAscii"] = stringToAscii;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the given array that contains uint8 values, returns
// a copy of that string as a Javascript String object.

function UTF8ArrayToString(u8Array, idx) {
  var u0, u1, u2, u3, u4, u5;

  var str = '';
  while (1) {
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    u0 = u8Array[idx++];
    if (!u0) return str;
    if (!(u0 & 0x80)) { str += String.fromCharCode(u0); continue; }
    u1 = u8Array[idx++] & 63;
    if ((u0 & 0xE0) == 0xC0) { str += String.fromCharCode(((u0 & 31) << 6) | u1); continue; }
    u2 = u8Array[idx++] & 63;
    if ((u0 & 0xF0) == 0xE0) {
      u0 = ((u0 & 15) << 12) | (u1 << 6) | u2;
    } else {
      u3 = u8Array[idx++] & 63;
      if ((u0 & 0xF8) == 0xF0) {
        u0 = ((u0 & 7) << 18) | (u1 << 12) | (u2 << 6) | u3;
      } else {
        u4 = u8Array[idx++] & 63;
        if ((u0 & 0xFC) == 0xF8) {
          u0 = ((u0 & 3) << 24) | (u1 << 18) | (u2 << 12) | (u3 << 6) | u4;
        } else {
          u5 = u8Array[idx++] & 63;
          u0 = ((u0 & 1) << 30) | (u1 << 24) | (u2 << 18) | (u3 << 12) | (u4 << 6) | u5;
        }
      }
    }
    if (u0 < 0x10000) {
      str += String.fromCharCode(u0);
    } else {
      var ch = u0 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    }
  }
}
Module["UTF8ArrayToString"] = UTF8ArrayToString;

// Given a pointer 'ptr' to a null-terminated UTF8-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF8ToString(ptr) {
  return UTF8ArrayToString(HEAPU8,ptr);
}
Module["UTF8ToString"] = UTF8ToString;

// Copies the given Javascript String object 'str' to the given byte array at address 'outIdx',
// encoded in UTF8 form and null-terminated. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outU8Array: the array to copy to. Each index in this array is assumed to be one 8-byte element.
//   outIdx: The starting offset in the array to begin the copying.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=1, only the null terminator will be written and nothing else.
//                    maxBytesToWrite=0 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8Array(str, outU8Array, outIdx, maxBytesToWrite) {
  if (!(maxBytesToWrite > 0)) // Parameter maxBytesToWrite is not optional. Negative values, 0, null, undefined and false each don't write out any bytes.
    return 0;

  var startIdx = outIdx;
  var endIdx = outIdx + maxBytesToWrite - 1; // -1 for string null terminator.
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    // For UTF8 byte structure, see http://en.wikipedia.org/wiki/UTF-8#Description and https://www.ietf.org/rfc/rfc2279.txt and https://tools.ietf.org/html/rfc3629
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      if (outIdx >= endIdx) break;
      outU8Array[outIdx++] = u;
    } else if (u <= 0x7FF) {
      if (outIdx + 1 >= endIdx) break;
      outU8Array[outIdx++] = 0xC0 | (u >> 6);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0xFFFF) {
      if (outIdx + 2 >= endIdx) break;
      outU8Array[outIdx++] = 0xE0 | (u >> 12);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x1FFFFF) {
      if (outIdx + 3 >= endIdx) break;
      outU8Array[outIdx++] = 0xF0 | (u >> 18);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else if (u <= 0x3FFFFFF) {
      if (outIdx + 4 >= endIdx) break;
      outU8Array[outIdx++] = 0xF8 | (u >> 24);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    } else {
      if (outIdx + 5 >= endIdx) break;
      outU8Array[outIdx++] = 0xFC | (u >> 30);
      outU8Array[outIdx++] = 0x80 | ((u >> 24) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 18) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 12) & 63);
      outU8Array[outIdx++] = 0x80 | ((u >> 6) & 63);
      outU8Array[outIdx++] = 0x80 | (u & 63);
    }
  }
  // Null-terminate the pointer to the buffer.
  outU8Array[outIdx] = 0;
  return outIdx - startIdx;
}
Module["stringToUTF8Array"] = stringToUTF8Array;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF8 form. The copy will require at most str.length*4+1 bytes of space in the HEAP.
// Use the function lengthBytesUTF8() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF8(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  return stringToUTF8Array(str, HEAPU8,outPtr, maxBytesToWrite);
}
Module["stringToUTF8"] = stringToUTF8;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF8 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF8(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! So decode UTF16->UTF32->UTF8.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var u = str.charCodeAt(i); // possibly a lead surrogate
    if (u >= 0xD800 && u <= 0xDFFF) u = 0x10000 + ((u & 0x3FF) << 10) | (str.charCodeAt(++i) & 0x3FF);
    if (u <= 0x7F) {
      ++len;
    } else if (u <= 0x7FF) {
      len += 2;
    } else if (u <= 0xFFFF) {
      len += 3;
    } else if (u <= 0x1FFFFF) {
      len += 4;
    } else if (u <= 0x3FFFFFF) {
      len += 5;
    } else {
      len += 6;
    }
  }
  return len;
}
Module["lengthBytesUTF8"] = lengthBytesUTF8;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.

function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = ((SAFE_HEAP_LOAD((((ptr)+(i*2))|0), 2, 0))|0);
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module["UTF16ToString"] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16 form. The copy will require at most str.length*4+2 bytes of space in the HEAP.
// Use the function lengthBytesUTF16() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=2, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<2 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF16(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 2) return 0;
  maxBytesToWrite -= 2; // Null terminator.
  var startPtr = outPtr;
  var numCharsToWrite = (maxBytesToWrite < str.length*2) ? (maxBytesToWrite / 2) : str.length;
  for (var i = 0; i < numCharsToWrite; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    SAFE_HEAP_STORE(((outPtr)|0), ((codeUnit)|0), 2);
    outPtr += 2;
  }
  // Null-terminate the pointer to the HEAP.
  SAFE_HEAP_STORE(((outPtr)|0), ((0)|0), 2);
  return outPtr - startPtr;
}
Module["stringToUTF16"] = stringToUTF16;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF16(str) {
  return str.length*2;
}
Module["lengthBytesUTF16"] = lengthBytesUTF16;

function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = ((SAFE_HEAP_LOAD((((ptr)+(i*4))|0), 4, 0))|0);
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module["UTF32ToString"] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32 form. The copy will require at most str.length*4+4 bytes of space in the HEAP.
// Use the function lengthBytesUTF32() to compute the exact number of bytes (excluding null terminator) that this function will write.
// Parameters:
//   str: the Javascript string to copy.
//   outPtr: Byte address in Emscripten HEAP where to write the string to.
//   maxBytesToWrite: The maximum number of bytes this function can write to the array. This count should include the null 
//                    terminator, i.e. if maxBytesToWrite=4, only the null terminator will be written and nothing else.
//                    maxBytesToWrite<4 does not write any bytes to the output, not even the null terminator.
// Returns the number of bytes written, EXCLUDING the null terminator.

function stringToUTF32(str, outPtr, maxBytesToWrite) {
  assert(typeof maxBytesToWrite == 'number', 'stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!');
  // Backwards compatibility: if max bytes is not specified, assume unsafe unbounded write is allowed.
  if (maxBytesToWrite === undefined) {
    maxBytesToWrite = 0x7FFFFFFF;
  }
  if (maxBytesToWrite < 4) return 0;
  var startPtr = outPtr;
  var endPtr = startPtr + maxBytesToWrite - 4;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++i);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    SAFE_HEAP_STORE(((outPtr)|0), ((codeUnit)|0), 4);
    outPtr += 4;
    if (outPtr + 4 > endPtr) break;
  }
  // Null-terminate the pointer to the HEAP.
  SAFE_HEAP_STORE(((outPtr)|0), ((0)|0), 4);
  return outPtr - startPtr;
}
Module["stringToUTF32"] = stringToUTF32;

// Returns the number of bytes the given Javascript string takes if encoded as a UTF16 byte array, EXCLUDING the null terminator byte.

function lengthBytesUTF32(str) {
  var len = 0;
  for (var i = 0; i < str.length; ++i) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    // See http://unicode.org/faq/utf_bom.html#utf16-3
    var codeUnit = str.charCodeAt(i);
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) ++i; // possibly a lead surrogate, so skip over the tail surrogate.
    len += 4;
  }

  return len;
}
Module["lengthBytesUTF32"] = lengthBytesUTF32;

function demangle(func) {
  var hasLibcxxabi = !!Module['___cxa_demangle'];
  if (hasLibcxxabi) {
    try {
      var buf = _malloc(func.length);
      writeStringToMemory(func.substr(1), buf);
      var status = _malloc(4);
      var ret = Module['___cxa_demangle'](buf, 0, 0, status);
      if (getValue(status, 'i32') === 0 && ret) {
        return Pointer_stringify(ret);
      }
      // otherwise, libcxxabi failed, we can try ours which may return a partial result
    } catch(e) {
      // failure when using libcxxabi, we can try ours which may return a partial result
    } finally {
      if (buf) _free(buf);
      if (status) _free(status);
      if (ret) _free(ret);
    }
  }
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  var parsed = func;
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    parsed = parse();
  } catch(e) {
    parsed += '?';
  }
  if (parsed.indexOf('?') >= 0 && !hasLibcxxabi) {
    Runtime.warnOnce('warning: a problem occurred in builtin C++ name demangling; build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling');
  }
  return parsed;
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function jsStackTrace() {
  var err = new Error();
  if (!err.stack) {
    // IE10+ special cases: It does have callstack info, but it is only populated if an Error object is thrown,
    // so try that as a special-case.
    try {
      throw new Error(0);
    } catch(e) {
      err = e;
    }
    if (!err.stack) {
      return '(no stack trace available)';
    }
  }
  return err.stack.toString();
}

function stackTrace() {
  return demangleAll(jsStackTrace());
}
Module["stackTrace"] = stackTrace;

// Memory management

var PAGE_SIZE = 4096;

function alignMemoryPage(x) {
  if (x % 4096 > 0) {
    x += (4096 - (x % 4096));
  }
  return x;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk



function enlargeMemory() {
  // TOTAL_MEMORY is the current size of the actual array, and DYNAMICTOP is the new top.
  assert(DYNAMICTOP >= TOTAL_MEMORY);
  assert(TOTAL_MEMORY > 4); // So the loop below will not be infinite

  var OLD_TOTAL_MEMORY = TOTAL_MEMORY;


  var LIMIT = Math.pow(2, 31); // 2GB is a practical maximum, as we use signed ints as pointers
                               // and JS engines seem unhappy to give us 2GB arrays currently
  if (DYNAMICTOP >= LIMIT) return false;

  while (TOTAL_MEMORY <= DYNAMICTOP) { // Simple heuristic.
    if (TOTAL_MEMORY < LIMIT/2) {
      TOTAL_MEMORY = alignMemoryPage(2*TOTAL_MEMORY); // double until 1GB
    } else {
      var last = TOTAL_MEMORY;
      TOTAL_MEMORY = alignMemoryPage((3*TOTAL_MEMORY + LIMIT)/4); // add smaller increments towards 2GB, which we cannot reach
      if (TOTAL_MEMORY <= last) return false;
    }
  }

  TOTAL_MEMORY = Math.max(TOTAL_MEMORY, 16*1024*1024);

  if (TOTAL_MEMORY >= LIMIT) return false;

  Module.printErr('Warning: Enlarging memory arrays, this is not fast! ' + [OLD_TOTAL_MEMORY, TOTAL_MEMORY]);


  var start = Date.now();

  try {
    if (ArrayBuffer.transfer) {
      buffer = ArrayBuffer.transfer(buffer, TOTAL_MEMORY);
    } else {
      var oldHEAP8 = HEAP8;
      buffer = new ArrayBuffer(TOTAL_MEMORY);
    }
  } catch(e) {
    return false;
  }

  var success = _emscripten_replace_memory(buffer);
  if (!success) return false;

  // everything worked

  Module['buffer'] = buffer;
  Module['HEAP8'] = HEAP8 = new Int8Array(buffer);
  Module['HEAP16'] = HEAP16 = new Int16Array(buffer);
  Module['HEAP32'] = HEAP32 = new Int32Array(buffer);
  Module['HEAPU8'] = HEAPU8 = new Uint8Array(buffer);
  Module['HEAPU16'] = HEAPU16 = new Uint16Array(buffer);
  Module['HEAPU32'] = HEAPU32 = new Uint32Array(buffer);
  Module['HEAPF32'] = HEAPF32 = new Float32Array(buffer);
  Module['HEAPF64'] = HEAPF64 = new Float64Array(buffer);
  if (!ArrayBuffer.transfer) {
    HEAP8.set(oldHEAP8);
  }

  Module.printErr('enlarged memory arrays from ' + OLD_TOTAL_MEMORY + ' to ' + TOTAL_MEMORY + ', took ' + (Date.now() - start) + ' ms (has ArrayBuffer.transfer? ' + (!!ArrayBuffer.transfer) + ')');

  return true;
}

var byteLength;
try {
  byteLength = Function.prototype.call.bind(Object.getOwnPropertyDescriptor(ArrayBuffer.prototype, 'byteLength').get);
  byteLength(new ArrayBuffer(4)); // can fail on older ie
} catch(e) { // can fail on older node/v8
  byteLength = function(buffer) { return buffer.byteLength; };
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;

var totalMemory = 64*1024;
while (totalMemory < TOTAL_MEMORY || totalMemory < 2*TOTAL_STACK) {
  if (totalMemory < 16*1024*1024) {
    totalMemory *= 2;
  } else {
    totalMemory += 16*1024*1024
  }
}
totalMemory = Math.max(totalMemory, 16*1024*1024);
if (totalMemory !== TOTAL_MEMORY) {
  Module.printErr('increasing TOTAL_MEMORY to ' + totalMemory + ' to be compliant with the asm.js spec (and given that TOTAL_STACK=' + TOTAL_STACK + ')');
  TOTAL_MEMORY = totalMemory;
}

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer;



buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);


// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['buffer'] = buffer;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;
var runtimeExited = false;


function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);
  runtimeExited = true;
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module["addOnPreRun"] = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module["addOnInit"] = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module["addOnPreMain"] = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module["addOnExit"] = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module["addOnPostRun"] = addOnPostRun;

// Tools


function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var len = length > 0 ? length : lengthBytesUTF8(stringy)+1;
  var u8array = new Array(len);
  var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
  if (dontAddNull) u8array.length = numBytesWritten;
  return u8array;
}
Module["intArrayFromString"] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
      assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module["intArrayToString"] = intArrayToString;

function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    SAFE_HEAP_STORE((((buffer)+(i))|0), ((chr)|0), 1);
    i = i + 1;
  }
}
Module["writeStringToMemory"] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    SAFE_HEAP_STORE(((buffer++)|0), ((array[i])|0), 1);
  }
}
Module["writeArrayToMemory"] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; ++i) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    SAFE_HEAP_STORE(((buffer++)|0), ((str.charCodeAt(i))|0), 1);
  }
  // Null-terminate the pointer to the HEAP.
  if (!dontAddNull) SAFE_HEAP_STORE(((buffer)|0), ((0)|0), 1);
}
Module["writeAsciiToMemory"] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}


// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


if (!Math['clz32']) Math['clz32'] = function(x) {
  x = x >>> 0;
  for (var i = 0; i < 32; i++) {
    if (x & (1 << (31 - i))) return i;
  }
  return 32;
};
Math.clz32 = Math['clz32']

var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;
var Math_clz32 = Math.clz32;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function getUniqueRunDependency(id) {
  var orig = id;
  while (1) {
    if (!runDependencyTracking[id]) return id;
    id = orig + Math.random();
  }
  return id;
}

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        if (ABORT) {
          clearInterval(runDependencyWatcher);
          runDependencyWatcher = null;
          return;
        }
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module["addRunDependency"] = addRunDependency;

function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module["removeRunDependency"] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data



var memoryInitializer = null;



// === Body ===

var ASM_CONSTS = [];




STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 16112;
  /* global initializers */  __ATINIT__.push();
  

/* memory initializer */ allocate([0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,4,0,0,0,3,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,4,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,8,0,0,0,7,0,0,0,6,0,0,0,4,0,0,0,4,0,0,0,2,0,0,0,2,0,0,0,2,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,4,0,0,0,8,0,0,0,12,0,0,0,128,0,0,0,132,0,0,0,136,0,0,0,140,0,0,0,0,1,0,0,4,1,0,0,8,1,0,0,12,1,0,0,128,1,0,0,132,1,0,0,136,1,0,0,140,1,0,0,0,0,0,0,1,0,0,0,2,0,0,0,3,0,0,0,6,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,6,0,0,0,7,0,0,0,0,0,0,0,22,27,0,0,26,27,0,0,31,27,0,0,37,27,0,0,138,11,0,0,140,11,0,0,142,11,0,0,146,11,0,0,154,11,0,0,170,11,0,0,202,11,0,0,10,12,0,0,140,12,0,0,140,13,0,0,140,15,0,0,140,19,0,0,2,0,0,0,3,0,0,0,7,0,0,0,3,0,0,0,3,0,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,2,0,0,239,39,0,0,92,44,0,0,204,45,0,0,203,48,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,124,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,228,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,100,3,0,0,104,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,180,3,0,0,184,3,0,0,0,0,0,0,1,0,0,0,3,0,0,0,7,0,0,0,15,0,0,0,31,0,0,0,63,0,0,0,127,0,0,0,255,0,0,0,255,1,0,0,255,3,0,0,255,7,0,0,255,15,0,0,255,31,0,0,255,63,0,0,255,127,0,0,255,255,0,0,255,255,1,0,255,255,3,0,255,255,7,0,255,255,15,0,255,255,31,0,255,255,63,0,255,255,127,0,255,255,255,0,48,82,225,13,134,24,179,3,203,172,95,119,106,98,136,28,85,92,56,104,40,184,179,20,248,254,133,74,75,184,221,73,151,243,252,100,137,2,85,92,0,0,41,74,218,193,126,13,171,183,64,89,125,87,146,84,114,202,25,78,105,140,211,56,101,238,1,12,95,117,161,50,82,246,55,84,50,44,187,90,177,87,170,15,231,51,245,115,218,238,95,104,226,204,99,117,131,14,153,110,237,167,48,71,198,217,192,79,60,21,107,73,250,3,20,79,12,251,26,84,50,11,153,115,28,203,215,38,6,55,204,111,216,119,187,44,42,47,118,117,221,204,37,100,97,84,179,36,21,135,125,10,168,20,4,34,103,191,30,20,131,21,180,86,227,2,229,115,111,177,202,68,66,77,38,40,251,174,186,115,237,235,80,10,251,182,106,29,11,212,58,13,104,59,219,53,131,30,8,43,149,107,206,119,240,229,129,81,188,59,133,120,148,148,159,0,60,237,229,39,1,0,0,0,2,0,0,0,3,0,0,0,4,0,0,0,5,0,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,5,0,0,0,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,7,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,8,0,0,0,9,0,0,0,239,58,0,0,0,4,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,10,255,255,255,255,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,0,5,0,6,0,7,0,8,0,9,0,10,0,11,0,12,0,13,0,14,0,15,0,16,0,17,0,18,0,19,0,20,0,21,0,22,0,23,0,24,0,25,0,26,0,27,0,28,0,29,0,30,0,31,0,32,0,33,0,34,0,35,0,36,0,37,0,38,0,39,0,40,0,41,0,42,0,43,0,44,0,45,0,46,0,47,0,48,0,49,0,50,0,51,0,52,0,53,0,54,0,55,0,56,0,57,0,58,0,60,0,62,0,64,0,66,0,68,0,70,0,72,0,74,0,76,0,78,0,80,0,82,0,84,0,86,0,88,0,90,0,92,0,94,0,96,0,98,0,100,0,102,0,104,0,106,0,108,0,110,0,112,0,114,0,116,0,119,0,122,0,125,0,128,0,131,0,134,0,137,0,140,0,143,0,146,0,149,0,152,0,155,0,158,0,161,0,164,0,167,0,170,0,173,0,177,0,181,0,185,0,189,0,193,0,197,0,201,0,205,0,209,0,213,0,217,0,221,0,225,0,229,0,234,0,239,0,245,0,249,0,254,0,3,1,8,1,13,1,18,1,23,1,28,1,24,1,0,1,0,1,0,1,40,0,1,0,0,0,100,101,99,45,62,97,108,112,104,97,95,112,108,97,110,101,95,32,33,61,32,78,85,76,76,0,46,47,115,114,99,47,119,101,98,112,47,100,101,99,47,97,108,112,104,97,46,99,0,86,80,56,68,101,99,111,109,112,114,101,115,115,65,108,112,104,97,82,111,119,115,0,100,101,99,45,62,97,108,112,104,95,100,101,99,95,32,33,61,32,78,85,76,76,0,100,101,99,45,62,97,108,112,104,97,95,100,97,116,97,95,115,105,122,101,95,32,62,61,32,65,76,80,72,65,95,72,69,65,68,69,82,95,76,69,78,32,43,32,111,102,102,115,101,116,32,43,32,110,117,109,95,112,105,120,101,108,115,0,65,76,80,72,68,101,99,111,100,101,0,97,108,112,104,95,100,101,99,45,62,118,112,56,108,95,100,101,99,95,32,33,61,32,78,85,76,76,0,119,105,100,116,104,32,62,32,48,32,38,38,32,104,101,105,103,104,116,32,62,32,48,0,65,76,80,72,73,110,105,116,0,100,97,116,97,32,33,61,32,78,85,76,76,32,38,38,32,111,117,116,112,117,116,32,33,61,32,78,85,76,76,0,100,101,99,45,62,109,101,116,104,111,100,95,32,61,61,32,65,76,80,72,65,95,76,79,83,83,76,69,83,83,95,67,79,77,80,82,69,83,83,73,79,78,0,46,47,115,114,99,47,119,101,98,112,47,100,101,99,47,102,114,97,109,101,46,99,0,86,80,56,73,110,105,116,68,105,116,104,101,114,105,110,103,0,119,111,114,107,101,114,45,62,115,116,97,116,117,115,95,32,61,61,32,79,75,0,86,80,56,80,114,111,99,101,115,115,82,111,119,0,70,114,97,109,101,32,115,101,116,117,112,32,102,97,105,108,101,100,0,0,2,8,104,101,97,100,101,114,115,32,61,61,32,78,85,76,76,32,124,124,32,33,104,101,97,100,101,114,115,45,62,105,115,95,108,111,115,115,108,101,115,115,0,86,80,56,71,101,116,84,104,114,101,97,100,77,101,116,104,111,100,0,110,117,109,95,98,105,116,115,32,43,32,86,80,56,95,82,65,78,68,79,77,95,68,73,84,72,69,82,95,70,73,88,32,60,61,32,51,49,0,105,110,99,108,117,100,101,47,119,101,98,112,105,47,117,116,105,108,115,47,114,97,110,100,111,109,46,104,0,86,80,56,82,97,110,100,111,109,66,105,116,115,50,0,100,101,99,45,62,100,105,116,104,101,114,95,0,68,105,116,104,101,114,82,111,119,0,108,105,109,105,116,32,62,61,32,51,0,68,111,70,105,108,116,101,114,0,100,101,99,45,62,116,104,114,101,97,100,95,99,116,120,95,46,102,105,108,116,101,114,95,114,111,119,95,0,70,105,108,116,101,114,82,111,119,0,110,111,32,109,101,109,111,114,121,32,100,117,114,105,110,103,32,102,114,97,109,101,32,105,110,105,116,105,97,108,105,122,97,116,105,111,110,46,0,109,101,109,32,60,61,32,40,117,105,110,116,56,95,116,42,41,100,101,99,45,62,109,101,109,95,32,43,32,100,101,99,45,62,109,101,109,95,115,105,122,101,95,0,65,108,108,111,99,97,116,101,77,101,109,111,114,121,0,116,104,114,101,97,100,32,105,110,105,116,105,97,108,105,122,97,116,105,111,110,32,102,97,105,108,101,100,46,0,67,111,117,108,100,32,110,111,116,32,100,101,99,111,100,101,32,97,108,112,104,97,32,100,97,116,97,46,0,33,40,100,101,108,116,97,95,121,32,38,32,49,41,0,70,105,110,105,115,104,82,111,119,0,101,120,112,101,99,116,101,100,95,110,117,109,95,108,105,110,101,115,95,111,117,116,32,61,61,32,109,98,95,104,0,46,47,115,114,99,47,119,101,98,112,47,100,101,99,47,105,111,46,99,0,69,109,105,116,65,108,112,104,97,89,85,86,0,101,120,112,101,99,116,101,100,95,110,117,109,95,108,105,110,101,115,95,111,117,116,32,61,61,32,110,117,109,95,114,111,119,115,0,69,109,105,116,65,108,112,104,97,82,71,66,0,69,109,105,116,65,108,112,104,97,82,71,66,65,52,52,52,52,0,101,120,112,101,99,116,101,100,95,110,117,109,95,108,105,110,101,115,95,111,117,116,32,61,61,32,110,117,109,95,108,105,110,101,115,95,111,117,116,0,69,109,105,116,82,101,115,99,97,108,101,100,65,108,112,104,97,89,85,86,0,121,95,112,111,115,32,43,32,110,117,109,95,108,105,110,101,115,95,111,117,116,32,60,32,112,45,62,111,117,116,112,117,116,45,62,104,101,105,103,104,116,0,69,120,112,111,114,116,65,108,112,104,97,0,69,120,112,111,114,116,65,108,112,104,97,82,71,66,65,52,52,52,52,0,69,120,112,111,114,116,82,71,66,0,112,45,62,115,99,97,108,101,114,95,117,46,121,95,97,99,99,117,109,32,61,61,32,112,45,62,115,99,97,108,101,114,95,118,46,121,95,97,99,99,117,109,0,117,95,108,105,110,101,115,95,105,110,32,61,61,32,118,95,108,105,110,101,115,95,105,110,0,69,109,105,116,82,101,115,99,97,108,101,100,82,71,66,0,33,40,105,111,45,62,109,98,95,121,32,38,32,49,41,0,67,117,115,116,111,109,80,117,116,0,4,5,6,7,8,9,10,10,11,12,13,14,15,16,17,17,18,19,20,20,21,21,22,22,23,23,24,25,25,26,27,28,29,30,31,32,33,34,35,36,37,37,38,39,40,41,42,43,44,45,46,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,76,77,78,79,80,81,82,83,84,85,86,87,88,89,91,93,95,96,98,100,101,102,104,106,108,110,112,114,116,118,122,124,126,128,130,132,134,136,138,140,143,145,148,151,154,157,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,176,246,255,255,255,255,255,255,255,255,255,223,241,252,255,255,255,255,255,255,255,255,249,253,253,255,255,255,255,255,255,255,255,255,244,252,255,255,255,255,255,255,255,255,234,254,254,255,255,255,255,255,255,255,255,253,255,255,255,255,255,255,255,255,255,255,255,246,254,255,255,255,255,255,255,255,255,239,253,254,255,255,255,255,255,255,255,255,254,255,254,255,255,255,255,255,255,255,255,255,248,254,255,255,255,255,255,255,255,255,251,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,254,255,255,255,255,255,255,255,255,251,254,254,255,255,255,255,255,255,255,255,254,255,254,255,255,255,255,255,255,255,255,255,254,253,255,254,255,255,255,255,255,255,250,255,254,255,254,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,217,255,255,255,255,255,255,255,255,255,255,225,252,241,253,255,255,254,255,255,255,255,234,250,241,250,253,255,253,254,255,255,255,255,254,255,255,255,255,255,255,255,255,255,223,254,254,255,255,255,255,255,255,255,255,238,253,254,254,255,255,255,255,255,255,255,255,248,254,255,255,255,255,255,255,255,255,249,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,255,255,255,255,255,255,255,255,255,247,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,253,254,255,255,255,255,255,255,255,255,252,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,254,255,255,255,255,255,255,255,255,253,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,253,255,255,255,255,255,255,255,255,250,255,255,255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,186,251,250,255,255,255,255,255,255,255,255,234,251,244,254,255,255,255,255,255,255,255,251,251,243,253,254,255,254,255,255,255,255,255,253,254,255,255,255,255,255,255,255,255,236,253,254,255,255,255,255,255,255,255,255,251,253,253,254,254,255,255,255,255,255,255,255,254,254,255,255,255,255,255,255,255,255,254,254,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,254,254,255,255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,248,255,255,255,255,255,255,255,255,255,255,250,254,252,254,255,255,255,255,255,255,255,248,254,249,253,255,255,255,255,255,255,255,255,253,253,255,255,255,255,255,255,255,255,246,253,253,255,255,255,255,255,255,255,255,252,254,251,254,254,255,255,255,255,255,255,255,254,252,255,255,255,255,255,255,255,255,248,254,253,255,255,255,255,255,255,255,255,253,255,254,254,255,255,255,255,255,255,255,255,251,254,255,255,255,255,255,255,255,255,245,251,254,255,255,255,255,255,255,255,255,253,253,254,255,255,255,255,255,255,255,255,255,251,253,255,255,255,255,255,255,255,255,252,253,254,255,255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,252,255,255,255,255,255,255,255,255,255,249,255,254,255,255,255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,253,255,255,255,255,255,255,255,255,250,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,253,136,254,255,228,219,128,128,128,128,128,189,129,242,255,227,213,255,219,128,128,128,106,126,227,252,214,209,255,255,128,128,128,1,98,248,255,236,226,255,255,128,128,128,181,133,238,254,221,234,255,154,128,128,128,78,134,202,247,198,180,255,219,128,128,128,1,185,249,255,243,255,128,128,128,128,128,184,150,247,255,236,224,128,128,128,128,128,77,110,216,255,236,230,128,128,128,128,128,1,101,251,255,241,255,128,128,128,128,128,170,139,241,252,236,209,255,255,128,128,128,37,116,196,243,228,255,255,255,128,128,128,1,204,254,255,245,255,128,128,128,128,128,207,160,250,255,238,128,128,128,128,128,128,102,103,231,255,211,171,128,128,128,128,128,1,152,252,255,240,255,128,128,128,128,128,177,135,243,255,234,225,128,128,128,128,128,80,129,211,255,194,224,128,128,128,128,128,1,1,255,128,128,128,128,128,128,128,128,246,1,255,128,128,128,128,128,128,128,128,255,128,128,128,128,128,128,128,128,128,128,198,35,237,223,193,187,162,160,145,155,62,131,45,198,221,172,176,220,157,252,221,1,68,47,146,208,149,167,221,162,255,223,128,1,149,241,255,221,224,255,255,128,128,128,184,141,234,253,222,220,255,199,128,128,128,81,99,181,242,176,190,249,202,255,255,128,1,129,232,253,214,197,242,196,255,255,128,99,121,210,250,201,198,255,202,128,128,128,23,91,163,242,170,187,247,210,255,255,128,1,200,246,255,234,255,128,128,128,128,128,109,178,241,255,231,245,255,255,128,128,128,44,130,201,253,205,192,255,255,128,128,128,1,132,239,251,219,209,255,165,128,128,128,94,136,225,251,218,190,255,255,128,128,128,22,100,174,245,186,161,255,199,128,128,128,1,182,249,255,232,235,128,128,128,128,128,124,143,241,255,227,234,128,128,128,128,128,35,77,181,251,193,211,255,205,128,128,128,1,157,247,255,236,231,255,255,128,128,128,121,141,235,255,225,227,255,255,128,128,128,45,99,188,251,195,217,255,224,128,128,128,1,1,251,255,213,255,128,128,128,128,128,203,1,248,255,255,128,128,128,128,128,128,137,1,177,255,224,255,128,128,128,128,128,253,9,248,251,207,208,255,192,128,128,128,175,13,224,243,193,185,249,198,255,255,128,73,17,171,221,161,179,236,167,255,234,128,1,95,247,253,212,183,255,255,128,128,128,239,90,244,250,211,209,255,255,128,128,128,155,77,195,248,188,195,255,255,128,128,128,1,24,239,251,218,219,255,205,128,128,128,201,51,219,255,196,186,128,128,128,128,128,69,46,190,239,201,218,255,228,128,128,128,1,191,251,255,255,128,128,128,128,128,128,223,165,249,255,213,255,128,128,128,128,128,141,124,248,255,255,128,128,128,128,128,128,1,16,248,255,255,128,128,128,128,128,128,190,36,230,255,236,255,128,128,128,128,128,149,1,255,128,128,128,128,128,128,128,128,1,226,255,128,128,128,128,128,128,128,128,247,192,255,128,128,128,128,128,128,128,128,240,128,255,128,128,128,128,128,128,128,128,1,134,252,255,255,128,128,128,128,128,128,213,62,250,255,255,128,128,128,128,128,128,55,93,255,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,202,24,213,235,186,191,220,160,240,175,255,126,38,182,232,169,184,228,174,255,187,128,61,46,138,219,151,178,240,170,255,216,128,1,112,230,250,199,191,247,159,255,255,128,166,109,228,252,211,215,255,174,128,128,128,39,77,162,232,172,180,245,178,255,255,128,1,52,220,246,198,199,249,220,255,255,128,124,74,191,243,183,193,250,221,255,255,128,24,71,130,219,154,170,243,182,255,255,128,1,182,225,249,219,240,255,224,128,128,128,149,150,226,252,216,205,255,171,128,128,128,28,108,170,242,183,194,254,223,255,255,128,1,81,230,252,204,203,255,192,128,128,128,123,102,209,247,188,196,255,233,128,128,128,20,95,153,243,164,173,255,203,128,128,128,1,222,248,255,216,213,128,128,128,128,128,168,175,246,252,235,205,255,255,128,128,128,47,116,215,255,211,212,255,255,128,128,128,1,121,236,253,212,214,255,255,128,128,128,141,84,213,252,201,202,255,219,128,128,128,42,80,160,240,162,185,255,205,128,128,128,1,1,255,128,128,128,128,128,128,128,128,244,1,255,128,128,128,128,128,128,128,128,238,1,255,128,128,128,128,128,128,128,128,231,120,48,89,115,113,120,152,112,152,179,64,126,170,118,46,70,95,175,69,143,80,85,82,72,155,103,56,58,10,171,218,189,17,13,152,114,26,17,163,44,195,21,10,173,121,24,80,195,26,62,44,64,85,144,71,10,38,171,213,144,34,26,170,46,55,19,136,160,33,206,71,63,20,8,114,114,208,12,9,226,81,40,11,96,182,84,29,16,36,134,183,89,137,98,101,106,165,148,72,187,100,130,157,111,32,75,80,66,102,167,99,74,62,40,234,128,41,53,9,178,241,141,26,8,107,74,43,26,146,73,166,49,23,157,65,38,105,160,51,52,31,115,128,104,79,12,27,217,255,87,17,7,87,68,71,44,114,51,15,186,23,47,41,14,110,182,183,21,17,194,66,45,25,102,197,189,23,18,22,88,88,147,150,42,46,45,196,205,43,97,183,117,85,38,35,179,61,39,53,200,87,26,21,43,232,171,56,34,51,104,114,102,29,93,77,39,28,85,171,58,165,90,98,64,34,22,116,206,23,34,43,166,73,107,54,32,26,51,1,81,43,31,68,25,106,22,64,171,36,225,114,34,19,21,102,132,188,16,76,124,62,18,78,95,85,57,50,48,51,193,101,35,159,215,111,89,46,111,60,148,31,172,219,228,21,18,111,112,113,77,85,179,255,38,120,114,40,42,1,196,245,209,10,25,109,88,43,29,140,166,213,37,43,154,61,63,30,155,67,45,68,1,209,100,80,8,43,154,1,51,26,71,142,78,78,16,255,128,34,197,171,41,40,5,102,211,183,4,1,221,51,50,17,168,209,192,23,25,82,138,31,36,171,27,166,38,44,229,67,87,58,169,82,115,26,59,179,63,59,90,180,59,166,93,73,154,40,40,21,116,143,209,34,39,175,47,15,16,183,34,223,49,45,183,46,17,33,183,6,98,15,32,183,57,46,22,24,128,1,54,17,37,65,32,73,115,28,128,23,128,205,40,3,9,115,51,192,18,6,223,87,37,9,115,59,77,64,21,47,104,55,44,218,9,54,53,130,226,64,90,70,205,40,41,23,26,57,54,57,112,184,5,41,38,166,213,30,34,26,133,152,116,10,32,134,39,19,53,221,26,114,32,73,255,31,9,65,234,2,15,1,118,73,75,32,12,51,192,255,160,43,51,88,31,35,67,102,85,55,186,85,56,21,23,111,59,205,45,37,192,55,38,70,124,73,102,1,34,98,125,98,42,88,104,85,117,175,82,95,84,53,89,128,100,113,101,45,75,79,123,47,51,128,81,171,1,57,17,5,71,102,57,53,41,49,38,33,13,121,57,73,26,1,85,41,10,67,138,77,110,90,47,114,115,21,2,10,102,255,166,23,6,101,29,16,10,85,128,101,196,26,57,18,10,102,102,213,34,20,43,117,20,15,36,163,128,68,1,26,102,61,71,37,34,53,31,243,192,69,60,71,38,73,119,28,222,37,68,45,128,34,1,47,11,245,171,62,17,19,70,146,85,55,62,70,37,43,37,154,100,163,85,160,1,63,9,92,136,28,64,32,201,85,75,15,9,9,64,255,184,119,16,86,6,28,5,64,255,25,248,1,56,8,17,132,137,255,55,116,128,58,15,20,82,135,57,26,121,40,164,50,31,137,154,133,25,35,218,51,103,44,131,131,123,31,6,158,86,40,64,135,148,224,45,183,128,22,26,17,131,240,154,14,1,209,45,16,21,91,64,222,7,1,197,56,21,39,155,60,138,23,102,213,83,12,13,54,192,255,68,47,28,85,26,85,85,128,128,32,146,171,18,11,7,63,144,171,4,4,246,35,27,10,146,174,171,12,26,128,190,80,35,99,180,80,126,54,45,85,126,47,87,176,51,41,20,32,101,75,128,139,118,146,116,128,85,56,41,15,176,236,85,37,9,62,71,30,17,119,118,255,17,18,138,101,38,60,138,55,70,43,26,142,146,36,19,30,171,255,97,27,20,138,45,61,62,219,1,81,188,64,32,41,20,117,151,142,20,21,163,112,19,12,61,195,128,48,4,24,0,1,255,2,254,3,4,6,253,5,252,251,250,7,249,8,248,247,79,75,0,110,117,108,108,32,86,80,56,73,111,32,112,97,115,115,101,100,32,116,111,32,86,80,56,71,101,116,72,101,97,100,101,114,115,40,41,0,84,114,117,110,99,97,116,101,100,32,104,101,97,100,101,114,46,0,73,110,99,111,114,114,101,99,116,32,107,101,121,102,114,97,109,101,32,112,97,114,97,109,101,116,101,114,115,46,0,70,114,97,109,101,32,110,111,116,32,100,105,115,112,108,97,121,97,98,108,101,46,0,99,97,110,110,111,116,32,112,97,114,115,101,32,112,105,99,116,117,114,101,32,104,101,97,100,101,114,0,66,97,100,32,99,111,100,101,32,119,111,114,100,0,98,97,100,32,112,97,114,116,105,116,105,111,110,32,108,101,110,103,116,104,0,99,97,110,110,111,116,32,112,97,114,115,101,32,115,101,103,109,101,110,116,32,104,101,97,100,101,114,0,99,97,110,110,111,116,32,112,97,114,115,101,32,102,105,108,116,101,114,32,104,101,97,100,101,114,0,99,97,110,110,111,116,32,112,97,114,115,101,32,112,97,114,116,105,116,105,111,110,115,0,78,111,116,32,97,32,107,101,121,32,102,114,97,109,101,46,0,78,85,76,76,32,86,80,56,73,111,32,112,97,114,97,109,101,116,101,114,32,105,110,32,86,80,56,68,101,99,111,100,101,40,41,46,0,100,101,99,45,62,114,101,97,100,121,95,0,46,47,115,114,99,47,119,101,98,112,47,100,101,99,47,118,112,56,46,99,0,86,80,56,68,101,99,111,100,101,0,173,148,140,0,176,155,140,135,0,180,157,141,134,130,0,254,254,243,230,196,177,153,140,133,130,129,0,0,1,4,8,5,2,3,6,9,12,13,10,7,11,14,15,80,114,101,109,97,116,117,114,101,32,101,110,100,45,111,102,45,112,97,114,116,105,116,105,111,110,48,32,101,110,99,111,117,110,116,101,114,101,100,46,0,80,114,101,109,97,116,117,114,101,32,101,110,100,45,111,102,45,102,105,108,101,32,101,110,99,111,117,110,116,101,114,101,100,46,0,79,117,116,112,117,116,32,97,98,111,114,116,101,100,46,0,80,97,114,115,101,83,101,103,109,101,110,116,72,101,97,100,101,114,0,82,101,115,101,116,83,101,103,109,101,110,116,72,101,97,100,101,114,0,97,108,112,104,95,100,101,99,32,33,61,32,78,85,76,76,0,46,47,115,114,99,47,119,101,98,112,47,100,101,99,47,118,112,56,108,46,99,0,86,80,56,76,68,101,99,111,100,101,65,108,112,104,97,72,101,97,100,101,114,0,100,101,99,32,33,61,32,78,85,76,76,0,86,80,56,76,68,101,99,111,100,101,65,108,112,104,97,73,109,97,103,101,83,116,114,101,97,109,0,108,97,115,116,95,114,111,119,32,60,61,32,100,101,99,45,62,104,101,105,103,104,116,95,0,100,101,99,45,62,115,116,97,116,117,115,95,32,33,61,32,86,80,56,95,83,84,65,84,85,83,95,79,75,0,86,80,56,76,68,101,99,111,100,101,72,101,97,100,101,114,0,100,101,99,45,62,104,100,114,95,46,104,117,102,102,109,97,110,95,116,97,98,108,101,115,95,32,33,61,32,78,85,76,76,0,86,80,56,76,68,101,99,111,100,101,73,109,97,103,101,0,100,101,99,45,62,104,100,114,95,46,104,116,114,101,101,95,103,114,111,117,112,115,95,32,33,61,32,78,85,76,76,0,100,101,99,45,62,104,100,114,95,46,110,117,109,95,104,116,114,101,101,95,103,114,111,117,112,115,95,32,62,32,48,0,105,111,32,33,61,32,78,85,76,76,0,100,101,99,45,62,111,117,116,112,117,116,95,32,33,61,32,78,85,76,76,0,17,18,0,1,2,3,4,5,16,6,7,8,9,10,11,12,13,14,15,0,1,1,1,0,24,7,23,25,40,6,39,41,22,26,38,42,56,5,55,57,21,27,54,58,37,43,72,4,71,73,20,28,53,59,70,74,36,44,88,69,75,52,60,3,87,89,19,29,86,90,35,45,68,76,85,91,51,61,104,2,103,105,18,30,102,106,34,46,84,92,67,77,101,107,50,62,120,1,119,121,83,93,17,31,100,108,66,78,118,122,33,47,117,123,49,63,99,109,82,94,0,116,124,65,79,16,32,98,110,48,115,125,81,95,64,114,126,97,111,80,113,127,96,112,110,101,101,100,101,100,95,108,105,110,101,115,32,62,32,48,32,38,38,32,110,101,101,100,101,100,95,108,105,110,101,115,32,60,61,32,108,105,110,101,115,95,108,101,102,116,0,69,109,105,116,82,101,115,99,97,108,101,100,82,111,119,115,82,71,66,65,0,121,95,115,116,97,114,116,32,60,32,121,95,101,110,100,0,83,101,116,67,114,111,112,87,105,110,100,111,119,0,105,111,45,62,99,114,111,112,95,108,101,102,116,32,60,32,105,111,45,62,99,114,111,112,95,114,105,103,104,116,0,100,101,99,45,62,98,114,95,46,101,111,115,95,0,82,101,115,116,111,114,101,83,116,97,116,101,0,40,107,101,121,32,62,62,32,99,99,45,62,104,97,115,104,95,98,105,116,115,95,41,32,61,61,32,48,117,0,105,110,99,108,117,100,101,47,119,101,98,112,105,47,117,116,105,108,115,47,99,111,108,111,114,95,99,97,99,104,101,46,104,0,86,80,56,76,67,111,108,111,114,67,97,99,104,101,76,111,111,107,117,112,0,48,32,61,61,32,40,40,117,105,110,116,112,116,114,95,116,41,100,115,116,32,38,32,55,41,0,67,111,112,121,83,109,97,108,108,80,97,116,116,101,114,110,51,50,98,0,103,114,111,117,112,45,62,117,115,101,95,112,97,99,107,101,100,95,116,97,98,108,101,0,82,101,97,100,80,97,99,107,101,100,83,121,109,98,111,108,115,0,99,111,100,101,46,118,97,108,117,101,32,62,61,32,78,85,77,95,76,73,84,69,82,65,76,95,67,79,68,69,83,0,100,101,99,45,62,105,110,99,114,101,109,101,110,116,97,108,95,0,83,97,118,101,83,116,97,116,101,0,100,101,99,45,62,110,101,120,116,95,116,114,97,110,115,102,111,114,109,95,32,61,61,32,49,0,65,112,112,108,121,73,110,118,101,114,115,101,84,114,97,110,115,102,111,114,109,115,65,108,112,104,97,0,116,114,97,110,115,102,111,114,109,45,62,116,121,112,101,95,32,61,61,32,67,79,76,79,82,95,73,78,68,69,88,73,78,71,95,84,82,65,78,83,70,79,82,77,0,109,101,116,97,95,105,110,100,101,120,32,60,32,104,100,114,45,62,110,117,109,95,104,116,114,101,101,95,103,114,111,117,112,115,95,0,71,101,116,72,116,114,101,101,71,114,111,117,112,70,111,114,80,111,115,0,104,117,102,102,45,62,98,105,116,115,32,60,61,32,72,85,70,70,77,65,78,95,84,65,66,76,69,95,66,73,84,83,0,65,99,99,117,109,117,108,97,116,101,72,67,111,100,101,0,100,101,99,45,62,110,101,120,116,95,116,114,97,110,115,102,111,114,109,95,32,60,61,32,78,85,77,95,84,82,65,78,83,70,79,82,77,83,0,82,101,97,100,84,114,97,110,115,102,111,114,109,0,104,100,114,32,33,61,32,78,85,76,76,0,73,110,105,116,77,101,116,97,100,97,116,97,0,100,101,99,45,62,108,97,115,116,95,111,117,116,95,114,111,119,95,32,60,61,32,111,117,116,112,117,116,45,62,104,101,105,103,104,116,0,80,114,111,99,101,115,115,82,111,119,115,0,100,101,99,45,62,108,97,115,116,95,114,111,119,95,32,60,61,32,100,101,99,45,62,104,101,105,103,104,116,95,0,100,101,99,45,62,114,101,115,99,97,108,101,114,95,109,101,109,111,114,121,32,61,61,32,78,85,76,76,0,65,108,108,111,99,97,116,101,65,110,100,73,110,105,116,82,101,115,99,97,108,101,114,0,104,116,114,101,101,95,103,114,111,117,112,32,33,61,32,78,85,76,76,0,68,101,99,111,100,101,73,109,97,103,101,68,97,116,97,0,115,114,99,32,60,32,115,114,99,95,101,110,100,0,115,114,99,95,108,97,115,116,32,60,61,32,115,114,99,95,101,110,100,0,115,114,99,32,60,61,32,115,114,99,95,101,110,100,0,99,111,108,111,114,95,99,97,99,104,101,32,33,61,32,78,85,76,76,0,98,114,45,62,101,111,115,95,32,61,61,32,86,80,56,76,73,115,69,110,100,79,102,83,116,114,101,97,109,40,98,114,41,0,68,101,99,111,100,101,65,108,112,104,97,68,97,116,97,0,112,111,115,32,60,32,101,110,100,0,108,97,115,116,95,114,111,119,32,60,61,32,104,101,105,103,104,116,0,73,115,56,98,79,112,116,105,109,105,122,97,98,108,101,40,104,100,114,41,0,100,101,99,45,62,119,105,100,116,104,95,32,60,61,32,102,105,110,97,108,95,119,105,100,116,104,0,65,108,108,111,99,97,116,101,73,110,116,101,114,110,97,108,66,117,102,102,101,114,115,51,50,98,0,100,97,116,97,32,61,61,32,78,85,76,76,0,68,101,99,111,100,101,73,109,97,103,101,83,116,114,101,97,109,0,105,115,95,108,101,118,101,108,48,0,67,108,101,97,114,77,101,116,97,100,97,116,97,0,104,101,97,100,101,114,115,32,33,61,32,78,85,76,76,0,46,47,115,114,99,47,119,101,98,112,47,100,101,99,47,119,101,98,112,46,99,0,87,101,98,80,80,97,114,115,101,72,101,97,100,101,114,115,0,86,80,56,32,0,86,80,56,76,0,100,97,116,97,32,33,61,32,78,85,76,76,0,80,97,114,115,101,86,80,56,72,101,97,100,101,114,0,100,97,116,97,95,115,105,122,101,32,33,61,32,78,85,76,76,0,99,104,117,110,107,95,115,105,122,101,32,33,61,32,78,85,76,76,0,105,115,95,108,111,115,115,108,101,115,115,32,33,61,32,78,85,76,76,0,80,97,114,115,101,79,112,116,105,111,110,97,108,67,104,117,110,107,115,0,97,108,112,104,97,95,100,97,116,97,32,33,61,32,78,85,76,76,0,97,108,112,104,97,95,115,105,122,101,32,33,61,32,78,85,76,76,0,65,76,80,72,0,80,97,114,115,101,86,80,56,88,0,102,111,117,110,100,95,118,112,56,120,32,33,61,32,78,85,76,76,0,86,80,56,88,0,80,97,114,115,101,82,73,70,70,0,114,105,102,102,95,115,105,122,101,32,33,61,32,78,85,76,76,0,82,73,70,70,0,87,69,66,80,0,102,101,97,116,117,114,101,115,32,33,61,32,78,85,76,76,0,68,101,102,97,117,108,116,70,101,97,116,117,114,101,115,0,112,97,114,97,109,115,32,33,61,32,78,85,76,76,0,68,101,99,111,100,101,73,110,116,111,0,40,117,105,110,116,54,52,95,116,41,40,100,97,116,97,32,45,32,104,101,97,100,101,114,115,45,62,100,97,116,97,41,32,60,32,77,65,88,95,67,72,85,78,75,95,80,65,89,76,79,65,68,0,80,97,114,115,101,72,101,97,100,101,114,115,73,110,116,101,114,110,97,108,0,104,101,97,100,101,114,115,45,62,111,102,102,115,101,116,32,61,61,32,104,101,97,100,101,114,115,45,62,100,97,116,97,95,115,105,122,101,32,45,32,100,97,116,97,95,115,105,122,101,0,118,32,60,61,32,50,53,53,0,46,47,115,114,99,47,119,101,98,112,47,100,115,112,47,97,108,112,104,97,95,112,114,111,99,101,115,115,105,110,103,46,99,0,77,117,108,116,0,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,127,0,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,255,0,255,254,253,252,251,250,249,248,247,246,245,244,243,242,241,240,239,238,237,236,235,234,233,232,231,230,229,228,227,226,225,224,223,222,221,220,219,218,217,216,215,214,213,212,211,210,209,208,207,206,205,204,203,202,201,200,199,198,197,196,195,194,193,192,191,190,189,188,187,186,185,184,183,182,181,180,179,178,177,176,175,174,173,172,171,170,169,168,167,166,165,164,163,162,161,160,159,158,157,156,155,154,153,152,151,150,149,148,147,146,145,144,143,142,141,140,139,138,137,136,135,134,133,132,131,130,129,128,127,126,125,124,123,122,121,120,119,118,117,116,115,114,113,112,111,110,109,108,107,106,105,104,103,102,101,100,99,98,97,96,95,94,93,92,91,90,89,88,87,86,85,84,83,82,81,80,79,78,77,76,75,74,73,72,71,70,69,68,67,66,65,64,63,62,61,60,59,58,57,56,55,54,53,52,51,50,49,48,47,46,45,44,43,42,41,40,39,38,37,36,35,34,33,32,31,30,29,28,27,26,25,24,23,22,21,20,19,18,17,16,15,14,13,12,11,10,9,8,7,6,5,4,3,2,1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,105,110,32,33,61,32,78,85,76,76,0,46,47,115,114,99,47,119,101,98,112,47,100,115,112,47,102,105,108,116,101,114,115,46,99,0,68,111,71,114,97,100,105,101,110,116,70,105,108,116,101,114,0,111,117,116,32,33,61,32,78,85,76,76,0,119,105,100,116,104,32,62,32,48,0,104,101,105,103,104,116,32,62,32,48,0,115,116,114,105,100,101,32,62,61,32,119,105,100,116,104,0,114,111,119,32,62,61,32,48,32,38,38,32,110,117,109,95,114,111,119,115,32,62,32,48,32,38,38,32,114,111,119,32,43,32,110,117,109,95,114,111,119,115,32,60,61,32,104,101,105,103,104,116,0,68,111,86,101,114,116,105,99,97,108,70,105,108,116,101,114,0,68,111,72,111,114,105,122,111,110,116,97,108,70,105,108,116,101,114,0,114,111,119,95,115,116,97,114,116,32,60,32,114,111,119,95,101,110,100,0,46,47,115,114,99,47,119,101,98,112,47,100,115,112,47,108,111,115,115,108,101,115,115,46,99,0,86,80,56,76,73,110,118,101,114,115,101,84,114,97,110,115,102,111,114,109,0,114,111,119,95,101,110,100,32,60,61,32,116,114,97,110,115,102,111,114,109,45,62,121,115,105,122,101,95,0,48,0,86,80,56,76,67,111,110,118,101,114,116,70,114,111,109,66,71,82,65,0,33,87,101,98,80,82,101,115,99,97,108,101,114,73,110,112,117,116,68,111,110,101,40,119,114,107,41,0,46,47,115,114,99,47,119,101,98,112,47,100,115,112,47,114,101,115,99,97,108,101,114,46,99,0,87,101,98,80,82,101,115,99,97,108,101,114,73,109,112,111,114,116,82,111,119,69,120,112,97,110,100,67,0,119,114,107,45,62,120,95,101,120,112,97,110,100,0,120,95,105,110,32,60,32,119,114,107,45,62,115,114,99,95,119,105,100,116,104,32,42,32,120,95,115,116,114,105,100,101,0,119,114,107,45,62,120,95,115,117,98,32,61,61,32,48,32,124,124,32,97,99,99,117,109,32,61,61,32,48,0,87,101,98,80,82,101,115,99,97,108,101,114,73,109,112,111,114,116,82,111,119,83,104,114,105,110,107,67,0,33,119,114,107,45,62,120,95,101,120,112,97,110,100,0,97,99,99,117,109,32,61,61,32,48,0,33,87,101,98,80,82,101,115,99,97,108,101,114,79,117,116,112,117,116,68,111,110,101,40,119,114,107,41,0,87,101,98,80,82,101,115,99,97,108,101,114,69,120,112,111,114,116,82,111,119,69,120,112,97,110,100,67,0,119,114,107,45,62,121,95,97,99,99,117,109,32,60,61,32,48,0,119,114,107,45,62,121,95,101,120,112,97,110,100,0,119,114,107,45,62,121,95,115,117,98,32,33,61,32,48,0,118,32,62,61,32,48,32,38,38,32,118,32,60,61,32,50,53,53,0,87,101,98,80,82,101,115,99,97,108,101,114,69,120,112,111,114,116,82,111,119,83,104,114,105,110,107,67,0,33,119,114,107,45,62,121,95,101,120,112,97,110,100,0,87,101,98,80,82,101,115,99,97,108,101,114,73,109,112,111,114,116,82,111,119,0,87,101,98,80,82,101,115,99,97,108,101,114,69,120,112,111,114,116,82,111,119,0,119,114,107,45,62,115,114,99,95,119,105,100,116,104,32,61,61,32,49,32,38,38,32,119,114,107,45,62,100,115,116,95,119,105,100,116,104,32,60,61,32,50,0,119,114,107,45,62,115,114,99,95,104,101,105,103,104,116,32,61,61,32,49,32,38,38,32,119,114,107,45,62,100,115,116,95,104,101,105,103,104,116,32,61,61,32,49,0,116,111,112,95,121,32,33,61,32,78,85,76,76,0,46,47,115,114,99,47,119,101,98,112,47,100,115,112,47,117,112,115,97,109,112,108,105,110,103,46,99,0,85,112,115,97,109,112,108,101,82,103,98,53,54,53,76,105,110,101,80,97,105,114,0,85,112,115,97,109,112,108,101,82,103,98,97,52,52,52,52,76,105,110,101,80,97,105,114,0,85,112,115,97,109,112,108,101,65,114,103,98,76,105,110,101,80,97,105,114,0,85,112,115,97,109,112,108,101,66,103,114,97,76,105,110,101,80,97,105,114,0,85,112,115,97,109,112,108,101,66,103,114,76,105,110,101,80,97,105,114,0,85,112,115,97,109,112,108,101,82,103,98,97,76,105,110,101,80,97,105,114,0,85,112,115,97,109,112,108,101,82,103,98,76,105,110,101,80,97,105,114,0,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,127,127,191,127,159,191,223,127,143,159,175,191,207,223,239,127,135,143,151,159,167,175,183,191,199,207,215,223,231,239,247,127,131,135,139,143,147,151,155,159,163,167,171,175,179,183,187,191,195,199,203,207,211,215,219,223,227,231,235,239,243,247,251,127,129,131,133,135,137,139,141,143,145,147,149,151,153,155,157,159,161,163,165,167,169,171,173,175,177,179,181,183,185,187,189,191,193,195,197,199,201,203,205,207,209,211,213,215,217,219,221,223,225,227,229,231,233,235,237,239,241,243,245,247,249,251,253,127,98,114,32,33,61,32,78,85,76,76,0,46,47,115,114,99,47,119,101,98,112,47,117,116,105,108,115,47,98,105,116,95,114,101,97,100,101,114,46,99,0,86,80,56,73,110,105,116,66,105,116,82,101,97,100,101,114,0,115,116,97,114,116,32,33,61,32,78,85,76,76,0,115,105,122,101,32,60,32,40,49,117,32,60,60,32,51,49,41,0,98,114,32,33,61,32,78,85,76,76,32,38,38,32,98,114,45,62,98,117,102,95,32,33,61,32,78,85,76,76,0,86,80,56,76,111,97,100,70,105,110,97,108,66,121,116,101,115,0,86,80,56,76,73,110,105,116,66,105,116,82,101,97,100,101,114,0,108,101,110,103,116,104,32,60,32,48,120,102,102,102,102,102,102,102,56,117,0,98,114,45,62,98,105,116,95,112,111,115,95,32,62,61,32,86,80,56,76,95,87,66,73,84,83,0,86,80,56,76,68,111,70,105,108,108,66,105,116,87,105,110,100,111,119,0,110,95,98,105,116,115,32,62,61,32,48,0,86,80,56,76,82,101,97,100,66,105,116,115,0,98,114,45,62,112,111,115,95,32,60,61,32,98,114,45,62,108,101,110,95,0,105,110,99,108,117,100,101,47,119,101,98,112,105,47,117,116,105,108,115,47,98,105,116,95,114,101,97,100,101,114,46,104,0,86,80,56,76,73,115,69,110,100,79,102,83,116,114,101,97,109,0,105,110,99,108,117,100,101,47,119,101,98,112,105,47,117,116,105,108,115,47,98,105,116,95,114,101,97,100,101,114,95,105,110,108,46,104,0,86,80,56,76,111,97,100,78,101,119,66,121,116,101,115,0,99,99,32,33,61,32,78,85,76,76,0,46,47,115,114,99,47,119,101,98,112,47,117,116,105,108,115,47,99,111,108,111,114,95,99,97,99,104,101,46,99,0,86,80,56,76,67,111,108,111,114,67,97,99,104,101,73,110,105,116,0,104,97,115,104,95,98,105,116,115,32,62,32,48,0,115,114,99,32,33,61,32,78,85,76,76,0,86,80,56,76,67,111,108,111,114,67,97,99,104,101,67,111,112,121,0,100,115,116,32,33,61,32,78,85,76,76,0,115,114,99,45,62,104,97,115,104,95,98,105,116,115,95,32,61,61,32,100,115,116,45,62,104,97,115,104,95,98,105,116,115,95,0,110,117,109,95,104,116,114,101,101,95,103,114,111,117,112,115,32,60,61,32,77,65,88,95,72,84,82,69,69,95,71,82,79,85,80,83,0,46,47,115,114,99,47,119,101,98,112,47,117,116,105,108,115,47,104,117,102,102,109,97,110,46,99,0,86,80,56,76,72,116,114,101,101,71,114,111,117,112,115,78,101,119,0,99,111,100,101,95,108,101,110,103,116,104,115,95,115,105,122,101,32,33,61,32,48,0,86,80,56,76,66,117,105,108,100,72,117,102,102,109,97,110,84,97,98,108,101,0,99,111,100,101,95,108,101,110,103,116,104,115,32,33,61,32,78,85,76,76,0,114,111,111,116,95,116,97,98,108,101,32,33,61,32,78,85,76,76,0,114,111,111,116,95,98,105,116,115,32,62,32,48,0,101,110,100,32,37,32,115,116,101,112,32,61,61,32,48,0,82,101,112,108,105,99,97,116,101,86,97,108,117,101,0,115,99,97,108,101,100,95,119,105,100,116,104,32,33,61,32,78,85,76,76,0,46,47,115,114,99,47,119,101,98,112,47,117,116,105,108,115,47,114,101,115,99,97,108,101,114,46,99,0,87,101,98,80,82,101,115,99,97,108,101,114,71,101,116,83,99,97,108,101,100,68,105,109,101,110,115,105,111,110,115,0,115,99,97,108,101,100,95,104,101,105,103,104,116,32,33,61,32,78,85,76,76,0,119,111,114,107,101,114,45,62,105,109,112,108,95,32,61,61,32,78,85,76,76,0,46,47,115,114,99,47,119,101,98,112,47,117,116,105,108,115,47,116,104,114,101,97,100,46,99,0,69,110,100,0,119,111,114,107,101,114,45,62,115,116,97,116,117,115,95,32,61,61,32,78,79,84,95,79,75,0,119,111,114,107,101,114,45,62,115,116,97,116,117,115,95,32,60,61,32,79,75,0,83,121,110,99,0,33,111,107,32,124,124,32,40,119,111,114,107,101,114,45,62,115,116,97,116,117,115,95,32,61,61,32,79,75,41,0,82,101,115,101,116,0,110,109,101,109,98,32,42,32,115,105,122,101,32,62,32,48,0,46,47,115,114,99,47,119,101,98,112,47,117,116,105,108,115,47,117,116,105,108,115,46,99,0,87,101,98,80,83,97,102,101,77,97,108,108,111,99,0,87,101,98,80,83,97,102,101,67,97,108,108,111,99], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);





/* no memory initializer */
var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}

// {{PRE_LIBRARY}}


   
  Module["_i64Subtract"] = _i64Subtract;

  
  function ___setErrNo(value) {
      if (Module['___errno_location']) SAFE_HEAP_STORE(((Module['___errno_location']())|0), ((value)|0), 4);
      else Module.printErr('failed to set errno from JS');
      return value;
    }
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 85: return totalMemory / PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 79:
          return 0;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: {
          if (typeof navigator === 'object') return navigator['hardwareConcurrency'] || 1;
          return 1;
        }
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

   
  Module["_memset"] = _memset;

  function _pthread_cleanup_push(routine, arg) {
      __ATEXIT__.push(function() { Runtime.dynCall('vi', routine, [arg]) })
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

   
  Module["_bitshift64Lshr"] = _bitshift64Lshr;

   
  Module["_bitshift64Shl"] = _bitshift64Shl;

  function _pthread_cleanup_pop() {
      assert(_pthread_cleanup_push.level == __ATEXIT__.length, 'cannot pop if something else added meanwhile!');
      __ATEXIT__.pop();
      _pthread_cleanup_push.level = __ATEXIT__.length;
    }

  function _abort() {
      Module['abort']();
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function _pthread_self() {
      //FIXME: assumes only a single thread
      return 0;
    }

  function ___lock() {}

  function ___unlock() {}

  
  
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            return ''; // an invalid portion invalidates the whole thing
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          stream.tty.ops.flush(stream.tty);
        },flush:function (stream) {
          stream.tty.ops.flush(stream.tty);
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              // we will read data by chunks of BUFSIZE
              var BUFSIZE = 256;
              var buf = new Buffer(BUFSIZE);
              var bytesRead = 0;
  
              var fd = process.stdin.fd;
              // Linux and Mac cannot use process.stdin.fd (which isn't set up as sync)
              var usingDevice = false;
              try {
                fd = fs.openSync('/dev/stdin', 'r');
                usingDevice = true;
              } catch (e) {}
  
              bytesRead = fs.readSync(fd, buf, 0, BUFSIZE, null);
  
              if (usingDevice) { fs.closeSync(fd); }
              if (bytesRead > 0) {
                result = buf.slice(0, bytesRead).toString('utf-8');
              } else {
                result = null;
              }
  
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val); // val == 0 would cut text output off in the middle.
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['print'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          } else {
            if (val != 0) tty.output.push(val);
          }
        },flush:function (tty) {
          if (tty.output && tty.output.length > 0) {
            Module['printErr'](UTF8ArrayToString(tty.output, 0));
            tty.output = [];
          }
        }}};
  
  var MEMFS={ops_table:null,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap,
                msync: MEMFS.stream_ops.msync
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            }
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.usedBytes = 0; // The actual number of bytes used in the typed array, as opposed to contents.buffer.byteLength which gives the whole capacity.
          // When the byte data of the file is populated, this will point to either a typed array, or a normal JS array. Typed arrays are preferred
          // for performance, and used by default. However, typed arrays are not resizable like normal JS arrays are, so there is a small disk size
          // penalty involved for appending file writes that continuously grow a file similar to std::vector capacity vs used -scheme.
          node.contents = null; 
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },getFileDataAsRegularArray:function (node) {
        if (node.contents && node.contents.subarray) {
          var arr = [];
          for (var i = 0; i < node.usedBytes; ++i) arr.push(node.contents[i]);
          return arr; // Returns a copy of the original data.
        }
        return node.contents; // No-op, the file contents are already in a JS array. Return as-is.
      },getFileDataAsTypedArray:function (node) {
        if (!node.contents) return new Uint8Array;
        if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes); // Make sure to not return excess unused bytes.
        return new Uint8Array(node.contents);
      },expandFileStorage:function (node, newCapacity) {
        // If we are asked to expand the size of a file that already exists, revert to using a standard JS array to store the file
        // instead of a typed array. This makes resizing the array more flexible because we can just .push() elements at the back to
        // increase the size.
        if (node.contents && node.contents.subarray && newCapacity > node.contents.length) {
          node.contents = MEMFS.getFileDataAsRegularArray(node);
          node.usedBytes = node.contents.length; // We might be writing to a lazy-loaded file which had overridden this property, so force-reset it.
        }
  
        if (!node.contents || node.contents.subarray) { // Keep using a typed array if creating a new storage, or if old one was a typed array as well.
          var prevCapacity = node.contents ? node.contents.buffer.byteLength : 0;
          if (prevCapacity >= newCapacity) return; // No need to expand, the storage was already large enough.
          // Don't expand strictly to the given requested limit if it's only a very small increase, but instead geometrically grow capacity.
          // For small filesizes (<1MB), perform size*2 geometric increase, but for large sizes, do a much more conservative size*1.125 increase to
          // avoid overshooting the allocation cap by a very large margin.
          var CAPACITY_DOUBLING_MAX = 1024 * 1024;
          newCapacity = Math.max(newCapacity, (prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2.0 : 1.125)) | 0);
          if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256); // At minimum allocate 256b for each file when expanding.
          var oldContents = node.contents;
          node.contents = new Uint8Array(newCapacity); // Allocate new storage.
          if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0); // Copy old data over to the new storage.
          return;
        }
        // Not using a typed array to back the file storage. Use a standard JS array instead.
        if (!node.contents && newCapacity > 0) node.contents = [];
        while (node.contents.length < newCapacity) node.contents.push(0);
      },resizeFileStorage:function (node, newSize) {
        if (node.usedBytes == newSize) return;
        if (newSize == 0) {
          node.contents = null; // Fully decommit when requesting a resize to zero.
          node.usedBytes = 0;
          return;
        }
        if (!node.contents || node.contents.subarray) { // Resize a typed array if that is being used as the backing store.
          var oldContents = node.contents;
          node.contents = new Uint8Array(new ArrayBuffer(newSize)); // Allocate new storage.
          if (oldContents) {
            node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes))); // Copy old data over to the new storage.
          }
          node.usedBytes = newSize;
          return;
        }
        // Backing with a JS array.
        if (!node.contents) node.contents = [];
        if (node.contents.length > newSize) node.contents.length = newSize;
        else while (node.contents.length < newSize) node.contents.push(0);
        node.usedBytes = newSize;
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.usedBytes;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.resizeFileStorage(node, attr.size);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= stream.node.usedBytes) return 0;
          var size = Math.min(stream.node.usedBytes - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else {
            for (var i = 0; i < size; i++) buffer[offset + i] = contents[position + i];
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          if (!length) return 0;
          var node = stream.node;
          node.timestamp = Date.now();
  
          if (buffer.subarray && (!node.contents || node.contents.subarray)) { // This write is from a typed array to a typed array?
            if (canOwn) { // Can we just reuse the buffer we are given?
              assert(position === 0, 'canOwn must imply no weird position inside the file');
              node.contents = buffer.subarray(offset, offset + length);
              node.usedBytes = length;
              return length;
            } else if (node.usedBytes === 0 && position === 0) { // If this is a simple first write to an empty file, do a fast set since we don't need to care about old data.
              node.contents = new Uint8Array(buffer.subarray(offset, offset + length));
              node.usedBytes = length;
              return length;
            } else if (position + length <= node.usedBytes) { // Writing to an already allocated and used subrange of the file?
              node.contents.set(buffer.subarray(offset, offset + length), position);
              return length;
            }
          }
  
          // Appending to an existing file and we need to reallocate, or source data did not come as a typed array.
          MEMFS.expandFileStorage(node, position+length);
          if (node.contents.subarray && buffer.subarray) node.contents.set(buffer.subarray(offset, offset + length), position); // Use typed array write if available.
          else {
            for (var i = 0; i < length; i++) {
             node.contents[position + i] = buffer[offset + i]; // Or fall back to manual write if not.
            }
          }
          node.usedBytes = Math.max(node.usedBytes, position+length);
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.usedBytes;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.expandFileStorage(stream.node, offset + length);
          stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < stream.node.usedBytes) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        },msync:function (stream, buffer, offset, length, mmapFlags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          if (mmapFlags & 2) {
            // MAP_PRIVATE calls need not to be synced back to underlying fs
            return 0;
          }
  
          var bytesWritten = MEMFS.stream_ops.write(stream, buffer, 0, length, offset, false);
          // should we check if bytesWritten and length are the same?
          return 0;
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        if (typeof indexedDB !== 'undefined') return indexedDB;
        var ret = null;
        if (typeof window === 'object') ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
        assert(ret, 'IDBFS used, but indexedDB not supported');
        return ret;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          if (!fileStore.indexNames.contains('timestamp')) {
            fileStore.createIndex('timestamp', 'timestamp', { unique: false });
          }
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function(e) {
            callback(this.error);
            e.preventDefault();
          };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          // Performance consideration: storing a normal JavaScript array to a IndexedDB is much slower than storing a typed array.
          // Therefore always convert the file contents to a typed array first before writing the data to IndexedDB.
          node.contents = MEMFS.getFileDataAsTypedArray(node);
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.chmod(path, entry.mode);
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function(e) {
          callback(this.error);
          e.preventDefault();
        };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function(e) {
          done(this.error);
          e.preventDefault();
        };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        flags &= ~0100000 /*O_LARGEFILE*/; // Ignore this flag from musl, otherwise node.js fails to open the file.
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            path = fs.readlinkSync(path);
            path = NODEJS_PATH.relative(NODEJS_PATH.resolve(node.mount.opts.root), path);
            return path;
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          if (length === 0) return 0; // node errors on 0 length reads
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          return position;
        }}};
  
  var WORKERFS={DIR_MODE:16895,FILE_MODE:33279,reader:null,mount:function (mount) {
        assert(ENVIRONMENT_IS_WORKER);
        if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
        var root = WORKERFS.createNode(null, '/', WORKERFS.DIR_MODE, 0);
        var createdParents = {};
        function ensureParent(path) {
          // return the parent node, creating subdirs as necessary
          var parts = path.split('/');
          var parent = root;
          for (var i = 0; i < parts.length-1; i++) {
            var curr = parts.slice(0, i+1).join('/');
            if (!createdParents[curr]) {
              createdParents[curr] = WORKERFS.createNode(parent, curr, WORKERFS.DIR_MODE, 0);
            }
            parent = createdParents[curr];
          }
          return parent;
        }
        function base(path) {
          var parts = path.split('/');
          return parts[parts.length-1];
        }
        // We also accept FileList here, by using Array.prototype
        Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
          WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
        });
        (mount.opts["blobs"] || []).forEach(function(obj) {
          WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
        });
        (mount.opts["packages"] || []).forEach(function(pack) {
          pack['metadata'].files.forEach(function(file) {
            var name = file.filename.substr(1); // remove initial slash
            WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack['blob'].slice(file.start, file.end));
          });
        });
        return root;
      },createNode:function (parent, name, mode, dev, contents, mtime) {
        var node = FS.createNode(parent, name, mode);
        node.mode = mode;
        node.node_ops = WORKERFS.node_ops;
        node.stream_ops = WORKERFS.stream_ops;
        node.timestamp = (mtime || new Date).getTime();
        assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
        if (mode === WORKERFS.FILE_MODE) {
          node.size = contents.size;
          node.contents = contents;
        } else {
          node.size = 4096;
          node.contents = {};
        }
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },node_ops:{getattr:function (node) {
          return {
            dev: 1,
            ino: undefined,
            mode: node.mode,
            nlink: 1,
            uid: 0,
            gid: 0,
            rdev: undefined,
            size: node.size,
            atime: new Date(node.timestamp),
            mtime: new Date(node.timestamp),
            ctime: new Date(node.timestamp),
            blksize: 4096,
            blocks: Math.ceil(node.size / 4096),
          };
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
        },lookup:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        },mknod:function (parent, name, mode, dev) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rename:function (oldNode, newDir, newName) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },unlink:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },rmdir:function (parent, name) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readdir:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },symlink:function (parent, newName, oldPath) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        },readlink:function (node) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          if (position >= stream.node.size) return 0;
          var chunk = stream.node.contents.slice(position, position + length);
          var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
          buffer.set(new Uint8Array(ab), offset);
          return chunk.size;
        },write:function (stream, buffer, offset, length, position) {
          throw new FS.ErrnoError(ERRNO_CODES.EIO);
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.size;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,trackingDelegate:{},tracking:{openFlags:{READ:1,WRITE:2}},ErrnoError:null,genericErrors:{},filesystems:null,handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        if (!path) return { path: '', node: null };
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
  
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err, parent);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); }
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); }
            }
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var perms = ['r', 'w', 'rw'][flag & 3];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        var err = FS.nodePermissions(dir, 'x');
        if (err) return err;
        if (!dir.node_ops.lookup) return ERRNO_CODES.EACCES;
        return 0;
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        if (!name || name === '.' || name === '..') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        if (!PATH.resolve(oldpath)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        if (!parent) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        if (!old_dir || !new_dir) throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        try {
          if (FS.trackingDelegate['willMovePath']) {
            FS.trackingDelegate['willMovePath'](old_path, new_path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
        try {
          if (FS.trackingDelegate['onMovePath']) FS.trackingDelegate['onMovePath'](old_path, new_path);
        } catch(e) {
          console.log("FS.trackingDelegate['onMovePath']('"+old_path+"', '"+new_path+"') threw an exception: " + e.message);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        try {
          if (FS.trackingDelegate['willDeletePath']) {
            FS.trackingDelegate['willDeletePath'](path);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['willDeletePath']('"+path+"') threw an exception: " + e.message);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
        try {
          if (FS.trackingDelegate['onDeletePath']) FS.trackingDelegate['onDeletePath'](path);
        } catch(e) {
          console.log("FS.trackingDelegate['onDeletePath']('"+path+"') threw an exception: " + e.message);
        }
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return PATH.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        if (path === "") {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        var created = false;
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
            created = true;
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // if asked only for a directory, then this must be one
        if ((flags & 65536) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        // check permissions, if this is not a file we just created now (it is ok to
        // create and write to a file with read-only permissions; it is read-only
        // for later use)
        if (!created) {
          var err = FS.mayOpen(node, flags);
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        try {
          if (FS.trackingDelegate['onOpenFile']) {
            var trackingFlags = 0;
            if ((flags & 2097155) !== 1) {
              trackingFlags |= FS.tracking.openFlags.READ;
            }
            if ((flags & 2097155) !== 0) {
              trackingFlags |= FS.tracking.openFlags.WRITE;
            }
            FS.trackingDelegate['onOpenFile'](path, trackingFlags);
          }
        } catch(e) {
          console.log("FS.trackingDelegate['onOpenFile']('"+path+"', flags) threw an exception: " + e.message);
        }
        return stream;
      },close:function (stream) {
        if (stream.getdents) stream.getdents = null; // free readdir state
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        stream.position = stream.stream_ops.llseek(stream, offset, whence);
        stream.ungotten = [];
        return stream.position;
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        try {
          if (stream.path && FS.trackingDelegate['onWriteToFile']) FS.trackingDelegate['onWriteToFile'](stream.path);
        } catch(e) {
          console.log("FS.trackingDelegate['onWriteToFile']('"+path+"') threw an exception: " + e.message);
        }
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },msync:function (stream, buffer, offset, length, mmapFlags) {
        if (!stream || !stream.stream_ops.msync) {
          return 0;
        }
        return stream.stream_ops.msync(stream, buffer, offset, length, mmapFlags);
      },munmap:function (stream) {
        return 0;
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = UTF8ArrayToString(buf, 0);
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var buf = new Uint8Array(lengthBytesUTF8(data)+1);
          var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
          FS.write(stream, buf, 0, actualNumBytes, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
        FS.mkdir('/home');
        FS.mkdir('/home/web_user');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function(stream, buffer, offset, length, pos) { return length; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // setup /dev/[u]random
        var random_device;
        if (typeof crypto !== 'undefined') {
          // for modern web browsers
          var randomBuffer = new Uint8Array(1);
          random_device = function() { crypto.getRandomValues(randomBuffer); return randomBuffer[0]; };
        } else if (ENVIRONMENT_IS_NODE) {
          // for nodejs
          random_device = function() { return require('crypto').randomBytes(1)[0]; };
        } else {
          // default for ES5 platforms
          random_device = function() { return (Math.random()*256)|0; };
        }
        FS.createDevice('/dev', 'random', random_device);
        FS.createDevice('/dev', 'urandom', random_device);
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createSpecialDirectories:function () {
        // create /proc/self/fd which allows /proc/self/fd/6 => readlink gives the name of the stream for fd 6 (see test_unistd_ttyname)
        FS.mkdir('/proc');
        FS.mkdir('/proc/self');
        FS.mkdir('/proc/self/fd');
        FS.mount({
          mount: function() {
            var node = FS.createNode('/proc/self', 'fd', 16384 | 0777, 73);
            node.node_ops = {
              lookup: function(parent, name) {
                var fd = +name;
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
                var ret = {
                  parent: null,
                  mount: { mountpoint: 'fake' },
                  node_ops: { readlink: function() { return stream.path } }
                };
                ret.parent = ret; // make it look like a simple root node
                return ret;
              }
            };
            return node;
          }
        }, {}, '/proc/self/fd');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno, node) {
          //Module.printErr(stackTrace()); // useful for debugging
          this.node = node;
          this.setErrno = function(errno) {
            this.errno = errno;
            for (var key in ERRNO_CODES) {
              if (ERRNO_CODES[key] === errno) {
                this.code = key;
                break;
              }
            }
          };
          this.setErrno(errno);
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
        FS.createSpecialDirectories();
  
        FS.filesystems = {
          'MEMFS': MEMFS,
          'IDBFS': IDBFS,
          'NODEFS': NODEFS,
          'WORKERFS': WORKERFS,
        };
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        // force-flush all streams, so we get musl std streams printed out
        var fflush = Module['_fflush'];
        if (fflush) fflush(0);
        // close all of our streams
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
            obj.usedBytes = obj.contents.length;
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = (idx / this.chunkSize)|0;
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
  
          if (!hasByteServing) chunkSize = datalength;
  
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
  
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
          var lazyArray = this;
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * chunkSize;
            var end = (chunkNum+1) * chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
  
          this._length = datalength;
          this._chunkSize = chunkSize;
          this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // Add a function that defers querying the file size until it is asked the first time.
        Object.defineProperty(node, "usedBytes", {
            get: function() { return this.contents.length; }
        });
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        var dep = getUniqueRunDependency('cp ' + fullname); // might have several active requests for the same fullname
        function processData(byteArray) {
          function finish(byteArray) {
            if (preFinish) preFinish();
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency(dep);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency(dep);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency(dep);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};var SYSCALLS={DEFAULT_POLLMASK:5,mappings:{},umask:511,calculateAt:function (dirfd, path) {
        if (path[0] !== '/') {
          // relative path
          var dir;
          if (dirfd === -100) {
            dir = FS.cwd();
          } else {
            var dirstream = FS.getStream(dirfd);
            if (!dirstream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
            dir = dirstream.path;
          }
          path = PATH.join2(dir, path);
        }
        return path;
      },doStat:function (func, path, buf) {
        try {
          var stat = func(path);
        } catch (e) {
          if (e && e.node && PATH.normalize(path) !== PATH.normalize(FS.getPath(e.node))) {
            // an error occurred while trying to look up the path; we should just report ENOTDIR
            return -ERRNO_CODES.ENOTDIR;
          }
          throw e;
        }
        SAFE_HEAP_STORE(((buf)|0), ((stat.dev)|0), 4);
        SAFE_HEAP_STORE((((buf)+(4))|0), ((0)|0), 4);
        SAFE_HEAP_STORE((((buf)+(8))|0), ((stat.ino)|0), 4);
        SAFE_HEAP_STORE((((buf)+(12))|0), ((stat.mode)|0), 4);
        SAFE_HEAP_STORE((((buf)+(16))|0), ((stat.nlink)|0), 4);
        SAFE_HEAP_STORE((((buf)+(20))|0), ((stat.uid)|0), 4);
        SAFE_HEAP_STORE((((buf)+(24))|0), ((stat.gid)|0), 4);
        SAFE_HEAP_STORE((((buf)+(28))|0), ((stat.rdev)|0), 4);
        SAFE_HEAP_STORE((((buf)+(32))|0), ((0)|0), 4);
        SAFE_HEAP_STORE((((buf)+(36))|0), ((stat.size)|0), 4);
        SAFE_HEAP_STORE((((buf)+(40))|0), ((4096)|0), 4);
        SAFE_HEAP_STORE((((buf)+(44))|0), ((stat.blocks)|0), 4);
        SAFE_HEAP_STORE((((buf)+(48))|0), (((stat.atime.getTime() / 1000)|0)|0), 4);
        SAFE_HEAP_STORE((((buf)+(52))|0), ((0)|0), 4);
        SAFE_HEAP_STORE((((buf)+(56))|0), (((stat.mtime.getTime() / 1000)|0)|0), 4);
        SAFE_HEAP_STORE((((buf)+(60))|0), ((0)|0), 4);
        SAFE_HEAP_STORE((((buf)+(64))|0), (((stat.ctime.getTime() / 1000)|0)|0), 4);
        SAFE_HEAP_STORE((((buf)+(68))|0), ((0)|0), 4);
        SAFE_HEAP_STORE((((buf)+(72))|0), ((stat.ino)|0), 4);
        return 0;
      },doMsync:function (addr, stream, len, flags) {
        var buffer = new Uint8Array(HEAPU8.subarray(addr, addr + len));
        FS.msync(stream, buffer, 0, len, flags);
      },doMkdir:function (path, mode) {
        // remove a trailing slash, if one - /a/b/ has basename of '', but
        // we want to create b in the context of this function
        path = PATH.normalize(path);
        if (path[path.length-1] === '/') path = path.substr(0, path.length-1);
        FS.mkdir(path, mode, 0);
        return 0;
      },doMknod:function (path, mode, dev) {
        // we don't want this in the JS API as it uses mknod to create all nodes.
        switch (mode & 61440) {
          case 32768:
          case 8192:
          case 24576:
          case 4096:
          case 49152:
            break;
          default: return -ERRNO_CODES.EINVAL;
        }
        FS.mknod(path, mode, dev);
        return 0;
      },doReadlink:function (path, buf, bufsize) {
        if (bufsize <= 0) return -ERRNO_CODES.EINVAL;
        var ret = FS.readlink(path);
        ret = ret.slice(0, Math.max(0, bufsize));
        writeStringToMemory(ret, buf, true);
        return ret.length;
      },doAccess:function (path, amode) {
        if (amode & ~7) {
          // need a valid mode
          return -ERRNO_CODES.EINVAL;
        }
        var node;
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
        var perms = '';
        if (amode & 4) perms += 'r';
        if (amode & 2) perms += 'w';
        if (amode & 1) perms += 'x';
        if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
          return -ERRNO_CODES.EACCES;
        }
        return 0;
      },doDup:function (path, flags, suggestFD) {
        var suggest = FS.getStream(suggestFD);
        if (suggest) FS.close(suggest);
        return FS.open(path, flags, 0, suggestFD, suggestFD).fd;
      },doReadv:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = ((SAFE_HEAP_LOAD((((iov)+(i*8))|0), 4, 0))|0);
          var len = ((SAFE_HEAP_LOAD((((iov)+(i*8 + 4))|0), 4, 0))|0);
          var curr = FS.read(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
          if (curr < len) break; // nothing more to read
        }
        return ret;
      },doWritev:function (stream, iov, iovcnt, offset) {
        var ret = 0;
        for (var i = 0; i < iovcnt; i++) {
          var ptr = ((SAFE_HEAP_LOAD((((iov)+(i*8))|0), 4, 0))|0);
          var len = ((SAFE_HEAP_LOAD((((iov)+(i*8 + 4))|0), 4, 0))|0);
          var curr = FS.write(stream, HEAP8,ptr, len, offset);
          if (curr < 0) return -1;
          ret += curr;
        }
        return ret;
      },varargs:0,get:function (varargs) {
        SYSCALLS.varargs += 4;
        var ret = ((SAFE_HEAP_LOAD((((SYSCALLS.varargs)-(4))|0), 4, 0))|0);
        return ret;
      },getStr:function () {
        var ret = Pointer_stringify(SYSCALLS.get());
        return ret;
      },getStreamFromFD:function () {
        var stream = FS.getStream(SYSCALLS.get());
        if (!stream) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return stream;
      },getSocketFromFD:function () {
        var socket = SOCKFS.getSocket(SYSCALLS.get());
        if (!socket) throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        return socket;
      },getSocketAddress:function (allowNull) {
        var addrp = SYSCALLS.get(), addrlen = SYSCALLS.get();
        if (allowNull && addrp === 0) return null;
        var info = __read_sockaddr(addrp, addrlen);
        if (info.errno) throw new FS.ErrnoError(info.errno);
        info.addr = DNS.lookup_addr(info.addr) || info.addr;
        return info;
      },get64:function () {
        var low = SYSCALLS.get(), high = SYSCALLS.get();
        if (low >= 0) assert(high === 0);
        else assert(high === -1);
        return low;
      },getZero:function () {
        assert(SYSCALLS.get() === 0);
      }};function ___syscall6(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // close
      var stream = SYSCALLS.getStreamFromFD();
      FS.close(stream);
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

   
  Module["_i64Add"] = _i64Add;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) {
        var success = self.alloc(bytes);
        if (!success) return -1 >>> 0; // sbrk failure code
      }
      return ret;  // Previous break location.
    }

  
  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    } 
  Module["_memcpy"] = _memcpy; 
  Module["_memmove"] = _memmove;


  var _abs=Math_abs;

  
  
  function _emscripten_set_main_loop_timing(mode, value) {
      Browser.mainLoop.timingMode = mode;
      Browser.mainLoop.timingValue = value;
  
      if (!Browser.mainLoop.func) {
        console.error('emscripten_set_main_loop_timing: Cannot set timing mode for main loop since a main loop does not exist! Call emscripten_set_main_loop first to set one up.');
        return 1; // Return non-zero on failure, can't set timing mode when there is no main loop.
      }
  
      if (mode == 0 /*EM_TIMING_SETTIMEOUT*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setTimeout() {
          setTimeout(Browser.mainLoop.runner, value); // doing this each time means that on exception, we stop
        };
        Browser.mainLoop.method = 'timeout';
      } else if (mode == 1 /*EM_TIMING_RAF*/) {
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_rAF() {
          Browser.requestAnimationFrame(Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'rAF';
      } else if (mode == 2 /*EM_TIMING_SETIMMEDIATE*/) {
        if (!window['setImmediate']) {
          // Emulate setImmediate. (note: not a complete polyfill, we don't emulate clearImmediate() to keep code size to minimum, since not needed)
          var setImmediates = [];
          var emscriptenMainLoopMessageId = '__emcc';
          function Browser_setImmediate_messageHandler(event) {
            if (event.source === window && event.data === emscriptenMainLoopMessageId) {
              event.stopPropagation();
              setImmediates.shift()();
            }
          }
          window.addEventListener("message", Browser_setImmediate_messageHandler, true);
          window['setImmediate'] = function Browser_emulated_setImmediate(func) {
            setImmediates.push(func);
            window.postMessage(emscriptenMainLoopMessageId, "*");
          }
        }
        Browser.mainLoop.scheduler = function Browser_mainLoop_scheduler_setImmediate() {
          window['setImmediate'](Browser.mainLoop.runner);
        };
        Browser.mainLoop.method = 'immediate';
      }
      return 0;
    }function _emscripten_set_main_loop(func, fps, simulateInfiniteLoop, arg, noSetTiming) {
      Module['noExitRuntime'] = true;
  
      assert(!Browser.mainLoop.func, 'emscripten_set_main_loop: there can only be one main loop function at once: call emscripten_cancel_main_loop to cancel the previous one before setting a new one with different parameters.');
  
      Browser.mainLoop.func = func;
      Browser.mainLoop.arg = arg;
  
      var thisMainLoopId = Browser.mainLoop.currentlyRunningMainloop;
  
      Browser.mainLoop.runner = function Browser_mainLoop_runner() {
        if (ABORT) return;
        if (Browser.mainLoop.queue.length > 0) {
          var start = Date.now();
          var blocker = Browser.mainLoop.queue.shift();
          blocker.func(blocker.arg);
          if (Browser.mainLoop.remainingBlockers) {
            var remaining = Browser.mainLoop.remainingBlockers;
            var next = remaining%1 == 0 ? remaining-1 : Math.floor(remaining);
            if (blocker.counted) {
              Browser.mainLoop.remainingBlockers = next;
            } else {
              // not counted, but move the progress along a tiny bit
              next = next + 0.5; // do not steal all the next one's progress
              Browser.mainLoop.remainingBlockers = (8*remaining + next)/9;
            }
          }
          console.log('main loop blocker "' + blocker.name + '" took ' + (Date.now() - start) + ' ms'); //, left: ' + Browser.mainLoop.remainingBlockers);
          Browser.mainLoop.updateStatus();
          setTimeout(Browser.mainLoop.runner, 0);
          return;
        }
  
        // catch pauses from non-main loop sources
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Implement very basic swap interval control
        Browser.mainLoop.currentFrameNumber = Browser.mainLoop.currentFrameNumber + 1 | 0;
        if (Browser.mainLoop.timingMode == 1/*EM_TIMING_RAF*/ && Browser.mainLoop.timingValue > 1 && Browser.mainLoop.currentFrameNumber % Browser.mainLoop.timingValue != 0) {
          // Not the scheduled time to render this frame - skip.
          Browser.mainLoop.scheduler();
          return;
        }
  
        // Signal GL rendering layer that processing of a new frame is about to start. This helps it optimize
        // VBO double-buffering and reduce GPU stalls.
  
        if (Browser.mainLoop.method === 'timeout' && Module.ctx) {
          Module.printErr('Looks like you are rendering without using requestAnimationFrame for the main loop. You should use 0 for the frame rate in emscripten_set_main_loop in order to use requestAnimationFrame, as that can greatly improve your frame rates!');
          Browser.mainLoop.method = ''; // just warn once per call to set main loop
        }
  
        Browser.mainLoop.runIter(function() {
          if (typeof arg !== 'undefined') {
            Runtime.dynCall('vi', func, [arg]);
          } else {
            Runtime.dynCall('v', func);
          }
        });
  
        // catch pauses from the main loop itself
        if (thisMainLoopId < Browser.mainLoop.currentlyRunningMainloop) return;
  
        // Queue new audio data. This is important to be right after the main loop invocation, so that we will immediately be able
        // to queue the newest produced audio samples.
        // TODO: Consider adding pre- and post- rAF callbacks so that GL.newRenderingFrameStarted() and SDL.audio.queueNewAudioData()
        //       do not need to be hardcoded into this function, but can be more generic.
        if (typeof SDL === 'object' && SDL.audio && SDL.audio.queueNewAudioData) SDL.audio.queueNewAudioData();
  
        Browser.mainLoop.scheduler();
      }
  
      if (!noSetTiming) {
        if (fps && fps > 0) _emscripten_set_main_loop_timing(0/*EM_TIMING_SETTIMEOUT*/, 1000.0 / fps);
        else _emscripten_set_main_loop_timing(1/*EM_TIMING_RAF*/, 1); // Do rAF by rendering each frame (no decimating)
  
        Browser.mainLoop.scheduler();
      }
  
      if (simulateInfiniteLoop) {
        throw 'SimulateInfiniteLoop';
      }
    }var Browser={mainLoop:{scheduler:null,method:"",currentlyRunningMainloop:0,func:null,arg:0,timingMode:0,timingValue:0,currentFrameNumber:0,queue:[],pause:function () {
          Browser.mainLoop.scheduler = null;
          Browser.mainLoop.currentlyRunningMainloop++; // Incrementing this signals the previous main loop that it's now become old, and it must return.
        },resume:function () {
          Browser.mainLoop.currentlyRunningMainloop++;
          var timingMode = Browser.mainLoop.timingMode;
          var timingValue = Browser.mainLoop.timingValue;
          var func = Browser.mainLoop.func;
          Browser.mainLoop.func = null;
          _emscripten_set_main_loop(func, 0, false, Browser.mainLoop.arg, true /* do not set timing and call scheduler, we will do it on the next lines */);
          _emscripten_set_main_loop_timing(timingMode, timingValue);
          Browser.mainLoop.scheduler();
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        },runIter:function (func) {
          if (ABORT) return;
          if (Module['preMainLoop']) {
            var preRet = Module['preMainLoop']();
            if (preRet === false) {
              return; // |return false| skips a frame
            }
          }
          try {
            func();
          } catch (e) {
            if (e instanceof ExitStatus) {
              return;
            } else {
              if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
              throw e;
            }
          }
          if (Module['postMainLoop']) Module['postMainLoop']();
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
        if (canvas) {
          // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
          // Module['forcedAspectRatio'] = 4 / 3;
          
          canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                      canvas['mozRequestPointerLock'] ||
                                      canvas['webkitRequestPointerLock'] ||
                                      canvas['msRequestPointerLock'] ||
                                      function(){};
          canvas.exitPointerLock = document['exitPointerLock'] ||
                                   document['mozExitPointerLock'] ||
                                   document['webkitExitPointerLock'] ||
                                   document['msExitPointerLock'] ||
                                   function(){}; // no-op if function does not exist
          canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
  
          document.addEventListener('pointerlockchange', pointerLockChange, false);
          document.addEventListener('mozpointerlockchange', pointerLockChange, false);
          document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
          document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
          if (Module['elementPointerLock']) {
            canvas.addEventListener("click", function(ev) {
              if (!Browser.pointerLock && canvas.requestPointerLock) {
                canvas.requestPointerLock();
                ev.preventDefault();
              }
            }, false);
          }
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        if (useWebGL && Module.ctx && canvas == Module.canvas) return Module.ctx; // no need to recreate GL context if it's already been created for this canvas.
  
        var ctx;
        var contextHandle;
        if (useWebGL) {
          // For GLES2/desktop GL compatibility, adjust a few defaults to be different to WebGL defaults, so that they align better with the desktop defaults.
          var contextAttributes = {
            antialias: false,
            alpha: false
          };
  
          if (webGLContextAttributes) {
            for (var attribute in webGLContextAttributes) {
              contextAttributes[attribute] = webGLContextAttributes[attribute];
            }
          }
  
          contextHandle = GL.createContext(canvas, contextAttributes);
          if (contextHandle) {
            ctx = GL.getContext(contextHandle).GLctx;
          }
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
        } else {
          ctx = canvas.getContext('2d');
        }
  
        if (!ctx) return null;
  
        if (setInModule) {
          if (!useWebGL) assert(typeof GLctx === 'undefined', 'cannot set in module if GLctx is used, but we are a non-GL context that would replace it');
  
          Module.ctx = ctx;
          if (useWebGL) GL.makeContextCurrent(contextHandle);
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas, vrDevice) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        Browser.vrDevice = vrDevice;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
        if (typeof Browser.vrDevice === 'undefined') Browser.vrDevice = null;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
  
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
  
        if (vrDevice) {
          canvasContainer.requestFullScreen({ vrDisplay: vrDevice });
        } else {
          canvasContainer.requestFullScreen();
        }
      },nextRAF:0,fakeRequestAnimationFrame:function (func) {
        // try to keep 60fps between calls to here
        var now = Date.now();
        if (Browser.nextRAF === 0) {
          Browser.nextRAF = now + 1000/60;
        } else {
          while (now + 2 >= Browser.nextRAF) { // fudge a little, to avoid timer jitter causing us to do lots of delay:0
            Browser.nextRAF += 1000/60;
          }
        }
        var delay = Math.max(Browser.nextRAF - now, 0);
        setTimeout(func, delay);
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          Browser.fakeRequestAnimationFrame(func);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           Browser.fakeRequestAnimationFrame;
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },allowAsyncCallbacks:true,queuedAsyncCallbacks:[],pauseAsyncCallbacks:function () {
        Browser.allowAsyncCallbacks = false;
      },resumeAsyncCallbacks:function () { // marks future callbacks as ok to execute, and synchronously runs any remaining ones right now
        Browser.allowAsyncCallbacks = true;
        if (Browser.queuedAsyncCallbacks.length > 0) {
          var callbacks = Browser.queuedAsyncCallbacks;
          Browser.queuedAsyncCallbacks = [];
          callbacks.forEach(function(func) {
            func();
          });
        }
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        });
      },safeSetTimeout:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setTimeout(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } else {
            Browser.queuedAsyncCallbacks.push(func);
          }
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        Module['noExitRuntime'] = true;
        return setInterval(function() {
          if (ABORT) return;
          if (Browser.allowAsyncCallbacks) {
            func();
          } // drop it on the floor otherwise, next interval will kick in
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        var delta = 0;
        switch (event.type) {
          case 'DOMMouseScroll': 
            delta = event.detail;
            break;
          case 'mousewheel': 
            delta = event.wheelDelta;
            break;
          case 'wheel': 
            delta = event['deltaY'];
            break;
          default:
            throw 'unrecognized mouse wheel event: ' + event.type;
        }
        return delta;
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              var last = Browser.touches[touch.identifier];
              if (!last) last = coords;
              Browser.lastTouches[touch.identifier] = last;
              Browser.touches[touch.identifier] = coords;
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = ((SAFE_HEAP_LOAD(((SDL.screen+Runtime.QUANTUM_SIZE*0)|0), 4, 1))|0);
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	SAFE_HEAP_STORE(((SDL.screen+Runtime.QUANTUM_SIZE*0)|0), ((flags)|0), 4)
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = ((SAFE_HEAP_LOAD(((SDL.screen+Runtime.QUANTUM_SIZE*0)|0), 4, 1))|0);
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	SAFE_HEAP_STORE(((SDL.screen+Runtime.QUANTUM_SIZE*0)|0), ((flags)|0), 4)
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      },wgetRequests:{},nextWgetRequestHandle:0,getNextWgetRequestHandle:function () {
        var handle = Browser.nextWgetRequestHandle;
        Browser.nextWgetRequestHandle++;
        return handle;
      }};

  function _time(ptr) {
      var ret = (Date.now()/1000)|0;
      if (ptr) {
        SAFE_HEAP_STORE(((ptr)|0), ((ret)|0), 4);
      }
      return ret;
    }

   
  Module["_llvm_bswap_i32"] = _llvm_bswap_i32;

  function ___syscall140(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // llseek
      var stream = SYSCALLS.getStreamFromFD(), offset_high = SYSCALLS.get(), offset_low = SYSCALLS.get(), result = SYSCALLS.get(), whence = SYSCALLS.get();
      var offset = offset_low;
      assert(offset_high === 0);
      FS.llseek(stream, offset, whence);
      SAFE_HEAP_STORE(((result)|0), ((stream.position)|0), 4);
      if (stream.getdents && offset === 0 && whence === 0) stream.getdents = null; // reset readdir state
      return 0;
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall146(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // writev
      var stream = SYSCALLS.getStreamFromFD(), iov = SYSCALLS.get(), iovcnt = SYSCALLS.get();
      return SYSCALLS.doWritev(stream, iov, iovcnt);
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }

  function ___syscall54(which, varargs) {SYSCALLS.varargs = varargs;
  try {
   // ioctl
      var stream = SYSCALLS.getStreamFromFD(), op = SYSCALLS.get();
      switch (op) {
        case 21505: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0;
        }
        case 21506: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return 0; // no-op, not actually adjusting terminal settings
        }
        case 21519: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          var argp = SYSCALLS.get();
          SAFE_HEAP_STORE(((argp)|0), ((0)|0), 4);
          return 0;
        }
        case 21520: {
          if (!stream.tty) return -ERRNO_CODES.ENOTTY;
          return -ERRNO_CODES.EINVAL; // not supported
        }
        case 21531: {
          var argp = SYSCALLS.get();
          return FS.ioctl(stream, op, argp);
        }
        default: abort('bad ioctl syscall ' + op);
      }
    } catch (e) {
    if (typeof FS === 'undefined' || !(e instanceof FS.ErrnoError)) abort(e);
    return -e.errno;
  }
  }
FS.staticInit();__ATINIT__.unshift(function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() });__ATMAIN__.push(function() { FS.ignorePermissions = false });__ATEXIT__.push(function() { FS.quit() });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;Module["FS_unlink"] = FS.unlink;
__ATINIT__.unshift(function() { TTY.init() });__ATEXIT__.push(function() { TTY.shutdown() });
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); var NODEJS_PATH = require("path"); NODEFS.staticInit(); }
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas, vrDevice) { Browser.requestFullScreen(lockPointer, resizeCanvas, vrDevice) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
  Module["createContext"] = function Module_createContext(canvas, useWebGL, setInModule, webGLContextAttributes) { return Browser.createContext(canvas, useWebGL, setInModule, webGLContextAttributes) }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + TOTAL_STACK;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");

 var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);


function nullFunc_iiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vi(x) { Module["printErr"]("Invalid function pointer called with signature 'vi'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_vii(x) { Module["printErr"]("Invalid function pointer called with signature 'vii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'iiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_ii(x) { Module["printErr"]("Invalid function pointer called with signature 'ii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viii(x) { Module["printErr"]("Invalid function pointer called with signature 'viii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiiiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiiiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_iii(x) { Module["printErr"]("Invalid function pointer called with signature 'iii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function nullFunc_viiii(x) { Module["printErr"]("Invalid function pointer called with signature 'viiii'. Perhaps this is an invalid value (e.g. caused by calling a virtual method on a NULL pointer)? Or calling a function with an incorrect type, which will fail? (it is worth building your source files with -Werror (warnings are errors), as warnings can indicate undefined behavior which can cause this)");  Module["printErr"]("Build with ASSERTIONS=2 for more info.");abort(x) }

function invoke_iiii(index,a1,a2,a3) {
  try {
    return Module["dynCall_iiii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiii(index,a1,a2,a3,a4,a5) {
  try {
    Module["dynCall_viiiii"](index,a1,a2,a3,a4,a5);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vi(index,a1) {
  try {
    Module["dynCall_vi"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_vii(index,a1,a2) {
  try {
    Module["dynCall_vii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iiiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    return Module["dynCall_iiiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_ii(index,a1) {
  try {
    return Module["dynCall_ii"](index,a1);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viii(index,a1,a2,a3) {
  try {
    Module["dynCall_viii"](index,a1,a2,a3);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiiiiii(index,a1,a2,a3,a4,a5,a6,a7,a8,a9) {
  try {
    Module["dynCall_viiiiiiiii"](index,a1,a2,a3,a4,a5,a6,a7,a8,a9);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiiiii(index,a1,a2,a3,a4,a5,a6) {
  try {
    Module["dynCall_viiiiii"](index,a1,a2,a3,a4,a5,a6);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_iii(index,a1,a2) {
  try {
    return Module["dynCall_iii"](index,a1,a2);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

function invoke_viiii(index,a1,a2,a3,a4) {
  try {
    Module["dynCall_viiii"](index,a1,a2,a3,a4);
  } catch(e) {
    if (typeof e !== 'number' && e !== 'longjmp') throw e;
    asm["setThrew"](1, 0);
  }
}

Module.asmGlobalArg = { "Math": Math, "Int8Array": Int8Array, "Int16Array": Int16Array, "Int32Array": Int32Array, "Uint8Array": Uint8Array, "Uint16Array": Uint16Array, "Uint32Array": Uint32Array, "Float32Array": Float32Array, "Float64Array": Float64Array, "NaN": NaN, "Infinity": Infinity, "byteLength": byteLength };

Module.asmLibraryArg = { "abort": abort, "assert": assert, "segfault": segfault, "alignfault": alignfault, "ftfault": ftfault, "nullFunc_iiii": nullFunc_iiii, "nullFunc_viiiii": nullFunc_viiiii, "nullFunc_vi": nullFunc_vi, "nullFunc_vii": nullFunc_vii, "nullFunc_iiiiiii": nullFunc_iiiiiii, "nullFunc_ii": nullFunc_ii, "nullFunc_viii": nullFunc_viii, "nullFunc_viiiiiiiii": nullFunc_viiiiiiiii, "nullFunc_viiiiii": nullFunc_viiiiii, "nullFunc_iii": nullFunc_iii, "nullFunc_viiii": nullFunc_viiii, "invoke_iiii": invoke_iiii, "invoke_viiiii": invoke_viiiii, "invoke_vi": invoke_vi, "invoke_vii": invoke_vii, "invoke_iiiiiii": invoke_iiiiiii, "invoke_ii": invoke_ii, "invoke_viii": invoke_viii, "invoke_viiiiiiiii": invoke_viiiiiiiii, "invoke_viiiiii": invoke_viiiiii, "invoke_iii": invoke_iii, "invoke_viiii": invoke_viiii, "_pthread_cleanup_pop": _pthread_cleanup_pop, "___lock": ___lock, "___assert_fail": ___assert_fail, "_pthread_self": _pthread_self, "_emscripten_set_main_loop": _emscripten_set_main_loop, "___syscall6": ___syscall6, "_emscripten_set_main_loop_timing": _emscripten_set_main_loop_timing, "_abort": _abort, "_sbrk": _sbrk, "_time": _time, "___setErrNo": ___setErrNo, "_emscripten_memcpy_big": _emscripten_memcpy_big, "___syscall54": ___syscall54, "___unlock": ___unlock, "___syscall140": ___syscall140, "_pthread_cleanup_push": _pthread_cleanup_push, "_sysconf": _sysconf, "___syscall146": ___syscall146, "_abs": _abs, "STACKTOP": STACKTOP, "STACK_MAX": STACK_MAX, "tempDoublePtr": tempDoublePtr, "ABORT": ABORT, "DYNAMICTOP": DYNAMICTOP, "cttz_i8": cttz_i8 };
// EMSCRIPTEN_START_ASM
var asm = (function(global, env, buffer) {
  'almost asm';
  
  
  var Int8View = global.Int8Array;
  var Int16View = global.Int16Array;
  var Int32View = global.Int32Array;
  var Uint8View = global.Uint8Array;
  var Uint16View = global.Uint16Array;
  var Uint32View = global.Uint32Array;
  var Float32View = global.Float32Array;
  var Float64View = global.Float64Array;
  var HEAP8 = new Int8View(buffer);
  var HEAP16 = new Int16View(buffer);
  var HEAP32 = new Int32View(buffer);
  var HEAPU8 = new Uint8View(buffer);
  var HEAPU16 = new Uint16View(buffer);
  var HEAPU32 = new Uint32View(buffer);
  var HEAPF32 = new Float32View(buffer);
  var HEAPF64 = new Float64View(buffer);
  var byteLength = global.byteLength;


  var STACKTOP=env.STACKTOP|0;
  var STACK_MAX=env.STACK_MAX|0;
  var tempDoublePtr=env.tempDoublePtr|0;
  var ABORT=env.ABORT|0;
  var DYNAMICTOP=env.DYNAMICTOP|0;
  var cttz_i8=env.cttz_i8|0;

  var __THREW__ = 0;
  var threwValue = 0;
  var setjmpId = 0;
  var undef = 0;
  var nan = global.NaN, inf = global.Infinity;
  var tempInt = 0, tempBigInt = 0, tempBigIntP = 0, tempBigIntS = 0, tempBigIntR = 0.0, tempBigIntI = 0, tempBigIntD = 0, tempValue = 0, tempDouble = 0.0;

  var tempRet0 = 0;
  var tempRet1 = 0;
  var tempRet2 = 0;
  var tempRet3 = 0;
  var tempRet4 = 0;
  var tempRet5 = 0;
  var tempRet6 = 0;
  var tempRet7 = 0;
  var tempRet8 = 0;
  var tempRet9 = 0;
  var Math_floor=global.Math.floor;
  var Math_abs=global.Math.abs;
  var Math_sqrt=global.Math.sqrt;
  var Math_pow=global.Math.pow;
  var Math_cos=global.Math.cos;
  var Math_sin=global.Math.sin;
  var Math_tan=global.Math.tan;
  var Math_acos=global.Math.acos;
  var Math_asin=global.Math.asin;
  var Math_atan=global.Math.atan;
  var Math_atan2=global.Math.atan2;
  var Math_exp=global.Math.exp;
  var Math_log=global.Math.log;
  var Math_ceil=global.Math.ceil;
  var Math_imul=global.Math.imul;
  var Math_min=global.Math.min;
  var Math_clz32=global.Math.clz32;
  var abort=env.abort;
  var assert=env.assert;
  var segfault=env.segfault;
  var alignfault=env.alignfault;
  var ftfault=env.ftfault;
  var nullFunc_iiii=env.nullFunc_iiii;
  var nullFunc_viiiii=env.nullFunc_viiiii;
  var nullFunc_vi=env.nullFunc_vi;
  var nullFunc_vii=env.nullFunc_vii;
  var nullFunc_iiiiiii=env.nullFunc_iiiiiii;
  var nullFunc_ii=env.nullFunc_ii;
  var nullFunc_viii=env.nullFunc_viii;
  var nullFunc_viiiiiiiii=env.nullFunc_viiiiiiiii;
  var nullFunc_viiiiii=env.nullFunc_viiiiii;
  var nullFunc_iii=env.nullFunc_iii;
  var nullFunc_viiii=env.nullFunc_viiii;
  var invoke_iiii=env.invoke_iiii;
  var invoke_viiiii=env.invoke_viiiii;
  var invoke_vi=env.invoke_vi;
  var invoke_vii=env.invoke_vii;
  var invoke_iiiiiii=env.invoke_iiiiiii;
  var invoke_ii=env.invoke_ii;
  var invoke_viii=env.invoke_viii;
  var invoke_viiiiiiiii=env.invoke_viiiiiiiii;
  var invoke_viiiiii=env.invoke_viiiiii;
  var invoke_iii=env.invoke_iii;
  var invoke_viiii=env.invoke_viiii;
  var _pthread_cleanup_pop=env._pthread_cleanup_pop;
  var ___lock=env.___lock;
  var ___assert_fail=env.___assert_fail;
  var _pthread_self=env._pthread_self;
  var _emscripten_set_main_loop=env._emscripten_set_main_loop;
  var ___syscall6=env.___syscall6;
  var _emscripten_set_main_loop_timing=env._emscripten_set_main_loop_timing;
  var _abort=env._abort;
  var _sbrk=env._sbrk;
  var _time=env._time;
  var ___setErrNo=env.___setErrNo;
  var _emscripten_memcpy_big=env._emscripten_memcpy_big;
  var ___syscall54=env.___syscall54;
  var ___unlock=env.___unlock;
  var ___syscall140=env.___syscall140;
  var _pthread_cleanup_push=env._pthread_cleanup_push;
  var _sysconf=env._sysconf;
  var ___syscall146=env.___syscall146;
  var _abs=env._abs;
  var tempFloat = 0.0;

function _emscripten_replace_memory(newBuffer) {
  if ((byteLength(newBuffer) & 0xffffff || byteLength(newBuffer) <= 0xffffff) || byteLength(newBuffer) > 0x80000000) return false;
  HEAP8 = new Int8View(newBuffer);
  HEAP16 = new Int16View(newBuffer);
  HEAP32 = new Int32View(newBuffer);
  HEAPU8 = new Uint8View(newBuffer);
  HEAPU16 = new Uint16View(newBuffer);
  HEAPU32 = new Uint32View(newBuffer);
  HEAPF32 = new Float32View(newBuffer);
  HEAPF64 = new Float64View(newBuffer);
  buffer = newBuffer;
  return true;
}

// EMSCRIPTEN_START_FUNCS

function _malloc($bytes) {
 $bytes = $bytes | 0;
 var $$3$i = 0, $$lcssa = 0, $$lcssa211 = 0, $$lcssa215 = 0, $$lcssa216 = 0, $$lcssa217 = 0, $$lcssa219 = 0, $$lcssa222 = 0, $$lcssa224 = 0, $$lcssa226 = 0, $$lcssa228 = 0, $$lcssa230 = 0, $$lcssa232 = 0, $$pre = 0, $$pre$i = 0, $$pre$i$i = 0, $$pre$i22$i = 0, $$pre$i25 = 0, $$pre$phi$i$iZ2D = 0, $$pre$phi$i23$iZ2D = 0;
 var $$pre$phi$i26Z2D = 0, $$pre$phi$iZ2D = 0, $$pre$phi58$i$iZ2D = 0, $$pre$phiZ2D = 0, $$pre105 = 0, $$pre106 = 0, $$pre14$i$i = 0, $$pre43$i = 0, $$pre56$i$i = 0, $$pre57$i$i = 0, $$pre8$i = 0, $$rsize$0$i = 0, $$rsize$3$i = 0, $$sum = 0, $$sum$i$i = 0, $$sum$i$i$i = 0, $$sum$i13$i = 0, $$sum$i14$i = 0, $$sum$i17$i = 0, $$sum$i19$i = 0;
 var $$sum$i2334 = 0, $$sum$i32 = 0, $$sum$i35 = 0, $$sum1 = 0, $$sum1$i = 0, $$sum1$i$i = 0, $$sum1$i15$i = 0, $$sum1$i20$i = 0, $$sum1$i24 = 0, $$sum10 = 0, $$sum10$i = 0, $$sum10$i$i = 0, $$sum11$i = 0, $$sum11$i$i = 0, $$sum1112 = 0, $$sum112$i = 0, $$sum113$i = 0, $$sum114$i = 0, $$sum115$i = 0, $$sum116$i = 0;
 var $$sum117$i = 0, $$sum118$i = 0, $$sum119$i = 0, $$sum12$i = 0, $$sum12$i$i = 0, $$sum120$i = 0, $$sum121$i = 0, $$sum122$i = 0, $$sum123$i = 0, $$sum124$i = 0, $$sum125$i = 0, $$sum13$i = 0, $$sum13$i$i = 0, $$sum14$i$i = 0, $$sum15$i = 0, $$sum15$i$i = 0, $$sum16$i = 0, $$sum16$i$i = 0, $$sum17$i = 0, $$sum17$i$i = 0;
 var $$sum18$i = 0, $$sum1819$i$i = 0, $$sum2 = 0, $$sum2$i = 0, $$sum2$i$i = 0, $$sum2$i$i$i = 0, $$sum2$i16$i = 0, $$sum2$i18$i = 0, $$sum2$i21$i = 0, $$sum20$i$i = 0, $$sum21$i$i = 0, $$sum22$i$i = 0, $$sum23$i$i = 0, $$sum24$i$i = 0, $$sum25$i$i = 0, $$sum27$i$i = 0, $$sum28$i$i = 0, $$sum29$i$i = 0, $$sum3$i = 0, $$sum3$i27 = 0;
 var $$sum30$i$i = 0, $$sum3132$i$i = 0, $$sum34$i$i = 0, $$sum3536$i$i = 0, $$sum3738$i$i = 0, $$sum39$i$i = 0, $$sum4 = 0, $$sum4$i = 0, $$sum4$i$i = 0, $$sum4$i28 = 0, $$sum40$i$i = 0, $$sum41$i$i = 0, $$sum42$i$i = 0, $$sum5$i = 0, $$sum5$i$i = 0, $$sum56 = 0, $$sum6$i = 0, $$sum67$i$i = 0, $$sum7$i = 0, $$sum8$i = 0;
 var $$sum9 = 0, $$sum9$i = 0, $$sum9$i$i = 0, $$tsize$1$i = 0, $$v$0$i = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $1000 = 0, $1001 = 0, $1002 = 0, $1003 = 0, $1004 = 0, $1005 = 0, $1006 = 0, $1007 = 0, $1008 = 0, $1009 = 0, $101 = 0;
 var $1010 = 0, $1011 = 0, $1012 = 0, $1013 = 0, $1014 = 0, $1015 = 0, $1016 = 0, $1017 = 0, $1018 = 0, $1019 = 0, $102 = 0, $1020 = 0, $1021 = 0, $1022 = 0, $1023 = 0, $1024 = 0, $1025 = 0, $1026 = 0, $1027 = 0, $1028 = 0;
 var $1029 = 0, $103 = 0, $1030 = 0, $1031 = 0, $1032 = 0, $1033 = 0, $1034 = 0, $1035 = 0, $1036 = 0, $1037 = 0, $1038 = 0, $1039 = 0, $104 = 0, $1040 = 0, $1041 = 0, $1042 = 0, $1043 = 0, $1044 = 0, $1045 = 0, $1046 = 0;
 var $1047 = 0, $1048 = 0, $1049 = 0, $105 = 0, $1050 = 0, $1051 = 0, $1052 = 0, $1053 = 0, $1054 = 0, $1055 = 0, $1056 = 0, $1057 = 0, $1058 = 0, $1059 = 0, $106 = 0, $1060 = 0, $1061 = 0, $1062 = 0, $1063 = 0, $1064 = 0;
 var $1065 = 0, $1066 = 0, $1067 = 0, $1068 = 0, $1069 = 0, $107 = 0, $1070 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0;
 var $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0;
 var $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0;
 var $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0;
 var $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0;
 var $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0;
 var $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0;
 var $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0;
 var $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0;
 var $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0;
 var $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0;
 var $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0;
 var $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0, $332 = 0, $333 = 0, $334 = 0, $335 = 0;
 var $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $344 = 0, $345 = 0, $346 = 0, $347 = 0, $348 = 0, $349 = 0, $35 = 0, $350 = 0, $351 = 0, $352 = 0, $353 = 0;
 var $354 = 0, $355 = 0, $356 = 0, $357 = 0, $358 = 0, $359 = 0, $36 = 0, $360 = 0, $361 = 0, $362 = 0, $363 = 0, $364 = 0, $365 = 0, $366 = 0, $367 = 0, $368 = 0, $369 = 0, $37 = 0, $370 = 0, $371 = 0;
 var $372 = 0, $373 = 0, $374 = 0, $375 = 0, $376 = 0, $377 = 0, $378 = 0, $379 = 0, $38 = 0, $380 = 0, $381 = 0, $382 = 0, $383 = 0, $384 = 0, $385 = 0, $386 = 0, $387 = 0, $388 = 0, $389 = 0, $39 = 0;
 var $390 = 0, $391 = 0, $392 = 0, $393 = 0, $394 = 0, $395 = 0, $396 = 0, $397 = 0, $398 = 0, $399 = 0, $4 = 0, $40 = 0, $400 = 0, $401 = 0, $402 = 0, $403 = 0, $404 = 0, $405 = 0, $406 = 0, $407 = 0;
 var $408 = 0, $409 = 0, $41 = 0, $410 = 0, $411 = 0, $412 = 0, $413 = 0, $414 = 0, $415 = 0, $416 = 0, $417 = 0, $418 = 0, $419 = 0, $42 = 0, $420 = 0, $421 = 0, $422 = 0, $423 = 0, $424 = 0, $425 = 0;
 var $426 = 0, $427 = 0, $428 = 0, $429 = 0, $43 = 0, $430 = 0, $431 = 0, $432 = 0, $433 = 0, $434 = 0, $435 = 0, $436 = 0, $437 = 0, $438 = 0, $439 = 0, $44 = 0, $440 = 0, $441 = 0, $442 = 0, $443 = 0;
 var $444 = 0, $445 = 0, $446 = 0, $447 = 0, $448 = 0, $449 = 0, $45 = 0, $450 = 0, $451 = 0, $452 = 0, $453 = 0, $454 = 0, $455 = 0, $456 = 0, $457 = 0, $458 = 0, $459 = 0, $46 = 0, $460 = 0, $461 = 0;
 var $462 = 0, $463 = 0, $464 = 0, $465 = 0, $466 = 0, $467 = 0, $468 = 0, $469 = 0, $47 = 0, $470 = 0, $471 = 0, $472 = 0, $473 = 0, $474 = 0, $475 = 0, $476 = 0, $477 = 0, $478 = 0, $479 = 0, $48 = 0;
 var $480 = 0, $481 = 0, $482 = 0, $483 = 0, $484 = 0, $485 = 0, $486 = 0, $487 = 0, $488 = 0, $489 = 0, $49 = 0, $490 = 0, $491 = 0, $492 = 0, $493 = 0, $494 = 0, $495 = 0, $496 = 0, $497 = 0, $498 = 0;
 var $499 = 0, $5 = 0, $50 = 0, $500 = 0, $501 = 0, $502 = 0, $503 = 0, $504 = 0, $505 = 0, $506 = 0, $507 = 0, $508 = 0, $509 = 0, $51 = 0, $510 = 0, $511 = 0, $512 = 0, $513 = 0, $514 = 0, $515 = 0;
 var $516 = 0, $517 = 0, $518 = 0, $519 = 0, $52 = 0, $520 = 0, $521 = 0, $522 = 0, $523 = 0, $524 = 0, $525 = 0, $526 = 0, $527 = 0, $528 = 0, $529 = 0, $53 = 0, $530 = 0, $531 = 0, $532 = 0, $533 = 0;
 var $534 = 0, $535 = 0, $536 = 0, $537 = 0, $538 = 0, $539 = 0, $54 = 0, $540 = 0, $541 = 0, $542 = 0, $543 = 0, $544 = 0, $545 = 0, $546 = 0, $547 = 0, $548 = 0, $549 = 0, $55 = 0, $550 = 0, $551 = 0;
 var $552 = 0, $553 = 0, $554 = 0, $555 = 0, $556 = 0, $557 = 0, $558 = 0, $559 = 0, $56 = 0, $560 = 0, $561 = 0, $562 = 0, $563 = 0, $564 = 0, $565 = 0, $566 = 0, $567 = 0, $568 = 0, $569 = 0, $57 = 0;
 var $570 = 0, $571 = 0, $572 = 0, $573 = 0, $574 = 0, $575 = 0, $576 = 0, $577 = 0, $578 = 0, $579 = 0, $58 = 0, $580 = 0, $581 = 0, $582 = 0, $583 = 0, $584 = 0, $585 = 0, $586 = 0, $587 = 0, $588 = 0;
 var $589 = 0, $59 = 0, $590 = 0, $591 = 0, $592 = 0, $593 = 0, $594 = 0, $595 = 0, $596 = 0, $597 = 0, $598 = 0, $599 = 0, $6 = 0, $60 = 0, $600 = 0, $601 = 0, $602 = 0, $603 = 0, $604 = 0, $605 = 0;
 var $606 = 0, $607 = 0, $608 = 0, $609 = 0, $61 = 0, $610 = 0, $611 = 0, $612 = 0, $613 = 0, $614 = 0, $615 = 0, $616 = 0, $617 = 0, $618 = 0, $619 = 0, $62 = 0, $620 = 0, $621 = 0, $622 = 0, $623 = 0;
 var $624 = 0, $625 = 0, $626 = 0, $627 = 0, $628 = 0, $629 = 0, $63 = 0, $630 = 0, $631 = 0, $632 = 0, $633 = 0, $634 = 0, $635 = 0, $636 = 0, $637 = 0, $638 = 0, $639 = 0, $64 = 0, $640 = 0, $641 = 0;
 var $642 = 0, $643 = 0, $644 = 0, $645 = 0, $646 = 0, $647 = 0, $648 = 0, $649 = 0, $65 = 0, $650 = 0, $651 = 0, $652 = 0, $653 = 0, $654 = 0, $655 = 0, $656 = 0, $657 = 0, $658 = 0, $659 = 0, $66 = 0;
 var $660 = 0, $661 = 0, $662 = 0, $663 = 0, $664 = 0, $665 = 0, $666 = 0, $667 = 0, $668 = 0, $669 = 0, $67 = 0, $670 = 0, $671 = 0, $672 = 0, $673 = 0, $674 = 0, $675 = 0, $676 = 0, $677 = 0, $678 = 0;
 var $679 = 0, $68 = 0, $680 = 0, $681 = 0, $682 = 0, $683 = 0, $684 = 0, $685 = 0, $686 = 0, $687 = 0, $688 = 0, $689 = 0, $69 = 0, $690 = 0, $691 = 0, $692 = 0, $693 = 0, $694 = 0, $695 = 0, $696 = 0;
 var $697 = 0, $698 = 0, $699 = 0, $7 = 0, $70 = 0, $700 = 0, $701 = 0, $702 = 0, $703 = 0, $704 = 0, $705 = 0, $706 = 0, $707 = 0, $708 = 0, $709 = 0, $71 = 0, $710 = 0, $711 = 0, $712 = 0, $713 = 0;
 var $714 = 0, $715 = 0, $716 = 0, $717 = 0, $718 = 0, $719 = 0, $72 = 0, $720 = 0, $721 = 0, $722 = 0, $723 = 0, $724 = 0, $725 = 0, $726 = 0, $727 = 0, $728 = 0, $729 = 0, $73 = 0, $730 = 0, $731 = 0;
 var $732 = 0, $733 = 0, $734 = 0, $735 = 0, $736 = 0, $737 = 0, $738 = 0, $739 = 0, $74 = 0, $740 = 0, $741 = 0, $742 = 0, $743 = 0, $744 = 0, $745 = 0, $746 = 0, $747 = 0, $748 = 0, $749 = 0, $75 = 0;
 var $750 = 0, $751 = 0, $752 = 0, $753 = 0, $754 = 0, $755 = 0, $756 = 0, $757 = 0, $758 = 0, $759 = 0, $76 = 0, $760 = 0, $761 = 0, $762 = 0, $763 = 0, $764 = 0, $765 = 0, $766 = 0, $767 = 0, $768 = 0;
 var $769 = 0, $77 = 0, $770 = 0, $771 = 0, $772 = 0, $773 = 0, $774 = 0, $775 = 0, $776 = 0, $777 = 0, $778 = 0, $779 = 0, $78 = 0, $780 = 0, $781 = 0, $782 = 0, $783 = 0, $784 = 0, $785 = 0, $786 = 0;
 var $787 = 0, $788 = 0, $789 = 0, $79 = 0, $790 = 0, $791 = 0, $792 = 0, $793 = 0, $794 = 0, $795 = 0, $796 = 0, $797 = 0, $798 = 0, $799 = 0, $8 = 0, $80 = 0, $800 = 0, $801 = 0, $802 = 0, $803 = 0;
 var $804 = 0, $805 = 0, $806 = 0, $807 = 0, $808 = 0, $809 = 0, $81 = 0, $810 = 0, $811 = 0, $812 = 0, $813 = 0, $814 = 0, $815 = 0, $816 = 0, $817 = 0, $818 = 0, $819 = 0, $82 = 0, $820 = 0, $821 = 0;
 var $822 = 0, $823 = 0, $824 = 0, $825 = 0, $826 = 0, $827 = 0, $828 = 0, $829 = 0, $83 = 0, $830 = 0, $831 = 0, $832 = 0, $833 = 0, $834 = 0, $835 = 0, $836 = 0, $837 = 0, $838 = 0, $839 = 0, $84 = 0;
 var $840 = 0, $841 = 0, $842 = 0, $843 = 0, $844 = 0, $845 = 0, $846 = 0, $847 = 0, $848 = 0, $849 = 0, $85 = 0, $850 = 0, $851 = 0, $852 = 0, $853 = 0, $854 = 0, $855 = 0, $856 = 0, $857 = 0, $858 = 0;
 var $859 = 0, $86 = 0, $860 = 0, $861 = 0, $862 = 0, $863 = 0, $864 = 0, $865 = 0, $866 = 0, $867 = 0, $868 = 0, $869 = 0, $87 = 0, $870 = 0, $871 = 0, $872 = 0, $873 = 0, $874 = 0, $875 = 0, $876 = 0;
 var $877 = 0, $878 = 0, $879 = 0, $88 = 0, $880 = 0, $881 = 0, $882 = 0, $883 = 0, $884 = 0, $885 = 0, $886 = 0, $887 = 0, $888 = 0, $889 = 0, $89 = 0, $890 = 0, $891 = 0, $892 = 0, $893 = 0, $894 = 0;
 var $895 = 0, $896 = 0, $897 = 0, $898 = 0, $899 = 0, $9 = 0, $90 = 0, $900 = 0, $901 = 0, $902 = 0, $903 = 0, $904 = 0, $905 = 0, $906 = 0, $907 = 0, $908 = 0, $909 = 0, $91 = 0, $910 = 0, $911 = 0;
 var $912 = 0, $913 = 0, $914 = 0, $915 = 0, $916 = 0, $917 = 0, $918 = 0, $919 = 0, $92 = 0, $920 = 0, $921 = 0, $922 = 0, $923 = 0, $924 = 0, $925 = 0, $926 = 0, $927 = 0, $928 = 0, $929 = 0, $93 = 0;
 var $930 = 0, $931 = 0, $932 = 0, $933 = 0, $934 = 0, $935 = 0, $936 = 0, $937 = 0, $938 = 0, $939 = 0, $94 = 0, $940 = 0, $941 = 0, $942 = 0, $943 = 0, $944 = 0, $945 = 0, $946 = 0, $947 = 0, $948 = 0;
 var $949 = 0, $95 = 0, $950 = 0, $951 = 0, $952 = 0, $953 = 0, $954 = 0, $955 = 0, $956 = 0, $957 = 0, $958 = 0, $959 = 0, $96 = 0, $960 = 0, $961 = 0, $962 = 0, $963 = 0, $964 = 0, $965 = 0, $966 = 0;
 var $967 = 0, $968 = 0, $969 = 0, $97 = 0, $970 = 0, $971 = 0, $972 = 0, $973 = 0, $974 = 0, $975 = 0, $976 = 0, $977 = 0, $978 = 0, $979 = 0, $98 = 0, $980 = 0, $981 = 0, $982 = 0, $983 = 0, $984 = 0;
 var $985 = 0, $986 = 0, $987 = 0, $988 = 0, $989 = 0, $99 = 0, $990 = 0, $991 = 0, $992 = 0, $993 = 0, $994 = 0, $995 = 0, $996 = 0, $997 = 0, $998 = 0, $999 = 0, $F$0$i$i = 0, $F1$0$i = 0, $F4$0 = 0, $F4$0$i$i = 0;
 var $F5$0$i = 0, $I1$0$i$i = 0, $I7$0$i = 0, $I7$0$i$i = 0, $K12$029$i = 0, $K2$07$i$i = 0, $K8$051$i$i = 0, $R$0$i = 0, $R$0$i$i = 0, $R$0$i$i$lcssa = 0, $R$0$i$lcssa = 0, $R$0$i18 = 0, $R$0$i18$lcssa = 0, $R$1$i = 0, $R$1$i$i = 0, $R$1$i20 = 0, $RP$0$i = 0, $RP$0$i$i = 0, $RP$0$i$i$lcssa = 0, $RP$0$i$lcssa = 0;
 var $RP$0$i17 = 0, $RP$0$i17$lcssa = 0, $T$0$lcssa$i = 0, $T$0$lcssa$i$i = 0, $T$0$lcssa$i25$i = 0, $T$028$i = 0, $T$028$i$lcssa = 0, $T$050$i$i = 0, $T$050$i$i$lcssa = 0, $T$06$i$i = 0, $T$06$i$i$lcssa = 0, $br$0$ph$i = 0, $cond$i = 0, $cond$i$i = 0, $cond$i21 = 0, $exitcond$i$i = 0, $i$02$i$i = 0, $idx$0$i = 0, $mem$0 = 0, $nb$0 = 0;
 var $not$$i = 0, $not$$i$i = 0, $not$$i26$i = 0, $oldfirst$0$i$i = 0, $or$cond$i = 0, $or$cond$i30 = 0, $or$cond1$i = 0, $or$cond19$i = 0, $or$cond2$i = 0, $or$cond3$i = 0, $or$cond5$i = 0, $or$cond57$i = 0, $or$cond6$i = 0, $or$cond8$i = 0, $or$cond9$i = 0, $qsize$0$i$i = 0, $rsize$0$i = 0, $rsize$0$i$lcssa = 0, $rsize$0$i15 = 0, $rsize$1$i = 0;
 var $rsize$2$i = 0, $rsize$3$lcssa$i = 0, $rsize$331$i = 0, $rst$0$i = 0, $rst$1$i = 0, $sizebits$0$i = 0, $sp$0$i$i = 0, $sp$0$i$i$i = 0, $sp$084$i = 0, $sp$084$i$lcssa = 0, $sp$183$i = 0, $sp$183$i$lcssa = 0, $ssize$0$$i = 0, $ssize$0$i = 0, $ssize$1$ph$i = 0, $ssize$2$i = 0, $t$0$i = 0, $t$0$i14 = 0, $t$1$i = 0, $t$2$ph$i = 0;
 var $t$2$v$3$i = 0, $t$230$i = 0, $tbase$255$i = 0, $tsize$0$ph$i = 0, $tsize$0323944$i = 0, $tsize$1$i = 0, $tsize$254$i = 0, $v$0$i = 0, $v$0$i$lcssa = 0, $v$0$i16 = 0, $v$1$i = 0, $v$2$i = 0, $v$3$lcssa$i = 0, $v$3$ph$i = 0, $v$332$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $bytes >>> 0 < 245;
 do {
  if ($0) {
   $1 = $bytes >>> 0 < 11;
   $2 = $bytes + 11 | 0;
   $3 = $2 & -8;
   $4 = $1 ? 16 : $3;
   $5 = $4 >>> 3;
   $6 = SAFE_HEAP_LOAD(1464 | 0, 4, 0) | 0 | 0;
   $7 = $6 >>> $5;
   $8 = $7 & 3;
   $9 = ($8 | 0) == 0;
   if (!$9) {
    $10 = $7 & 1;
    $11 = $10 ^ 1;
    $12 = $11 + $5 | 0;
    $13 = $12 << 1;
    $14 = 1504 + ($13 << 2) | 0;
    $$sum10 = $13 + 2 | 0;
    $15 = 1504 + ($$sum10 << 2) | 0;
    $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
    $17 = $16 + 8 | 0;
    $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
    $19 = ($14 | 0) == ($18 | 0);
    do {
     if ($19) {
      $20 = 1 << $12;
      $21 = $20 ^ -1;
      $22 = $6 & $21;
      SAFE_HEAP_STORE(1464 | 0, $22 | 0, 4);
     } else {
      $23 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
      $24 = $18 >>> 0 < $23 >>> 0;
      if ($24) {
       _abort();
      }
      $25 = $18 + 12 | 0;
      $26 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
      $27 = ($26 | 0) == ($16 | 0);
      if ($27) {
       SAFE_HEAP_STORE($25 | 0, $14 | 0, 4);
       SAFE_HEAP_STORE($15 | 0, $18 | 0, 4);
       break;
      } else {
       _abort();
      }
     }
    } while (0);
    $28 = $12 << 3;
    $29 = $28 | 3;
    $30 = $16 + 4 | 0;
    SAFE_HEAP_STORE($30 | 0, $29 | 0, 4);
    $$sum1112 = $28 | 4;
    $31 = $16 + $$sum1112 | 0;
    $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
    $33 = $32 | 1;
    SAFE_HEAP_STORE($31 | 0, $33 | 0, 4);
    $mem$0 = $17;
    return $mem$0 | 0;
   }
   $34 = SAFE_HEAP_LOAD(1472 | 0, 4, 0) | 0 | 0;
   $35 = $4 >>> 0 > $34 >>> 0;
   if ($35) {
    $36 = ($7 | 0) == 0;
    if (!$36) {
     $37 = $7 << $5;
     $38 = 2 << $5;
     $39 = 0 - $38 | 0;
     $40 = $38 | $39;
     $41 = $37 & $40;
     $42 = 0 - $41 | 0;
     $43 = $41 & $42;
     $44 = $43 + -1 | 0;
     $45 = $44 >>> 12;
     $46 = $45 & 16;
     $47 = $44 >>> $46;
     $48 = $47 >>> 5;
     $49 = $48 & 8;
     $50 = $49 | $46;
     $51 = $47 >>> $49;
     $52 = $51 >>> 2;
     $53 = $52 & 4;
     $54 = $50 | $53;
     $55 = $51 >>> $53;
     $56 = $55 >>> 1;
     $57 = $56 & 2;
     $58 = $54 | $57;
     $59 = $55 >>> $57;
     $60 = $59 >>> 1;
     $61 = $60 & 1;
     $62 = $58 | $61;
     $63 = $59 >>> $61;
     $64 = $62 + $63 | 0;
     $65 = $64 << 1;
     $66 = 1504 + ($65 << 2) | 0;
     $$sum4 = $65 + 2 | 0;
     $67 = 1504 + ($$sum4 << 2) | 0;
     $68 = SAFE_HEAP_LOAD($67 | 0, 4, 0) | 0 | 0;
     $69 = $68 + 8 | 0;
     $70 = SAFE_HEAP_LOAD($69 | 0, 4, 0) | 0 | 0;
     $71 = ($66 | 0) == ($70 | 0);
     do {
      if ($71) {
       $72 = 1 << $64;
       $73 = $72 ^ -1;
       $74 = $6 & $73;
       SAFE_HEAP_STORE(1464 | 0, $74 | 0, 4);
       $89 = $34;
      } else {
       $75 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
       $76 = $70 >>> 0 < $75 >>> 0;
       if ($76) {
        _abort();
       }
       $77 = $70 + 12 | 0;
       $78 = SAFE_HEAP_LOAD($77 | 0, 4, 0) | 0 | 0;
       $79 = ($78 | 0) == ($68 | 0);
       if ($79) {
        SAFE_HEAP_STORE($77 | 0, $66 | 0, 4);
        SAFE_HEAP_STORE($67 | 0, $70 | 0, 4);
        $$pre = SAFE_HEAP_LOAD(1472 | 0, 4, 0) | 0 | 0;
        $89 = $$pre;
        break;
       } else {
        _abort();
       }
      }
     } while (0);
     $80 = $64 << 3;
     $81 = $80 - $4 | 0;
     $82 = $4 | 3;
     $83 = $68 + 4 | 0;
     SAFE_HEAP_STORE($83 | 0, $82 | 0, 4);
     $84 = $68 + $4 | 0;
     $85 = $81 | 1;
     $$sum56 = $4 | 4;
     $86 = $68 + $$sum56 | 0;
     SAFE_HEAP_STORE($86 | 0, $85 | 0, 4);
     $87 = $68 + $80 | 0;
     SAFE_HEAP_STORE($87 | 0, $81 | 0, 4);
     $88 = ($89 | 0) == 0;
     if (!$88) {
      $90 = SAFE_HEAP_LOAD(1484 | 0, 4, 0) | 0 | 0;
      $91 = $89 >>> 3;
      $92 = $91 << 1;
      $93 = 1504 + ($92 << 2) | 0;
      $94 = SAFE_HEAP_LOAD(1464 | 0, 4, 0) | 0 | 0;
      $95 = 1 << $91;
      $96 = $94 & $95;
      $97 = ($96 | 0) == 0;
      if ($97) {
       $98 = $94 | $95;
       SAFE_HEAP_STORE(1464 | 0, $98 | 0, 4);
       $$pre105 = $92 + 2 | 0;
       $$pre106 = 1504 + ($$pre105 << 2) | 0;
       $$pre$phiZ2D = $$pre106;
       $F4$0 = $93;
      } else {
       $$sum9 = $92 + 2 | 0;
       $99 = 1504 + ($$sum9 << 2) | 0;
       $100 = SAFE_HEAP_LOAD($99 | 0, 4, 0) | 0 | 0;
       $101 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
       $102 = $100 >>> 0 < $101 >>> 0;
       if ($102) {
        _abort();
       } else {
        $$pre$phiZ2D = $99;
        $F4$0 = $100;
       }
      }
      SAFE_HEAP_STORE($$pre$phiZ2D | 0, $90 | 0, 4);
      $103 = $F4$0 + 12 | 0;
      SAFE_HEAP_STORE($103 | 0, $90 | 0, 4);
      $104 = $90 + 8 | 0;
      SAFE_HEAP_STORE($104 | 0, $F4$0 | 0, 4);
      $105 = $90 + 12 | 0;
      SAFE_HEAP_STORE($105 | 0, $93 | 0, 4);
     }
     SAFE_HEAP_STORE(1472 | 0, $81 | 0, 4);
     SAFE_HEAP_STORE(1484 | 0, $84 | 0, 4);
     $mem$0 = $69;
     return $mem$0 | 0;
    }
    $106 = SAFE_HEAP_LOAD(1468 | 0, 4, 0) | 0 | 0;
    $107 = ($106 | 0) == 0;
    if ($107) {
     $nb$0 = $4;
    } else {
     $108 = 0 - $106 | 0;
     $109 = $106 & $108;
     $110 = $109 + -1 | 0;
     $111 = $110 >>> 12;
     $112 = $111 & 16;
     $113 = $110 >>> $112;
     $114 = $113 >>> 5;
     $115 = $114 & 8;
     $116 = $115 | $112;
     $117 = $113 >>> $115;
     $118 = $117 >>> 2;
     $119 = $118 & 4;
     $120 = $116 | $119;
     $121 = $117 >>> $119;
     $122 = $121 >>> 1;
     $123 = $122 & 2;
     $124 = $120 | $123;
     $125 = $121 >>> $123;
     $126 = $125 >>> 1;
     $127 = $126 & 1;
     $128 = $124 | $127;
     $129 = $125 >>> $127;
     $130 = $128 + $129 | 0;
     $131 = 1768 + ($130 << 2) | 0;
     $132 = SAFE_HEAP_LOAD($131 | 0, 4, 0) | 0 | 0;
     $133 = $132 + 4 | 0;
     $134 = SAFE_HEAP_LOAD($133 | 0, 4, 0) | 0 | 0;
     $135 = $134 & -8;
     $136 = $135 - $4 | 0;
     $rsize$0$i = $136;
     $t$0$i = $132;
     $v$0$i = $132;
     while (1) {
      $137 = $t$0$i + 16 | 0;
      $138 = SAFE_HEAP_LOAD($137 | 0, 4, 0) | 0 | 0;
      $139 = ($138 | 0) == (0 | 0);
      if ($139) {
       $140 = $t$0$i + 20 | 0;
       $141 = SAFE_HEAP_LOAD($140 | 0, 4, 0) | 0 | 0;
       $142 = ($141 | 0) == (0 | 0);
       if ($142) {
        $rsize$0$i$lcssa = $rsize$0$i;
        $v$0$i$lcssa = $v$0$i;
        break;
       } else {
        $144 = $141;
       }
      } else {
       $144 = $138;
      }
      $143 = $144 + 4 | 0;
      $145 = SAFE_HEAP_LOAD($143 | 0, 4, 0) | 0 | 0;
      $146 = $145 & -8;
      $147 = $146 - $4 | 0;
      $148 = $147 >>> 0 < $rsize$0$i >>> 0;
      $$rsize$0$i = $148 ? $147 : $rsize$0$i;
      $$v$0$i = $148 ? $144 : $v$0$i;
      $rsize$0$i = $$rsize$0$i;
      $t$0$i = $144;
      $v$0$i = $$v$0$i;
     }
     $149 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
     $150 = $v$0$i$lcssa >>> 0 < $149 >>> 0;
     if ($150) {
      _abort();
     }
     $151 = $v$0$i$lcssa + $4 | 0;
     $152 = $v$0$i$lcssa >>> 0 < $151 >>> 0;
     if (!$152) {
      _abort();
     }
     $153 = $v$0$i$lcssa + 24 | 0;
     $154 = SAFE_HEAP_LOAD($153 | 0, 4, 0) | 0 | 0;
     $155 = $v$0$i$lcssa + 12 | 0;
     $156 = SAFE_HEAP_LOAD($155 | 0, 4, 0) | 0 | 0;
     $157 = ($156 | 0) == ($v$0$i$lcssa | 0);
     do {
      if ($157) {
       $167 = $v$0$i$lcssa + 20 | 0;
       $168 = SAFE_HEAP_LOAD($167 | 0, 4, 0) | 0 | 0;
       $169 = ($168 | 0) == (0 | 0);
       if ($169) {
        $170 = $v$0$i$lcssa + 16 | 0;
        $171 = SAFE_HEAP_LOAD($170 | 0, 4, 0) | 0 | 0;
        $172 = ($171 | 0) == (0 | 0);
        if ($172) {
         $R$1$i = 0;
         break;
        } else {
         $R$0$i = $171;
         $RP$0$i = $170;
        }
       } else {
        $R$0$i = $168;
        $RP$0$i = $167;
       }
       while (1) {
        $173 = $R$0$i + 20 | 0;
        $174 = SAFE_HEAP_LOAD($173 | 0, 4, 0) | 0 | 0;
        $175 = ($174 | 0) == (0 | 0);
        if (!$175) {
         $R$0$i = $174;
         $RP$0$i = $173;
         continue;
        }
        $176 = $R$0$i + 16 | 0;
        $177 = SAFE_HEAP_LOAD($176 | 0, 4, 0) | 0 | 0;
        $178 = ($177 | 0) == (0 | 0);
        if ($178) {
         $R$0$i$lcssa = $R$0$i;
         $RP$0$i$lcssa = $RP$0$i;
         break;
        } else {
         $R$0$i = $177;
         $RP$0$i = $176;
        }
       }
       $179 = $RP$0$i$lcssa >>> 0 < $149 >>> 0;
       if ($179) {
        _abort();
       } else {
        SAFE_HEAP_STORE($RP$0$i$lcssa | 0, 0 | 0, 4);
        $R$1$i = $R$0$i$lcssa;
        break;
       }
      } else {
       $158 = $v$0$i$lcssa + 8 | 0;
       $159 = SAFE_HEAP_LOAD($158 | 0, 4, 0) | 0 | 0;
       $160 = $159 >>> 0 < $149 >>> 0;
       if ($160) {
        _abort();
       }
       $161 = $159 + 12 | 0;
       $162 = SAFE_HEAP_LOAD($161 | 0, 4, 0) | 0 | 0;
       $163 = ($162 | 0) == ($v$0$i$lcssa | 0);
       if (!$163) {
        _abort();
       }
       $164 = $156 + 8 | 0;
       $165 = SAFE_HEAP_LOAD($164 | 0, 4, 0) | 0 | 0;
       $166 = ($165 | 0) == ($v$0$i$lcssa | 0);
       if ($166) {
        SAFE_HEAP_STORE($161 | 0, $156 | 0, 4);
        SAFE_HEAP_STORE($164 | 0, $159 | 0, 4);
        $R$1$i = $156;
        break;
       } else {
        _abort();
       }
      }
     } while (0);
     $180 = ($154 | 0) == (0 | 0);
     do {
      if (!$180) {
       $181 = $v$0$i$lcssa + 28 | 0;
       $182 = SAFE_HEAP_LOAD($181 | 0, 4, 0) | 0 | 0;
       $183 = 1768 + ($182 << 2) | 0;
       $184 = SAFE_HEAP_LOAD($183 | 0, 4, 0) | 0 | 0;
       $185 = ($v$0$i$lcssa | 0) == ($184 | 0);
       if ($185) {
        SAFE_HEAP_STORE($183 | 0, $R$1$i | 0, 4);
        $cond$i = ($R$1$i | 0) == (0 | 0);
        if ($cond$i) {
         $186 = 1 << $182;
         $187 = $186 ^ -1;
         $188 = SAFE_HEAP_LOAD(1468 | 0, 4, 0) | 0 | 0;
         $189 = $188 & $187;
         SAFE_HEAP_STORE(1468 | 0, $189 | 0, 4);
         break;
        }
       } else {
        $190 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
        $191 = $154 >>> 0 < $190 >>> 0;
        if ($191) {
         _abort();
        }
        $192 = $154 + 16 | 0;
        $193 = SAFE_HEAP_LOAD($192 | 0, 4, 0) | 0 | 0;
        $194 = ($193 | 0) == ($v$0$i$lcssa | 0);
        if ($194) {
         SAFE_HEAP_STORE($192 | 0, $R$1$i | 0, 4);
        } else {
         $195 = $154 + 20 | 0;
         SAFE_HEAP_STORE($195 | 0, $R$1$i | 0, 4);
        }
        $196 = ($R$1$i | 0) == (0 | 0);
        if ($196) {
         break;
        }
       }
       $197 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
       $198 = $R$1$i >>> 0 < $197 >>> 0;
       if ($198) {
        _abort();
       }
       $199 = $R$1$i + 24 | 0;
       SAFE_HEAP_STORE($199 | 0, $154 | 0, 4);
       $200 = $v$0$i$lcssa + 16 | 0;
       $201 = SAFE_HEAP_LOAD($200 | 0, 4, 0) | 0 | 0;
       $202 = ($201 | 0) == (0 | 0);
       do {
        if (!$202) {
         $203 = $201 >>> 0 < $197 >>> 0;
         if ($203) {
          _abort();
         } else {
          $204 = $R$1$i + 16 | 0;
          SAFE_HEAP_STORE($204 | 0, $201 | 0, 4);
          $205 = $201 + 24 | 0;
          SAFE_HEAP_STORE($205 | 0, $R$1$i | 0, 4);
          break;
         }
        }
       } while (0);
       $206 = $v$0$i$lcssa + 20 | 0;
       $207 = SAFE_HEAP_LOAD($206 | 0, 4, 0) | 0 | 0;
       $208 = ($207 | 0) == (0 | 0);
       if (!$208) {
        $209 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
        $210 = $207 >>> 0 < $209 >>> 0;
        if ($210) {
         _abort();
        } else {
         $211 = $R$1$i + 20 | 0;
         SAFE_HEAP_STORE($211 | 0, $207 | 0, 4);
         $212 = $207 + 24 | 0;
         SAFE_HEAP_STORE($212 | 0, $R$1$i | 0, 4);
         break;
        }
       }
      }
     } while (0);
     $213 = $rsize$0$i$lcssa >>> 0 < 16;
     if ($213) {
      $214 = $rsize$0$i$lcssa + $4 | 0;
      $215 = $214 | 3;
      $216 = $v$0$i$lcssa + 4 | 0;
      SAFE_HEAP_STORE($216 | 0, $215 | 0, 4);
      $$sum4$i = $214 + 4 | 0;
      $217 = $v$0$i$lcssa + $$sum4$i | 0;
      $218 = SAFE_HEAP_LOAD($217 | 0, 4, 0) | 0 | 0;
      $219 = $218 | 1;
      SAFE_HEAP_STORE($217 | 0, $219 | 0, 4);
     } else {
      $220 = $4 | 3;
      $221 = $v$0$i$lcssa + 4 | 0;
      SAFE_HEAP_STORE($221 | 0, $220 | 0, 4);
      $222 = $rsize$0$i$lcssa | 1;
      $$sum$i35 = $4 | 4;
      $223 = $v$0$i$lcssa + $$sum$i35 | 0;
      SAFE_HEAP_STORE($223 | 0, $222 | 0, 4);
      $$sum1$i = $rsize$0$i$lcssa + $4 | 0;
      $224 = $v$0$i$lcssa + $$sum1$i | 0;
      SAFE_HEAP_STORE($224 | 0, $rsize$0$i$lcssa | 0, 4);
      $225 = SAFE_HEAP_LOAD(1472 | 0, 4, 0) | 0 | 0;
      $226 = ($225 | 0) == 0;
      if (!$226) {
       $227 = SAFE_HEAP_LOAD(1484 | 0, 4, 0) | 0 | 0;
       $228 = $225 >>> 3;
       $229 = $228 << 1;
       $230 = 1504 + ($229 << 2) | 0;
       $231 = SAFE_HEAP_LOAD(1464 | 0, 4, 0) | 0 | 0;
       $232 = 1 << $228;
       $233 = $231 & $232;
       $234 = ($233 | 0) == 0;
       if ($234) {
        $235 = $231 | $232;
        SAFE_HEAP_STORE(1464 | 0, $235 | 0, 4);
        $$pre$i = $229 + 2 | 0;
        $$pre8$i = 1504 + ($$pre$i << 2) | 0;
        $$pre$phi$iZ2D = $$pre8$i;
        $F1$0$i = $230;
       } else {
        $$sum3$i = $229 + 2 | 0;
        $236 = 1504 + ($$sum3$i << 2) | 0;
        $237 = SAFE_HEAP_LOAD($236 | 0, 4, 0) | 0 | 0;
        $238 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
        $239 = $237 >>> 0 < $238 >>> 0;
        if ($239) {
         _abort();
        } else {
         $$pre$phi$iZ2D = $236;
         $F1$0$i = $237;
        }
       }
       SAFE_HEAP_STORE($$pre$phi$iZ2D | 0, $227 | 0, 4);
       $240 = $F1$0$i + 12 | 0;
       SAFE_HEAP_STORE($240 | 0, $227 | 0, 4);
       $241 = $227 + 8 | 0;
       SAFE_HEAP_STORE($241 | 0, $F1$0$i | 0, 4);
       $242 = $227 + 12 | 0;
       SAFE_HEAP_STORE($242 | 0, $230 | 0, 4);
      }
      SAFE_HEAP_STORE(1472 | 0, $rsize$0$i$lcssa | 0, 4);
      SAFE_HEAP_STORE(1484 | 0, $151 | 0, 4);
     }
     $243 = $v$0$i$lcssa + 8 | 0;
     $mem$0 = $243;
     return $mem$0 | 0;
    }
   } else {
    $nb$0 = $4;
   }
  } else {
   $244 = $bytes >>> 0 > 4294967231;
   if ($244) {
    $nb$0 = -1;
   } else {
    $245 = $bytes + 11 | 0;
    $246 = $245 & -8;
    $247 = SAFE_HEAP_LOAD(1468 | 0, 4, 0) | 0 | 0;
    $248 = ($247 | 0) == 0;
    if ($248) {
     $nb$0 = $246;
    } else {
     $249 = 0 - $246 | 0;
     $250 = $245 >>> 8;
     $251 = ($250 | 0) == 0;
     if ($251) {
      $idx$0$i = 0;
     } else {
      $252 = $246 >>> 0 > 16777215;
      if ($252) {
       $idx$0$i = 31;
      } else {
       $253 = $250 + 1048320 | 0;
       $254 = $253 >>> 16;
       $255 = $254 & 8;
       $256 = $250 << $255;
       $257 = $256 + 520192 | 0;
       $258 = $257 >>> 16;
       $259 = $258 & 4;
       $260 = $259 | $255;
       $261 = $256 << $259;
       $262 = $261 + 245760 | 0;
       $263 = $262 >>> 16;
       $264 = $263 & 2;
       $265 = $260 | $264;
       $266 = 14 - $265 | 0;
       $267 = $261 << $264;
       $268 = $267 >>> 15;
       $269 = $266 + $268 | 0;
       $270 = $269 << 1;
       $271 = $269 + 7 | 0;
       $272 = $246 >>> $271;
       $273 = $272 & 1;
       $274 = $273 | $270;
       $idx$0$i = $274;
      }
     }
     $275 = 1768 + ($idx$0$i << 2) | 0;
     $276 = SAFE_HEAP_LOAD($275 | 0, 4, 0) | 0 | 0;
     $277 = ($276 | 0) == (0 | 0);
     L123 : do {
      if ($277) {
       $rsize$2$i = $249;
       $t$1$i = 0;
       $v$2$i = 0;
       label = 86;
      } else {
       $278 = ($idx$0$i | 0) == 31;
       $279 = $idx$0$i >>> 1;
       $280 = 25 - $279 | 0;
       $281 = $278 ? 0 : $280;
       $282 = $246 << $281;
       $rsize$0$i15 = $249;
       $rst$0$i = 0;
       $sizebits$0$i = $282;
       $t$0$i14 = $276;
       $v$0$i16 = 0;
       while (1) {
        $283 = $t$0$i14 + 4 | 0;
        $284 = SAFE_HEAP_LOAD($283 | 0, 4, 0) | 0 | 0;
        $285 = $284 & -8;
        $286 = $285 - $246 | 0;
        $287 = $286 >>> 0 < $rsize$0$i15 >>> 0;
        if ($287) {
         $288 = ($285 | 0) == ($246 | 0);
         if ($288) {
          $rsize$331$i = $286;
          $t$230$i = $t$0$i14;
          $v$332$i = $t$0$i14;
          label = 90;
          break L123;
         } else {
          $rsize$1$i = $286;
          $v$1$i = $t$0$i14;
         }
        } else {
         $rsize$1$i = $rsize$0$i15;
         $v$1$i = $v$0$i16;
        }
        $289 = $t$0$i14 + 20 | 0;
        $290 = SAFE_HEAP_LOAD($289 | 0, 4, 0) | 0 | 0;
        $291 = $sizebits$0$i >>> 31;
        $292 = ($t$0$i14 + 16 | 0) + ($291 << 2) | 0;
        $293 = SAFE_HEAP_LOAD($292 | 0, 4, 0) | 0 | 0;
        $294 = ($290 | 0) == (0 | 0);
        $295 = ($290 | 0) == ($293 | 0);
        $or$cond19$i = $294 | $295;
        $rst$1$i = $or$cond19$i ? $rst$0$i : $290;
        $296 = ($293 | 0) == (0 | 0);
        $297 = $sizebits$0$i << 1;
        if ($296) {
         $rsize$2$i = $rsize$1$i;
         $t$1$i = $rst$1$i;
         $v$2$i = $v$1$i;
         label = 86;
         break;
        } else {
         $rsize$0$i15 = $rsize$1$i;
         $rst$0$i = $rst$1$i;
         $sizebits$0$i = $297;
         $t$0$i14 = $293;
         $v$0$i16 = $v$1$i;
        }
       }
      }
     } while (0);
     if ((label | 0) == 86) {
      $298 = ($t$1$i | 0) == (0 | 0);
      $299 = ($v$2$i | 0) == (0 | 0);
      $or$cond$i = $298 & $299;
      if ($or$cond$i) {
       $300 = 2 << $idx$0$i;
       $301 = 0 - $300 | 0;
       $302 = $300 | $301;
       $303 = $247 & $302;
       $304 = ($303 | 0) == 0;
       if ($304) {
        $nb$0 = $246;
        break;
       }
       $305 = 0 - $303 | 0;
       $306 = $303 & $305;
       $307 = $306 + -1 | 0;
       $308 = $307 >>> 12;
       $309 = $308 & 16;
       $310 = $307 >>> $309;
       $311 = $310 >>> 5;
       $312 = $311 & 8;
       $313 = $312 | $309;
       $314 = $310 >>> $312;
       $315 = $314 >>> 2;
       $316 = $315 & 4;
       $317 = $313 | $316;
       $318 = $314 >>> $316;
       $319 = $318 >>> 1;
       $320 = $319 & 2;
       $321 = $317 | $320;
       $322 = $318 >>> $320;
       $323 = $322 >>> 1;
       $324 = $323 & 1;
       $325 = $321 | $324;
       $326 = $322 >>> $324;
       $327 = $325 + $326 | 0;
       $328 = 1768 + ($327 << 2) | 0;
       $329 = SAFE_HEAP_LOAD($328 | 0, 4, 0) | 0 | 0;
       $t$2$ph$i = $329;
       $v$3$ph$i = 0;
      } else {
       $t$2$ph$i = $t$1$i;
       $v$3$ph$i = $v$2$i;
      }
      $330 = ($t$2$ph$i | 0) == (0 | 0);
      if ($330) {
       $rsize$3$lcssa$i = $rsize$2$i;
       $v$3$lcssa$i = $v$3$ph$i;
      } else {
       $rsize$331$i = $rsize$2$i;
       $t$230$i = $t$2$ph$i;
       $v$332$i = $v$3$ph$i;
       label = 90;
      }
     }
     if ((label | 0) == 90) {
      while (1) {
       label = 0;
       $331 = $t$230$i + 4 | 0;
       $332 = SAFE_HEAP_LOAD($331 | 0, 4, 0) | 0 | 0;
       $333 = $332 & -8;
       $334 = $333 - $246 | 0;
       $335 = $334 >>> 0 < $rsize$331$i >>> 0;
       $$rsize$3$i = $335 ? $334 : $rsize$331$i;
       $t$2$v$3$i = $335 ? $t$230$i : $v$332$i;
       $336 = $t$230$i + 16 | 0;
       $337 = SAFE_HEAP_LOAD($336 | 0, 4, 0) | 0 | 0;
       $338 = ($337 | 0) == (0 | 0);
       if (!$338) {
        $rsize$331$i = $$rsize$3$i;
        $t$230$i = $337;
        $v$332$i = $t$2$v$3$i;
        label = 90;
        continue;
       }
       $339 = $t$230$i + 20 | 0;
       $340 = SAFE_HEAP_LOAD($339 | 0, 4, 0) | 0 | 0;
       $341 = ($340 | 0) == (0 | 0);
       if ($341) {
        $rsize$3$lcssa$i = $$rsize$3$i;
        $v$3$lcssa$i = $t$2$v$3$i;
        break;
       } else {
        $rsize$331$i = $$rsize$3$i;
        $t$230$i = $340;
        $v$332$i = $t$2$v$3$i;
        label = 90;
       }
      }
     }
     $342 = ($v$3$lcssa$i | 0) == (0 | 0);
     if ($342) {
      $nb$0 = $246;
     } else {
      $343 = SAFE_HEAP_LOAD(1472 | 0, 4, 0) | 0 | 0;
      $344 = $343 - $246 | 0;
      $345 = $rsize$3$lcssa$i >>> 0 < $344 >>> 0;
      if ($345) {
       $346 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
       $347 = $v$3$lcssa$i >>> 0 < $346 >>> 0;
       if ($347) {
        _abort();
       }
       $348 = $v$3$lcssa$i + $246 | 0;
       $349 = $v$3$lcssa$i >>> 0 < $348 >>> 0;
       if (!$349) {
        _abort();
       }
       $350 = $v$3$lcssa$i + 24 | 0;
       $351 = SAFE_HEAP_LOAD($350 | 0, 4, 0) | 0 | 0;
       $352 = $v$3$lcssa$i + 12 | 0;
       $353 = SAFE_HEAP_LOAD($352 | 0, 4, 0) | 0 | 0;
       $354 = ($353 | 0) == ($v$3$lcssa$i | 0);
       do {
        if ($354) {
         $364 = $v$3$lcssa$i + 20 | 0;
         $365 = SAFE_HEAP_LOAD($364 | 0, 4, 0) | 0 | 0;
         $366 = ($365 | 0) == (0 | 0);
         if ($366) {
          $367 = $v$3$lcssa$i + 16 | 0;
          $368 = SAFE_HEAP_LOAD($367 | 0, 4, 0) | 0 | 0;
          $369 = ($368 | 0) == (0 | 0);
          if ($369) {
           $R$1$i20 = 0;
           break;
          } else {
           $R$0$i18 = $368;
           $RP$0$i17 = $367;
          }
         } else {
          $R$0$i18 = $365;
          $RP$0$i17 = $364;
         }
         while (1) {
          $370 = $R$0$i18 + 20 | 0;
          $371 = SAFE_HEAP_LOAD($370 | 0, 4, 0) | 0 | 0;
          $372 = ($371 | 0) == (0 | 0);
          if (!$372) {
           $R$0$i18 = $371;
           $RP$0$i17 = $370;
           continue;
          }
          $373 = $R$0$i18 + 16 | 0;
          $374 = SAFE_HEAP_LOAD($373 | 0, 4, 0) | 0 | 0;
          $375 = ($374 | 0) == (0 | 0);
          if ($375) {
           $R$0$i18$lcssa = $R$0$i18;
           $RP$0$i17$lcssa = $RP$0$i17;
           break;
          } else {
           $R$0$i18 = $374;
           $RP$0$i17 = $373;
          }
         }
         $376 = $RP$0$i17$lcssa >>> 0 < $346 >>> 0;
         if ($376) {
          _abort();
         } else {
          SAFE_HEAP_STORE($RP$0$i17$lcssa | 0, 0 | 0, 4);
          $R$1$i20 = $R$0$i18$lcssa;
          break;
         }
        } else {
         $355 = $v$3$lcssa$i + 8 | 0;
         $356 = SAFE_HEAP_LOAD($355 | 0, 4, 0) | 0 | 0;
         $357 = $356 >>> 0 < $346 >>> 0;
         if ($357) {
          _abort();
         }
         $358 = $356 + 12 | 0;
         $359 = SAFE_HEAP_LOAD($358 | 0, 4, 0) | 0 | 0;
         $360 = ($359 | 0) == ($v$3$lcssa$i | 0);
         if (!$360) {
          _abort();
         }
         $361 = $353 + 8 | 0;
         $362 = SAFE_HEAP_LOAD($361 | 0, 4, 0) | 0 | 0;
         $363 = ($362 | 0) == ($v$3$lcssa$i | 0);
         if ($363) {
          SAFE_HEAP_STORE($358 | 0, $353 | 0, 4);
          SAFE_HEAP_STORE($361 | 0, $356 | 0, 4);
          $R$1$i20 = $353;
          break;
         } else {
          _abort();
         }
        }
       } while (0);
       $377 = ($351 | 0) == (0 | 0);
       do {
        if (!$377) {
         $378 = $v$3$lcssa$i + 28 | 0;
         $379 = SAFE_HEAP_LOAD($378 | 0, 4, 0) | 0 | 0;
         $380 = 1768 + ($379 << 2) | 0;
         $381 = SAFE_HEAP_LOAD($380 | 0, 4, 0) | 0 | 0;
         $382 = ($v$3$lcssa$i | 0) == ($381 | 0);
         if ($382) {
          SAFE_HEAP_STORE($380 | 0, $R$1$i20 | 0, 4);
          $cond$i21 = ($R$1$i20 | 0) == (0 | 0);
          if ($cond$i21) {
           $383 = 1 << $379;
           $384 = $383 ^ -1;
           $385 = SAFE_HEAP_LOAD(1468 | 0, 4, 0) | 0 | 0;
           $386 = $385 & $384;
           SAFE_HEAP_STORE(1468 | 0, $386 | 0, 4);
           break;
          }
         } else {
          $387 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
          $388 = $351 >>> 0 < $387 >>> 0;
          if ($388) {
           _abort();
          }
          $389 = $351 + 16 | 0;
          $390 = SAFE_HEAP_LOAD($389 | 0, 4, 0) | 0 | 0;
          $391 = ($390 | 0) == ($v$3$lcssa$i | 0);
          if ($391) {
           SAFE_HEAP_STORE($389 | 0, $R$1$i20 | 0, 4);
          } else {
           $392 = $351 + 20 | 0;
           SAFE_HEAP_STORE($392 | 0, $R$1$i20 | 0, 4);
          }
          $393 = ($R$1$i20 | 0) == (0 | 0);
          if ($393) {
           break;
          }
         }
         $394 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
         $395 = $R$1$i20 >>> 0 < $394 >>> 0;
         if ($395) {
          _abort();
         }
         $396 = $R$1$i20 + 24 | 0;
         SAFE_HEAP_STORE($396 | 0, $351 | 0, 4);
         $397 = $v$3$lcssa$i + 16 | 0;
         $398 = SAFE_HEAP_LOAD($397 | 0, 4, 0) | 0 | 0;
         $399 = ($398 | 0) == (0 | 0);
         do {
          if (!$399) {
           $400 = $398 >>> 0 < $394 >>> 0;
           if ($400) {
            _abort();
           } else {
            $401 = $R$1$i20 + 16 | 0;
            SAFE_HEAP_STORE($401 | 0, $398 | 0, 4);
            $402 = $398 + 24 | 0;
            SAFE_HEAP_STORE($402 | 0, $R$1$i20 | 0, 4);
            break;
           }
          }
         } while (0);
         $403 = $v$3$lcssa$i + 20 | 0;
         $404 = SAFE_HEAP_LOAD($403 | 0, 4, 0) | 0 | 0;
         $405 = ($404 | 0) == (0 | 0);
         if (!$405) {
          $406 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
          $407 = $404 >>> 0 < $406 >>> 0;
          if ($407) {
           _abort();
          } else {
           $408 = $R$1$i20 + 20 | 0;
           SAFE_HEAP_STORE($408 | 0, $404 | 0, 4);
           $409 = $404 + 24 | 0;
           SAFE_HEAP_STORE($409 | 0, $R$1$i20 | 0, 4);
           break;
          }
         }
        }
       } while (0);
       $410 = $rsize$3$lcssa$i >>> 0 < 16;
       L199 : do {
        if ($410) {
         $411 = $rsize$3$lcssa$i + $246 | 0;
         $412 = $411 | 3;
         $413 = $v$3$lcssa$i + 4 | 0;
         SAFE_HEAP_STORE($413 | 0, $412 | 0, 4);
         $$sum18$i = $411 + 4 | 0;
         $414 = $v$3$lcssa$i + $$sum18$i | 0;
         $415 = SAFE_HEAP_LOAD($414 | 0, 4, 0) | 0 | 0;
         $416 = $415 | 1;
         SAFE_HEAP_STORE($414 | 0, $416 | 0, 4);
        } else {
         $417 = $246 | 3;
         $418 = $v$3$lcssa$i + 4 | 0;
         SAFE_HEAP_STORE($418 | 0, $417 | 0, 4);
         $419 = $rsize$3$lcssa$i | 1;
         $$sum$i2334 = $246 | 4;
         $420 = $v$3$lcssa$i + $$sum$i2334 | 0;
         SAFE_HEAP_STORE($420 | 0, $419 | 0, 4);
         $$sum1$i24 = $rsize$3$lcssa$i + $246 | 0;
         $421 = $v$3$lcssa$i + $$sum1$i24 | 0;
         SAFE_HEAP_STORE($421 | 0, $rsize$3$lcssa$i | 0, 4);
         $422 = $rsize$3$lcssa$i >>> 3;
         $423 = $rsize$3$lcssa$i >>> 0 < 256;
         if ($423) {
          $424 = $422 << 1;
          $425 = 1504 + ($424 << 2) | 0;
          $426 = SAFE_HEAP_LOAD(1464 | 0, 4, 0) | 0 | 0;
          $427 = 1 << $422;
          $428 = $426 & $427;
          $429 = ($428 | 0) == 0;
          if ($429) {
           $430 = $426 | $427;
           SAFE_HEAP_STORE(1464 | 0, $430 | 0, 4);
           $$pre$i25 = $424 + 2 | 0;
           $$pre43$i = 1504 + ($$pre$i25 << 2) | 0;
           $$pre$phi$i26Z2D = $$pre43$i;
           $F5$0$i = $425;
          } else {
           $$sum17$i = $424 + 2 | 0;
           $431 = 1504 + ($$sum17$i << 2) | 0;
           $432 = SAFE_HEAP_LOAD($431 | 0, 4, 0) | 0 | 0;
           $433 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
           $434 = $432 >>> 0 < $433 >>> 0;
           if ($434) {
            _abort();
           } else {
            $$pre$phi$i26Z2D = $431;
            $F5$0$i = $432;
           }
          }
          SAFE_HEAP_STORE($$pre$phi$i26Z2D | 0, $348 | 0, 4);
          $435 = $F5$0$i + 12 | 0;
          SAFE_HEAP_STORE($435 | 0, $348 | 0, 4);
          $$sum15$i = $246 + 8 | 0;
          $436 = $v$3$lcssa$i + $$sum15$i | 0;
          SAFE_HEAP_STORE($436 | 0, $F5$0$i | 0, 4);
          $$sum16$i = $246 + 12 | 0;
          $437 = $v$3$lcssa$i + $$sum16$i | 0;
          SAFE_HEAP_STORE($437 | 0, $425 | 0, 4);
          break;
         }
         $438 = $rsize$3$lcssa$i >>> 8;
         $439 = ($438 | 0) == 0;
         if ($439) {
          $I7$0$i = 0;
         } else {
          $440 = $rsize$3$lcssa$i >>> 0 > 16777215;
          if ($440) {
           $I7$0$i = 31;
          } else {
           $441 = $438 + 1048320 | 0;
           $442 = $441 >>> 16;
           $443 = $442 & 8;
           $444 = $438 << $443;
           $445 = $444 + 520192 | 0;
           $446 = $445 >>> 16;
           $447 = $446 & 4;
           $448 = $447 | $443;
           $449 = $444 << $447;
           $450 = $449 + 245760 | 0;
           $451 = $450 >>> 16;
           $452 = $451 & 2;
           $453 = $448 | $452;
           $454 = 14 - $453 | 0;
           $455 = $449 << $452;
           $456 = $455 >>> 15;
           $457 = $454 + $456 | 0;
           $458 = $457 << 1;
           $459 = $457 + 7 | 0;
           $460 = $rsize$3$lcssa$i >>> $459;
           $461 = $460 & 1;
           $462 = $461 | $458;
           $I7$0$i = $462;
          }
         }
         $463 = 1768 + ($I7$0$i << 2) | 0;
         $$sum2$i = $246 + 28 | 0;
         $464 = $v$3$lcssa$i + $$sum2$i | 0;
         SAFE_HEAP_STORE($464 | 0, $I7$0$i | 0, 4);
         $$sum3$i27 = $246 + 16 | 0;
         $465 = $v$3$lcssa$i + $$sum3$i27 | 0;
         $$sum4$i28 = $246 + 20 | 0;
         $466 = $v$3$lcssa$i + $$sum4$i28 | 0;
         SAFE_HEAP_STORE($466 | 0, 0 | 0, 4);
         SAFE_HEAP_STORE($465 | 0, 0 | 0, 4);
         $467 = SAFE_HEAP_LOAD(1468 | 0, 4, 0) | 0 | 0;
         $468 = 1 << $I7$0$i;
         $469 = $467 & $468;
         $470 = ($469 | 0) == 0;
         if ($470) {
          $471 = $467 | $468;
          SAFE_HEAP_STORE(1468 | 0, $471 | 0, 4);
          SAFE_HEAP_STORE($463 | 0, $348 | 0, 4);
          $$sum5$i = $246 + 24 | 0;
          $472 = $v$3$lcssa$i + $$sum5$i | 0;
          SAFE_HEAP_STORE($472 | 0, $463 | 0, 4);
          $$sum6$i = $246 + 12 | 0;
          $473 = $v$3$lcssa$i + $$sum6$i | 0;
          SAFE_HEAP_STORE($473 | 0, $348 | 0, 4);
          $$sum7$i = $246 + 8 | 0;
          $474 = $v$3$lcssa$i + $$sum7$i | 0;
          SAFE_HEAP_STORE($474 | 0, $348 | 0, 4);
          break;
         }
         $475 = SAFE_HEAP_LOAD($463 | 0, 4, 0) | 0 | 0;
         $476 = $475 + 4 | 0;
         $477 = SAFE_HEAP_LOAD($476 | 0, 4, 0) | 0 | 0;
         $478 = $477 & -8;
         $479 = ($478 | 0) == ($rsize$3$lcssa$i | 0);
         L217 : do {
          if ($479) {
           $T$0$lcssa$i = $475;
          } else {
           $480 = ($I7$0$i | 0) == 31;
           $481 = $I7$0$i >>> 1;
           $482 = 25 - $481 | 0;
           $483 = $480 ? 0 : $482;
           $484 = $rsize$3$lcssa$i << $483;
           $K12$029$i = $484;
           $T$028$i = $475;
           while (1) {
            $491 = $K12$029$i >>> 31;
            $492 = ($T$028$i + 16 | 0) + ($491 << 2) | 0;
            $487 = SAFE_HEAP_LOAD($492 | 0, 4, 0) | 0 | 0;
            $493 = ($487 | 0) == (0 | 0);
            if ($493) {
             $$lcssa232 = $492;
             $T$028$i$lcssa = $T$028$i;
             break;
            }
            $485 = $K12$029$i << 1;
            $486 = $487 + 4 | 0;
            $488 = SAFE_HEAP_LOAD($486 | 0, 4, 0) | 0 | 0;
            $489 = $488 & -8;
            $490 = ($489 | 0) == ($rsize$3$lcssa$i | 0);
            if ($490) {
             $T$0$lcssa$i = $487;
             break L217;
            } else {
             $K12$029$i = $485;
             $T$028$i = $487;
            }
           }
           $494 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
           $495 = $$lcssa232 >>> 0 < $494 >>> 0;
           if ($495) {
            _abort();
           } else {
            SAFE_HEAP_STORE($$lcssa232 | 0, $348 | 0, 4);
            $$sum11$i = $246 + 24 | 0;
            $496 = $v$3$lcssa$i + $$sum11$i | 0;
            SAFE_HEAP_STORE($496 | 0, $T$028$i$lcssa | 0, 4);
            $$sum12$i = $246 + 12 | 0;
            $497 = $v$3$lcssa$i + $$sum12$i | 0;
            SAFE_HEAP_STORE($497 | 0, $348 | 0, 4);
            $$sum13$i = $246 + 8 | 0;
            $498 = $v$3$lcssa$i + $$sum13$i | 0;
            SAFE_HEAP_STORE($498 | 0, $348 | 0, 4);
            break L199;
           }
          }
         } while (0);
         $499 = $T$0$lcssa$i + 8 | 0;
         $500 = SAFE_HEAP_LOAD($499 | 0, 4, 0) | 0 | 0;
         $501 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
         $502 = $500 >>> 0 >= $501 >>> 0;
         $not$$i = $T$0$lcssa$i >>> 0 >= $501 >>> 0;
         $503 = $502 & $not$$i;
         if ($503) {
          $504 = $500 + 12 | 0;
          SAFE_HEAP_STORE($504 | 0, $348 | 0, 4);
          SAFE_HEAP_STORE($499 | 0, $348 | 0, 4);
          $$sum8$i = $246 + 8 | 0;
          $505 = $v$3$lcssa$i + $$sum8$i | 0;
          SAFE_HEAP_STORE($505 | 0, $500 | 0, 4);
          $$sum9$i = $246 + 12 | 0;
          $506 = $v$3$lcssa$i + $$sum9$i | 0;
          SAFE_HEAP_STORE($506 | 0, $T$0$lcssa$i | 0, 4);
          $$sum10$i = $246 + 24 | 0;
          $507 = $v$3$lcssa$i + $$sum10$i | 0;
          SAFE_HEAP_STORE($507 | 0, 0 | 0, 4);
          break;
         } else {
          _abort();
         }
        }
       } while (0);
       $508 = $v$3$lcssa$i + 8 | 0;
       $mem$0 = $508;
       return $mem$0 | 0;
      } else {
       $nb$0 = $246;
      }
     }
    }
   }
  }
 } while (0);
 $509 = SAFE_HEAP_LOAD(1472 | 0, 4, 0) | 0 | 0;
 $510 = $509 >>> 0 < $nb$0 >>> 0;
 if (!$510) {
  $511 = $509 - $nb$0 | 0;
  $512 = SAFE_HEAP_LOAD(1484 | 0, 4, 0) | 0 | 0;
  $513 = $511 >>> 0 > 15;
  if ($513) {
   $514 = $512 + $nb$0 | 0;
   SAFE_HEAP_STORE(1484 | 0, $514 | 0, 4);
   SAFE_HEAP_STORE(1472 | 0, $511 | 0, 4);
   $515 = $511 | 1;
   $$sum2 = $nb$0 + 4 | 0;
   $516 = $512 + $$sum2 | 0;
   SAFE_HEAP_STORE($516 | 0, $515 | 0, 4);
   $517 = $512 + $509 | 0;
   SAFE_HEAP_STORE($517 | 0, $511 | 0, 4);
   $518 = $nb$0 | 3;
   $519 = $512 + 4 | 0;
   SAFE_HEAP_STORE($519 | 0, $518 | 0, 4);
  } else {
   SAFE_HEAP_STORE(1472 | 0, 0 | 0, 4);
   SAFE_HEAP_STORE(1484 | 0, 0 | 0, 4);
   $520 = $509 | 3;
   $521 = $512 + 4 | 0;
   SAFE_HEAP_STORE($521 | 0, $520 | 0, 4);
   $$sum1 = $509 + 4 | 0;
   $522 = $512 + $$sum1 | 0;
   $523 = SAFE_HEAP_LOAD($522 | 0, 4, 0) | 0 | 0;
   $524 = $523 | 1;
   SAFE_HEAP_STORE($522 | 0, $524 | 0, 4);
  }
  $525 = $512 + 8 | 0;
  $mem$0 = $525;
  return $mem$0 | 0;
 }
 $526 = SAFE_HEAP_LOAD(1476 | 0, 4, 0) | 0 | 0;
 $527 = $526 >>> 0 > $nb$0 >>> 0;
 if ($527) {
  $528 = $526 - $nb$0 | 0;
  SAFE_HEAP_STORE(1476 | 0, $528 | 0, 4);
  $529 = SAFE_HEAP_LOAD(1488 | 0, 4, 0) | 0 | 0;
  $530 = $529 + $nb$0 | 0;
  SAFE_HEAP_STORE(1488 | 0, $530 | 0, 4);
  $531 = $528 | 1;
  $$sum = $nb$0 + 4 | 0;
  $532 = $529 + $$sum | 0;
  SAFE_HEAP_STORE($532 | 0, $531 | 0, 4);
  $533 = $nb$0 | 3;
  $534 = $529 + 4 | 0;
  SAFE_HEAP_STORE($534 | 0, $533 | 0, 4);
  $535 = $529 + 8 | 0;
  $mem$0 = $535;
  return $mem$0 | 0;
 }
 $536 = SAFE_HEAP_LOAD(1936 | 0, 4, 0) | 0 | 0;
 $537 = ($536 | 0) == 0;
 do {
  if ($537) {
   $538 = _sysconf(30) | 0;
   $539 = $538 + -1 | 0;
   $540 = $539 & $538;
   $541 = ($540 | 0) == 0;
   if ($541) {
    SAFE_HEAP_STORE(1944 | 0, $538 | 0, 4);
    SAFE_HEAP_STORE(1940 | 0, $538 | 0, 4);
    SAFE_HEAP_STORE(1948 | 0, -1 | 0, 4);
    SAFE_HEAP_STORE(1952 | 0, -1 | 0, 4);
    SAFE_HEAP_STORE(1956 | 0, 0 | 0, 4);
    SAFE_HEAP_STORE(1908 | 0, 0 | 0, 4);
    $542 = _time(0 | 0) | 0;
    $543 = $542 & -16;
    $544 = $543 ^ 1431655768;
    SAFE_HEAP_STORE(1936 | 0, $544 | 0, 4);
    break;
   } else {
    _abort();
   }
  }
 } while (0);
 $545 = $nb$0 + 48 | 0;
 $546 = SAFE_HEAP_LOAD(1944 | 0, 4, 0) | 0 | 0;
 $547 = $nb$0 + 47 | 0;
 $548 = $546 + $547 | 0;
 $549 = 0 - $546 | 0;
 $550 = $548 & $549;
 $551 = $550 >>> 0 > $nb$0 >>> 0;
 if (!$551) {
  $mem$0 = 0;
  return $mem$0 | 0;
 }
 $552 = SAFE_HEAP_LOAD(1904 | 0, 4, 0) | 0 | 0;
 $553 = ($552 | 0) == 0;
 if (!$553) {
  $554 = SAFE_HEAP_LOAD(1896 | 0, 4, 0) | 0 | 0;
  $555 = $554 + $550 | 0;
  $556 = $555 >>> 0 <= $554 >>> 0;
  $557 = $555 >>> 0 > $552 >>> 0;
  $or$cond1$i = $556 | $557;
  if ($or$cond1$i) {
   $mem$0 = 0;
   return $mem$0 | 0;
  }
 }
 $558 = SAFE_HEAP_LOAD(1908 | 0, 4, 0) | 0 | 0;
 $559 = $558 & 4;
 $560 = ($559 | 0) == 0;
 L258 : do {
  if ($560) {
   $561 = SAFE_HEAP_LOAD(1488 | 0, 4, 0) | 0 | 0;
   $562 = ($561 | 0) == (0 | 0);
   L260 : do {
    if ($562) {
     label = 174;
    } else {
     $sp$0$i$i = 1912;
     while (1) {
      $563 = SAFE_HEAP_LOAD($sp$0$i$i | 0, 4, 0) | 0 | 0;
      $564 = $563 >>> 0 > $561 >>> 0;
      if (!$564) {
       $565 = $sp$0$i$i + 4 | 0;
       $566 = SAFE_HEAP_LOAD($565 | 0, 4, 0) | 0 | 0;
       $567 = $563 + $566 | 0;
       $568 = $567 >>> 0 > $561 >>> 0;
       if ($568) {
        $$lcssa228 = $sp$0$i$i;
        $$lcssa230 = $565;
        break;
       }
      }
      $569 = $sp$0$i$i + 8 | 0;
      $570 = SAFE_HEAP_LOAD($569 | 0, 4, 0) | 0 | 0;
      $571 = ($570 | 0) == (0 | 0);
      if ($571) {
       label = 174;
       break L260;
      } else {
       $sp$0$i$i = $570;
      }
     }
     $594 = SAFE_HEAP_LOAD(1476 | 0, 4, 0) | 0 | 0;
     $595 = $548 - $594 | 0;
     $596 = $595 & $549;
     $597 = $596 >>> 0 < 2147483647;
     if ($597) {
      $598 = _sbrk($596 | 0) | 0;
      $599 = SAFE_HEAP_LOAD($$lcssa228 | 0, 4, 0) | 0 | 0;
      $600 = SAFE_HEAP_LOAD($$lcssa230 | 0, 4, 0) | 0 | 0;
      $601 = $599 + $600 | 0;
      $602 = ($598 | 0) == ($601 | 0);
      $$3$i = $602 ? $596 : 0;
      if ($602) {
       $603 = ($598 | 0) == (-1 | 0);
       if ($603) {
        $tsize$0323944$i = $$3$i;
       } else {
        $tbase$255$i = $598;
        $tsize$254$i = $$3$i;
        label = 194;
        break L258;
       }
      } else {
       $br$0$ph$i = $598;
       $ssize$1$ph$i = $596;
       $tsize$0$ph$i = $$3$i;
       label = 184;
      }
     } else {
      $tsize$0323944$i = 0;
     }
    }
   } while (0);
   do {
    if ((label | 0) == 174) {
     $572 = _sbrk(0) | 0;
     $573 = ($572 | 0) == (-1 | 0);
     if ($573) {
      $tsize$0323944$i = 0;
     } else {
      $574 = $572;
      $575 = SAFE_HEAP_LOAD(1940 | 0, 4, 0) | 0 | 0;
      $576 = $575 + -1 | 0;
      $577 = $576 & $574;
      $578 = ($577 | 0) == 0;
      if ($578) {
       $ssize$0$i = $550;
      } else {
       $579 = $576 + $574 | 0;
       $580 = 0 - $575 | 0;
       $581 = $579 & $580;
       $582 = $550 - $574 | 0;
       $583 = $582 + $581 | 0;
       $ssize$0$i = $583;
      }
      $584 = SAFE_HEAP_LOAD(1896 | 0, 4, 0) | 0 | 0;
      $585 = $584 + $ssize$0$i | 0;
      $586 = $ssize$0$i >>> 0 > $nb$0 >>> 0;
      $587 = $ssize$0$i >>> 0 < 2147483647;
      $or$cond$i30 = $586 & $587;
      if ($or$cond$i30) {
       $588 = SAFE_HEAP_LOAD(1904 | 0, 4, 0) | 0 | 0;
       $589 = ($588 | 0) == 0;
       if (!$589) {
        $590 = $585 >>> 0 <= $584 >>> 0;
        $591 = $585 >>> 0 > $588 >>> 0;
        $or$cond2$i = $590 | $591;
        if ($or$cond2$i) {
         $tsize$0323944$i = 0;
         break;
        }
       }
       $592 = _sbrk($ssize$0$i | 0) | 0;
       $593 = ($592 | 0) == ($572 | 0);
       $ssize$0$$i = $593 ? $ssize$0$i : 0;
       if ($593) {
        $tbase$255$i = $572;
        $tsize$254$i = $ssize$0$$i;
        label = 194;
        break L258;
       } else {
        $br$0$ph$i = $592;
        $ssize$1$ph$i = $ssize$0$i;
        $tsize$0$ph$i = $ssize$0$$i;
        label = 184;
       }
      } else {
       $tsize$0323944$i = 0;
      }
     }
    }
   } while (0);
   L280 : do {
    if ((label | 0) == 184) {
     $604 = 0 - $ssize$1$ph$i | 0;
     $605 = ($br$0$ph$i | 0) != (-1 | 0);
     $606 = $ssize$1$ph$i >>> 0 < 2147483647;
     $or$cond5$i = $606 & $605;
     $607 = $545 >>> 0 > $ssize$1$ph$i >>> 0;
     $or$cond6$i = $607 & $or$cond5$i;
     do {
      if ($or$cond6$i) {
       $608 = SAFE_HEAP_LOAD(1944 | 0, 4, 0) | 0 | 0;
       $609 = $547 - $ssize$1$ph$i | 0;
       $610 = $609 + $608 | 0;
       $611 = 0 - $608 | 0;
       $612 = $610 & $611;
       $613 = $612 >>> 0 < 2147483647;
       if ($613) {
        $614 = _sbrk($612 | 0) | 0;
        $615 = ($614 | 0) == (-1 | 0);
        if ($615) {
         _sbrk($604 | 0) | 0;
         $tsize$0323944$i = $tsize$0$ph$i;
         break L280;
        } else {
         $616 = $612 + $ssize$1$ph$i | 0;
         $ssize$2$i = $616;
         break;
        }
       } else {
        $ssize$2$i = $ssize$1$ph$i;
       }
      } else {
       $ssize$2$i = $ssize$1$ph$i;
      }
     } while (0);
     $617 = ($br$0$ph$i | 0) == (-1 | 0);
     if ($617) {
      $tsize$0323944$i = $tsize$0$ph$i;
     } else {
      $tbase$255$i = $br$0$ph$i;
      $tsize$254$i = $ssize$2$i;
      label = 194;
      break L258;
     }
    }
   } while (0);
   $618 = SAFE_HEAP_LOAD(1908 | 0, 4, 0) | 0 | 0;
   $619 = $618 | 4;
   SAFE_HEAP_STORE(1908 | 0, $619 | 0, 4);
   $tsize$1$i = $tsize$0323944$i;
   label = 191;
  } else {
   $tsize$1$i = 0;
   label = 191;
  }
 } while (0);
 if ((label | 0) == 191) {
  $620 = $550 >>> 0 < 2147483647;
  if ($620) {
   $621 = _sbrk($550 | 0) | 0;
   $622 = _sbrk(0) | 0;
   $623 = ($621 | 0) != (-1 | 0);
   $624 = ($622 | 0) != (-1 | 0);
   $or$cond3$i = $623 & $624;
   $625 = $621 >>> 0 < $622 >>> 0;
   $or$cond8$i = $625 & $or$cond3$i;
   if ($or$cond8$i) {
    $626 = $622;
    $627 = $621;
    $628 = $626 - $627 | 0;
    $629 = $nb$0 + 40 | 0;
    $630 = $628 >>> 0 > $629 >>> 0;
    $$tsize$1$i = $630 ? $628 : $tsize$1$i;
    if ($630) {
     $tbase$255$i = $621;
     $tsize$254$i = $$tsize$1$i;
     label = 194;
    }
   }
  }
 }
 if ((label | 0) == 194) {
  $631 = SAFE_HEAP_LOAD(1896 | 0, 4, 0) | 0 | 0;
  $632 = $631 + $tsize$254$i | 0;
  SAFE_HEAP_STORE(1896 | 0, $632 | 0, 4);
  $633 = SAFE_HEAP_LOAD(1900 | 0, 4, 0) | 0 | 0;
  $634 = $632 >>> 0 > $633 >>> 0;
  if ($634) {
   SAFE_HEAP_STORE(1900 | 0, $632 | 0, 4);
  }
  $635 = SAFE_HEAP_LOAD(1488 | 0, 4, 0) | 0 | 0;
  $636 = ($635 | 0) == (0 | 0);
  L299 : do {
   if ($636) {
    $637 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
    $638 = ($637 | 0) == (0 | 0);
    $639 = $tbase$255$i >>> 0 < $637 >>> 0;
    $or$cond9$i = $638 | $639;
    if ($or$cond9$i) {
     SAFE_HEAP_STORE(1480 | 0, $tbase$255$i | 0, 4);
    }
    SAFE_HEAP_STORE(1912 | 0, $tbase$255$i | 0, 4);
    SAFE_HEAP_STORE(1916 | 0, $tsize$254$i | 0, 4);
    SAFE_HEAP_STORE(1924 | 0, 0 | 0, 4);
    $640 = SAFE_HEAP_LOAD(1936 | 0, 4, 0) | 0 | 0;
    SAFE_HEAP_STORE(1500 | 0, $640 | 0, 4);
    SAFE_HEAP_STORE(1496 | 0, -1 | 0, 4);
    $i$02$i$i = 0;
    while (1) {
     $641 = $i$02$i$i << 1;
     $642 = 1504 + ($641 << 2) | 0;
     $$sum$i$i = $641 + 3 | 0;
     $643 = 1504 + ($$sum$i$i << 2) | 0;
     SAFE_HEAP_STORE($643 | 0, $642 | 0, 4);
     $$sum1$i$i = $641 + 2 | 0;
     $644 = 1504 + ($$sum1$i$i << 2) | 0;
     SAFE_HEAP_STORE($644 | 0, $642 | 0, 4);
     $645 = $i$02$i$i + 1 | 0;
     $exitcond$i$i = ($645 | 0) == 32;
     if ($exitcond$i$i) {
      break;
     } else {
      $i$02$i$i = $645;
     }
    }
    $646 = $tsize$254$i + -40 | 0;
    $647 = $tbase$255$i + 8 | 0;
    $648 = $647;
    $649 = $648 & 7;
    $650 = ($649 | 0) == 0;
    $651 = 0 - $648 | 0;
    $652 = $651 & 7;
    $653 = $650 ? 0 : $652;
    $654 = $tbase$255$i + $653 | 0;
    $655 = $646 - $653 | 0;
    SAFE_HEAP_STORE(1488 | 0, $654 | 0, 4);
    SAFE_HEAP_STORE(1476 | 0, $655 | 0, 4);
    $656 = $655 | 1;
    $$sum$i13$i = $653 + 4 | 0;
    $657 = $tbase$255$i + $$sum$i13$i | 0;
    SAFE_HEAP_STORE($657 | 0, $656 | 0, 4);
    $$sum2$i$i = $tsize$254$i + -36 | 0;
    $658 = $tbase$255$i + $$sum2$i$i | 0;
    SAFE_HEAP_STORE($658 | 0, 40 | 0, 4);
    $659 = SAFE_HEAP_LOAD(1952 | 0, 4, 0) | 0 | 0;
    SAFE_HEAP_STORE(1492 | 0, $659 | 0, 4);
   } else {
    $sp$084$i = 1912;
    while (1) {
     $660 = SAFE_HEAP_LOAD($sp$084$i | 0, 4, 0) | 0 | 0;
     $661 = $sp$084$i + 4 | 0;
     $662 = SAFE_HEAP_LOAD($661 | 0, 4, 0) | 0 | 0;
     $663 = $660 + $662 | 0;
     $664 = ($tbase$255$i | 0) == ($663 | 0);
     if ($664) {
      $$lcssa222 = $660;
      $$lcssa224 = $661;
      $$lcssa226 = $662;
      $sp$084$i$lcssa = $sp$084$i;
      label = 204;
      break;
     }
     $665 = $sp$084$i + 8 | 0;
     $666 = SAFE_HEAP_LOAD($665 | 0, 4, 0) | 0 | 0;
     $667 = ($666 | 0) == (0 | 0);
     if ($667) {
      break;
     } else {
      $sp$084$i = $666;
     }
    }
    if ((label | 0) == 204) {
     $668 = $sp$084$i$lcssa + 12 | 0;
     $669 = SAFE_HEAP_LOAD($668 | 0, 4, 0) | 0 | 0;
     $670 = $669 & 8;
     $671 = ($670 | 0) == 0;
     if ($671) {
      $672 = $635 >>> 0 >= $$lcssa222 >>> 0;
      $673 = $635 >>> 0 < $tbase$255$i >>> 0;
      $or$cond57$i = $673 & $672;
      if ($or$cond57$i) {
       $674 = $$lcssa226 + $tsize$254$i | 0;
       SAFE_HEAP_STORE($$lcssa224 | 0, $674 | 0, 4);
       $675 = SAFE_HEAP_LOAD(1476 | 0, 4, 0) | 0 | 0;
       $676 = $675 + $tsize$254$i | 0;
       $677 = $635 + 8 | 0;
       $678 = $677;
       $679 = $678 & 7;
       $680 = ($679 | 0) == 0;
       $681 = 0 - $678 | 0;
       $682 = $681 & 7;
       $683 = $680 ? 0 : $682;
       $684 = $635 + $683 | 0;
       $685 = $676 - $683 | 0;
       SAFE_HEAP_STORE(1488 | 0, $684 | 0, 4);
       SAFE_HEAP_STORE(1476 | 0, $685 | 0, 4);
       $686 = $685 | 1;
       $$sum$i17$i = $683 + 4 | 0;
       $687 = $635 + $$sum$i17$i | 0;
       SAFE_HEAP_STORE($687 | 0, $686 | 0, 4);
       $$sum2$i18$i = $676 + 4 | 0;
       $688 = $635 + $$sum2$i18$i | 0;
       SAFE_HEAP_STORE($688 | 0, 40 | 0, 4);
       $689 = SAFE_HEAP_LOAD(1952 | 0, 4, 0) | 0 | 0;
       SAFE_HEAP_STORE(1492 | 0, $689 | 0, 4);
       break;
      }
     }
    }
    $690 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
    $691 = $tbase$255$i >>> 0 < $690 >>> 0;
    if ($691) {
     SAFE_HEAP_STORE(1480 | 0, $tbase$255$i | 0, 4);
     $755 = $tbase$255$i;
    } else {
     $755 = $690;
    }
    $692 = $tbase$255$i + $tsize$254$i | 0;
    $sp$183$i = 1912;
    while (1) {
     $693 = SAFE_HEAP_LOAD($sp$183$i | 0, 4, 0) | 0 | 0;
     $694 = ($693 | 0) == ($692 | 0);
     if ($694) {
      $$lcssa219 = $sp$183$i;
      $sp$183$i$lcssa = $sp$183$i;
      label = 212;
      break;
     }
     $695 = $sp$183$i + 8 | 0;
     $696 = SAFE_HEAP_LOAD($695 | 0, 4, 0) | 0 | 0;
     $697 = ($696 | 0) == (0 | 0);
     if ($697) {
      $sp$0$i$i$i = 1912;
      break;
     } else {
      $sp$183$i = $696;
     }
    }
    if ((label | 0) == 212) {
     $698 = $sp$183$i$lcssa + 12 | 0;
     $699 = SAFE_HEAP_LOAD($698 | 0, 4, 0) | 0 | 0;
     $700 = $699 & 8;
     $701 = ($700 | 0) == 0;
     if ($701) {
      SAFE_HEAP_STORE($$lcssa219 | 0, $tbase$255$i | 0, 4);
      $702 = $sp$183$i$lcssa + 4 | 0;
      $703 = SAFE_HEAP_LOAD($702 | 0, 4, 0) | 0 | 0;
      $704 = $703 + $tsize$254$i | 0;
      SAFE_HEAP_STORE($702 | 0, $704 | 0, 4);
      $705 = $tbase$255$i + 8 | 0;
      $706 = $705;
      $707 = $706 & 7;
      $708 = ($707 | 0) == 0;
      $709 = 0 - $706 | 0;
      $710 = $709 & 7;
      $711 = $708 ? 0 : $710;
      $712 = $tbase$255$i + $711 | 0;
      $$sum112$i = $tsize$254$i + 8 | 0;
      $713 = $tbase$255$i + $$sum112$i | 0;
      $714 = $713;
      $715 = $714 & 7;
      $716 = ($715 | 0) == 0;
      $717 = 0 - $714 | 0;
      $718 = $717 & 7;
      $719 = $716 ? 0 : $718;
      $$sum113$i = $719 + $tsize$254$i | 0;
      $720 = $tbase$255$i + $$sum113$i | 0;
      $721 = $720;
      $722 = $712;
      $723 = $721 - $722 | 0;
      $$sum$i19$i = $711 + $nb$0 | 0;
      $724 = $tbase$255$i + $$sum$i19$i | 0;
      $725 = $723 - $nb$0 | 0;
      $726 = $nb$0 | 3;
      $$sum1$i20$i = $711 + 4 | 0;
      $727 = $tbase$255$i + $$sum1$i20$i | 0;
      SAFE_HEAP_STORE($727 | 0, $726 | 0, 4);
      $728 = ($720 | 0) == ($635 | 0);
      L324 : do {
       if ($728) {
        $729 = SAFE_HEAP_LOAD(1476 | 0, 4, 0) | 0 | 0;
        $730 = $729 + $725 | 0;
        SAFE_HEAP_STORE(1476 | 0, $730 | 0, 4);
        SAFE_HEAP_STORE(1488 | 0, $724 | 0, 4);
        $731 = $730 | 1;
        $$sum42$i$i = $$sum$i19$i + 4 | 0;
        $732 = $tbase$255$i + $$sum42$i$i | 0;
        SAFE_HEAP_STORE($732 | 0, $731 | 0, 4);
       } else {
        $733 = SAFE_HEAP_LOAD(1484 | 0, 4, 0) | 0 | 0;
        $734 = ($720 | 0) == ($733 | 0);
        if ($734) {
         $735 = SAFE_HEAP_LOAD(1472 | 0, 4, 0) | 0 | 0;
         $736 = $735 + $725 | 0;
         SAFE_HEAP_STORE(1472 | 0, $736 | 0, 4);
         SAFE_HEAP_STORE(1484 | 0, $724 | 0, 4);
         $737 = $736 | 1;
         $$sum40$i$i = $$sum$i19$i + 4 | 0;
         $738 = $tbase$255$i + $$sum40$i$i | 0;
         SAFE_HEAP_STORE($738 | 0, $737 | 0, 4);
         $$sum41$i$i = $736 + $$sum$i19$i | 0;
         $739 = $tbase$255$i + $$sum41$i$i | 0;
         SAFE_HEAP_STORE($739 | 0, $736 | 0, 4);
         break;
        }
        $$sum2$i21$i = $tsize$254$i + 4 | 0;
        $$sum114$i = $$sum2$i21$i + $719 | 0;
        $740 = $tbase$255$i + $$sum114$i | 0;
        $741 = SAFE_HEAP_LOAD($740 | 0, 4, 0) | 0 | 0;
        $742 = $741 & 3;
        $743 = ($742 | 0) == 1;
        if ($743) {
         $744 = $741 & -8;
         $745 = $741 >>> 3;
         $746 = $741 >>> 0 < 256;
         L332 : do {
          if ($746) {
           $$sum3738$i$i = $719 | 8;
           $$sum124$i = $$sum3738$i$i + $tsize$254$i | 0;
           $747 = $tbase$255$i + $$sum124$i | 0;
           $748 = SAFE_HEAP_LOAD($747 | 0, 4, 0) | 0 | 0;
           $$sum39$i$i = $tsize$254$i + 12 | 0;
           $$sum125$i = $$sum39$i$i + $719 | 0;
           $749 = $tbase$255$i + $$sum125$i | 0;
           $750 = SAFE_HEAP_LOAD($749 | 0, 4, 0) | 0 | 0;
           $751 = $745 << 1;
           $752 = 1504 + ($751 << 2) | 0;
           $753 = ($748 | 0) == ($752 | 0);
           do {
            if (!$753) {
             $754 = $748 >>> 0 < $755 >>> 0;
             if ($754) {
              _abort();
             }
             $756 = $748 + 12 | 0;
             $757 = SAFE_HEAP_LOAD($756 | 0, 4, 0) | 0 | 0;
             $758 = ($757 | 0) == ($720 | 0);
             if ($758) {
              break;
             }
             _abort();
            }
           } while (0);
           $759 = ($750 | 0) == ($748 | 0);
           if ($759) {
            $760 = 1 << $745;
            $761 = $760 ^ -1;
            $762 = SAFE_HEAP_LOAD(1464 | 0, 4, 0) | 0 | 0;
            $763 = $762 & $761;
            SAFE_HEAP_STORE(1464 | 0, $763 | 0, 4);
            break;
           }
           $764 = ($750 | 0) == ($752 | 0);
           do {
            if ($764) {
             $$pre57$i$i = $750 + 8 | 0;
             $$pre$phi58$i$iZ2D = $$pre57$i$i;
            } else {
             $765 = $750 >>> 0 < $755 >>> 0;
             if ($765) {
              _abort();
             }
             $766 = $750 + 8 | 0;
             $767 = SAFE_HEAP_LOAD($766 | 0, 4, 0) | 0 | 0;
             $768 = ($767 | 0) == ($720 | 0);
             if ($768) {
              $$pre$phi58$i$iZ2D = $766;
              break;
             }
             _abort();
            }
           } while (0);
           $769 = $748 + 12 | 0;
           SAFE_HEAP_STORE($769 | 0, $750 | 0, 4);
           SAFE_HEAP_STORE($$pre$phi58$i$iZ2D | 0, $748 | 0, 4);
          } else {
           $$sum34$i$i = $719 | 24;
           $$sum115$i = $$sum34$i$i + $tsize$254$i | 0;
           $770 = $tbase$255$i + $$sum115$i | 0;
           $771 = SAFE_HEAP_LOAD($770 | 0, 4, 0) | 0 | 0;
           $$sum5$i$i = $tsize$254$i + 12 | 0;
           $$sum116$i = $$sum5$i$i + $719 | 0;
           $772 = $tbase$255$i + $$sum116$i | 0;
           $773 = SAFE_HEAP_LOAD($772 | 0, 4, 0) | 0 | 0;
           $774 = ($773 | 0) == ($720 | 0);
           do {
            if ($774) {
             $$sum67$i$i = $719 | 16;
             $$sum122$i = $$sum2$i21$i + $$sum67$i$i | 0;
             $784 = $tbase$255$i + $$sum122$i | 0;
             $785 = SAFE_HEAP_LOAD($784 | 0, 4, 0) | 0 | 0;
             $786 = ($785 | 0) == (0 | 0);
             if ($786) {
              $$sum123$i = $$sum67$i$i + $tsize$254$i | 0;
              $787 = $tbase$255$i + $$sum123$i | 0;
              $788 = SAFE_HEAP_LOAD($787 | 0, 4, 0) | 0 | 0;
              $789 = ($788 | 0) == (0 | 0);
              if ($789) {
               $R$1$i$i = 0;
               break;
              } else {
               $R$0$i$i = $788;
               $RP$0$i$i = $787;
              }
             } else {
              $R$0$i$i = $785;
              $RP$0$i$i = $784;
             }
             while (1) {
              $790 = $R$0$i$i + 20 | 0;
              $791 = SAFE_HEAP_LOAD($790 | 0, 4, 0) | 0 | 0;
              $792 = ($791 | 0) == (0 | 0);
              if (!$792) {
               $R$0$i$i = $791;
               $RP$0$i$i = $790;
               continue;
              }
              $793 = $R$0$i$i + 16 | 0;
              $794 = SAFE_HEAP_LOAD($793 | 0, 4, 0) | 0 | 0;
              $795 = ($794 | 0) == (0 | 0);
              if ($795) {
               $R$0$i$i$lcssa = $R$0$i$i;
               $RP$0$i$i$lcssa = $RP$0$i$i;
               break;
              } else {
               $R$0$i$i = $794;
               $RP$0$i$i = $793;
              }
             }
             $796 = $RP$0$i$i$lcssa >>> 0 < $755 >>> 0;
             if ($796) {
              _abort();
             } else {
              SAFE_HEAP_STORE($RP$0$i$i$lcssa | 0, 0 | 0, 4);
              $R$1$i$i = $R$0$i$i$lcssa;
              break;
             }
            } else {
             $$sum3536$i$i = $719 | 8;
             $$sum117$i = $$sum3536$i$i + $tsize$254$i | 0;
             $775 = $tbase$255$i + $$sum117$i | 0;
             $776 = SAFE_HEAP_LOAD($775 | 0, 4, 0) | 0 | 0;
             $777 = $776 >>> 0 < $755 >>> 0;
             if ($777) {
              _abort();
             }
             $778 = $776 + 12 | 0;
             $779 = SAFE_HEAP_LOAD($778 | 0, 4, 0) | 0 | 0;
             $780 = ($779 | 0) == ($720 | 0);
             if (!$780) {
              _abort();
             }
             $781 = $773 + 8 | 0;
             $782 = SAFE_HEAP_LOAD($781 | 0, 4, 0) | 0 | 0;
             $783 = ($782 | 0) == ($720 | 0);
             if ($783) {
              SAFE_HEAP_STORE($778 | 0, $773 | 0, 4);
              SAFE_HEAP_STORE($781 | 0, $776 | 0, 4);
              $R$1$i$i = $773;
              break;
             } else {
              _abort();
             }
            }
           } while (0);
           $797 = ($771 | 0) == (0 | 0);
           if ($797) {
            break;
           }
           $$sum30$i$i = $tsize$254$i + 28 | 0;
           $$sum118$i = $$sum30$i$i + $719 | 0;
           $798 = $tbase$255$i + $$sum118$i | 0;
           $799 = SAFE_HEAP_LOAD($798 | 0, 4, 0) | 0 | 0;
           $800 = 1768 + ($799 << 2) | 0;
           $801 = SAFE_HEAP_LOAD($800 | 0, 4, 0) | 0 | 0;
           $802 = ($720 | 0) == ($801 | 0);
           do {
            if ($802) {
             SAFE_HEAP_STORE($800 | 0, $R$1$i$i | 0, 4);
             $cond$i$i = ($R$1$i$i | 0) == (0 | 0);
             if (!$cond$i$i) {
              break;
             }
             $803 = 1 << $799;
             $804 = $803 ^ -1;
             $805 = SAFE_HEAP_LOAD(1468 | 0, 4, 0) | 0 | 0;
             $806 = $805 & $804;
             SAFE_HEAP_STORE(1468 | 0, $806 | 0, 4);
             break L332;
            } else {
             $807 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
             $808 = $771 >>> 0 < $807 >>> 0;
             if ($808) {
              _abort();
             }
             $809 = $771 + 16 | 0;
             $810 = SAFE_HEAP_LOAD($809 | 0, 4, 0) | 0 | 0;
             $811 = ($810 | 0) == ($720 | 0);
             if ($811) {
              SAFE_HEAP_STORE($809 | 0, $R$1$i$i | 0, 4);
             } else {
              $812 = $771 + 20 | 0;
              SAFE_HEAP_STORE($812 | 0, $R$1$i$i | 0, 4);
             }
             $813 = ($R$1$i$i | 0) == (0 | 0);
             if ($813) {
              break L332;
             }
            }
           } while (0);
           $814 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
           $815 = $R$1$i$i >>> 0 < $814 >>> 0;
           if ($815) {
            _abort();
           }
           $816 = $R$1$i$i + 24 | 0;
           SAFE_HEAP_STORE($816 | 0, $771 | 0, 4);
           $$sum3132$i$i = $719 | 16;
           $$sum119$i = $$sum3132$i$i + $tsize$254$i | 0;
           $817 = $tbase$255$i + $$sum119$i | 0;
           $818 = SAFE_HEAP_LOAD($817 | 0, 4, 0) | 0 | 0;
           $819 = ($818 | 0) == (0 | 0);
           do {
            if (!$819) {
             $820 = $818 >>> 0 < $814 >>> 0;
             if ($820) {
              _abort();
             } else {
              $821 = $R$1$i$i + 16 | 0;
              SAFE_HEAP_STORE($821 | 0, $818 | 0, 4);
              $822 = $818 + 24 | 0;
              SAFE_HEAP_STORE($822 | 0, $R$1$i$i | 0, 4);
              break;
             }
            }
           } while (0);
           $$sum120$i = $$sum2$i21$i + $$sum3132$i$i | 0;
           $823 = $tbase$255$i + $$sum120$i | 0;
           $824 = SAFE_HEAP_LOAD($823 | 0, 4, 0) | 0 | 0;
           $825 = ($824 | 0) == (0 | 0);
           if ($825) {
            break;
           }
           $826 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
           $827 = $824 >>> 0 < $826 >>> 0;
           if ($827) {
            _abort();
           } else {
            $828 = $R$1$i$i + 20 | 0;
            SAFE_HEAP_STORE($828 | 0, $824 | 0, 4);
            $829 = $824 + 24 | 0;
            SAFE_HEAP_STORE($829 | 0, $R$1$i$i | 0, 4);
            break;
           }
          }
         } while (0);
         $$sum9$i$i = $744 | $719;
         $$sum121$i = $$sum9$i$i + $tsize$254$i | 0;
         $830 = $tbase$255$i + $$sum121$i | 0;
         $831 = $744 + $725 | 0;
         $oldfirst$0$i$i = $830;
         $qsize$0$i$i = $831;
        } else {
         $oldfirst$0$i$i = $720;
         $qsize$0$i$i = $725;
        }
        $832 = $oldfirst$0$i$i + 4 | 0;
        $833 = SAFE_HEAP_LOAD($832 | 0, 4, 0) | 0 | 0;
        $834 = $833 & -2;
        SAFE_HEAP_STORE($832 | 0, $834 | 0, 4);
        $835 = $qsize$0$i$i | 1;
        $$sum10$i$i = $$sum$i19$i + 4 | 0;
        $836 = $tbase$255$i + $$sum10$i$i | 0;
        SAFE_HEAP_STORE($836 | 0, $835 | 0, 4);
        $$sum11$i$i = $qsize$0$i$i + $$sum$i19$i | 0;
        $837 = $tbase$255$i + $$sum11$i$i | 0;
        SAFE_HEAP_STORE($837 | 0, $qsize$0$i$i | 0, 4);
        $838 = $qsize$0$i$i >>> 3;
        $839 = $qsize$0$i$i >>> 0 < 256;
        if ($839) {
         $840 = $838 << 1;
         $841 = 1504 + ($840 << 2) | 0;
         $842 = SAFE_HEAP_LOAD(1464 | 0, 4, 0) | 0 | 0;
         $843 = 1 << $838;
         $844 = $842 & $843;
         $845 = ($844 | 0) == 0;
         do {
          if ($845) {
           $846 = $842 | $843;
           SAFE_HEAP_STORE(1464 | 0, $846 | 0, 4);
           $$pre$i22$i = $840 + 2 | 0;
           $$pre56$i$i = 1504 + ($$pre$i22$i << 2) | 0;
           $$pre$phi$i23$iZ2D = $$pre56$i$i;
           $F4$0$i$i = $841;
          } else {
           $$sum29$i$i = $840 + 2 | 0;
           $847 = 1504 + ($$sum29$i$i << 2) | 0;
           $848 = SAFE_HEAP_LOAD($847 | 0, 4, 0) | 0 | 0;
           $849 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
           $850 = $848 >>> 0 < $849 >>> 0;
           if (!$850) {
            $$pre$phi$i23$iZ2D = $847;
            $F4$0$i$i = $848;
            break;
           }
           _abort();
          }
         } while (0);
         SAFE_HEAP_STORE($$pre$phi$i23$iZ2D | 0, $724 | 0, 4);
         $851 = $F4$0$i$i + 12 | 0;
         SAFE_HEAP_STORE($851 | 0, $724 | 0, 4);
         $$sum27$i$i = $$sum$i19$i + 8 | 0;
         $852 = $tbase$255$i + $$sum27$i$i | 0;
         SAFE_HEAP_STORE($852 | 0, $F4$0$i$i | 0, 4);
         $$sum28$i$i = $$sum$i19$i + 12 | 0;
         $853 = $tbase$255$i + $$sum28$i$i | 0;
         SAFE_HEAP_STORE($853 | 0, $841 | 0, 4);
         break;
        }
        $854 = $qsize$0$i$i >>> 8;
        $855 = ($854 | 0) == 0;
        do {
         if ($855) {
          $I7$0$i$i = 0;
         } else {
          $856 = $qsize$0$i$i >>> 0 > 16777215;
          if ($856) {
           $I7$0$i$i = 31;
           break;
          }
          $857 = $854 + 1048320 | 0;
          $858 = $857 >>> 16;
          $859 = $858 & 8;
          $860 = $854 << $859;
          $861 = $860 + 520192 | 0;
          $862 = $861 >>> 16;
          $863 = $862 & 4;
          $864 = $863 | $859;
          $865 = $860 << $863;
          $866 = $865 + 245760 | 0;
          $867 = $866 >>> 16;
          $868 = $867 & 2;
          $869 = $864 | $868;
          $870 = 14 - $869 | 0;
          $871 = $865 << $868;
          $872 = $871 >>> 15;
          $873 = $870 + $872 | 0;
          $874 = $873 << 1;
          $875 = $873 + 7 | 0;
          $876 = $qsize$0$i$i >>> $875;
          $877 = $876 & 1;
          $878 = $877 | $874;
          $I7$0$i$i = $878;
         }
        } while (0);
        $879 = 1768 + ($I7$0$i$i << 2) | 0;
        $$sum12$i$i = $$sum$i19$i + 28 | 0;
        $880 = $tbase$255$i + $$sum12$i$i | 0;
        SAFE_HEAP_STORE($880 | 0, $I7$0$i$i | 0, 4);
        $$sum13$i$i = $$sum$i19$i + 16 | 0;
        $881 = $tbase$255$i + $$sum13$i$i | 0;
        $$sum14$i$i = $$sum$i19$i + 20 | 0;
        $882 = $tbase$255$i + $$sum14$i$i | 0;
        SAFE_HEAP_STORE($882 | 0, 0 | 0, 4);
        SAFE_HEAP_STORE($881 | 0, 0 | 0, 4);
        $883 = SAFE_HEAP_LOAD(1468 | 0, 4, 0) | 0 | 0;
        $884 = 1 << $I7$0$i$i;
        $885 = $883 & $884;
        $886 = ($885 | 0) == 0;
        if ($886) {
         $887 = $883 | $884;
         SAFE_HEAP_STORE(1468 | 0, $887 | 0, 4);
         SAFE_HEAP_STORE($879 | 0, $724 | 0, 4);
         $$sum15$i$i = $$sum$i19$i + 24 | 0;
         $888 = $tbase$255$i + $$sum15$i$i | 0;
         SAFE_HEAP_STORE($888 | 0, $879 | 0, 4);
         $$sum16$i$i = $$sum$i19$i + 12 | 0;
         $889 = $tbase$255$i + $$sum16$i$i | 0;
         SAFE_HEAP_STORE($889 | 0, $724 | 0, 4);
         $$sum17$i$i = $$sum$i19$i + 8 | 0;
         $890 = $tbase$255$i + $$sum17$i$i | 0;
         SAFE_HEAP_STORE($890 | 0, $724 | 0, 4);
         break;
        }
        $891 = SAFE_HEAP_LOAD($879 | 0, 4, 0) | 0 | 0;
        $892 = $891 + 4 | 0;
        $893 = SAFE_HEAP_LOAD($892 | 0, 4, 0) | 0 | 0;
        $894 = $893 & -8;
        $895 = ($894 | 0) == ($qsize$0$i$i | 0);
        L418 : do {
         if ($895) {
          $T$0$lcssa$i25$i = $891;
         } else {
          $896 = ($I7$0$i$i | 0) == 31;
          $897 = $I7$0$i$i >>> 1;
          $898 = 25 - $897 | 0;
          $899 = $896 ? 0 : $898;
          $900 = $qsize$0$i$i << $899;
          $K8$051$i$i = $900;
          $T$050$i$i = $891;
          while (1) {
           $907 = $K8$051$i$i >>> 31;
           $908 = ($T$050$i$i + 16 | 0) + ($907 << 2) | 0;
           $903 = SAFE_HEAP_LOAD($908 | 0, 4, 0) | 0 | 0;
           $909 = ($903 | 0) == (0 | 0);
           if ($909) {
            $$lcssa = $908;
            $T$050$i$i$lcssa = $T$050$i$i;
            break;
           }
           $901 = $K8$051$i$i << 1;
           $902 = $903 + 4 | 0;
           $904 = SAFE_HEAP_LOAD($902 | 0, 4, 0) | 0 | 0;
           $905 = $904 & -8;
           $906 = ($905 | 0) == ($qsize$0$i$i | 0);
           if ($906) {
            $T$0$lcssa$i25$i = $903;
            break L418;
           } else {
            $K8$051$i$i = $901;
            $T$050$i$i = $903;
           }
          }
          $910 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
          $911 = $$lcssa >>> 0 < $910 >>> 0;
          if ($911) {
           _abort();
          } else {
           SAFE_HEAP_STORE($$lcssa | 0, $724 | 0, 4);
           $$sum23$i$i = $$sum$i19$i + 24 | 0;
           $912 = $tbase$255$i + $$sum23$i$i | 0;
           SAFE_HEAP_STORE($912 | 0, $T$050$i$i$lcssa | 0, 4);
           $$sum24$i$i = $$sum$i19$i + 12 | 0;
           $913 = $tbase$255$i + $$sum24$i$i | 0;
           SAFE_HEAP_STORE($913 | 0, $724 | 0, 4);
           $$sum25$i$i = $$sum$i19$i + 8 | 0;
           $914 = $tbase$255$i + $$sum25$i$i | 0;
           SAFE_HEAP_STORE($914 | 0, $724 | 0, 4);
           break L324;
          }
         }
        } while (0);
        $915 = $T$0$lcssa$i25$i + 8 | 0;
        $916 = SAFE_HEAP_LOAD($915 | 0, 4, 0) | 0 | 0;
        $917 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
        $918 = $916 >>> 0 >= $917 >>> 0;
        $not$$i26$i = $T$0$lcssa$i25$i >>> 0 >= $917 >>> 0;
        $919 = $918 & $not$$i26$i;
        if ($919) {
         $920 = $916 + 12 | 0;
         SAFE_HEAP_STORE($920 | 0, $724 | 0, 4);
         SAFE_HEAP_STORE($915 | 0, $724 | 0, 4);
         $$sum20$i$i = $$sum$i19$i + 8 | 0;
         $921 = $tbase$255$i + $$sum20$i$i | 0;
         SAFE_HEAP_STORE($921 | 0, $916 | 0, 4);
         $$sum21$i$i = $$sum$i19$i + 12 | 0;
         $922 = $tbase$255$i + $$sum21$i$i | 0;
         SAFE_HEAP_STORE($922 | 0, $T$0$lcssa$i25$i | 0, 4);
         $$sum22$i$i = $$sum$i19$i + 24 | 0;
         $923 = $tbase$255$i + $$sum22$i$i | 0;
         SAFE_HEAP_STORE($923 | 0, 0 | 0, 4);
         break;
        } else {
         _abort();
        }
       }
      } while (0);
      $$sum1819$i$i = $711 | 8;
      $924 = $tbase$255$i + $$sum1819$i$i | 0;
      $mem$0 = $924;
      return $mem$0 | 0;
     } else {
      $sp$0$i$i$i = 1912;
     }
    }
    while (1) {
     $925 = SAFE_HEAP_LOAD($sp$0$i$i$i | 0, 4, 0) | 0 | 0;
     $926 = $925 >>> 0 > $635 >>> 0;
     if (!$926) {
      $927 = $sp$0$i$i$i + 4 | 0;
      $928 = SAFE_HEAP_LOAD($927 | 0, 4, 0) | 0 | 0;
      $929 = $925 + $928 | 0;
      $930 = $929 >>> 0 > $635 >>> 0;
      if ($930) {
       $$lcssa215 = $925;
       $$lcssa216 = $928;
       $$lcssa217 = $929;
       break;
      }
     }
     $931 = $sp$0$i$i$i + 8 | 0;
     $932 = SAFE_HEAP_LOAD($931 | 0, 4, 0) | 0 | 0;
     $sp$0$i$i$i = $932;
    }
    $$sum$i14$i = $$lcssa216 + -47 | 0;
    $$sum1$i15$i = $$lcssa216 + -39 | 0;
    $933 = $$lcssa215 + $$sum1$i15$i | 0;
    $934 = $933;
    $935 = $934 & 7;
    $936 = ($935 | 0) == 0;
    $937 = 0 - $934 | 0;
    $938 = $937 & 7;
    $939 = $936 ? 0 : $938;
    $$sum2$i16$i = $$sum$i14$i + $939 | 0;
    $940 = $$lcssa215 + $$sum2$i16$i | 0;
    $941 = $635 + 16 | 0;
    $942 = $940 >>> 0 < $941 >>> 0;
    $943 = $942 ? $635 : $940;
    $944 = $943 + 8 | 0;
    $945 = $tsize$254$i + -40 | 0;
    $946 = $tbase$255$i + 8 | 0;
    $947 = $946;
    $948 = $947 & 7;
    $949 = ($948 | 0) == 0;
    $950 = 0 - $947 | 0;
    $951 = $950 & 7;
    $952 = $949 ? 0 : $951;
    $953 = $tbase$255$i + $952 | 0;
    $954 = $945 - $952 | 0;
    SAFE_HEAP_STORE(1488 | 0, $953 | 0, 4);
    SAFE_HEAP_STORE(1476 | 0, $954 | 0, 4);
    $955 = $954 | 1;
    $$sum$i$i$i = $952 + 4 | 0;
    $956 = $tbase$255$i + $$sum$i$i$i | 0;
    SAFE_HEAP_STORE($956 | 0, $955 | 0, 4);
    $$sum2$i$i$i = $tsize$254$i + -36 | 0;
    $957 = $tbase$255$i + $$sum2$i$i$i | 0;
    SAFE_HEAP_STORE($957 | 0, 40 | 0, 4);
    $958 = SAFE_HEAP_LOAD(1952 | 0, 4, 0) | 0 | 0;
    SAFE_HEAP_STORE(1492 | 0, $958 | 0, 4);
    $959 = $943 + 4 | 0;
    SAFE_HEAP_STORE($959 | 0, 27 | 0, 4);
    {}
    SAFE_HEAP_STORE($944 | 0, SAFE_HEAP_LOAD(1912 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($944 + 4 | 0, SAFE_HEAP_LOAD(1912 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($944 + 8 | 0, SAFE_HEAP_LOAD(1912 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($944 + 12 | 0, SAFE_HEAP_LOAD(1912 + 12 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE(1912 | 0, $tbase$255$i | 0, 4);
    SAFE_HEAP_STORE(1916 | 0, $tsize$254$i | 0, 4);
    SAFE_HEAP_STORE(1924 | 0, 0 | 0, 4);
    SAFE_HEAP_STORE(1920 | 0, $944 | 0, 4);
    $960 = $943 + 28 | 0;
    SAFE_HEAP_STORE($960 | 0, 7 | 0, 4);
    $961 = $943 + 32 | 0;
    $962 = $961 >>> 0 < $$lcssa217 >>> 0;
    if ($962) {
     $964 = $960;
     while (1) {
      $963 = $964 + 4 | 0;
      SAFE_HEAP_STORE($963 | 0, 7 | 0, 4);
      $965 = $964 + 8 | 0;
      $966 = $965 >>> 0 < $$lcssa217 >>> 0;
      if ($966) {
       $964 = $963;
      } else {
       break;
      }
     }
    }
    $967 = ($943 | 0) == ($635 | 0);
    if (!$967) {
     $968 = $943;
     $969 = $635;
     $970 = $968 - $969 | 0;
     $971 = SAFE_HEAP_LOAD($959 | 0, 4, 0) | 0 | 0;
     $972 = $971 & -2;
     SAFE_HEAP_STORE($959 | 0, $972 | 0, 4);
     $973 = $970 | 1;
     $974 = $635 + 4 | 0;
     SAFE_HEAP_STORE($974 | 0, $973 | 0, 4);
     SAFE_HEAP_STORE($943 | 0, $970 | 0, 4);
     $975 = $970 >>> 3;
     $976 = $970 >>> 0 < 256;
     if ($976) {
      $977 = $975 << 1;
      $978 = 1504 + ($977 << 2) | 0;
      $979 = SAFE_HEAP_LOAD(1464 | 0, 4, 0) | 0 | 0;
      $980 = 1 << $975;
      $981 = $979 & $980;
      $982 = ($981 | 0) == 0;
      if ($982) {
       $983 = $979 | $980;
       SAFE_HEAP_STORE(1464 | 0, $983 | 0, 4);
       $$pre$i$i = $977 + 2 | 0;
       $$pre14$i$i = 1504 + ($$pre$i$i << 2) | 0;
       $$pre$phi$i$iZ2D = $$pre14$i$i;
       $F$0$i$i = $978;
      } else {
       $$sum4$i$i = $977 + 2 | 0;
       $984 = 1504 + ($$sum4$i$i << 2) | 0;
       $985 = SAFE_HEAP_LOAD($984 | 0, 4, 0) | 0 | 0;
       $986 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
       $987 = $985 >>> 0 < $986 >>> 0;
       if ($987) {
        _abort();
       } else {
        $$pre$phi$i$iZ2D = $984;
        $F$0$i$i = $985;
       }
      }
      SAFE_HEAP_STORE($$pre$phi$i$iZ2D | 0, $635 | 0, 4);
      $988 = $F$0$i$i + 12 | 0;
      SAFE_HEAP_STORE($988 | 0, $635 | 0, 4);
      $989 = $635 + 8 | 0;
      SAFE_HEAP_STORE($989 | 0, $F$0$i$i | 0, 4);
      $990 = $635 + 12 | 0;
      SAFE_HEAP_STORE($990 | 0, $978 | 0, 4);
      break;
     }
     $991 = $970 >>> 8;
     $992 = ($991 | 0) == 0;
     if ($992) {
      $I1$0$i$i = 0;
     } else {
      $993 = $970 >>> 0 > 16777215;
      if ($993) {
       $I1$0$i$i = 31;
      } else {
       $994 = $991 + 1048320 | 0;
       $995 = $994 >>> 16;
       $996 = $995 & 8;
       $997 = $991 << $996;
       $998 = $997 + 520192 | 0;
       $999 = $998 >>> 16;
       $1000 = $999 & 4;
       $1001 = $1000 | $996;
       $1002 = $997 << $1000;
       $1003 = $1002 + 245760 | 0;
       $1004 = $1003 >>> 16;
       $1005 = $1004 & 2;
       $1006 = $1001 | $1005;
       $1007 = 14 - $1006 | 0;
       $1008 = $1002 << $1005;
       $1009 = $1008 >>> 15;
       $1010 = $1007 + $1009 | 0;
       $1011 = $1010 << 1;
       $1012 = $1010 + 7 | 0;
       $1013 = $970 >>> $1012;
       $1014 = $1013 & 1;
       $1015 = $1014 | $1011;
       $I1$0$i$i = $1015;
      }
     }
     $1016 = 1768 + ($I1$0$i$i << 2) | 0;
     $1017 = $635 + 28 | 0;
     SAFE_HEAP_STORE($1017 | 0, $I1$0$i$i | 0, 4);
     $1018 = $635 + 20 | 0;
     SAFE_HEAP_STORE($1018 | 0, 0 | 0, 4);
     SAFE_HEAP_STORE($941 | 0, 0 | 0, 4);
     $1019 = SAFE_HEAP_LOAD(1468 | 0, 4, 0) | 0 | 0;
     $1020 = 1 << $I1$0$i$i;
     $1021 = $1019 & $1020;
     $1022 = ($1021 | 0) == 0;
     if ($1022) {
      $1023 = $1019 | $1020;
      SAFE_HEAP_STORE(1468 | 0, $1023 | 0, 4);
      SAFE_HEAP_STORE($1016 | 0, $635 | 0, 4);
      $1024 = $635 + 24 | 0;
      SAFE_HEAP_STORE($1024 | 0, $1016 | 0, 4);
      $1025 = $635 + 12 | 0;
      SAFE_HEAP_STORE($1025 | 0, $635 | 0, 4);
      $1026 = $635 + 8 | 0;
      SAFE_HEAP_STORE($1026 | 0, $635 | 0, 4);
      break;
     }
     $1027 = SAFE_HEAP_LOAD($1016 | 0, 4, 0) | 0 | 0;
     $1028 = $1027 + 4 | 0;
     $1029 = SAFE_HEAP_LOAD($1028 | 0, 4, 0) | 0 | 0;
     $1030 = $1029 & -8;
     $1031 = ($1030 | 0) == ($970 | 0);
     L459 : do {
      if ($1031) {
       $T$0$lcssa$i$i = $1027;
      } else {
       $1032 = ($I1$0$i$i | 0) == 31;
       $1033 = $I1$0$i$i >>> 1;
       $1034 = 25 - $1033 | 0;
       $1035 = $1032 ? 0 : $1034;
       $1036 = $970 << $1035;
       $K2$07$i$i = $1036;
       $T$06$i$i = $1027;
       while (1) {
        $1043 = $K2$07$i$i >>> 31;
        $1044 = ($T$06$i$i + 16 | 0) + ($1043 << 2) | 0;
        $1039 = SAFE_HEAP_LOAD($1044 | 0, 4, 0) | 0 | 0;
        $1045 = ($1039 | 0) == (0 | 0);
        if ($1045) {
         $$lcssa211 = $1044;
         $T$06$i$i$lcssa = $T$06$i$i;
         break;
        }
        $1037 = $K2$07$i$i << 1;
        $1038 = $1039 + 4 | 0;
        $1040 = SAFE_HEAP_LOAD($1038 | 0, 4, 0) | 0 | 0;
        $1041 = $1040 & -8;
        $1042 = ($1041 | 0) == ($970 | 0);
        if ($1042) {
         $T$0$lcssa$i$i = $1039;
         break L459;
        } else {
         $K2$07$i$i = $1037;
         $T$06$i$i = $1039;
        }
       }
       $1046 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
       $1047 = $$lcssa211 >>> 0 < $1046 >>> 0;
       if ($1047) {
        _abort();
       } else {
        SAFE_HEAP_STORE($$lcssa211 | 0, $635 | 0, 4);
        $1048 = $635 + 24 | 0;
        SAFE_HEAP_STORE($1048 | 0, $T$06$i$i$lcssa | 0, 4);
        $1049 = $635 + 12 | 0;
        SAFE_HEAP_STORE($1049 | 0, $635 | 0, 4);
        $1050 = $635 + 8 | 0;
        SAFE_HEAP_STORE($1050 | 0, $635 | 0, 4);
        break L299;
       }
      }
     } while (0);
     $1051 = $T$0$lcssa$i$i + 8 | 0;
     $1052 = SAFE_HEAP_LOAD($1051 | 0, 4, 0) | 0 | 0;
     $1053 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
     $1054 = $1052 >>> 0 >= $1053 >>> 0;
     $not$$i$i = $T$0$lcssa$i$i >>> 0 >= $1053 >>> 0;
     $1055 = $1054 & $not$$i$i;
     if ($1055) {
      $1056 = $1052 + 12 | 0;
      SAFE_HEAP_STORE($1056 | 0, $635 | 0, 4);
      SAFE_HEAP_STORE($1051 | 0, $635 | 0, 4);
      $1057 = $635 + 8 | 0;
      SAFE_HEAP_STORE($1057 | 0, $1052 | 0, 4);
      $1058 = $635 + 12 | 0;
      SAFE_HEAP_STORE($1058 | 0, $T$0$lcssa$i$i | 0, 4);
      $1059 = $635 + 24 | 0;
      SAFE_HEAP_STORE($1059 | 0, 0 | 0, 4);
      break;
     } else {
      _abort();
     }
    }
   }
  } while (0);
  $1060 = SAFE_HEAP_LOAD(1476 | 0, 4, 0) | 0 | 0;
  $1061 = $1060 >>> 0 > $nb$0 >>> 0;
  if ($1061) {
   $1062 = $1060 - $nb$0 | 0;
   SAFE_HEAP_STORE(1476 | 0, $1062 | 0, 4);
   $1063 = SAFE_HEAP_LOAD(1488 | 0, 4, 0) | 0 | 0;
   $1064 = $1063 + $nb$0 | 0;
   SAFE_HEAP_STORE(1488 | 0, $1064 | 0, 4);
   $1065 = $1062 | 1;
   $$sum$i32 = $nb$0 + 4 | 0;
   $1066 = $1063 + $$sum$i32 | 0;
   SAFE_HEAP_STORE($1066 | 0, $1065 | 0, 4);
   $1067 = $nb$0 | 3;
   $1068 = $1063 + 4 | 0;
   SAFE_HEAP_STORE($1068 | 0, $1067 | 0, 4);
   $1069 = $1063 + 8 | 0;
   $mem$0 = $1069;
   return $mem$0 | 0;
  }
 }
 $1070 = ___errno_location() | 0;
 SAFE_HEAP_STORE($1070 | 0, 12 | 0, 4);
 $mem$0 = 0;
 return $mem$0 | 0;
}

function _free($mem) {
 $mem = $mem | 0;
 var $$lcssa = 0, $$pre = 0, $$pre$phi59Z2D = 0, $$pre$phi61Z2D = 0, $$pre$phiZ2D = 0, $$pre57 = 0, $$pre58 = 0, $$pre60 = 0, $$sum = 0, $$sum11 = 0, $$sum12 = 0, $$sum13 = 0, $$sum14 = 0, $$sum1718 = 0, $$sum19 = 0, $$sum2 = 0, $$sum20 = 0, $$sum22 = 0, $$sum23 = 0, $$sum24 = 0;
 var $$sum25 = 0, $$sum26 = 0, $$sum27 = 0, $$sum28 = 0, $$sum29 = 0, $$sum3 = 0, $$sum30 = 0, $$sum31 = 0, $$sum5 = 0, $$sum67 = 0, $$sum8 = 0, $$sum9 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0;
 var $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0;
 var $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0, $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0;
 var $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0, $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0;
 var $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0, $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0;
 var $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0, $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0;
 var $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0, $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0;
 var $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0, $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0;
 var $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0, $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0;
 var $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0, $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0;
 var $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0, $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0;
 var $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0, $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0;
 var $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0, $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0;
 var $321 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $F16$0 = 0, $I18$0 = 0, $K19$052 = 0, $R$0 = 0, $R$0$lcssa = 0, $R$1 = 0;
 var $R7$0 = 0, $R7$0$lcssa = 0, $R7$1 = 0, $RP$0 = 0, $RP$0$lcssa = 0, $RP9$0 = 0, $RP9$0$lcssa = 0, $T$0$lcssa = 0, $T$051 = 0, $T$051$lcssa = 0, $cond = 0, $cond47 = 0, $not$ = 0, $p$0 = 0, $psize$0 = 0, $psize$1 = 0, $sp$0$i = 0, $sp$0$in$i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($mem | 0) == (0 | 0);
 if ($0) {
  return;
 }
 $1 = $mem + -8 | 0;
 $2 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
 $3 = $1 >>> 0 < $2 >>> 0;
 if ($3) {
  _abort();
 }
 $4 = $mem + -4 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = $5 & 3;
 $7 = ($6 | 0) == 1;
 if ($7) {
  _abort();
 }
 $8 = $5 & -8;
 $$sum = $8 + -8 | 0;
 $9 = $mem + $$sum | 0;
 $10 = $5 & 1;
 $11 = ($10 | 0) == 0;
 do {
  if ($11) {
   $12 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
   $13 = ($6 | 0) == 0;
   if ($13) {
    return;
   }
   $$sum2 = -8 - $12 | 0;
   $14 = $mem + $$sum2 | 0;
   $15 = $12 + $8 | 0;
   $16 = $14 >>> 0 < $2 >>> 0;
   if ($16) {
    _abort();
   }
   $17 = SAFE_HEAP_LOAD(1484 | 0, 4, 0) | 0 | 0;
   $18 = ($14 | 0) == ($17 | 0);
   if ($18) {
    $$sum3 = $8 + -4 | 0;
    $103 = $mem + $$sum3 | 0;
    $104 = SAFE_HEAP_LOAD($103 | 0, 4, 0) | 0 | 0;
    $105 = $104 & 3;
    $106 = ($105 | 0) == 3;
    if (!$106) {
     $p$0 = $14;
     $psize$0 = $15;
     break;
    }
    SAFE_HEAP_STORE(1472 | 0, $15 | 0, 4);
    $107 = $104 & -2;
    SAFE_HEAP_STORE($103 | 0, $107 | 0, 4);
    $108 = $15 | 1;
    $$sum20 = $$sum2 + 4 | 0;
    $109 = $mem + $$sum20 | 0;
    SAFE_HEAP_STORE($109 | 0, $108 | 0, 4);
    SAFE_HEAP_STORE($9 | 0, $15 | 0, 4);
    return;
   }
   $19 = $12 >>> 3;
   $20 = $12 >>> 0 < 256;
   if ($20) {
    $$sum30 = $$sum2 + 8 | 0;
    $21 = $mem + $$sum30 | 0;
    $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
    $$sum31 = $$sum2 + 12 | 0;
    $23 = $mem + $$sum31 | 0;
    $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
    $25 = $19 << 1;
    $26 = 1504 + ($25 << 2) | 0;
    $27 = ($22 | 0) == ($26 | 0);
    if (!$27) {
     $28 = $22 >>> 0 < $2 >>> 0;
     if ($28) {
      _abort();
     }
     $29 = $22 + 12 | 0;
     $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
     $31 = ($30 | 0) == ($14 | 0);
     if (!$31) {
      _abort();
     }
    }
    $32 = ($24 | 0) == ($22 | 0);
    if ($32) {
     $33 = 1 << $19;
     $34 = $33 ^ -1;
     $35 = SAFE_HEAP_LOAD(1464 | 0, 4, 0) | 0 | 0;
     $36 = $35 & $34;
     SAFE_HEAP_STORE(1464 | 0, $36 | 0, 4);
     $p$0 = $14;
     $psize$0 = $15;
     break;
    }
    $37 = ($24 | 0) == ($26 | 0);
    if ($37) {
     $$pre60 = $24 + 8 | 0;
     $$pre$phi61Z2D = $$pre60;
    } else {
     $38 = $24 >>> 0 < $2 >>> 0;
     if ($38) {
      _abort();
     }
     $39 = $24 + 8 | 0;
     $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
     $41 = ($40 | 0) == ($14 | 0);
     if ($41) {
      $$pre$phi61Z2D = $39;
     } else {
      _abort();
     }
    }
    $42 = $22 + 12 | 0;
    SAFE_HEAP_STORE($42 | 0, $24 | 0, 4);
    SAFE_HEAP_STORE($$pre$phi61Z2D | 0, $22 | 0, 4);
    $p$0 = $14;
    $psize$0 = $15;
    break;
   }
   $$sum22 = $$sum2 + 24 | 0;
   $43 = $mem + $$sum22 | 0;
   $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
   $$sum23 = $$sum2 + 12 | 0;
   $45 = $mem + $$sum23 | 0;
   $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
   $47 = ($46 | 0) == ($14 | 0);
   do {
    if ($47) {
     $$sum25 = $$sum2 + 20 | 0;
     $57 = $mem + $$sum25 | 0;
     $58 = SAFE_HEAP_LOAD($57 | 0, 4, 0) | 0 | 0;
     $59 = ($58 | 0) == (0 | 0);
     if ($59) {
      $$sum24 = $$sum2 + 16 | 0;
      $60 = $mem + $$sum24 | 0;
      $61 = SAFE_HEAP_LOAD($60 | 0, 4, 0) | 0 | 0;
      $62 = ($61 | 0) == (0 | 0);
      if ($62) {
       $R$1 = 0;
       break;
      } else {
       $R$0 = $61;
       $RP$0 = $60;
      }
     } else {
      $R$0 = $58;
      $RP$0 = $57;
     }
     while (1) {
      $63 = $R$0 + 20 | 0;
      $64 = SAFE_HEAP_LOAD($63 | 0, 4, 0) | 0 | 0;
      $65 = ($64 | 0) == (0 | 0);
      if (!$65) {
       $R$0 = $64;
       $RP$0 = $63;
       continue;
      }
      $66 = $R$0 + 16 | 0;
      $67 = SAFE_HEAP_LOAD($66 | 0, 4, 0) | 0 | 0;
      $68 = ($67 | 0) == (0 | 0);
      if ($68) {
       $R$0$lcssa = $R$0;
       $RP$0$lcssa = $RP$0;
       break;
      } else {
       $R$0 = $67;
       $RP$0 = $66;
      }
     }
     $69 = $RP$0$lcssa >>> 0 < $2 >>> 0;
     if ($69) {
      _abort();
     } else {
      SAFE_HEAP_STORE($RP$0$lcssa | 0, 0 | 0, 4);
      $R$1 = $R$0$lcssa;
      break;
     }
    } else {
     $$sum29 = $$sum2 + 8 | 0;
     $48 = $mem + $$sum29 | 0;
     $49 = SAFE_HEAP_LOAD($48 | 0, 4, 0) | 0 | 0;
     $50 = $49 >>> 0 < $2 >>> 0;
     if ($50) {
      _abort();
     }
     $51 = $49 + 12 | 0;
     $52 = SAFE_HEAP_LOAD($51 | 0, 4, 0) | 0 | 0;
     $53 = ($52 | 0) == ($14 | 0);
     if (!$53) {
      _abort();
     }
     $54 = $46 + 8 | 0;
     $55 = SAFE_HEAP_LOAD($54 | 0, 4, 0) | 0 | 0;
     $56 = ($55 | 0) == ($14 | 0);
     if ($56) {
      SAFE_HEAP_STORE($51 | 0, $46 | 0, 4);
      SAFE_HEAP_STORE($54 | 0, $49 | 0, 4);
      $R$1 = $46;
      break;
     } else {
      _abort();
     }
    }
   } while (0);
   $70 = ($44 | 0) == (0 | 0);
   if ($70) {
    $p$0 = $14;
    $psize$0 = $15;
   } else {
    $$sum26 = $$sum2 + 28 | 0;
    $71 = $mem + $$sum26 | 0;
    $72 = SAFE_HEAP_LOAD($71 | 0, 4, 0) | 0 | 0;
    $73 = 1768 + ($72 << 2) | 0;
    $74 = SAFE_HEAP_LOAD($73 | 0, 4, 0) | 0 | 0;
    $75 = ($14 | 0) == ($74 | 0);
    if ($75) {
     SAFE_HEAP_STORE($73 | 0, $R$1 | 0, 4);
     $cond = ($R$1 | 0) == (0 | 0);
     if ($cond) {
      $76 = 1 << $72;
      $77 = $76 ^ -1;
      $78 = SAFE_HEAP_LOAD(1468 | 0, 4, 0) | 0 | 0;
      $79 = $78 & $77;
      SAFE_HEAP_STORE(1468 | 0, $79 | 0, 4);
      $p$0 = $14;
      $psize$0 = $15;
      break;
     }
    } else {
     $80 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
     $81 = $44 >>> 0 < $80 >>> 0;
     if ($81) {
      _abort();
     }
     $82 = $44 + 16 | 0;
     $83 = SAFE_HEAP_LOAD($82 | 0, 4, 0) | 0 | 0;
     $84 = ($83 | 0) == ($14 | 0);
     if ($84) {
      SAFE_HEAP_STORE($82 | 0, $R$1 | 0, 4);
     } else {
      $85 = $44 + 20 | 0;
      SAFE_HEAP_STORE($85 | 0, $R$1 | 0, 4);
     }
     $86 = ($R$1 | 0) == (0 | 0);
     if ($86) {
      $p$0 = $14;
      $psize$0 = $15;
      break;
     }
    }
    $87 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
    $88 = $R$1 >>> 0 < $87 >>> 0;
    if ($88) {
     _abort();
    }
    $89 = $R$1 + 24 | 0;
    SAFE_HEAP_STORE($89 | 0, $44 | 0, 4);
    $$sum27 = $$sum2 + 16 | 0;
    $90 = $mem + $$sum27 | 0;
    $91 = SAFE_HEAP_LOAD($90 | 0, 4, 0) | 0 | 0;
    $92 = ($91 | 0) == (0 | 0);
    do {
     if (!$92) {
      $93 = $91 >>> 0 < $87 >>> 0;
      if ($93) {
       _abort();
      } else {
       $94 = $R$1 + 16 | 0;
       SAFE_HEAP_STORE($94 | 0, $91 | 0, 4);
       $95 = $91 + 24 | 0;
       SAFE_HEAP_STORE($95 | 0, $R$1 | 0, 4);
       break;
      }
     }
    } while (0);
    $$sum28 = $$sum2 + 20 | 0;
    $96 = $mem + $$sum28 | 0;
    $97 = SAFE_HEAP_LOAD($96 | 0, 4, 0) | 0 | 0;
    $98 = ($97 | 0) == (0 | 0);
    if ($98) {
     $p$0 = $14;
     $psize$0 = $15;
    } else {
     $99 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
     $100 = $97 >>> 0 < $99 >>> 0;
     if ($100) {
      _abort();
     } else {
      $101 = $R$1 + 20 | 0;
      SAFE_HEAP_STORE($101 | 0, $97 | 0, 4);
      $102 = $97 + 24 | 0;
      SAFE_HEAP_STORE($102 | 0, $R$1 | 0, 4);
      $p$0 = $14;
      $psize$0 = $15;
      break;
     }
    }
   }
  } else {
   $p$0 = $1;
   $psize$0 = $8;
  }
 } while (0);
 $110 = $p$0 >>> 0 < $9 >>> 0;
 if (!$110) {
  _abort();
 }
 $$sum19 = $8 + -4 | 0;
 $111 = $mem + $$sum19 | 0;
 $112 = SAFE_HEAP_LOAD($111 | 0, 4, 0) | 0 | 0;
 $113 = $112 & 1;
 $114 = ($113 | 0) == 0;
 if ($114) {
  _abort();
 }
 $115 = $112 & 2;
 $116 = ($115 | 0) == 0;
 if ($116) {
  $117 = SAFE_HEAP_LOAD(1488 | 0, 4, 0) | 0 | 0;
  $118 = ($9 | 0) == ($117 | 0);
  if ($118) {
   $119 = SAFE_HEAP_LOAD(1476 | 0, 4, 0) | 0 | 0;
   $120 = $119 + $psize$0 | 0;
   SAFE_HEAP_STORE(1476 | 0, $120 | 0, 4);
   SAFE_HEAP_STORE(1488 | 0, $p$0 | 0, 4);
   $121 = $120 | 1;
   $122 = $p$0 + 4 | 0;
   SAFE_HEAP_STORE($122 | 0, $121 | 0, 4);
   $123 = SAFE_HEAP_LOAD(1484 | 0, 4, 0) | 0 | 0;
   $124 = ($p$0 | 0) == ($123 | 0);
   if (!$124) {
    return;
   }
   SAFE_HEAP_STORE(1484 | 0, 0 | 0, 4);
   SAFE_HEAP_STORE(1472 | 0, 0 | 0, 4);
   return;
  }
  $125 = SAFE_HEAP_LOAD(1484 | 0, 4, 0) | 0 | 0;
  $126 = ($9 | 0) == ($125 | 0);
  if ($126) {
   $127 = SAFE_HEAP_LOAD(1472 | 0, 4, 0) | 0 | 0;
   $128 = $127 + $psize$0 | 0;
   SAFE_HEAP_STORE(1472 | 0, $128 | 0, 4);
   SAFE_HEAP_STORE(1484 | 0, $p$0 | 0, 4);
   $129 = $128 | 1;
   $130 = $p$0 + 4 | 0;
   SAFE_HEAP_STORE($130 | 0, $129 | 0, 4);
   $131 = $p$0 + $128 | 0;
   SAFE_HEAP_STORE($131 | 0, $128 | 0, 4);
   return;
  }
  $132 = $112 & -8;
  $133 = $132 + $psize$0 | 0;
  $134 = $112 >>> 3;
  $135 = $112 >>> 0 < 256;
  do {
   if ($135) {
    $136 = $mem + $8 | 0;
    $137 = SAFE_HEAP_LOAD($136 | 0, 4, 0) | 0 | 0;
    $$sum1718 = $8 | 4;
    $138 = $mem + $$sum1718 | 0;
    $139 = SAFE_HEAP_LOAD($138 | 0, 4, 0) | 0 | 0;
    $140 = $134 << 1;
    $141 = 1504 + ($140 << 2) | 0;
    $142 = ($137 | 0) == ($141 | 0);
    if (!$142) {
     $143 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
     $144 = $137 >>> 0 < $143 >>> 0;
     if ($144) {
      _abort();
     }
     $145 = $137 + 12 | 0;
     $146 = SAFE_HEAP_LOAD($145 | 0, 4, 0) | 0 | 0;
     $147 = ($146 | 0) == ($9 | 0);
     if (!$147) {
      _abort();
     }
    }
    $148 = ($139 | 0) == ($137 | 0);
    if ($148) {
     $149 = 1 << $134;
     $150 = $149 ^ -1;
     $151 = SAFE_HEAP_LOAD(1464 | 0, 4, 0) | 0 | 0;
     $152 = $151 & $150;
     SAFE_HEAP_STORE(1464 | 0, $152 | 0, 4);
     break;
    }
    $153 = ($139 | 0) == ($141 | 0);
    if ($153) {
     $$pre58 = $139 + 8 | 0;
     $$pre$phi59Z2D = $$pre58;
    } else {
     $154 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
     $155 = $139 >>> 0 < $154 >>> 0;
     if ($155) {
      _abort();
     }
     $156 = $139 + 8 | 0;
     $157 = SAFE_HEAP_LOAD($156 | 0, 4, 0) | 0 | 0;
     $158 = ($157 | 0) == ($9 | 0);
     if ($158) {
      $$pre$phi59Z2D = $156;
     } else {
      _abort();
     }
    }
    $159 = $137 + 12 | 0;
    SAFE_HEAP_STORE($159 | 0, $139 | 0, 4);
    SAFE_HEAP_STORE($$pre$phi59Z2D | 0, $137 | 0, 4);
   } else {
    $$sum5 = $8 + 16 | 0;
    $160 = $mem + $$sum5 | 0;
    $161 = SAFE_HEAP_LOAD($160 | 0, 4, 0) | 0 | 0;
    $$sum67 = $8 | 4;
    $162 = $mem + $$sum67 | 0;
    $163 = SAFE_HEAP_LOAD($162 | 0, 4, 0) | 0 | 0;
    $164 = ($163 | 0) == ($9 | 0);
    do {
     if ($164) {
      $$sum9 = $8 + 12 | 0;
      $175 = $mem + $$sum9 | 0;
      $176 = SAFE_HEAP_LOAD($175 | 0, 4, 0) | 0 | 0;
      $177 = ($176 | 0) == (0 | 0);
      if ($177) {
       $$sum8 = $8 + 8 | 0;
       $178 = $mem + $$sum8 | 0;
       $179 = SAFE_HEAP_LOAD($178 | 0, 4, 0) | 0 | 0;
       $180 = ($179 | 0) == (0 | 0);
       if ($180) {
        $R7$1 = 0;
        break;
       } else {
        $R7$0 = $179;
        $RP9$0 = $178;
       }
      } else {
       $R7$0 = $176;
       $RP9$0 = $175;
      }
      while (1) {
       $181 = $R7$0 + 20 | 0;
       $182 = SAFE_HEAP_LOAD($181 | 0, 4, 0) | 0 | 0;
       $183 = ($182 | 0) == (0 | 0);
       if (!$183) {
        $R7$0 = $182;
        $RP9$0 = $181;
        continue;
       }
       $184 = $R7$0 + 16 | 0;
       $185 = SAFE_HEAP_LOAD($184 | 0, 4, 0) | 0 | 0;
       $186 = ($185 | 0) == (0 | 0);
       if ($186) {
        $R7$0$lcssa = $R7$0;
        $RP9$0$lcssa = $RP9$0;
        break;
       } else {
        $R7$0 = $185;
        $RP9$0 = $184;
       }
      }
      $187 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
      $188 = $RP9$0$lcssa >>> 0 < $187 >>> 0;
      if ($188) {
       _abort();
      } else {
       SAFE_HEAP_STORE($RP9$0$lcssa | 0, 0 | 0, 4);
       $R7$1 = $R7$0$lcssa;
       break;
      }
     } else {
      $165 = $mem + $8 | 0;
      $166 = SAFE_HEAP_LOAD($165 | 0, 4, 0) | 0 | 0;
      $167 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
      $168 = $166 >>> 0 < $167 >>> 0;
      if ($168) {
       _abort();
      }
      $169 = $166 + 12 | 0;
      $170 = SAFE_HEAP_LOAD($169 | 0, 4, 0) | 0 | 0;
      $171 = ($170 | 0) == ($9 | 0);
      if (!$171) {
       _abort();
      }
      $172 = $163 + 8 | 0;
      $173 = SAFE_HEAP_LOAD($172 | 0, 4, 0) | 0 | 0;
      $174 = ($173 | 0) == ($9 | 0);
      if ($174) {
       SAFE_HEAP_STORE($169 | 0, $163 | 0, 4);
       SAFE_HEAP_STORE($172 | 0, $166 | 0, 4);
       $R7$1 = $163;
       break;
      } else {
       _abort();
      }
     }
    } while (0);
    $189 = ($161 | 0) == (0 | 0);
    if (!$189) {
     $$sum12 = $8 + 20 | 0;
     $190 = $mem + $$sum12 | 0;
     $191 = SAFE_HEAP_LOAD($190 | 0, 4, 0) | 0 | 0;
     $192 = 1768 + ($191 << 2) | 0;
     $193 = SAFE_HEAP_LOAD($192 | 0, 4, 0) | 0 | 0;
     $194 = ($9 | 0) == ($193 | 0);
     if ($194) {
      SAFE_HEAP_STORE($192 | 0, $R7$1 | 0, 4);
      $cond47 = ($R7$1 | 0) == (0 | 0);
      if ($cond47) {
       $195 = 1 << $191;
       $196 = $195 ^ -1;
       $197 = SAFE_HEAP_LOAD(1468 | 0, 4, 0) | 0 | 0;
       $198 = $197 & $196;
       SAFE_HEAP_STORE(1468 | 0, $198 | 0, 4);
       break;
      }
     } else {
      $199 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
      $200 = $161 >>> 0 < $199 >>> 0;
      if ($200) {
       _abort();
      }
      $201 = $161 + 16 | 0;
      $202 = SAFE_HEAP_LOAD($201 | 0, 4, 0) | 0 | 0;
      $203 = ($202 | 0) == ($9 | 0);
      if ($203) {
       SAFE_HEAP_STORE($201 | 0, $R7$1 | 0, 4);
      } else {
       $204 = $161 + 20 | 0;
       SAFE_HEAP_STORE($204 | 0, $R7$1 | 0, 4);
      }
      $205 = ($R7$1 | 0) == (0 | 0);
      if ($205) {
       break;
      }
     }
     $206 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
     $207 = $R7$1 >>> 0 < $206 >>> 0;
     if ($207) {
      _abort();
     }
     $208 = $R7$1 + 24 | 0;
     SAFE_HEAP_STORE($208 | 0, $161 | 0, 4);
     $$sum13 = $8 + 8 | 0;
     $209 = $mem + $$sum13 | 0;
     $210 = SAFE_HEAP_LOAD($209 | 0, 4, 0) | 0 | 0;
     $211 = ($210 | 0) == (0 | 0);
     do {
      if (!$211) {
       $212 = $210 >>> 0 < $206 >>> 0;
       if ($212) {
        _abort();
       } else {
        $213 = $R7$1 + 16 | 0;
        SAFE_HEAP_STORE($213 | 0, $210 | 0, 4);
        $214 = $210 + 24 | 0;
        SAFE_HEAP_STORE($214 | 0, $R7$1 | 0, 4);
        break;
       }
      }
     } while (0);
     $$sum14 = $8 + 12 | 0;
     $215 = $mem + $$sum14 | 0;
     $216 = SAFE_HEAP_LOAD($215 | 0, 4, 0) | 0 | 0;
     $217 = ($216 | 0) == (0 | 0);
     if (!$217) {
      $218 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
      $219 = $216 >>> 0 < $218 >>> 0;
      if ($219) {
       _abort();
      } else {
       $220 = $R7$1 + 20 | 0;
       SAFE_HEAP_STORE($220 | 0, $216 | 0, 4);
       $221 = $216 + 24 | 0;
       SAFE_HEAP_STORE($221 | 0, $R7$1 | 0, 4);
       break;
      }
     }
    }
   }
  } while (0);
  $222 = $133 | 1;
  $223 = $p$0 + 4 | 0;
  SAFE_HEAP_STORE($223 | 0, $222 | 0, 4);
  $224 = $p$0 + $133 | 0;
  SAFE_HEAP_STORE($224 | 0, $133 | 0, 4);
  $225 = SAFE_HEAP_LOAD(1484 | 0, 4, 0) | 0 | 0;
  $226 = ($p$0 | 0) == ($225 | 0);
  if ($226) {
   SAFE_HEAP_STORE(1472 | 0, $133 | 0, 4);
   return;
  } else {
   $psize$1 = $133;
  }
 } else {
  $227 = $112 & -2;
  SAFE_HEAP_STORE($111 | 0, $227 | 0, 4);
  $228 = $psize$0 | 1;
  $229 = $p$0 + 4 | 0;
  SAFE_HEAP_STORE($229 | 0, $228 | 0, 4);
  $230 = $p$0 + $psize$0 | 0;
  SAFE_HEAP_STORE($230 | 0, $psize$0 | 0, 4);
  $psize$1 = $psize$0;
 }
 $231 = $psize$1 >>> 3;
 $232 = $psize$1 >>> 0 < 256;
 if ($232) {
  $233 = $231 << 1;
  $234 = 1504 + ($233 << 2) | 0;
  $235 = SAFE_HEAP_LOAD(1464 | 0, 4, 0) | 0 | 0;
  $236 = 1 << $231;
  $237 = $235 & $236;
  $238 = ($237 | 0) == 0;
  if ($238) {
   $239 = $235 | $236;
   SAFE_HEAP_STORE(1464 | 0, $239 | 0, 4);
   $$pre = $233 + 2 | 0;
   $$pre57 = 1504 + ($$pre << 2) | 0;
   $$pre$phiZ2D = $$pre57;
   $F16$0 = $234;
  } else {
   $$sum11 = $233 + 2 | 0;
   $240 = 1504 + ($$sum11 << 2) | 0;
   $241 = SAFE_HEAP_LOAD($240 | 0, 4, 0) | 0 | 0;
   $242 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
   $243 = $241 >>> 0 < $242 >>> 0;
   if ($243) {
    _abort();
   } else {
    $$pre$phiZ2D = $240;
    $F16$0 = $241;
   }
  }
  SAFE_HEAP_STORE($$pre$phiZ2D | 0, $p$0 | 0, 4);
  $244 = $F16$0 + 12 | 0;
  SAFE_HEAP_STORE($244 | 0, $p$0 | 0, 4);
  $245 = $p$0 + 8 | 0;
  SAFE_HEAP_STORE($245 | 0, $F16$0 | 0, 4);
  $246 = $p$0 + 12 | 0;
  SAFE_HEAP_STORE($246 | 0, $234 | 0, 4);
  return;
 }
 $247 = $psize$1 >>> 8;
 $248 = ($247 | 0) == 0;
 if ($248) {
  $I18$0 = 0;
 } else {
  $249 = $psize$1 >>> 0 > 16777215;
  if ($249) {
   $I18$0 = 31;
  } else {
   $250 = $247 + 1048320 | 0;
   $251 = $250 >>> 16;
   $252 = $251 & 8;
   $253 = $247 << $252;
   $254 = $253 + 520192 | 0;
   $255 = $254 >>> 16;
   $256 = $255 & 4;
   $257 = $256 | $252;
   $258 = $253 << $256;
   $259 = $258 + 245760 | 0;
   $260 = $259 >>> 16;
   $261 = $260 & 2;
   $262 = $257 | $261;
   $263 = 14 - $262 | 0;
   $264 = $258 << $261;
   $265 = $264 >>> 15;
   $266 = $263 + $265 | 0;
   $267 = $266 << 1;
   $268 = $266 + 7 | 0;
   $269 = $psize$1 >>> $268;
   $270 = $269 & 1;
   $271 = $270 | $267;
   $I18$0 = $271;
  }
 }
 $272 = 1768 + ($I18$0 << 2) | 0;
 $273 = $p$0 + 28 | 0;
 SAFE_HEAP_STORE($273 | 0, $I18$0 | 0, 4);
 $274 = $p$0 + 16 | 0;
 $275 = $p$0 + 20 | 0;
 SAFE_HEAP_STORE($275 | 0, 0 | 0, 4);
 SAFE_HEAP_STORE($274 | 0, 0 | 0, 4);
 $276 = SAFE_HEAP_LOAD(1468 | 0, 4, 0) | 0 | 0;
 $277 = 1 << $I18$0;
 $278 = $276 & $277;
 $279 = ($278 | 0) == 0;
 L199 : do {
  if ($279) {
   $280 = $276 | $277;
   SAFE_HEAP_STORE(1468 | 0, $280 | 0, 4);
   SAFE_HEAP_STORE($272 | 0, $p$0 | 0, 4);
   $281 = $p$0 + 24 | 0;
   SAFE_HEAP_STORE($281 | 0, $272 | 0, 4);
   $282 = $p$0 + 12 | 0;
   SAFE_HEAP_STORE($282 | 0, $p$0 | 0, 4);
   $283 = $p$0 + 8 | 0;
   SAFE_HEAP_STORE($283 | 0, $p$0 | 0, 4);
  } else {
   $284 = SAFE_HEAP_LOAD($272 | 0, 4, 0) | 0 | 0;
   $285 = $284 + 4 | 0;
   $286 = SAFE_HEAP_LOAD($285 | 0, 4, 0) | 0 | 0;
   $287 = $286 & -8;
   $288 = ($287 | 0) == ($psize$1 | 0);
   L202 : do {
    if ($288) {
     $T$0$lcssa = $284;
    } else {
     $289 = ($I18$0 | 0) == 31;
     $290 = $I18$0 >>> 1;
     $291 = 25 - $290 | 0;
     $292 = $289 ? 0 : $291;
     $293 = $psize$1 << $292;
     $K19$052 = $293;
     $T$051 = $284;
     while (1) {
      $300 = $K19$052 >>> 31;
      $301 = ($T$051 + 16 | 0) + ($300 << 2) | 0;
      $296 = SAFE_HEAP_LOAD($301 | 0, 4, 0) | 0 | 0;
      $302 = ($296 | 0) == (0 | 0);
      if ($302) {
       $$lcssa = $301;
       $T$051$lcssa = $T$051;
       break;
      }
      $294 = $K19$052 << 1;
      $295 = $296 + 4 | 0;
      $297 = SAFE_HEAP_LOAD($295 | 0, 4, 0) | 0 | 0;
      $298 = $297 & -8;
      $299 = ($298 | 0) == ($psize$1 | 0);
      if ($299) {
       $T$0$lcssa = $296;
       break L202;
      } else {
       $K19$052 = $294;
       $T$051 = $296;
      }
     }
     $303 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
     $304 = $$lcssa >>> 0 < $303 >>> 0;
     if ($304) {
      _abort();
     } else {
      SAFE_HEAP_STORE($$lcssa | 0, $p$0 | 0, 4);
      $305 = $p$0 + 24 | 0;
      SAFE_HEAP_STORE($305 | 0, $T$051$lcssa | 0, 4);
      $306 = $p$0 + 12 | 0;
      SAFE_HEAP_STORE($306 | 0, $p$0 | 0, 4);
      $307 = $p$0 + 8 | 0;
      SAFE_HEAP_STORE($307 | 0, $p$0 | 0, 4);
      break L199;
     }
    }
   } while (0);
   $308 = $T$0$lcssa + 8 | 0;
   $309 = SAFE_HEAP_LOAD($308 | 0, 4, 0) | 0 | 0;
   $310 = SAFE_HEAP_LOAD(1480 | 0, 4, 0) | 0 | 0;
   $311 = $309 >>> 0 >= $310 >>> 0;
   $not$ = $T$0$lcssa >>> 0 >= $310 >>> 0;
   $312 = $311 & $not$;
   if ($312) {
    $313 = $309 + 12 | 0;
    SAFE_HEAP_STORE($313 | 0, $p$0 | 0, 4);
    SAFE_HEAP_STORE($308 | 0, $p$0 | 0, 4);
    $314 = $p$0 + 8 | 0;
    SAFE_HEAP_STORE($314 | 0, $309 | 0, 4);
    $315 = $p$0 + 12 | 0;
    SAFE_HEAP_STORE($315 | 0, $T$0$lcssa | 0, 4);
    $316 = $p$0 + 24 | 0;
    SAFE_HEAP_STORE($316 | 0, 0 | 0, 4);
    break;
   } else {
    _abort();
   }
  }
 } while (0);
 $317 = SAFE_HEAP_LOAD(1496 | 0, 4, 0) | 0 | 0;
 $318 = $317 + -1 | 0;
 SAFE_HEAP_STORE(1496 | 0, $318 | 0, 4);
 $319 = ($318 | 0) == 0;
 if ($319) {
  $sp$0$in$i = 1920;
 } else {
  return;
 }
 while (1) {
  $sp$0$i = SAFE_HEAP_LOAD($sp$0$in$i | 0, 4, 0) | 0 | 0;
  $320 = ($sp$0$i | 0) == (0 | 0);
  $321 = $sp$0$i + 8 | 0;
  if ($320) {
   break;
  } else {
   $sp$0$in$i = $321;
  }
 }
 SAFE_HEAP_STORE(1496 | 0, -1 | 0, 4);
 return;
}

function _ReconstructRow($dec, $ctx) {
 $dec = $dec | 0;
 $ctx = $ctx | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $bits = 0, $bits_uv = 0, $block = 0, $cache_id = 0, $coeffs = 0, $dst = 0, $j = 0, $mb_x = 0, $mb_y = 0, $n = 0, $pred_func = 0, $pred_func1 = 0, $top_right = 0, $top_yuv = 0, $u_dst = 0, $u_out = 0, $uv_offset = 0, $v_dst = 0, $v_out = 0, $y_dst = 0;
 var $y_offset = 0, $y_out = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $ctx;
 $2 = $1;
 $3 = $2 + 4 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $mb_y = $4;
 $5 = $1;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $cache_id = $6;
 $7 = $0;
 $8 = $7 + 2264 | 0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $10 = $9 + 40 | 0;
 $y_dst = $10;
 $11 = $0;
 $12 = $11 + 2264 | 0;
 $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
 $14 = $13 + 584 | 0;
 $u_dst = $14;
 $15 = $0;
 $16 = $15 + 2264 | 0;
 $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
 $18 = $17 + 600 | 0;
 $v_dst = $18;
 $j = 0;
 while (1) {
  $19 = $j;
  $20 = ($19 | 0) < 16;
  if (!$20) {
   break;
  }
  $21 = $j;
  $22 = $21 << 5;
  $23 = $22 - 1 | 0;
  $24 = $y_dst;
  $25 = $24 + $23 | 0;
  SAFE_HEAP_STORE($25 >> 0 | 0, -127 | 0, 1);
  $26 = $j;
  $27 = $26 + 1 | 0;
  $j = $27;
 }
 $j = 0;
 while (1) {
  $28 = $j;
  $29 = ($28 | 0) < 8;
  if (!$29) {
   break;
  }
  $30 = $j;
  $31 = $30 << 5;
  $32 = $31 - 1 | 0;
  $33 = $u_dst;
  $34 = $33 + $32 | 0;
  SAFE_HEAP_STORE($34 >> 0 | 0, -127 | 0, 1);
  $35 = $j;
  $36 = $35 << 5;
  $37 = $36 - 1 | 0;
  $38 = $v_dst;
  $39 = $38 + $37 | 0;
  SAFE_HEAP_STORE($39 >> 0 | 0, -127 | 0, 1);
  $40 = $j;
  $41 = $40 + 1 | 0;
  $j = $41;
 }
 $42 = $mb_y;
 $43 = ($42 | 0) > 0;
 if ($43) {
  $44 = $v_dst;
  $45 = $44 + -33 | 0;
  SAFE_HEAP_STORE($45 >> 0 | 0, -127 | 0, 1);
  $46 = $u_dst;
  $47 = $46 + -33 | 0;
  SAFE_HEAP_STORE($47 >> 0 | 0, -127 | 0, 1);
  $48 = $y_dst;
  $49 = $48 + -33 | 0;
  SAFE_HEAP_STORE($49 >> 0 | 0, -127 | 0, 1);
 } else {
  $50 = $y_dst;
  $51 = $50 + -32 | 0;
  $52 = $51 + -1 | 0;
  dest = $52;
  stop = dest + 21 | 0;
  do {
   SAFE_HEAP_STORE(dest >> 0 | 0, 127 | 0 | 0, 1);
   dest = dest + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $53 = $u_dst;
  $54 = $53 + -32 | 0;
  $55 = $54 + -1 | 0;
  dest = $55;
  stop = dest + 9 | 0;
  do {
   SAFE_HEAP_STORE(dest >> 0 | 0, 127 | 0 | 0, 1);
   dest = dest + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $56 = $v_dst;
  $57 = $56 + -32 | 0;
  $58 = $57 + -1 | 0;
  dest = $58;
  stop = dest + 9 | 0;
  do {
   SAFE_HEAP_STORE(dest >> 0 | 0, 127 | 0 | 0, 1);
   dest = dest + 1 | 0;
  } while ((dest | 0) < (stop | 0));
 }
 $mb_x = 0;
 while (1) {
  $59 = $mb_x;
  $60 = $0;
  $61 = $60 + 288 | 0;
  $62 = SAFE_HEAP_LOAD($61 | 0, 4, 0) | 0 | 0;
  $63 = ($59 | 0) < ($62 | 0);
  if (!$63) {
   break;
  }
  $64 = $1;
  $65 = $64 + 16 | 0;
  $66 = SAFE_HEAP_LOAD($65 | 0, 4, 0) | 0 | 0;
  $67 = $mb_x;
  $68 = $66 + ($67 * 800 | 0) | 0;
  $block = $68;
  $69 = $mb_x;
  $70 = ($69 | 0) > 0;
  L16 : do {
   if ($70) {
    $j = -1;
    while (1) {
     $71 = $j;
     $72 = ($71 | 0) < 16;
     if (!$72) {
      break;
     }
     $73 = $j;
     $74 = $73 << 5;
     $75 = $74 - 4 | 0;
     $76 = $y_dst;
     $77 = $76 + $75 | 0;
     $78 = $j;
     $79 = $78 << 5;
     $80 = $79 + 12 | 0;
     $81 = $y_dst;
     $82 = $81 + $80 | 0;
     _Copy32b($77, $82);
     $83 = $j;
     $84 = $83 + 1 | 0;
     $j = $84;
    }
    $j = -1;
    while (1) {
     $85 = $j;
     $86 = ($85 | 0) < 8;
     if (!$86) {
      break L16;
     }
     $87 = $j;
     $88 = $87 << 5;
     $89 = $88 - 4 | 0;
     $90 = $u_dst;
     $91 = $90 + $89 | 0;
     $92 = $j;
     $93 = $92 << 5;
     $94 = $93 + 4 | 0;
     $95 = $u_dst;
     $96 = $95 + $94 | 0;
     _Copy32b($91, $96);
     $97 = $j;
     $98 = $97 << 5;
     $99 = $98 - 4 | 0;
     $100 = $v_dst;
     $101 = $100 + $99 | 0;
     $102 = $j;
     $103 = $102 << 5;
     $104 = $103 + 4 | 0;
     $105 = $v_dst;
     $106 = $105 + $104 | 0;
     _Copy32b($101, $106);
     $107 = $j;
     $108 = $107 + 1 | 0;
     $j = $108;
    }
   }
  } while (0);
  $109 = $0;
  $110 = $109 + 2252 | 0;
  $111 = SAFE_HEAP_LOAD($110 | 0, 4, 0) | 0 | 0;
  $112 = $mb_x;
  $113 = $111 + ($112 << 5) | 0;
  $top_yuv = $113;
  $114 = $block;
  $coeffs = $114;
  $115 = $block;
  $116 = $115 + 788 | 0;
  $117 = SAFE_HEAP_LOAD($116 | 0, 4, 0) | 0 | 0;
  $bits = $117;
  $118 = $mb_y;
  $119 = ($118 | 0) > 0;
  if ($119) {
   $120 = $y_dst;
   $121 = $120 + -32 | 0;
   $122 = $top_yuv;
   dest = $121;
   src = $122;
   stop = dest + 16 | 0;
   do {
    SAFE_HEAP_STORE(dest >> 0 | 0, SAFE_HEAP_LOAD(src >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   $123 = $u_dst;
   $124 = $123 + -32 | 0;
   $125 = $top_yuv;
   $126 = $125 + 16 | 0;
   {}
   SAFE_HEAP_STORE($124 >> 0 | 0, SAFE_HEAP_LOAD($126 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($124 + 1 >> 0 | 0, SAFE_HEAP_LOAD($126 + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($124 + 2 >> 0 | 0, SAFE_HEAP_LOAD($126 + 2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($124 + 3 >> 0 | 0, SAFE_HEAP_LOAD($126 + 3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($124 + 4 >> 0 | 0, SAFE_HEAP_LOAD($126 + 4 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($124 + 5 >> 0 | 0, SAFE_HEAP_LOAD($126 + 5 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($124 + 6 >> 0 | 0, SAFE_HEAP_LOAD($126 + 6 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($124 + 7 >> 0 | 0, SAFE_HEAP_LOAD($126 + 7 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   $127 = $v_dst;
   $128 = $127 + -32 | 0;
   $129 = $top_yuv;
   $130 = $129 + 24 | 0;
   {}
   SAFE_HEAP_STORE($128 >> 0 | 0, SAFE_HEAP_LOAD($130 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($128 + 1 >> 0 | 0, SAFE_HEAP_LOAD($130 + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($128 + 2 >> 0 | 0, SAFE_HEAP_LOAD($130 + 2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($128 + 3 >> 0 | 0, SAFE_HEAP_LOAD($130 + 3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($128 + 4 >> 0 | 0, SAFE_HEAP_LOAD($130 + 4 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($128 + 5 >> 0 | 0, SAFE_HEAP_LOAD($130 + 5 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($128 + 6 >> 0 | 0, SAFE_HEAP_LOAD($130 + 6 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($128 + 7 >> 0 | 0, SAFE_HEAP_LOAD($130 + 7 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  }
  $131 = $block;
  $132 = $131 + 768 | 0;
  $133 = SAFE_HEAP_LOAD($132 >> 0 | 0, 1, 0) | 0 | 0;
  $134 = $133 << 24 >> 24 != 0;
  L29 : do {
   if ($134) {
    $135 = $y_dst;
    $136 = $135 + -32 | 0;
    $137 = $136 + 16 | 0;
    $top_right = $137;
    $138 = $mb_y;
    $139 = ($138 | 0) > 0;
    do {
     if ($139) {
      $140 = $mb_x;
      $141 = $0;
      $142 = $141 + 288 | 0;
      $143 = SAFE_HEAP_LOAD($142 | 0, 4, 0) | 0 | 0;
      $144 = $143 - 1 | 0;
      $145 = ($140 | 0) >= ($144 | 0);
      $146 = $top_right;
      $147 = $top_yuv;
      if ($145) {
       $148 = $147 + 15 | 0;
       $149 = SAFE_HEAP_LOAD($148 >> 0 | 0, 1, 0) | 0 | 0;
       $150 = $149 & 255;
       $151 = $150 & 255;
       _memset($146 | 0, $151 | 0, 4) | 0;
       break;
      } else {
       $152 = $147 + 32 | 0;
       {}
       SAFE_HEAP_STORE($146 >> 0 | 0, SAFE_HEAP_LOAD($152 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
       SAFE_HEAP_STORE($146 + 1 >> 0 | 0, SAFE_HEAP_LOAD($152 + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
       SAFE_HEAP_STORE($146 + 2 >> 0 | 0, SAFE_HEAP_LOAD($152 + 2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
       SAFE_HEAP_STORE($146 + 3 >> 0 | 0, SAFE_HEAP_LOAD($152 + 3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
       break;
      }
     }
    } while (0);
    $153 = $top_right;
    $154 = SAFE_HEAP_LOAD($153 | 0, 4, 0) | 0 | 0;
    $155 = $top_right;
    $156 = $155 + 384 | 0;
    SAFE_HEAP_STORE($156 | 0, $154 | 0, 4);
    $157 = $top_right;
    $158 = $157 + 256 | 0;
    SAFE_HEAP_STORE($158 | 0, $154 | 0, 4);
    $159 = $top_right;
    $160 = $159 + 128 | 0;
    SAFE_HEAP_STORE($160 | 0, $154 | 0, 4);
    $n = 0;
    while (1) {
     $161 = $n;
     $162 = ($161 | 0) < 16;
     if (!$162) {
      break L29;
     }
     $163 = $y_dst;
     $164 = $n;
     $165 = 160 + ($164 << 2) | 0;
     $166 = SAFE_HEAP_LOAD($165 | 0, 4, 0) | 0 | 0;
     $167 = $163 + $166 | 0;
     $dst = $167;
     $168 = $n;
     $169 = $block;
     $170 = $169 + 769 | 0;
     $171 = $170 + $168 | 0;
     $172 = SAFE_HEAP_LOAD($171 >> 0 | 0, 1, 0) | 0 | 0;
     $173 = $172 & 255;
     $174 = 488 + ($173 << 2) | 0;
     $175 = SAFE_HEAP_LOAD($174 | 0, 4, 0) | 0 | 0;
     $176 = $dst;
     FUNCTION_TABLE_vi[(SAFE_FT_MASK($175 | 0, 255 | 0) | 0) & 255]($176);
     $177 = $bits;
     $178 = $coeffs;
     $179 = $n;
     $180 = $179 << 4;
     $181 = $178 + ($180 << 1) | 0;
     $182 = $dst;
     _DoTransform($177, $181, $182);
     $183 = $n;
     $184 = $183 + 1 | 0;
     $n = $184;
     $185 = $bits;
     $186 = $185 << 2;
     $bits = $186;
    }
   } else {
    $187 = $mb_x;
    $188 = $mb_y;
    $189 = $block;
    $190 = $189 + 769 | 0;
    $191 = SAFE_HEAP_LOAD($190 >> 0 | 0, 1, 0) | 0 | 0;
    $192 = $191 & 255;
    $193 = _CheckMode($187, $188, $192) | 0;
    $pred_func = $193;
    $194 = $pred_func;
    $195 = 528 + ($194 << 2) | 0;
    $196 = SAFE_HEAP_LOAD($195 | 0, 4, 0) | 0 | 0;
    $197 = $y_dst;
    FUNCTION_TABLE_vi[(SAFE_FT_MASK($196 | 0, 255 | 0) | 0) & 255]($197);
    $198 = $bits;
    $199 = ($198 | 0) != 0;
    if ($199) {
     $n = 0;
     while (1) {
      $200 = $n;
      $201 = ($200 | 0) < 16;
      if (!$201) {
       break L29;
      }
      $202 = $bits;
      $203 = $coeffs;
      $204 = $n;
      $205 = $204 << 4;
      $206 = $203 + ($205 << 1) | 0;
      $207 = $y_dst;
      $208 = $n;
      $209 = 160 + ($208 << 2) | 0;
      $210 = SAFE_HEAP_LOAD($209 | 0, 4, 0) | 0 | 0;
      $211 = $207 + $210 | 0;
      _DoTransform($202, $206, $211);
      $212 = $n;
      $213 = $212 + 1 | 0;
      $n = $213;
      $214 = $bits;
      $215 = $214 << 2;
      $bits = $215;
     }
    }
   }
  } while (0);
  $216 = $block;
  $217 = $216 + 792 | 0;
  $218 = SAFE_HEAP_LOAD($217 | 0, 4, 0) | 0 | 0;
  $bits_uv = $218;
  $219 = $mb_x;
  $220 = $mb_y;
  $221 = $block;
  $222 = $221 + 785 | 0;
  $223 = SAFE_HEAP_LOAD($222 >> 0 | 0, 1, 0) | 0 | 0;
  $224 = $223 & 255;
  $225 = _CheckMode($219, $220, $224) | 0;
  $pred_func1 = $225;
  $226 = $pred_func1;
  $227 = 556 + ($226 << 2) | 0;
  $228 = SAFE_HEAP_LOAD($227 | 0, 4, 0) | 0 | 0;
  $229 = $u_dst;
  FUNCTION_TABLE_vi[(SAFE_FT_MASK($228 | 0, 255 | 0) | 0) & 255]($229);
  $230 = $pred_func1;
  $231 = 556 + ($230 << 2) | 0;
  $232 = SAFE_HEAP_LOAD($231 | 0, 4, 0) | 0 | 0;
  $233 = $v_dst;
  FUNCTION_TABLE_vi[(SAFE_FT_MASK($232 | 0, 255 | 0) | 0) & 255]($233);
  $234 = $bits_uv;
  $235 = $234 >>> 0;
  $236 = $coeffs;
  $237 = $236 + 512 | 0;
  $238 = $u_dst;
  _DoUVTransform($235, $237, $238);
  $239 = $bits_uv;
  $240 = $239 >>> 8;
  $241 = $coeffs;
  $242 = $241 + 640 | 0;
  $243 = $v_dst;
  _DoUVTransform($240, $242, $243);
  $244 = $mb_y;
  $245 = $0;
  $246 = $245 + 292 | 0;
  $247 = SAFE_HEAP_LOAD($246 | 0, 4, 0) | 0 | 0;
  $248 = $247 - 1 | 0;
  $249 = ($244 | 0) < ($248 | 0);
  if ($249) {
   $250 = $top_yuv;
   $251 = $y_dst;
   $252 = $251 + 480 | 0;
   dest = $250;
   src = $252;
   stop = dest + 16 | 0;
   do {
    SAFE_HEAP_STORE(dest >> 0 | 0, SAFE_HEAP_LOAD(src >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   $253 = $top_yuv;
   $254 = $253 + 16 | 0;
   $255 = $u_dst;
   $256 = $255 + 224 | 0;
   {}
   SAFE_HEAP_STORE($254 >> 0 | 0, SAFE_HEAP_LOAD($256 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($254 + 1 >> 0 | 0, SAFE_HEAP_LOAD($256 + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($254 + 2 >> 0 | 0, SAFE_HEAP_LOAD($256 + 2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($254 + 3 >> 0 | 0, SAFE_HEAP_LOAD($256 + 3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($254 + 4 >> 0 | 0, SAFE_HEAP_LOAD($256 + 4 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($254 + 5 >> 0 | 0, SAFE_HEAP_LOAD($256 + 5 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($254 + 6 >> 0 | 0, SAFE_HEAP_LOAD($256 + 6 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($254 + 7 >> 0 | 0, SAFE_HEAP_LOAD($256 + 7 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   $257 = $top_yuv;
   $258 = $257 + 24 | 0;
   $259 = $v_dst;
   $260 = $259 + 224 | 0;
   {}
   SAFE_HEAP_STORE($258 >> 0 | 0, SAFE_HEAP_LOAD($260 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($258 + 1 >> 0 | 0, SAFE_HEAP_LOAD($260 + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($258 + 2 >> 0 | 0, SAFE_HEAP_LOAD($260 + 2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($258 + 3 >> 0 | 0, SAFE_HEAP_LOAD($260 + 3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($258 + 4 >> 0 | 0, SAFE_HEAP_LOAD($260 + 4 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($258 + 5 >> 0 | 0, SAFE_HEAP_LOAD($260 + 5 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($258 + 6 >> 0 | 0, SAFE_HEAP_LOAD($260 + 6 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($258 + 7 >> 0 | 0, SAFE_HEAP_LOAD($260 + 7 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  }
  $261 = $cache_id;
  $262 = $261 << 4;
  $263 = $0;
  $264 = $263 + 2280 | 0;
  $265 = SAFE_HEAP_LOAD($264 | 0, 4, 0) | 0 | 0;
  $266 = Math_imul($262, $265) | 0;
  $y_offset = $266;
  $267 = $cache_id;
  $268 = $267 << 3;
  $269 = $0;
  $270 = $269 + 2284 | 0;
  $271 = SAFE_HEAP_LOAD($270 | 0, 4, 0) | 0 | 0;
  $272 = Math_imul($268, $271) | 0;
  $uv_offset = $272;
  $273 = $0;
  $274 = $273 + 2268 | 0;
  $275 = SAFE_HEAP_LOAD($274 | 0, 4, 0) | 0 | 0;
  $276 = $mb_x;
  $277 = $276 << 4;
  $278 = $275 + $277 | 0;
  $279 = $y_offset;
  $280 = $278 + $279 | 0;
  $y_out = $280;
  $281 = $0;
  $282 = $281 + 2272 | 0;
  $283 = SAFE_HEAP_LOAD($282 | 0, 4, 0) | 0 | 0;
  $284 = $mb_x;
  $285 = $284 << 3;
  $286 = $283 + $285 | 0;
  $287 = $uv_offset;
  $288 = $286 + $287 | 0;
  $u_out = $288;
  $289 = $0;
  $290 = $289 + 2276 | 0;
  $291 = SAFE_HEAP_LOAD($290 | 0, 4, 0) | 0 | 0;
  $292 = $mb_x;
  $293 = $292 << 3;
  $294 = $291 + $293 | 0;
  $295 = $uv_offset;
  $296 = $294 + $295 | 0;
  $v_out = $296;
  $j = 0;
  while (1) {
   $297 = $j;
   $298 = ($297 | 0) < 16;
   if (!$298) {
    break;
   }
   $299 = $y_out;
   $300 = $j;
   $301 = $0;
   $302 = $301 + 2280 | 0;
   $303 = SAFE_HEAP_LOAD($302 | 0, 4, 0) | 0 | 0;
   $304 = Math_imul($300, $303) | 0;
   $305 = $299 + $304 | 0;
   $306 = $y_dst;
   $307 = $j;
   $308 = $307 << 5;
   $309 = $306 + $308 | 0;
   dest = $305;
   src = $309;
   stop = dest + 16 | 0;
   do {
    SAFE_HEAP_STORE(dest >> 0 | 0, SAFE_HEAP_LOAD(src >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
    dest = dest + 1 | 0;
    src = src + 1 | 0;
   } while ((dest | 0) < (stop | 0));
   $310 = $j;
   $311 = $310 + 1 | 0;
   $j = $311;
  }
  $j = 0;
  while (1) {
   $312 = $j;
   $313 = ($312 | 0) < 8;
   if (!$313) {
    break;
   }
   $314 = $u_out;
   $315 = $j;
   $316 = $0;
   $317 = $316 + 2284 | 0;
   $318 = SAFE_HEAP_LOAD($317 | 0, 4, 0) | 0 | 0;
   $319 = Math_imul($315, $318) | 0;
   $320 = $314 + $319 | 0;
   $321 = $u_dst;
   $322 = $j;
   $323 = $322 << 5;
   $324 = $321 + $323 | 0;
   {}
   SAFE_HEAP_STORE($320 >> 0 | 0, SAFE_HEAP_LOAD($324 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($320 + 1 >> 0 | 0, SAFE_HEAP_LOAD($324 + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($320 + 2 >> 0 | 0, SAFE_HEAP_LOAD($324 + 2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($320 + 3 >> 0 | 0, SAFE_HEAP_LOAD($324 + 3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($320 + 4 >> 0 | 0, SAFE_HEAP_LOAD($324 + 4 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($320 + 5 >> 0 | 0, SAFE_HEAP_LOAD($324 + 5 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($320 + 6 >> 0 | 0, SAFE_HEAP_LOAD($324 + 6 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($320 + 7 >> 0 | 0, SAFE_HEAP_LOAD($324 + 7 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   $325 = $v_out;
   $326 = $j;
   $327 = $0;
   $328 = $327 + 2284 | 0;
   $329 = SAFE_HEAP_LOAD($328 | 0, 4, 0) | 0 | 0;
   $330 = Math_imul($326, $329) | 0;
   $331 = $325 + $330 | 0;
   $332 = $v_dst;
   $333 = $j;
   $334 = $333 << 5;
   $335 = $332 + $334 | 0;
   {}
   SAFE_HEAP_STORE($331 >> 0 | 0, SAFE_HEAP_LOAD($335 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($331 + 1 >> 0 | 0, SAFE_HEAP_LOAD($335 + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($331 + 2 >> 0 | 0, SAFE_HEAP_LOAD($335 + 2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($331 + 3 >> 0 | 0, SAFE_HEAP_LOAD($335 + 3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($331 + 4 >> 0 | 0, SAFE_HEAP_LOAD($335 + 4 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($331 + 5 >> 0 | 0, SAFE_HEAP_LOAD($335 + 5 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($331 + 6 >> 0 | 0, SAFE_HEAP_LOAD($335 + 6 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   SAFE_HEAP_STORE($331 + 7 >> 0 | 0, SAFE_HEAP_LOAD($335 + 7 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   $336 = $j;
   $337 = $336 + 1 | 0;
   $j = $337;
  }
  $338 = $mb_x;
  $339 = $338 + 1 | 0;
  $mb_x = $339;
 }
 STACKTOP = sp;
 return;
}

function _DecodeImageData($dec, $data, $width, $height, $last_row, $process_func) {
 $dec = $dec | 0;
 $data = $data | 0;
 $width = $width | 0;
 $height = $height | 0;
 $last_row = $last_row | 0;
 $process_func = $process_func | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $alpha = 0, $blue = 0, $br = 0, $code = 0, $col = 0, $color_cache = 0, $color_cache_limit = 0, $dist = 0, $dist_code = 0, $dist_symbol = 0, $hdr = 0, $htree_group = 0, $key = 0, $last_cached = 0, $len_code_limit = 0, $length = 0, $length_sym = 0;
 var $mask = 0, $next_sync_row = 0, $or$cond = 0, $or$cond3 = 0, $red = 0, $row = 0, $src = 0, $src_end = 0, $src_last = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $dec;
 $2 = $data;
 $3 = $width;
 $4 = $height;
 $5 = $last_row;
 $6 = $process_func;
 $7 = $1;
 $8 = $7 + 112 | 0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $10 = $3;
 $11 = ($9 | 0) / ($10 | 0) & -1;
 $row = $11;
 $12 = $1;
 $13 = $12 + 112 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $15 = $3;
 $16 = ($14 | 0) % ($15 | 0) & -1;
 $col = $16;
 $17 = $1;
 $18 = $17 + 24 | 0;
 $br = $18;
 $19 = $1;
 $20 = $19 + 120 | 0;
 $hdr = $20;
 $21 = $hdr;
 $22 = $col;
 $23 = $row;
 $24 = _GetHtreeGroupForPos($21, $22, $23) | 0;
 $htree_group = $24;
 $25 = $2;
 $26 = $1;
 $27 = $26 + 112 | 0;
 $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
 $29 = $25 + ($28 << 2) | 0;
 $src = $29;
 $30 = $src;
 $last_cached = $30;
 $31 = $2;
 $32 = $3;
 $33 = $4;
 $34 = Math_imul($32, $33) | 0;
 $35 = $31 + ($34 << 2) | 0;
 $src_end = $35;
 $36 = $2;
 $37 = $3;
 $38 = $5;
 $39 = Math_imul($37, $38) | 0;
 $40 = $36 + ($39 << 2) | 0;
 $src_last = $40;
 $len_code_limit = 280;
 $41 = $hdr;
 $42 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
 $43 = 280 + $42 | 0;
 $color_cache_limit = $43;
 $44 = $1;
 $45 = $44 + 56 | 0;
 $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
 $47 = ($46 | 0) != 0;
 $48 = $row;
 $49 = $47 ? $48 : 16777216;
 $next_sync_row = $49;
 $50 = $hdr;
 $51 = SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0;
 $52 = ($51 | 0) > 0;
 $53 = $hdr;
 $54 = $53 + 4 | 0;
 $55 = $52 ? $54 : 0;
 $color_cache = $55;
 $56 = $hdr;
 $57 = $56 + 28 | 0;
 $58 = SAFE_HEAP_LOAD($57 | 0, 4, 0) | 0 | 0;
 $mask = $58;
 $59 = $htree_group;
 $60 = ($59 | 0) != (0 | 0);
 if (!$60) {
  ___assert_fail(8373 | 0, 7124 | 0, 1039, 8393 | 0);
 }
 $61 = $src;
 $62 = $src_end;
 $63 = $61 >>> 0 < $62 >>> 0;
 if (!$63) {
  ___assert_fail(8409 | 0, 7124 | 0, 1040, 8393 | 0);
 }
 $64 = $src_last;
 $65 = $src_end;
 $66 = $64 >>> 0 <= $65 >>> 0;
 if (!$66) {
  ___assert_fail(8423 | 0, 7124 | 0, 1041, 8393 | 0);
 }
 L10 : while (1) {
  $67 = $src;
  $68 = $src_last;
  $69 = $67 >>> 0 < $68 >>> 0;
  if (!$69) {
   label = 55;
   break;
  }
  $70 = $row;
  $71 = $next_sync_row;
  $72 = ($70 | 0) >= ($71 | 0);
  if ($72) {
   $73 = $1;
   $74 = $src;
   $75 = $2;
   $76 = $74;
   $77 = $75;
   $78 = $76 - $77 | 0;
   $79 = ($78 | 0) / 4 & -1;
   _SaveState($73, $79);
   $80 = $row;
   $81 = $80 + 8 | 0;
   $next_sync_row = $81;
  }
  $82 = $col;
  $83 = $mask;
  $84 = $82 & $83;
  $85 = ($84 | 0) == 0;
  if ($85) {
   $86 = $hdr;
   $87 = $col;
   $88 = $row;
   $89 = _GetHtreeGroupForPos($86, $87, $88) | 0;
   $htree_group = $89;
  }
  $90 = $htree_group;
  $91 = $90 + 28 | 0;
  $92 = SAFE_HEAP_LOAD($91 | 0, 4, 0) | 0 | 0;
  $93 = ($92 | 0) != 0;
  L19 : do {
   if ($93) {
    $94 = $htree_group;
    $95 = $94 + 24 | 0;
    $96 = SAFE_HEAP_LOAD($95 | 0, 4, 0) | 0 | 0;
    $97 = $src;
    SAFE_HEAP_STORE($97 | 0, $96 | 0, 4);
    label = 24;
   } else {
    $98 = $br;
    _VP8LFillBitWindow($98);
    $99 = $htree_group;
    $100 = $99 + 32 | 0;
    $101 = SAFE_HEAP_LOAD($100 | 0, 4, 0) | 0 | 0;
    $102 = ($101 | 0) != 0;
    $103 = $htree_group;
    if ($102) {
     $104 = $br;
     $105 = $src;
     $106 = _ReadPackedSymbols($103, $104, $105) | 0;
     $code = $106;
     $107 = $code;
     $108 = ($107 | 0) == 0;
     if ($108) {
      label = 24;
      break;
     }
    } else {
     $109 = SAFE_HEAP_LOAD($103 | 0, 4, 0) | 0 | 0;
     $110 = $br;
     $111 = _ReadSymbol($109, $110) | 0;
     $code = $111;
    }
    $112 = $br;
    $113 = $112 + 24 | 0;
    $114 = SAFE_HEAP_LOAD($113 | 0, 4, 0) | 0 | 0;
    $115 = ($114 | 0) != 0;
    if ($115) {
     label = 55;
     break L10;
    }
    $116 = $code;
    $117 = ($116 | 0) < 256;
    if ($117) {
     $118 = $htree_group;
     $119 = $118 + 20 | 0;
     $120 = SAFE_HEAP_LOAD($119 | 0, 4, 0) | 0 | 0;
     $121 = ($120 | 0) != 0;
     $122 = $htree_group;
     if ($121) {
      $123 = $122 + 24 | 0;
      $124 = SAFE_HEAP_LOAD($123 | 0, 4, 0) | 0 | 0;
      $125 = $code;
      $126 = $125 << 8;
      $127 = $124 | $126;
      $128 = $src;
      SAFE_HEAP_STORE($128 | 0, $127 | 0, 4);
      label = 24;
      break;
     }
     $129 = $122 + 4 | 0;
     $130 = SAFE_HEAP_LOAD($129 | 0, 4, 0) | 0 | 0;
     $131 = $br;
     $132 = _ReadSymbol($130, $131) | 0;
     $red = $132;
     $133 = $br;
     _VP8LFillBitWindow($133);
     $134 = $htree_group;
     $135 = $134 + 8 | 0;
     $136 = SAFE_HEAP_LOAD($135 | 0, 4, 0) | 0 | 0;
     $137 = $br;
     $138 = _ReadSymbol($136, $137) | 0;
     $blue = $138;
     $139 = $htree_group;
     $140 = $139 + 12 | 0;
     $141 = SAFE_HEAP_LOAD($140 | 0, 4, 0) | 0 | 0;
     $142 = $br;
     $143 = _ReadSymbol($141, $142) | 0;
     $alpha = $143;
     $144 = $br;
     $145 = $144 + 24 | 0;
     $146 = SAFE_HEAP_LOAD($145 | 0, 4, 0) | 0 | 0;
     $147 = ($146 | 0) != 0;
     if ($147) {
      label = 55;
      break L10;
     }
     $148 = $alpha;
     $149 = $148 << 24;
     $150 = $red;
     $151 = $150 << 16;
     $152 = $149 | $151;
     $153 = $code;
     $154 = $153 << 8;
     $155 = $152 | $154;
     $156 = $blue;
     $157 = $155 | $156;
     $158 = $src;
     SAFE_HEAP_STORE($158 | 0, $157 | 0, 4);
     label = 24;
     break;
    }
    $185 = $code;
    $186 = ($185 | 0) < 280;
    $187 = $code;
    if (!$186) {
     $269 = $color_cache_limit;
     $270 = ($187 | 0) < ($269 | 0);
     if (!$270) {
      break L10;
     }
     $271 = $code;
     $272 = $271 - 280 | 0;
     $key = $272;
     $273 = $color_cache;
     $274 = ($273 | 0) != (0 | 0);
     if (!$274) {
      label = 47;
      break L10;
     }
     while (1) {
      $275 = $last_cached;
      $276 = $src;
      $277 = $275 >>> 0 < $276 >>> 0;
      $278 = $color_cache;
      if (!$277) {
       break;
      }
      $279 = $last_cached;
      $280 = $279 + 4 | 0;
      $last_cached = $280;
      $281 = SAFE_HEAP_LOAD($279 | 0, 4, 0) | 0 | 0;
      _VP8LColorCacheInsert($278, $281);
     }
     $282 = $key;
     $283 = _VP8LColorCacheLookup($278, $282) | 0;
     $284 = $src;
     SAFE_HEAP_STORE($284 | 0, $283 | 0, 4);
     label = 24;
     break;
    }
    $188 = $187 - 256 | 0;
    $length_sym = $188;
    $189 = $length_sym;
    $190 = $br;
    $191 = _GetCopyLength($189, $190) | 0;
    $length = $191;
    $192 = $htree_group;
    $193 = $192 + 16 | 0;
    $194 = SAFE_HEAP_LOAD($193 | 0, 4, 0) | 0 | 0;
    $195 = $br;
    $196 = _ReadSymbol($194, $195) | 0;
    $dist_symbol = $196;
    $197 = $br;
    _VP8LFillBitWindow($197);
    $198 = $dist_symbol;
    $199 = $br;
    $200 = _GetCopyDistance($198, $199) | 0;
    $dist_code = $200;
    $201 = $3;
    $202 = $dist_code;
    $203 = _PlaneCodeToDistance($201, $202) | 0;
    $dist = $203;
    $204 = $br;
    $205 = $204 + 24 | 0;
    $206 = SAFE_HEAP_LOAD($205 | 0, 4, 0) | 0 | 0;
    $207 = ($206 | 0) != 0;
    if ($207) {
     label = 55;
     break L10;
    }
    $208 = $src;
    $209 = $2;
    $210 = $208;
    $211 = $209;
    $212 = $210 - $211 | 0;
    $213 = ($212 | 0) / 4 & -1;
    $214 = $dist;
    $215 = ($213 | 0) < ($214 | 0);
    if ($215) {
     break L10;
    }
    $216 = $src_end;
    $217 = $src;
    $218 = $216;
    $219 = $217;
    $220 = $218 - $219 | 0;
    $221 = ($220 | 0) / 4 & -1;
    $222 = $length;
    $223 = ($221 | 0) < ($222 | 0);
    if ($223) {
     break L10;
    }
    $224 = $src;
    $225 = $dist;
    $226 = $length;
    _CopyBlock32b($224, $225, $226);
    $227 = $length;
    $228 = $src;
    $229 = $228 + ($227 << 2) | 0;
    $src = $229;
    $230 = $length;
    $231 = $col;
    $232 = $231 + $230 | 0;
    $col = $232;
    while (1) {
     $233 = $col;
     $234 = $3;
     $235 = ($233 | 0) >= ($234 | 0);
     if (!$235) {
      break;
     }
     $236 = $3;
     $237 = $col;
     $238 = $237 - $236 | 0;
     $col = $238;
     $239 = $row;
     $240 = $239 + 1 | 0;
     $row = $240;
     $241 = $row;
     $242 = ($241 | 0) % 16 & -1;
     $243 = ($242 | 0) == 0;
     $244 = $6;
     $245 = ($244 | 0) != (0 | 0);
     $or$cond3 = $243 & $245;
     if (!$or$cond3) {
      continue;
     }
     $246 = $6;
     $247 = $1;
     $248 = $row;
     FUNCTION_TABLE_vii[(SAFE_FT_MASK($246 | 0, 127 | 0) | 0) & 127]($247, $248);
    }
    $249 = $src;
    $250 = $src_end;
    $251 = $249 >>> 0 <= $250 >>> 0;
    if (!$251) {
     label = 39;
     break L10;
    }
    $252 = $col;
    $253 = $mask;
    $254 = $252 & $253;
    $255 = ($254 | 0) != 0;
    if ($255) {
     $256 = $hdr;
     $257 = $col;
     $258 = $row;
     $259 = _GetHtreeGroupForPos($256, $257, $258) | 0;
     $htree_group = $259;
    }
    $260 = $color_cache;
    $261 = ($260 | 0) != (0 | 0);
    if ($261) {
     while (1) {
      $262 = $last_cached;
      $263 = $src;
      $264 = $262 >>> 0 < $263 >>> 0;
      if (!$264) {
       break L19;
      }
      $265 = $color_cache;
      $266 = $last_cached;
      $267 = $266 + 4 | 0;
      $last_cached = $267;
      $268 = SAFE_HEAP_LOAD($266 | 0, 4, 0) | 0 | 0;
      _VP8LColorCacheInsert($265, $268);
     }
    }
   }
  } while (0);
  L58 : do {
   if ((label | 0) == 24) {
    label = 0;
    $159 = $src;
    $160 = $159 + 4 | 0;
    $src = $160;
    $161 = $col;
    $162 = $161 + 1 | 0;
    $col = $162;
    $163 = $col;
    $164 = $3;
    $165 = ($163 | 0) >= ($164 | 0);
    if ($165) {
     $col = 0;
     $166 = $row;
     $167 = $166 + 1 | 0;
     $row = $167;
     $168 = $row;
     $169 = ($168 | 0) % 16 & -1;
     $170 = ($169 | 0) == 0;
     $171 = $6;
     $172 = ($171 | 0) != (0 | 0);
     $or$cond = $170 & $172;
     if ($or$cond) {
      $173 = $6;
      $174 = $1;
      $175 = $row;
      FUNCTION_TABLE_vii[(SAFE_FT_MASK($173 | 0, 127 | 0) | 0) & 127]($174, $175);
     }
     $176 = $color_cache;
     $177 = ($176 | 0) != (0 | 0);
     if ($177) {
      while (1) {
       $178 = $last_cached;
       $179 = $src;
       $180 = $178 >>> 0 < $179 >>> 0;
       if (!$180) {
        break L58;
       }
       $181 = $color_cache;
       $182 = $last_cached;
       $183 = $182 + 4 | 0;
       $last_cached = $183;
       $184 = SAFE_HEAP_LOAD($182 | 0, 4, 0) | 0 | 0;
       _VP8LColorCacheInsert($181, $184);
      }
     }
    }
   }
  } while (0);
  $285 = $br;
  $286 = $285 + 24 | 0;
  $287 = SAFE_HEAP_LOAD($286 | 0, 4, 0) | 0 | 0;
  $288 = $br;
  $289 = _VP8LIsEndOfStream($288) | 0;
  $290 = ($287 | 0) == ($289 | 0);
  if (!$290) {
   label = 53;
   break;
  }
 }
 do {
  if ((label | 0) == 39) {
   ___assert_fail(8443 | 0, 7124 | 0, 1117, 8393 | 0);
  } else if ((label | 0) == 47) {
   ___assert_fail(8458 | 0, 7124 | 0, 1126, 8393 | 0);
  } else if ((label | 0) == 53) {
   ___assert_fail(8478 | 0, 7124 | 0, 1135, 8393 | 0);
  } else if ((label | 0) == 55) {
   $291 = $1;
   $292 = $291 + 56 | 0;
   $293 = SAFE_HEAP_LOAD($292 | 0, 4, 0) | 0 | 0;
   $294 = ($293 | 0) != 0;
   if ($294) {
    $295 = $br;
    $296 = $295 + 24 | 0;
    $297 = SAFE_HEAP_LOAD($296 | 0, 4, 0) | 0 | 0;
    $298 = ($297 | 0) != 0;
    if ($298) {
     $299 = $src;
     $300 = $src_end;
     $301 = $299 >>> 0 < $300 >>> 0;
     if ($301) {
      $302 = $1;
      _RestoreState($302);
     } else {
      label = 59;
     }
    } else {
     label = 59;
    }
   } else {
    label = 59;
   }
   if ((label | 0) == 59) {
    $303 = $br;
    $304 = $303 + 24 | 0;
    $305 = SAFE_HEAP_LOAD($304 | 0, 4, 0) | 0 | 0;
    $306 = ($305 | 0) != 0;
    if ($306) {
     break;
    }
    $307 = $6;
    $308 = ($307 | 0) != (0 | 0);
    if ($308) {
     $309 = $6;
     $310 = $1;
     $311 = $row;
     FUNCTION_TABLE_vii[(SAFE_FT_MASK($309 | 0, 127 | 0) | 0) & 127]($310, $311);
    }
    $312 = $1;
    SAFE_HEAP_STORE($312 | 0, 0 | 0, 4);
    $313 = $src;
    $314 = $2;
    $315 = $313;
    $316 = $314;
    $317 = $315 - $316 | 0;
    $318 = ($317 | 0) / 4 & -1;
    $319 = $1;
    $320 = $319 + 112 | 0;
    SAFE_HEAP_STORE($320 | 0, $318 | 0, 4);
   }
   $0 = 1;
   $322 = $0;
   STACKTOP = sp;
   return $322 | 0;
  }
 } while (0);
 $321 = $1;
 SAFE_HEAP_STORE($321 | 0, 3 | 0, 4);
 $0 = 0;
 $322 = $0;
 STACKTOP = sp;
 return $322 | 0;
}

function _ReadHuffmanCodes($dec, $xsize, $ysize, $color_cache_bits, $allow_recursion) {
 $dec = $dec | 0;
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $color_cache_bits = $color_cache_bits | 0;
 $allow_recursion = $allow_recursion | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alpha = 0, $alphabet_size = 0, $alphabet_size1 = 0, $blue = 0, $br = 0, $code_lengths = 0, $group = 0, $hdr = 0, $htree_group = 0, $htree_groups = 0, $htrees = 0, $huffman_image = 0, $huffman_pixs = 0;
 var $huffman_precision = 0, $huffman_tables = 0, $huffman_xsize = 0, $huffman_ysize = 0, $i = 0, $is_trivial_literal = 0, $j = 0, $k = 0, $local_max_bits = 0, $max_alphabet_size = 0, $max_bits = 0, $next = 0, $num_htree_groups = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $red = 0, $size = 0, $table_size = 0;
 var $total_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $huffman_image = sp + 100 | 0;
 $1 = $dec;
 $2 = $xsize;
 $3 = $ysize;
 $4 = $color_cache_bits;
 $5 = $allow_recursion;
 $6 = $1;
 $7 = $6 + 24 | 0;
 $br = $7;
 $8 = $1;
 $9 = $8 + 120 | 0;
 $hdr = $9;
 SAFE_HEAP_STORE($huffman_image | 0, 0 | 0, 4);
 $htree_groups = 0;
 $huffman_tables = 0;
 $next = 0;
 $num_htree_groups = 1;
 $max_alphabet_size = 0;
 $code_lengths = 0;
 $10 = $4;
 $11 = 308 + ($10 << 2) | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $table_size = $12;
 $13 = $5;
 $14 = ($13 | 0) != 0;
 L1 : do {
  if ($14) {
   $15 = $br;
   $16 = _VP8LReadBits($15, 1) | 0;
   $17 = ($16 | 0) != 0;
   if ($17) {
    $18 = $br;
    $19 = _VP8LReadBits($18, 3) | 0;
    $20 = $19 + 2 | 0;
    $huffman_precision = $20;
    $21 = $2;
    $22 = $huffman_precision;
    $23 = _VP8LSubSampleSize($21, $22) | 0;
    $huffman_xsize = $23;
    $24 = $3;
    $25 = $huffman_precision;
    $26 = _VP8LSubSampleSize($24, $25) | 0;
    $huffman_ysize = $26;
    $27 = $huffman_xsize;
    $28 = $huffman_ysize;
    $29 = Math_imul($27, $28) | 0;
    $huffman_pixs = $29;
    $30 = $huffman_xsize;
    $31 = $huffman_ysize;
    $32 = $1;
    $33 = _DecodeImageStream($30, $31, 0, $32, $huffman_image) | 0;
    $34 = ($33 | 0) != 0;
    if ($34) {
     $35 = $huffman_precision;
     $36 = $hdr;
     $37 = $36 + 32 | 0;
     SAFE_HEAP_STORE($37 | 0, $35 | 0, 4);
     $i = 0;
     while (1) {
      $38 = $i;
      $39 = $huffman_pixs;
      $40 = ($38 | 0) < ($39 | 0);
      if (!$40) {
       label = 9;
       break L1;
      }
      $41 = $i;
      $42 = SAFE_HEAP_LOAD($huffman_image | 0, 4, 0) | 0 | 0;
      $43 = $42 + ($41 << 2) | 0;
      $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
      $45 = $44 >>> 8;
      $46 = $45 & 65535;
      $group = $46;
      $47 = $group;
      $48 = $i;
      $49 = SAFE_HEAP_LOAD($huffman_image | 0, 4, 0) | 0 | 0;
      $50 = $49 + ($48 << 2) | 0;
      SAFE_HEAP_STORE($50 | 0, $47 | 0, 4);
      $51 = $group;
      $52 = $num_htree_groups;
      $53 = ($51 | 0) >= ($52 | 0);
      if ($53) {
       $54 = $group;
       $55 = $54 + 1 | 0;
       $num_htree_groups = $55;
      }
      $56 = $i;
      $57 = $56 + 1 | 0;
      $i = $57;
     }
    }
   } else {
    label = 9;
   }
  } else {
   label = 9;
  }
 } while (0);
 L11 : do {
  if ((label | 0) == 9) {
   $58 = $br;
   $59 = $58 + 24 | 0;
   $60 = SAFE_HEAP_LOAD($59 | 0, 4, 0) | 0 | 0;
   $61 = ($60 | 0) != 0;
   if (!$61) {
    $j = 0;
    while (1) {
     $62 = $j;
     $63 = ($62 | 0) < 5;
     if (!$63) {
      break;
     }
     $64 = $j;
     $65 = 2216 + ($64 << 1) | 0;
     $66 = SAFE_HEAP_LOAD($65 | 0, 2, 0) | 0 | 0;
     $67 = $66 & 65535;
     $alphabet_size = $67;
     $68 = $j;
     $69 = ($68 | 0) == 0;
     $70 = $4;
     $71 = ($70 | 0) > 0;
     $or$cond = $69 & $71;
     if ($or$cond) {
      $72 = $4;
      $73 = 1 << $72;
      $74 = $alphabet_size;
      $75 = $74 + $73 | 0;
      $alphabet_size = $75;
     }
     $76 = $max_alphabet_size;
     $77 = $alphabet_size;
     $78 = ($76 | 0) < ($77 | 0);
     if ($78) {
      $79 = $alphabet_size;
      $max_alphabet_size = $79;
     }
     $80 = $j;
     $81 = $80 + 1 | 0;
     $j = $81;
    }
    $82 = $num_htree_groups;
    $83 = $table_size;
    $84 = Math_imul($82, $83) | 0;
    $85 = ($84 | 0) < 0;
    $86 = $85 << 31 >> 31;
    $87 = _WebPSafeMalloc($84, $86, 4) | 0;
    $huffman_tables = $87;
    $88 = $num_htree_groups;
    $89 = _VP8LHtreeGroupsNew($88) | 0;
    $htree_groups = $89;
    $90 = $max_alphabet_size;
    $91 = ($90 | 0) < 0;
    $92 = $91 << 31 >> 31;
    $93 = _WebPSafeCalloc($90, $92, 4) | 0;
    $code_lengths = $93;
    $94 = $htree_groups;
    $95 = ($94 | 0) == (0 | 0);
    $96 = $code_lengths;
    $97 = ($96 | 0) == (0 | 0);
    $or$cond3 = $95 | $97;
    $98 = $huffman_tables;
    $99 = ($98 | 0) == (0 | 0);
    $or$cond5 = $or$cond3 | $99;
    if ($or$cond5) {
     $100 = $1;
     SAFE_HEAP_STORE($100 | 0, 1 | 0, 4);
     break;
    }
    $101 = $huffman_tables;
    $next = $101;
    $i = 0;
    while (1) {
     $102 = $i;
     $103 = $num_htree_groups;
     $104 = ($102 | 0) < ($103 | 0);
     if (!$104) {
      break;
     }
     $105 = $i;
     $106 = $htree_groups;
     $107 = $106 + ($105 * 548 | 0) | 0;
     $htree_group = $107;
     $108 = $htree_group;
     $htrees = $108;
     $total_size = 0;
     $is_trivial_literal = 1;
     $max_bits = 0;
     $j = 0;
     while (1) {
      $109 = $j;
      $110 = ($109 | 0) < 5;
      if (!$110) {
       break;
      }
      $111 = $j;
      $112 = 2216 + ($111 << 1) | 0;
      $113 = SAFE_HEAP_LOAD($112 | 0, 2, 0) | 0 | 0;
      $114 = $113 & 65535;
      $alphabet_size1 = $114;
      $115 = $next;
      $116 = $j;
      $117 = $htrees;
      $118 = $117 + ($116 << 2) | 0;
      SAFE_HEAP_STORE($118 | 0, $115 | 0, 4);
      $119 = $j;
      $120 = ($119 | 0) == 0;
      $121 = $4;
      $122 = ($121 | 0) > 0;
      $or$cond7 = $120 & $122;
      if ($or$cond7) {
       $123 = $4;
       $124 = 1 << $123;
       $125 = $alphabet_size1;
       $126 = $125 + $124 | 0;
       $alphabet_size1 = $126;
      }
      $127 = $alphabet_size1;
      $128 = $1;
      $129 = $code_lengths;
      $130 = $next;
      $131 = _ReadHuffmanCode($127, $128, $129, $130) | 0;
      $size = $131;
      $132 = $size;
      $133 = ($132 | 0) == 0;
      if ($133) {
       break L11;
      }
      $134 = $is_trivial_literal;
      $135 = ($134 | 0) != 0;
      if ($135) {
       $136 = $j;
       $137 = 7444 + $136 | 0;
       $138 = SAFE_HEAP_LOAD($137 >> 0 | 0, 1, 0) | 0 | 0;
       $139 = $138 & 255;
       $140 = ($139 | 0) == 1;
       if ($140) {
        $141 = $next;
        $142 = SAFE_HEAP_LOAD($141 >> 0 | 0, 1, 0) | 0 | 0;
        $143 = $142 & 255;
        $144 = ($143 | 0) == 0;
        $145 = $144 & 1;
        $is_trivial_literal = $145;
       }
      }
      $146 = $next;
      $147 = SAFE_HEAP_LOAD($146 >> 0 | 0, 1, 0) | 0 | 0;
      $148 = $147 & 255;
      $149 = $total_size;
      $150 = $149 + $148 | 0;
      $total_size = $150;
      $151 = $size;
      $152 = $next;
      $153 = $152 + ($151 << 2) | 0;
      $next = $153;
      $154 = $j;
      $155 = ($154 | 0) <= 3;
      if ($155) {
       $156 = $code_lengths;
       $157 = SAFE_HEAP_LOAD($156 | 0, 4, 0) | 0 | 0;
       $local_max_bits = $157;
       $k = 1;
       while (1) {
        $158 = $k;
        $159 = $alphabet_size1;
        $160 = ($158 | 0) < ($159 | 0);
        if (!$160) {
         break;
        }
        $161 = $k;
        $162 = $code_lengths;
        $163 = $162 + ($161 << 2) | 0;
        $164 = SAFE_HEAP_LOAD($163 | 0, 4, 0) | 0 | 0;
        $165 = $local_max_bits;
        $166 = ($164 | 0) > ($165 | 0);
        if ($166) {
         $167 = $k;
         $168 = $code_lengths;
         $169 = $168 + ($167 << 2) | 0;
         $170 = SAFE_HEAP_LOAD($169 | 0, 4, 0) | 0 | 0;
         $local_max_bits = $170;
        }
        $171 = $k;
        $172 = $171 + 1 | 0;
        $k = $172;
       }
       $173 = $local_max_bits;
       $174 = $max_bits;
       $175 = $174 + $173 | 0;
       $max_bits = $175;
      }
      $176 = $j;
      $177 = $176 + 1 | 0;
      $j = $177;
     }
     $178 = $is_trivial_literal;
     $179 = $htree_group;
     $180 = $179 + 20 | 0;
     SAFE_HEAP_STORE($180 | 0, $178 | 0, 4);
     $181 = $htree_group;
     $182 = $181 + 28 | 0;
     SAFE_HEAP_STORE($182 | 0, 0 | 0, 4);
     $183 = $is_trivial_literal;
     $184 = ($183 | 0) != 0;
     if ($184) {
      $185 = $htrees;
      $186 = $185 + 4 | 0;
      $187 = SAFE_HEAP_LOAD($186 | 0, 4, 0) | 0 | 0;
      $188 = $187 + 2 | 0;
      $189 = SAFE_HEAP_LOAD($188 | 0, 2, 0) | 0 | 0;
      $190 = $189 & 65535;
      $red = $190;
      $191 = $htrees;
      $192 = $191 + 8 | 0;
      $193 = SAFE_HEAP_LOAD($192 | 0, 4, 0) | 0 | 0;
      $194 = $193 + 2 | 0;
      $195 = SAFE_HEAP_LOAD($194 | 0, 2, 0) | 0 | 0;
      $196 = $195 & 65535;
      $blue = $196;
      $197 = $htrees;
      $198 = $197 + 12 | 0;
      $199 = SAFE_HEAP_LOAD($198 | 0, 4, 0) | 0 | 0;
      $200 = $199 + 2 | 0;
      $201 = SAFE_HEAP_LOAD($200 | 0, 2, 0) | 0 | 0;
      $202 = $201 & 65535;
      $alpha = $202;
      $203 = $alpha;
      $204 = $203 << 24;
      $205 = $red;
      $206 = $205 << 16;
      $207 = $204 | $206;
      $208 = $blue;
      $209 = $207 | $208;
      $210 = $htree_group;
      $211 = $210 + 24 | 0;
      SAFE_HEAP_STORE($211 | 0, $209 | 0, 4);
      $212 = $total_size;
      $213 = ($212 | 0) == 0;
      if ($213) {
       $214 = $htrees;
       $215 = SAFE_HEAP_LOAD($214 | 0, 4, 0) | 0 | 0;
       $216 = $215 + 2 | 0;
       $217 = SAFE_HEAP_LOAD($216 | 0, 2, 0) | 0 | 0;
       $218 = $217 & 65535;
       $219 = ($218 | 0) < 256;
       if ($219) {
        $220 = $htree_group;
        $221 = $220 + 28 | 0;
        SAFE_HEAP_STORE($221 | 0, 1 | 0, 4);
        $222 = $htrees;
        $223 = SAFE_HEAP_LOAD($222 | 0, 4, 0) | 0 | 0;
        $224 = $223 + 2 | 0;
        $225 = SAFE_HEAP_LOAD($224 | 0, 2, 0) | 0 | 0;
        $226 = $225 & 65535;
        $227 = $226 << 8;
        $228 = $htree_group;
        $229 = $228 + 24 | 0;
        $230 = SAFE_HEAP_LOAD($229 | 0, 4, 0) | 0 | 0;
        $231 = $230 | $227;
        SAFE_HEAP_STORE($229 | 0, $231 | 0, 4);
       }
      }
     }
     $232 = $htree_group;
     $233 = $232 + 28 | 0;
     $234 = SAFE_HEAP_LOAD($233 | 0, 4, 0) | 0 | 0;
     $235 = ($234 | 0) != 0;
     $236 = $max_bits;
     $237 = ($236 | 0) < 6;
     $238 = $235 ? 0 : $237;
     $239 = $238 & 1;
     $240 = $htree_group;
     $241 = $240 + 32 | 0;
     SAFE_HEAP_STORE($241 | 0, $239 | 0, 4);
     $242 = $htree_group;
     $243 = $242 + 32 | 0;
     $244 = SAFE_HEAP_LOAD($243 | 0, 4, 0) | 0 | 0;
     $245 = ($244 | 0) != 0;
     if ($245) {
      $246 = $htree_group;
      _BuildPackedTable($246);
     }
     $247 = $i;
     $248 = $247 + 1 | 0;
     $i = $248;
    }
    $249 = $code_lengths;
    _WebPSafeFree($249);
    $250 = SAFE_HEAP_LOAD($huffman_image | 0, 4, 0) | 0 | 0;
    $251 = $hdr;
    $252 = $251 + 40 | 0;
    SAFE_HEAP_STORE($252 | 0, $250 | 0, 4);
    $253 = $num_htree_groups;
    $254 = $hdr;
    $255 = $254 + 44 | 0;
    SAFE_HEAP_STORE($255 | 0, $253 | 0, 4);
    $256 = $htree_groups;
    $257 = $hdr;
    $258 = $257 + 48 | 0;
    SAFE_HEAP_STORE($258 | 0, $256 | 0, 4);
    $259 = $huffman_tables;
    $260 = $hdr;
    $261 = $260 + 52 | 0;
    SAFE_HEAP_STORE($261 | 0, $259 | 0, 4);
    $0 = 1;
    $266 = $0;
    STACKTOP = sp;
    return $266 | 0;
   }
  }
 } while (0);
 $262 = $code_lengths;
 _WebPSafeFree($262);
 $263 = SAFE_HEAP_LOAD($huffman_image | 0, 4, 0) | 0 | 0;
 _WebPSafeFree($263);
 $264 = $huffman_tables;
 _WebPSafeFree($264);
 $265 = $htree_groups;
 _VP8LHtreeGroupsFree($265);
 $0 = 0;
 $266 = $0;
 STACKTOP = sp;
 return $266 | 0;
}

function _FinishRow($dec, $io) {
 $dec = $dec | 0;
 $io = $io | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cache_id = 0, $ctx = 0;
 var $delta_y = 0, $extra_y_rows = 0, $is_first_row = 0, $is_last_row = 0, $mb_y = 0, $ok = 0, $or$cond = 0, $udst = 0, $uv_offset = 0, $uvsize = 0, $vdst = 0, $y_end = 0, $y_offset = 0, $y_start = 0, $ydst = 0, $ysize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $dec;
 $2 = $io;
 $ok = 1;
 $3 = $1;
 $4 = $3 + 160 | 0;
 $ctx = $4;
 $5 = $ctx;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $cache_id = $6;
 $7 = $1;
 $8 = $7 + 2308 | 0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $10 = 2630 + $9 | 0;
 $11 = SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0 | 0;
 $12 = $11 & 255;
 $extra_y_rows = $12;
 $13 = $extra_y_rows;
 $14 = $1;
 $15 = $14 + 2280 | 0;
 $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
 $17 = Math_imul($13, $16) | 0;
 $ysize = $17;
 $18 = $extra_y_rows;
 $19 = ($18 | 0) / 2 & -1;
 $20 = $1;
 $21 = $20 + 2284 | 0;
 $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
 $23 = Math_imul($19, $22) | 0;
 $uvsize = $23;
 $24 = $cache_id;
 $25 = $24 << 4;
 $26 = $1;
 $27 = $26 + 2280 | 0;
 $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
 $29 = Math_imul($25, $28) | 0;
 $y_offset = $29;
 $30 = $cache_id;
 $31 = $30 << 3;
 $32 = $1;
 $33 = $32 + 2284 | 0;
 $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
 $35 = Math_imul($31, $34) | 0;
 $uv_offset = $35;
 $36 = $1;
 $37 = $36 + 2268 | 0;
 $38 = SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0;
 $39 = $ysize;
 $40 = 0 - $39 | 0;
 $41 = $38 + $40 | 0;
 $42 = $y_offset;
 $43 = $41 + $42 | 0;
 $ydst = $43;
 $44 = $1;
 $45 = $44 + 2272 | 0;
 $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
 $47 = $uvsize;
 $48 = 0 - $47 | 0;
 $49 = $46 + $48 | 0;
 $50 = $uv_offset;
 $51 = $49 + $50 | 0;
 $udst = $51;
 $52 = $1;
 $53 = $52 + 2276 | 0;
 $54 = SAFE_HEAP_LOAD($53 | 0, 4, 0) | 0 | 0;
 $55 = $uvsize;
 $56 = 0 - $55 | 0;
 $57 = $54 + $56 | 0;
 $58 = $uv_offset;
 $59 = $57 + $58 | 0;
 $vdst = $59;
 $60 = $ctx;
 $61 = $60 + 4 | 0;
 $62 = SAFE_HEAP_LOAD($61 | 0, 4, 0) | 0 | 0;
 $mb_y = $62;
 $63 = $mb_y;
 $64 = ($63 | 0) == 0;
 $65 = $64 & 1;
 $is_first_row = $65;
 $66 = $mb_y;
 $67 = $1;
 $68 = $67 + 308 | 0;
 $69 = SAFE_HEAP_LOAD($68 | 0, 4, 0) | 0 | 0;
 $70 = $69 - 1 | 0;
 $71 = ($66 | 0) >= ($70 | 0);
 $72 = $71 & 1;
 $is_last_row = $72;
 $73 = $1;
 $74 = $73 + 148 | 0;
 $75 = SAFE_HEAP_LOAD($74 | 0, 4, 0) | 0 | 0;
 $76 = ($75 | 0) == 2;
 if ($76) {
  $77 = $1;
  $78 = $ctx;
  _ReconstructRow($77, $78);
 }
 $79 = $ctx;
 $80 = $79 + 8 | 0;
 $81 = SAFE_HEAP_LOAD($80 | 0, 4, 0) | 0 | 0;
 $82 = ($81 | 0) != 0;
 if ($82) {
  $83 = $1;
  _FilterRow($83);
 }
 $84 = $1;
 $85 = $84 + 540 | 0;
 $86 = SAFE_HEAP_LOAD($85 | 0, 4, 0) | 0 | 0;
 $87 = ($86 | 0) != 0;
 if ($87) {
  $88 = $1;
  _DitherRow($88);
 }
 $89 = $2;
 $90 = $89 + 44 | 0;
 $91 = SAFE_HEAP_LOAD($90 | 0, 4, 0) | 0 | 0;
 $92 = ($91 | 0) != (0 | 0);
 if ($92) {
  $93 = $mb_y;
  $94 = $93 << 4;
  $y_start = $94;
  $95 = $mb_y;
  $96 = $95 + 1 | 0;
  $97 = $96 << 4;
  $y_end = $97;
  $98 = $is_first_row;
  $99 = ($98 | 0) != 0;
  if ($99) {
   $112 = $1;
   $113 = $112 + 2268 | 0;
   $114 = SAFE_HEAP_LOAD($113 | 0, 4, 0) | 0 | 0;
   $115 = $y_offset;
   $116 = $114 + $115 | 0;
   $117 = $2;
   $118 = $117 + 20 | 0;
   SAFE_HEAP_STORE($118 | 0, $116 | 0, 4);
   $119 = $1;
   $120 = $119 + 2272 | 0;
   $121 = SAFE_HEAP_LOAD($120 | 0, 4, 0) | 0 | 0;
   $122 = $uv_offset;
   $123 = $121 + $122 | 0;
   $124 = $2;
   $125 = $124 + 24 | 0;
   SAFE_HEAP_STORE($125 | 0, $123 | 0, 4);
   $126 = $1;
   $127 = $126 + 2276 | 0;
   $128 = SAFE_HEAP_LOAD($127 | 0, 4, 0) | 0 | 0;
   $129 = $uv_offset;
   $130 = $128 + $129 | 0;
   $131 = $2;
   $132 = $131 + 28 | 0;
   SAFE_HEAP_STORE($132 | 0, $130 | 0, 4);
  } else {
   $100 = $extra_y_rows;
   $101 = $y_start;
   $102 = $101 - $100 | 0;
   $y_start = $102;
   $103 = $ydst;
   $104 = $2;
   $105 = $104 + 20 | 0;
   SAFE_HEAP_STORE($105 | 0, $103 | 0, 4);
   $106 = $udst;
   $107 = $2;
   $108 = $107 + 24 | 0;
   SAFE_HEAP_STORE($108 | 0, $106 | 0, 4);
   $109 = $vdst;
   $110 = $2;
   $111 = $110 + 28 | 0;
   SAFE_HEAP_STORE($111 | 0, $109 | 0, 4);
  }
  $133 = $is_last_row;
  $134 = ($133 | 0) != 0;
  if (!$134) {
   $135 = $extra_y_rows;
   $136 = $y_end;
   $137 = $136 - $135 | 0;
   $y_end = $137;
  }
  $138 = $y_end;
  $139 = $2;
  $140 = $139 + 88 | 0;
  $141 = SAFE_HEAP_LOAD($140 | 0, 4, 0) | 0 | 0;
  $142 = ($138 | 0) > ($141 | 0);
  if ($142) {
   $143 = $2;
   $144 = $143 + 88 | 0;
   $145 = SAFE_HEAP_LOAD($144 | 0, 4, 0) | 0 | 0;
   $y_end = $145;
  }
  $146 = $2;
  $147 = $146 + 104 | 0;
  SAFE_HEAP_STORE($147 | 0, 0 | 0, 4);
  $148 = $1;
  $149 = $148 + 2348 | 0;
  $150 = SAFE_HEAP_LOAD($149 | 0, 4, 0) | 0 | 0;
  $151 = ($150 | 0) != (0 | 0);
  if ($151) {
   $152 = $y_start;
   $153 = $y_end;
   $154 = ($152 | 0) < ($153 | 0);
   if ($154) {
    $155 = $1;
    $156 = $y_start;
    $157 = $y_end;
    $158 = $y_start;
    $159 = $157 - $158 | 0;
    $160 = _VP8DecompressAlphaRows($155, $156, $159) | 0;
    $161 = $2;
    $162 = $161 + 104 | 0;
    SAFE_HEAP_STORE($162 | 0, $160 | 0, 4);
    $163 = $2;
    $164 = $163 + 104 | 0;
    $165 = SAFE_HEAP_LOAD($164 | 0, 4, 0) | 0 | 0;
    $166 = ($165 | 0) == (0 | 0);
    if ($166) {
     $167 = $1;
     $168 = _VP8SetError($167, 3, 2986) | 0;
     $0 = $168;
     $337 = $0;
     STACKTOP = sp;
     return $337 | 0;
    }
   }
  }
  $169 = $y_start;
  $170 = $2;
  $171 = $170 + 84 | 0;
  $172 = SAFE_HEAP_LOAD($171 | 0, 4, 0) | 0 | 0;
  $173 = ($169 | 0) < ($172 | 0);
  if ($173) {
   $174 = $2;
   $175 = $174 + 84 | 0;
   $176 = SAFE_HEAP_LOAD($175 | 0, 4, 0) | 0 | 0;
   $177 = $y_start;
   $178 = $176 - $177 | 0;
   $delta_y = $178;
   $179 = $2;
   $180 = $179 + 84 | 0;
   $181 = SAFE_HEAP_LOAD($180 | 0, 4, 0) | 0 | 0;
   $y_start = $181;
   $182 = $delta_y;
   $183 = $182 & 1;
   $184 = ($183 | 0) != 0;
   if ($184) {
    ___assert_fail(3015 | 0, 2535 | 0, 474, 3030 | 0);
   }
   $185 = $1;
   $186 = $185 + 2280 | 0;
   $187 = SAFE_HEAP_LOAD($186 | 0, 4, 0) | 0 | 0;
   $188 = $delta_y;
   $189 = Math_imul($187, $188) | 0;
   $190 = $2;
   $191 = $190 + 20 | 0;
   $192 = SAFE_HEAP_LOAD($191 | 0, 4, 0) | 0 | 0;
   $193 = $192 + $189 | 0;
   SAFE_HEAP_STORE($191 | 0, $193 | 0, 4);
   $194 = $1;
   $195 = $194 + 2284 | 0;
   $196 = SAFE_HEAP_LOAD($195 | 0, 4, 0) | 0 | 0;
   $197 = $delta_y;
   $198 = $197 >> 1;
   $199 = Math_imul($196, $198) | 0;
   $200 = $2;
   $201 = $200 + 24 | 0;
   $202 = SAFE_HEAP_LOAD($201 | 0, 4, 0) | 0 | 0;
   $203 = $202 + $199 | 0;
   SAFE_HEAP_STORE($201 | 0, $203 | 0, 4);
   $204 = $1;
   $205 = $204 + 2284 | 0;
   $206 = SAFE_HEAP_LOAD($205 | 0, 4, 0) | 0 | 0;
   $207 = $delta_y;
   $208 = $207 >> 1;
   $209 = Math_imul($206, $208) | 0;
   $210 = $2;
   $211 = $210 + 28 | 0;
   $212 = SAFE_HEAP_LOAD($211 | 0, 4, 0) | 0 | 0;
   $213 = $212 + $209 | 0;
   SAFE_HEAP_STORE($211 | 0, $213 | 0, 4);
   $214 = $2;
   $215 = $214 + 104 | 0;
   $216 = SAFE_HEAP_LOAD($215 | 0, 4, 0) | 0 | 0;
   $217 = ($216 | 0) != (0 | 0);
   if ($217) {
    $218 = $2;
    $219 = SAFE_HEAP_LOAD($218 | 0, 4, 0) | 0 | 0;
    $220 = $delta_y;
    $221 = Math_imul($219, $220) | 0;
    $222 = $2;
    $223 = $222 + 104 | 0;
    $224 = SAFE_HEAP_LOAD($223 | 0, 4, 0) | 0 | 0;
    $225 = $224 + $221 | 0;
    SAFE_HEAP_STORE($223 | 0, $225 | 0, 4);
   }
  }
  $226 = $y_start;
  $227 = $y_end;
  $228 = ($226 | 0) < ($227 | 0);
  if ($228) {
   $229 = $2;
   $230 = $229 + 76 | 0;
   $231 = SAFE_HEAP_LOAD($230 | 0, 4, 0) | 0 | 0;
   $232 = $2;
   $233 = $232 + 20 | 0;
   $234 = SAFE_HEAP_LOAD($233 | 0, 4, 0) | 0 | 0;
   $235 = $234 + $231 | 0;
   SAFE_HEAP_STORE($233 | 0, $235 | 0, 4);
   $236 = $2;
   $237 = $236 + 76 | 0;
   $238 = SAFE_HEAP_LOAD($237 | 0, 4, 0) | 0 | 0;
   $239 = $238 >> 1;
   $240 = $2;
   $241 = $240 + 24 | 0;
   $242 = SAFE_HEAP_LOAD($241 | 0, 4, 0) | 0 | 0;
   $243 = $242 + $239 | 0;
   SAFE_HEAP_STORE($241 | 0, $243 | 0, 4);
   $244 = $2;
   $245 = $244 + 76 | 0;
   $246 = SAFE_HEAP_LOAD($245 | 0, 4, 0) | 0 | 0;
   $247 = $246 >> 1;
   $248 = $2;
   $249 = $248 + 28 | 0;
   $250 = SAFE_HEAP_LOAD($249 | 0, 4, 0) | 0 | 0;
   $251 = $250 + $247 | 0;
   SAFE_HEAP_STORE($249 | 0, $251 | 0, 4);
   $252 = $2;
   $253 = $252 + 104 | 0;
   $254 = SAFE_HEAP_LOAD($253 | 0, 4, 0) | 0 | 0;
   $255 = ($254 | 0) != (0 | 0);
   if ($255) {
    $256 = $2;
    $257 = $256 + 76 | 0;
    $258 = SAFE_HEAP_LOAD($257 | 0, 4, 0) | 0 | 0;
    $259 = $2;
    $260 = $259 + 104 | 0;
    $261 = SAFE_HEAP_LOAD($260 | 0, 4, 0) | 0 | 0;
    $262 = $261 + $258 | 0;
    SAFE_HEAP_STORE($260 | 0, $262 | 0, 4);
   }
   $263 = $y_start;
   $264 = $2;
   $265 = $264 + 84 | 0;
   $266 = SAFE_HEAP_LOAD($265 | 0, 4, 0) | 0 | 0;
   $267 = $263 - $266 | 0;
   $268 = $2;
   $269 = $268 + 8 | 0;
   SAFE_HEAP_STORE($269 | 0, $267 | 0, 4);
   $270 = $2;
   $271 = $270 + 80 | 0;
   $272 = SAFE_HEAP_LOAD($271 | 0, 4, 0) | 0 | 0;
   $273 = $2;
   $274 = $273 + 76 | 0;
   $275 = SAFE_HEAP_LOAD($274 | 0, 4, 0) | 0 | 0;
   $276 = $272 - $275 | 0;
   $277 = $2;
   $278 = $277 + 12 | 0;
   SAFE_HEAP_STORE($278 | 0, $276 | 0, 4);
   $279 = $y_end;
   $280 = $y_start;
   $281 = $279 - $280 | 0;
   $282 = $2;
   $283 = $282 + 16 | 0;
   SAFE_HEAP_STORE($283 | 0, $281 | 0, 4);
   $284 = $2;
   $285 = $284 + 44 | 0;
   $286 = SAFE_HEAP_LOAD($285 | 0, 4, 0) | 0 | 0;
   $287 = $2;
   $288 = FUNCTION_TABLE_ii[(SAFE_FT_MASK($286 | 0, 15 | 0) | 0) & 15]($287) | 0;
   $ok = $288;
  }
 }
 $289 = $cache_id;
 $290 = $289 + 1 | 0;
 $291 = $1;
 $292 = $291 + 156 | 0;
 $293 = SAFE_HEAP_LOAD($292 | 0, 4, 0) | 0 | 0;
 $294 = ($290 | 0) != ($293 | 0);
 $295 = $is_last_row;
 $296 = ($295 | 0) != 0;
 $or$cond = $294 | $296;
 if (!$or$cond) {
  $297 = $1;
  $298 = $297 + 2268 | 0;
  $299 = SAFE_HEAP_LOAD($298 | 0, 4, 0) | 0 | 0;
  $300 = $ysize;
  $301 = 0 - $300 | 0;
  $302 = $299 + $301 | 0;
  $303 = $ydst;
  $304 = $1;
  $305 = $304 + 2280 | 0;
  $306 = SAFE_HEAP_LOAD($305 | 0, 4, 0) | 0 | 0;
  $307 = $306 << 4;
  $308 = $303 + $307 | 0;
  $309 = $ysize;
  _memcpy($302 | 0, $308 | 0, $309 | 0) | 0;
  $310 = $1;
  $311 = $310 + 2272 | 0;
  $312 = SAFE_HEAP_LOAD($311 | 0, 4, 0) | 0 | 0;
  $313 = $uvsize;
  $314 = 0 - $313 | 0;
  $315 = $312 + $314 | 0;
  $316 = $udst;
  $317 = $1;
  $318 = $317 + 2284 | 0;
  $319 = SAFE_HEAP_LOAD($318 | 0, 4, 0) | 0 | 0;
  $320 = $319 << 3;
  $321 = $316 + $320 | 0;
  $322 = $uvsize;
  _memcpy($315 | 0, $321 | 0, $322 | 0) | 0;
  $323 = $1;
  $324 = $323 + 2276 | 0;
  $325 = SAFE_HEAP_LOAD($324 | 0, 4, 0) | 0 | 0;
  $326 = $uvsize;
  $327 = 0 - $326 | 0;
  $328 = $325 + $327 | 0;
  $329 = $vdst;
  $330 = $1;
  $331 = $330 + 2284 | 0;
  $332 = SAFE_HEAP_LOAD($331 | 0, 4, 0) | 0 | 0;
  $333 = $332 << 3;
  $334 = $329 + $333 | 0;
  $335 = $uvsize;
  _memcpy($328 | 0, $334 | 0, $335 | 0) | 0;
 }
 $336 = $ok;
 $0 = $336;
 $337 = $0;
 STACKTOP = sp;
 return $337 | 0;
}

function _AllocateMemory($dec) {
 $dec = $dec | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $290 = 0, $291 = 0, $292 = 0, $293 = 0, $294 = 0, $295 = 0, $296 = 0;
 var $297 = 0, $298 = 0, $299 = 0, $3 = 0, $30 = 0, $300 = 0, $301 = 0, $302 = 0, $303 = 0, $304 = 0, $305 = 0, $306 = 0, $307 = 0, $308 = 0, $309 = 0, $31 = 0, $310 = 0, $311 = 0, $312 = 0, $313 = 0;
 var $314 = 0, $315 = 0, $316 = 0, $317 = 0, $318 = 0, $319 = 0, $32 = 0, $320 = 0, $321 = 0, $322 = 0, $323 = 0, $324 = 0, $325 = 0, $326 = 0, $327 = 0, $328 = 0, $329 = 0, $33 = 0, $330 = 0, $331 = 0;
 var $332 = 0, $333 = 0, $334 = 0, $335 = 0, $336 = 0, $337 = 0, $338 = 0, $339 = 0, $34 = 0, $340 = 0, $341 = 0, $342 = 0, $343 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $alpha_size = 0, $cache_height = 0, $cache_size = 0, $extra_rows = 0, $extra_uv = 0, $extra_y = 0, $f_info_size = 0, $intra_pred_mode_size = 0, $mb_data_size = 0, $mb_info_size = 0, $mb_w = 0, $mem = 0, $needed = 0, $num_caches = 0, $top_size = 0, $yuv_size = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $alpha_size = sp + 8 | 0;
 $needed = sp;
 $1 = $dec;
 $2 = $1;
 $3 = $2 + 156 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $num_caches = $4;
 $5 = $1;
 $6 = $5 + 288 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $mb_w = $7;
 $8 = $mb_w;
 $9 = $8 << 2;
 $10 = $9;
 $intra_pred_mode_size = $10;
 $11 = $mb_w;
 $12 = $11 << 5;
 $top_size = $12;
 $13 = $mb_w;
 $14 = $13 + 1 | 0;
 $15 = $14 << 1;
 $mb_info_size = $15;
 $16 = $1;
 $17 = $16 + 2308 | 0;
 $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
 $19 = ($18 | 0) > 0;
 if ($19) {
  $20 = $mb_w;
  $21 = $1;
  $22 = $21 + 148 | 0;
  $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
  $24 = ($23 | 0) > 0;
  $25 = $24 ? 2 : 1;
  $26 = Math_imul($20, $25) | 0;
  $27 = $26 << 2;
  $28 = $27;
 } else {
  $28 = 0;
 }
 $f_info_size = $28;
 $yuv_size = 832;
 $29 = $1;
 $30 = $29 + 148 | 0;
 $31 = SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0;
 $32 = ($31 | 0) == 2;
 $33 = $32 ? 2 : 1;
 $34 = $mb_w;
 $35 = Math_imul($33, $34) | 0;
 $36 = $35 * 800 | 0;
 $mb_data_size = $36;
 $37 = $num_caches;
 $38 = $37 << 4;
 $39 = $1;
 $40 = $39 + 2308 | 0;
 $41 = SAFE_HEAP_LOAD($40 | 0, 4, 0) | 0 | 0;
 $42 = 2630 + $41 | 0;
 $43 = SAFE_HEAP_LOAD($42 >> 0 | 0, 1, 0) | 0 | 0;
 $44 = $43 & 255;
 $45 = $38 + $44 | 0;
 $46 = $45 * 3 | 0;
 $47 = ($46 | 0) / 2 & -1;
 $cache_height = $47;
 $48 = $top_size;
 $49 = $cache_height;
 $50 = Math_imul($48, $49) | 0;
 $cache_size = $50;
 $51 = $1;
 $52 = $51 + 2348 | 0;
 $53 = SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0;
 $54 = ($53 | 0) != (0 | 0);
 if ($54) {
  $55 = $1;
  $56 = $55 + 48 | 0;
  $57 = SAFE_HEAP_LOAD($56 | 0, 2, 0) | 0 | 0;
  $58 = $57 & 65535;
  $59 = $1;
  $60 = $59 + 48 | 0;
  $61 = $60 + 2 | 0;
  $62 = SAFE_HEAP_LOAD($61 | 0, 2, 0) | 0 | 0;
  $63 = $62 & 65535;
  $64 = ___muldi3($58 | 0, 0, $63 | 0, 0) | 0;
  $65 = tempRet0;
  $68 = $64;
  $71 = $65;
 } else {
  $68 = 0;
  $71 = 0;
 }
 $66 = $alpha_size;
 $67 = $66;
 SAFE_HEAP_STORE($67 | 0, $68 | 0, 4);
 $69 = $66 + 4 | 0;
 $70 = $69;
 SAFE_HEAP_STORE($70 | 0, $71 | 0, 4);
 $72 = $intra_pred_mode_size;
 $73 = $top_size;
 $74 = _i64Add($72 | 0, 0, $73 | 0, 0) | 0;
 $75 = tempRet0;
 $76 = $mb_info_size;
 $77 = _i64Add($74 | 0, $75 | 0, $76 | 0, 0) | 0;
 $78 = tempRet0;
 $79 = $f_info_size;
 $80 = _i64Add($77 | 0, $78 | 0, $79 | 0, 0) | 0;
 $81 = tempRet0;
 $82 = _i64Add($80 | 0, $81 | 0, 832, 0) | 0;
 $83 = tempRet0;
 $84 = $mb_data_size;
 $85 = _i64Add($82 | 0, $83 | 0, $84 | 0, 0) | 0;
 $86 = tempRet0;
 $87 = $cache_size;
 $88 = _i64Add($85 | 0, $86 | 0, $87 | 0, 0) | 0;
 $89 = tempRet0;
 $90 = $alpha_size;
 $91 = $90;
 $92 = SAFE_HEAP_LOAD($91 | 0, 4, 0) | 0 | 0;
 $93 = $90 + 4 | 0;
 $94 = $93;
 $95 = SAFE_HEAP_LOAD($94 | 0, 4, 0) | 0 | 0;
 $96 = _i64Add($88 | 0, $89 | 0, $92 | 0, $95 | 0) | 0;
 $97 = tempRet0;
 $98 = _i64Add($96 | 0, $97 | 0, 31, 0) | 0;
 $99 = tempRet0;
 $100 = $needed;
 $101 = $100;
 SAFE_HEAP_STORE($101 | 0, $98 | 0, 4);
 $102 = $100 + 4 | 0;
 $103 = $102;
 SAFE_HEAP_STORE($103 | 0, $99 | 0, 4);
 $104 = $needed;
 $105 = $104;
 $106 = SAFE_HEAP_LOAD($105 | 0, 4, 0) | 0 | 0;
 $107 = $104 + 4 | 0;
 $108 = $107;
 $109 = SAFE_HEAP_LOAD($108 | 0, 4, 0) | 0 | 0;
 $110 = $needed;
 $111 = $110;
 $112 = SAFE_HEAP_LOAD($111 | 0, 4, 0) | 0 | 0;
 $113 = $110 + 4 | 0;
 $114 = $113;
 $115 = SAFE_HEAP_LOAD($114 | 0, 4, 0) | 0 | 0;
 $116 = ($106 | 0) != ($112 | 0);
 $117 = ($109 | 0) != 0;
 $118 = $116 | $117;
 if ($118) {
  $0 = 0;
  $343 = $0;
  STACKTOP = sp;
  return $343 | 0;
 }
 $119 = $needed;
 $120 = $119;
 $121 = SAFE_HEAP_LOAD($120 | 0, 4, 0) | 0 | 0;
 $122 = $119 + 4 | 0;
 $123 = $122;
 $124 = SAFE_HEAP_LOAD($123 | 0, 4, 0) | 0 | 0;
 $125 = $1;
 $126 = $125 + 2292 | 0;
 $127 = SAFE_HEAP_LOAD($126 | 0, 4, 0) | 0 | 0;
 $128 = $124 >>> 0 > 0;
 $129 = $121 >>> 0 > $127 >>> 0;
 $130 = ($124 | 0) == 0;
 $131 = $130 & $129;
 $132 = $128 | $131;
 do {
  if ($132) {
   $133 = $1;
   $134 = $133 + 2288 | 0;
   $135 = SAFE_HEAP_LOAD($134 | 0, 4, 0) | 0 | 0;
   _WebPSafeFree($135);
   $136 = $1;
   $137 = $136 + 2292 | 0;
   SAFE_HEAP_STORE($137 | 0, 0 | 0, 4);
   $138 = $needed;
   $139 = $138;
   $140 = SAFE_HEAP_LOAD($139 | 0, 4, 0) | 0 | 0;
   $141 = $138 + 4 | 0;
   $142 = $141;
   $143 = SAFE_HEAP_LOAD($142 | 0, 4, 0) | 0 | 0;
   $144 = _WebPSafeMalloc($140, $143, 1) | 0;
   $145 = $1;
   $146 = $145 + 2288 | 0;
   SAFE_HEAP_STORE($146 | 0, $144 | 0, 4);
   $147 = $1;
   $148 = $147 + 2288 | 0;
   $149 = SAFE_HEAP_LOAD($148 | 0, 4, 0) | 0 | 0;
   $150 = ($149 | 0) == (0 | 0);
   if (!$150) {
    $153 = $needed;
    $154 = $153;
    $155 = SAFE_HEAP_LOAD($154 | 0, 4, 0) | 0 | 0;
    $156 = $153 + 4 | 0;
    $157 = $156;
    $158 = SAFE_HEAP_LOAD($157 | 0, 4, 0) | 0 | 0;
    $159 = $1;
    $160 = $159 + 2292 | 0;
    SAFE_HEAP_STORE($160 | 0, $155 | 0, 4);
    break;
   }
   $151 = $1;
   $152 = _VP8SetError($151, 1, 2858) | 0;
   $0 = $152;
   $343 = $0;
   STACKTOP = sp;
   return $343 | 0;
  }
 } while (0);
 $161 = $1;
 $162 = $161 + 2288 | 0;
 $163 = SAFE_HEAP_LOAD($162 | 0, 4, 0) | 0 | 0;
 $mem = $163;
 $164 = $mem;
 $165 = $1;
 $166 = $165 + 2244 | 0;
 SAFE_HEAP_STORE($166 | 0, $164 | 0, 4);
 $167 = $intra_pred_mode_size;
 $168 = $mem;
 $169 = $168 + $167 | 0;
 $mem = $169;
 $170 = $mem;
 $171 = $1;
 $172 = $171 + 2252 | 0;
 SAFE_HEAP_STORE($172 | 0, $170 | 0, 4);
 $173 = $top_size;
 $174 = $mem;
 $175 = $174 + $173 | 0;
 $mem = $175;
 $176 = $mem;
 $177 = $176 + 2 | 0;
 $178 = $1;
 $179 = $178 + 2256 | 0;
 SAFE_HEAP_STORE($179 | 0, $177 | 0, 4);
 $180 = $mb_info_size;
 $181 = $mem;
 $182 = $181 + $180 | 0;
 $mem = $182;
 $183 = $f_info_size;
 $184 = ($183 | 0) != 0;
 $185 = $mem;
 $186 = $184 ? $185 : 0;
 $187 = $1;
 $188 = $187 + 2260 | 0;
 SAFE_HEAP_STORE($188 | 0, $186 | 0, 4);
 $189 = $f_info_size;
 $190 = $mem;
 $191 = $190 + $189 | 0;
 $mem = $191;
 $192 = $1;
 $193 = $192 + 160 | 0;
 SAFE_HEAP_STORE($193 | 0, 0 | 0, 4);
 $194 = $1;
 $195 = $194 + 2260 | 0;
 $196 = SAFE_HEAP_LOAD($195 | 0, 4, 0) | 0 | 0;
 $197 = $1;
 $198 = $197 + 160 | 0;
 $199 = $198 + 12 | 0;
 SAFE_HEAP_STORE($199 | 0, $196 | 0, 4);
 $200 = $1;
 $201 = $200 + 148 | 0;
 $202 = SAFE_HEAP_LOAD($201 | 0, 4, 0) | 0 | 0;
 $203 = ($202 | 0) > 0;
 if ($203) {
  $204 = $mb_w;
  $205 = $1;
  $206 = $205 + 160 | 0;
  $207 = $206 + 12 | 0;
  $208 = SAFE_HEAP_LOAD($207 | 0, 4, 0) | 0 | 0;
  $209 = $208 + ($204 << 2) | 0;
  SAFE_HEAP_STORE($207 | 0, $209 | 0, 4);
 }
 $210 = $mem;
 $211 = $210 + 31 | 0;
 $212 = $211;
 $213 = $212 & -32;
 $214 = $213;
 $mem = $214;
 $215 = $mem;
 $216 = $1;
 $217 = $216 + 2264 | 0;
 SAFE_HEAP_STORE($217 | 0, $215 | 0, 4);
 $218 = $mem;
 $219 = $218 + 832 | 0;
 $mem = $219;
 $220 = $mem;
 $221 = $1;
 $222 = $221 + 2304 | 0;
 SAFE_HEAP_STORE($222 | 0, $220 | 0, 4);
 $223 = $mem;
 $224 = $1;
 $225 = $224 + 160 | 0;
 $226 = $225 + 16 | 0;
 SAFE_HEAP_STORE($226 | 0, $223 | 0, 4);
 $227 = $1;
 $228 = $227 + 148 | 0;
 $229 = SAFE_HEAP_LOAD($228 | 0, 4, 0) | 0 | 0;
 $230 = ($229 | 0) == 2;
 if ($230) {
  $231 = $mb_w;
  $232 = $1;
  $233 = $232 + 160 | 0;
  $234 = $233 + 16 | 0;
  $235 = SAFE_HEAP_LOAD($234 | 0, 4, 0) | 0 | 0;
  $236 = $235 + ($231 * 800 | 0) | 0;
  SAFE_HEAP_STORE($234 | 0, $236 | 0, 4);
 }
 $237 = $mb_data_size;
 $238 = $mem;
 $239 = $238 + $237 | 0;
 $mem = $239;
 $240 = $mb_w;
 $241 = $240 << 4;
 $242 = $1;
 $243 = $242 + 2280 | 0;
 SAFE_HEAP_STORE($243 | 0, $241 | 0, 4);
 $244 = $mb_w;
 $245 = $244 << 3;
 $246 = $1;
 $247 = $246 + 2284 | 0;
 SAFE_HEAP_STORE($247 | 0, $245 | 0, 4);
 $248 = $1;
 $249 = $248 + 2308 | 0;
 $250 = SAFE_HEAP_LOAD($249 | 0, 4, 0) | 0 | 0;
 $251 = 2630 + $250 | 0;
 $252 = SAFE_HEAP_LOAD($251 >> 0 | 0, 1, 0) | 0 | 0;
 $253 = $252 & 255;
 $extra_rows = $253;
 $254 = $extra_rows;
 $255 = $1;
 $256 = $255 + 2280 | 0;
 $257 = SAFE_HEAP_LOAD($256 | 0, 4, 0) | 0 | 0;
 $258 = Math_imul($254, $257) | 0;
 $extra_y = $258;
 $259 = $extra_rows;
 $260 = ($259 | 0) / 2 & -1;
 $261 = $1;
 $262 = $261 + 2284 | 0;
 $263 = SAFE_HEAP_LOAD($262 | 0, 4, 0) | 0 | 0;
 $264 = Math_imul($260, $263) | 0;
 $extra_uv = $264;
 $265 = $mem;
 $266 = $extra_y;
 $267 = $265 + $266 | 0;
 $268 = $1;
 $269 = $268 + 2268 | 0;
 SAFE_HEAP_STORE($269 | 0, $267 | 0, 4);
 $270 = $1;
 $271 = $270 + 2268 | 0;
 $272 = SAFE_HEAP_LOAD($271 | 0, 4, 0) | 0 | 0;
 $273 = $num_caches;
 $274 = $273 << 4;
 $275 = $1;
 $276 = $275 + 2280 | 0;
 $277 = SAFE_HEAP_LOAD($276 | 0, 4, 0) | 0 | 0;
 $278 = Math_imul($274, $277) | 0;
 $279 = $272 + $278 | 0;
 $280 = $extra_uv;
 $281 = $279 + $280 | 0;
 $282 = $1;
 $283 = $282 + 2272 | 0;
 SAFE_HEAP_STORE($283 | 0, $281 | 0, 4);
 $284 = $1;
 $285 = $284 + 2272 | 0;
 $286 = SAFE_HEAP_LOAD($285 | 0, 4, 0) | 0 | 0;
 $287 = $num_caches;
 $288 = $287 << 3;
 $289 = $1;
 $290 = $289 + 2284 | 0;
 $291 = SAFE_HEAP_LOAD($290 | 0, 4, 0) | 0 | 0;
 $292 = Math_imul($288, $291) | 0;
 $293 = $286 + $292 | 0;
 $294 = $extra_uv;
 $295 = $293 + $294 | 0;
 $296 = $1;
 $297 = $296 + 2276 | 0;
 SAFE_HEAP_STORE($297 | 0, $295 | 0, 4);
 $298 = $1;
 $299 = $298 + 152 | 0;
 SAFE_HEAP_STORE($299 | 0, 0 | 0, 4);
 $300 = $cache_size;
 $301 = $mem;
 $302 = $301 + $300 | 0;
 $mem = $302;
 $303 = $alpha_size;
 $304 = $303;
 $305 = SAFE_HEAP_LOAD($304 | 0, 4, 0) | 0 | 0;
 $306 = $303 + 4 | 0;
 $307 = $306;
 $308 = SAFE_HEAP_LOAD($307 | 0, 4, 0) | 0 | 0;
 $309 = ($305 | 0) != 0;
 $310 = ($308 | 0) != 0;
 $311 = $309 | $310;
 $312 = $mem;
 $313 = $311 ? $312 : 0;
 $314 = $1;
 $315 = $314 + 2360 | 0;
 SAFE_HEAP_STORE($315 | 0, $313 | 0, 4);
 $316 = $alpha_size;
 $317 = $316;
 $318 = SAFE_HEAP_LOAD($317 | 0, 4, 0) | 0 | 0;
 $319 = $316 + 4 | 0;
 $320 = $319;
 $321 = SAFE_HEAP_LOAD($320 | 0, 4, 0) | 0 | 0;
 $322 = $mem;
 $323 = $322 + $318 | 0;
 $mem = $323;
 $324 = $mem;
 $325 = $1;
 $326 = $325 + 2288 | 0;
 $327 = SAFE_HEAP_LOAD($326 | 0, 4, 0) | 0 | 0;
 $328 = $1;
 $329 = $328 + 2292 | 0;
 $330 = SAFE_HEAP_LOAD($329 | 0, 4, 0) | 0 | 0;
 $331 = $327 + $330 | 0;
 $332 = $324 >>> 0 <= $331 >>> 0;
 if (!$332) {
  ___assert_fail(2897 | 0, 2535 | 0, 791, 2941 | 0);
 }
 $333 = $1;
 $334 = $333 + 2256 | 0;
 $335 = SAFE_HEAP_LOAD($334 | 0, 4, 0) | 0 | 0;
 $336 = $335 + -2 | 0;
 $337 = $mb_info_size;
 _memset($336 | 0, 0, $337 | 0) | 0;
 $338 = $1;
 _VP8InitScanline($338);
 $339 = $1;
 $340 = $339 + 2244 | 0;
 $341 = SAFE_HEAP_LOAD($340 | 0, 4, 0) | 0 | 0;
 $342 = $intra_pred_mode_size;
 _memset($341 | 0, 0, $342 | 0) | 0;
 $0 = 1;
 $343 = $0;
 STACKTOP = sp;
 return $343 | 0;
}

function _VP8LBuildHuffmanTable($root_table, $root_bits, $code_lengths, $code_lengths_size) {
 $root_table = $root_table | 0;
 $root_bits = $root_bits | 0;
 $code_lengths = $code_lengths | 0;
 $code_lengths_size = $code_lengths_size | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $code = 0, $code$byval_copy = 0, $code1 = 0, $code1$byval_copy = 0, $code2 = 0, $code2$byval_copy = 0, $count = 0, $key = 0, $len = 0, $low = 0, $mask = 0, $num_nodes = 0, $num_open = 0, $offset = 0, $sorted = 0, $step = 0, $symbol = 0, $symbol_code_length = 0;
 var $table = 0, $table_bits = 0, $table_size = 0, $total_size = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 240 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $code2$byval_copy = sp + 228 | 0;
 $code1$byval_copy = sp + 224 | 0;
 $code$byval_copy = sp + 220 | 0;
 $count = sp + 104 | 0;
 $offset = sp + 40 | 0;
 $code = sp + 216 | 0;
 $code1 = sp + 212 | 0;
 $code2 = sp + 208 | 0;
 $1 = $root_table;
 $2 = $root_bits;
 $3 = $code_lengths;
 $4 = $code_lengths_size;
 $5 = $1;
 $table = $5;
 $6 = $2;
 $7 = 1 << $6;
 $total_size = $7;
 $sorted = 0;
 dest = $count;
 stop = dest + 64 | 0;
 do {
  SAFE_HEAP_STORE(dest | 0, 0 | 0 | 0, 4);
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $8 = $4;
 $9 = ($8 | 0) != 0;
 if (!$9) {
  ___assert_fail(14632 | 0, 14586 | 0, 90, 14655 | 0);
 }
 $10 = $3;
 $11 = ($10 | 0) != (0 | 0);
 if (!$11) {
  ___assert_fail(14677 | 0, 14586 | 0, 91, 14655 | 0);
 }
 $12 = $1;
 $13 = ($12 | 0) != (0 | 0);
 if (!$13) {
  ___assert_fail(14698 | 0, 14586 | 0, 92, 14655 | 0);
 }
 $14 = $2;
 $15 = ($14 | 0) > 0;
 if (!$15) {
  ___assert_fail(14717 | 0, 14586 | 0, 93, 14655 | 0);
 }
 $symbol = 0;
 while (1) {
  $16 = $symbol;
  $17 = $4;
  $18 = ($16 | 0) < ($17 | 0);
  if (!$18) {
   break;
  }
  $19 = $symbol;
  $20 = $3;
  $21 = $20 + ($19 << 2) | 0;
  $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
  $23 = ($22 | 0) > 15;
  if ($23) {
   label = 12;
   break;
  }
  $24 = $symbol;
  $25 = $3;
  $26 = $25 + ($24 << 2) | 0;
  $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
  $28 = $count + ($27 << 2) | 0;
  $29 = SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0;
  $30 = $29 + 1 | 0;
  SAFE_HEAP_STORE($28 | 0, $30 | 0, 4);
  $31 = $symbol;
  $32 = $31 + 1 | 0;
  $symbol = $32;
 }
 if ((label | 0) == 12) {
  $0 = 0;
  $241 = $0;
  STACKTOP = sp;
  return $241 | 0;
 }
 $33 = SAFE_HEAP_LOAD($count | 0, 4, 0) | 0 | 0;
 $34 = $4;
 $35 = ($33 | 0) == ($34 | 0);
 if ($35) {
  $0 = 0;
  $241 = $0;
  STACKTOP = sp;
  return $241 | 0;
 }
 $36 = $offset + 4 | 0;
 SAFE_HEAP_STORE($36 | 0, 0 | 0, 4);
 $len = 1;
 while (1) {
  $37 = $len;
  $38 = ($37 | 0) < 15;
  if (!$38) {
   break;
  }
  $39 = $len;
  $40 = $count + ($39 << 2) | 0;
  $41 = SAFE_HEAP_LOAD($40 | 0, 4, 0) | 0 | 0;
  $42 = $len;
  $43 = 1 << $42;
  $44 = ($41 | 0) > ($43 | 0);
  if ($44) {
   label = 19;
   break;
  }
  $45 = $len;
  $46 = $offset + ($45 << 2) | 0;
  $47 = SAFE_HEAP_LOAD($46 | 0, 4, 0) | 0 | 0;
  $48 = $len;
  $49 = $count + ($48 << 2) | 0;
  $50 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0;
  $51 = $47 + $50 | 0;
  $52 = $len;
  $53 = $52 + 1 | 0;
  $54 = $offset + ($53 << 2) | 0;
  SAFE_HEAP_STORE($54 | 0, $51 | 0, 4);
  $55 = $len;
  $56 = $55 + 1 | 0;
  $len = $56;
 }
 if ((label | 0) == 19) {
  $0 = 0;
  $241 = $0;
  STACKTOP = sp;
  return $241 | 0;
 }
 $57 = $4;
 $58 = ($57 | 0) < 0;
 $59 = $58 << 31 >> 31;
 $60 = _WebPSafeMalloc($57, $59, 4) | 0;
 $sorted = $60;
 $61 = $sorted;
 $62 = ($61 | 0) == (0 | 0);
 if ($62) {
  $0 = 0;
  $241 = $0;
  STACKTOP = sp;
  return $241 | 0;
 }
 $symbol = 0;
 while (1) {
  $63 = $symbol;
  $64 = $4;
  $65 = ($63 | 0) < ($64 | 0);
  if (!$65) {
   break;
  }
  $66 = $symbol;
  $67 = $3;
  $68 = $67 + ($66 << 2) | 0;
  $69 = SAFE_HEAP_LOAD($68 | 0, 4, 0) | 0 | 0;
  $symbol_code_length = $69;
  $70 = $symbol;
  $71 = $3;
  $72 = $71 + ($70 << 2) | 0;
  $73 = SAFE_HEAP_LOAD($72 | 0, 4, 0) | 0 | 0;
  $74 = ($73 | 0) > 0;
  if ($74) {
   $75 = $symbol;
   $76 = $symbol_code_length;
   $77 = $offset + ($76 << 2) | 0;
   $78 = SAFE_HEAP_LOAD($77 | 0, 4, 0) | 0 | 0;
   $79 = $78 + 1 | 0;
   SAFE_HEAP_STORE($77 | 0, $79 | 0, 4);
   $80 = $sorted;
   $81 = $80 + ($78 << 2) | 0;
   SAFE_HEAP_STORE($81 | 0, $75 | 0, 4);
  }
  $82 = $symbol;
  $83 = $82 + 1 | 0;
  $symbol = $83;
 }
 $84 = $offset + 60 | 0;
 $85 = SAFE_HEAP_LOAD($84 | 0, 4, 0) | 0 | 0;
 $86 = ($85 | 0) == 1;
 if ($86) {
  SAFE_HEAP_STORE($code >> 0 | 0, 0 | 0, 1);
  $87 = $sorted;
  $88 = SAFE_HEAP_LOAD($87 | 0, 4, 0) | 0 | 0;
  $89 = $88 & 65535;
  $90 = $code + 2 | 0;
  SAFE_HEAP_STORE($90 | 0, $89 | 0, 2);
  $91 = $table;
  $92 = $total_size;
  {}
  SAFE_HEAP_STORE($code$byval_copy | 0, SAFE_HEAP_LOAD($code | 0, 2, 0) | 0 | 0 | 0, 2);
  SAFE_HEAP_STORE($code$byval_copy + 2 | 0, SAFE_HEAP_LOAD($code + 2 | 0, 2, 0) | 0 | 0 | 0, 2);
  _ReplicateValue($91, 1, $92, $code$byval_copy);
  $93 = $sorted;
  _WebPSafeFree($93);
  $94 = $total_size;
  $0 = $94;
  $241 = $0;
  STACKTOP = sp;
  return $241 | 0;
 }
 $low = -1;
 $95 = $total_size;
 $96 = $95 - 1 | 0;
 $mask = $96;
 $key = 0;
 $num_nodes = 1;
 $num_open = 1;
 $97 = $2;
 $table_bits = $97;
 $98 = $table_bits;
 $99 = 1 << $98;
 $table_size = $99;
 $symbol = 0;
 $len = 1;
 $step = 2;
 while (1) {
  $100 = $len;
  $101 = $2;
  $102 = ($100 | 0) <= ($101 | 0);
  if (!$102) {
   break;
  }
  $103 = $num_open;
  $104 = $103 << 1;
  $num_open = $104;
  $105 = $num_open;
  $106 = $num_nodes;
  $107 = $106 + $105 | 0;
  $num_nodes = $107;
  $108 = $len;
  $109 = $count + ($108 << 2) | 0;
  $110 = SAFE_HEAP_LOAD($109 | 0, 4, 0) | 0 | 0;
  $111 = $num_open;
  $112 = $111 - $110 | 0;
  $num_open = $112;
  $113 = $num_open;
  $114 = ($113 | 0) < 0;
  if ($114) {
   label = 33;
   break;
  }
  while (1) {
   $116 = $len;
   $117 = $count + ($116 << 2) | 0;
   $118 = SAFE_HEAP_LOAD($117 | 0, 4, 0) | 0 | 0;
   $119 = ($118 | 0) > 0;
   $120 = $len;
   if (!$119) {
    break;
   }
   $121 = $120 & 255;
   SAFE_HEAP_STORE($code1 >> 0 | 0, $121 | 0, 1);
   $122 = $symbol;
   $123 = $122 + 1 | 0;
   $symbol = $123;
   $124 = $sorted;
   $125 = $124 + ($122 << 2) | 0;
   $126 = SAFE_HEAP_LOAD($125 | 0, 4, 0) | 0 | 0;
   $127 = $126 & 65535;
   $128 = $code1 + 2 | 0;
   SAFE_HEAP_STORE($128 | 0, $127 | 0, 2);
   $129 = $key;
   $130 = $table;
   $131 = $130 + ($129 << 2) | 0;
   $132 = $step;
   $133 = $table_size;
   {}
   SAFE_HEAP_STORE($code1$byval_copy | 0, SAFE_HEAP_LOAD($code1 | 0, 2, 0) | 0 | 0 | 0, 2);
   SAFE_HEAP_STORE($code1$byval_copy + 2 | 0, SAFE_HEAP_LOAD($code1 + 2 | 0, 2, 0) | 0 | 0 | 0, 2);
   _ReplicateValue($131, $132, $133, $code1$byval_copy);
   $134 = $key;
   $135 = $len;
   $136 = _GetNextKey($134, $135) | 0;
   $key = $136;
   $137 = $len;
   $138 = $count + ($137 << 2) | 0;
   $139 = SAFE_HEAP_LOAD($138 | 0, 4, 0) | 0 | 0;
   $140 = $139 + -1 | 0;
   SAFE_HEAP_STORE($138 | 0, $140 | 0, 4);
  }
  $141 = $120 + 1 | 0;
  $len = $141;
  $142 = $step;
  $143 = $142 << 1;
  $step = $143;
 }
 if ((label | 0) == 33) {
  $115 = $sorted;
  _WebPSafeFree($115);
  $0 = 0;
  $241 = $0;
  STACKTOP = sp;
  return $241 | 0;
 }
 $144 = $2;
 $145 = $144 + 1 | 0;
 $len = $145;
 $step = 2;
 while (1) {
  $146 = $len;
  $147 = ($146 | 0) <= 15;
  if (!$147) {
   break;
  }
  $148 = $num_open;
  $149 = $148 << 1;
  $num_open = $149;
  $150 = $num_open;
  $151 = $num_nodes;
  $152 = $151 + $150 | 0;
  $num_nodes = $152;
  $153 = $len;
  $154 = $count + ($153 << 2) | 0;
  $155 = SAFE_HEAP_LOAD($154 | 0, 4, 0) | 0 | 0;
  $156 = $num_open;
  $157 = $156 - $155 | 0;
  $num_open = $157;
  $158 = $num_open;
  $159 = ($158 | 0) < 0;
  if ($159) {
   label = 40;
   break;
  }
  while (1) {
   $161 = $len;
   $162 = $count + ($161 << 2) | 0;
   $163 = SAFE_HEAP_LOAD($162 | 0, 4, 0) | 0 | 0;
   $164 = ($163 | 0) > 0;
   if (!$164) {
    break;
   }
   $165 = $key;
   $166 = $mask;
   $167 = $165 & $166;
   $168 = $low;
   $169 = ($167 | 0) != ($168 | 0);
   if ($169) {
    $170 = $table_size;
    $171 = $table;
    $172 = $171 + ($170 << 2) | 0;
    $table = $172;
    $173 = $len;
    $174 = $2;
    $175 = _NextTableBitSize($count, $173, $174) | 0;
    $table_bits = $175;
    $176 = $table_bits;
    $177 = 1 << $176;
    $table_size = $177;
    $178 = $table_size;
    $179 = $total_size;
    $180 = $179 + $178 | 0;
    $total_size = $180;
    $181 = $key;
    $182 = $mask;
    $183 = $181 & $182;
    $low = $183;
    $184 = $table_bits;
    $185 = $2;
    $186 = $184 + $185 | 0;
    $187 = $186 & 255;
    $188 = $low;
    $189 = $1;
    $190 = $189 + ($188 << 2) | 0;
    SAFE_HEAP_STORE($190 >> 0 | 0, $187 | 0, 1);
    $191 = $table;
    $192 = $1;
    $193 = $191;
    $194 = $192;
    $195 = $193 - $194 | 0;
    $196 = ($195 | 0) / 4 & -1;
    $197 = $low;
    $198 = $196 - $197 | 0;
    $199 = $198 & 65535;
    $200 = $low;
    $201 = $1;
    $202 = $201 + ($200 << 2) | 0;
    $203 = $202 + 2 | 0;
    SAFE_HEAP_STORE($203 | 0, $199 | 0, 2);
   }
   $204 = $len;
   $205 = $2;
   $206 = $204 - $205 | 0;
   $207 = $206 & 255;
   SAFE_HEAP_STORE($code2 >> 0 | 0, $207 | 0, 1);
   $208 = $symbol;
   $209 = $208 + 1 | 0;
   $symbol = $209;
   $210 = $sorted;
   $211 = $210 + ($208 << 2) | 0;
   $212 = SAFE_HEAP_LOAD($211 | 0, 4, 0) | 0 | 0;
   $213 = $212 & 65535;
   $214 = $code2 + 2 | 0;
   SAFE_HEAP_STORE($214 | 0, $213 | 0, 2);
   $215 = $key;
   $216 = $2;
   $217 = $215 >>> $216;
   $218 = $table;
   $219 = $218 + ($217 << 2) | 0;
   $220 = $step;
   $221 = $table_size;
   {}
   SAFE_HEAP_STORE($code2$byval_copy | 0, SAFE_HEAP_LOAD($code2 | 0, 2, 0) | 0 | 0 | 0, 2);
   SAFE_HEAP_STORE($code2$byval_copy + 2 | 0, SAFE_HEAP_LOAD($code2 + 2 | 0, 2, 0) | 0 | 0 | 0, 2);
   _ReplicateValue($219, $220, $221, $code2$byval_copy);
   $222 = $key;
   $223 = $len;
   $224 = _GetNextKey($222, $223) | 0;
   $key = $224;
   $225 = $len;
   $226 = $count + ($225 << 2) | 0;
   $227 = SAFE_HEAP_LOAD($226 | 0, 4, 0) | 0 | 0;
   $228 = $227 + -1 | 0;
   SAFE_HEAP_STORE($226 | 0, $228 | 0, 4);
  }
  $229 = $len;
  $230 = $229 + 1 | 0;
  $len = $230;
  $231 = $step;
  $232 = $231 << 1;
  $step = $232;
 }
 if ((label | 0) == 40) {
  $160 = $sorted;
  _WebPSafeFree($160);
  $0 = 0;
  $241 = $0;
  STACKTOP = sp;
  return $241 | 0;
 }
 $233 = $num_nodes;
 $234 = $offset + 60 | 0;
 $235 = SAFE_HEAP_LOAD($234 | 0, 4, 0) | 0 | 0;
 $236 = $235 << 1;
 $237 = $236 - 1 | 0;
 $238 = ($233 | 0) != ($237 | 0);
 $239 = $sorted;
 _WebPSafeFree($239);
 if ($238) {
  $0 = 0;
  $241 = $0;
  STACKTOP = sp;
  return $241 | 0;
 } else {
  $240 = $total_size;
  $0 = $240;
  $241 = $0;
  STACKTOP = sp;
  return $241 | 0;
 }
 return 0 | 0;
}

function _ParseHeadersInternal($data, $data_size, $width, $height, $has_alpha, $has_animation, $format, $headers) {
 $data = $data | 0;
 $data_size = $data_size | 0;
 $width = $width | 0;
 $height = $height | 0;
 $has_alpha = $has_alpha | 0;
 $has_animation = $has_animation | 0;
 $format = $format | 0;
 $headers = $headers | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $21 = 0;
 var $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0;
 var $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0;
 var $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0;
 var $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0;
 var $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $animation_present = 0, $canvas_height = 0, $canvas_width = 0, $flags = 0, $found_riff = 0, $found_vp8x = 0, $fragments_present = 0, $have_all_data = 0, $hdrs = 0, $image_height = 0, $image_width = 0, $or$cond = 0, $or$cond11 = 0, $or$cond13 = 0, $or$cond15 = 0;
 var $or$cond17 = 0, $or$cond19 = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $status = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = sp + 108 | 0;
 $2 = sp + 104 | 0;
 $canvas_width = sp + 76 | 0;
 $canvas_height = sp + 72 | 0;
 $image_width = sp + 68 | 0;
 $image_height = sp + 64 | 0;
 $found_vp8x = sp + 56 | 0;
 $hdrs = sp + 4 | 0;
 $flags = sp;
 SAFE_HEAP_STORE($1 | 0, $data | 0, 4);
 SAFE_HEAP_STORE($2 | 0, $data_size | 0, 4);
 $3 = $width;
 $4 = $height;
 $5 = $has_alpha;
 $6 = $has_animation;
 $7 = $format;
 $8 = $headers;
 SAFE_HEAP_STORE($canvas_width | 0, 0 | 0, 4);
 SAFE_HEAP_STORE($canvas_height | 0, 0 | 0, 4);
 SAFE_HEAP_STORE($image_width | 0, 0 | 0, 4);
 SAFE_HEAP_STORE($image_height | 0, 0 | 0, 4);
 $found_riff = 0;
 SAFE_HEAP_STORE($found_vp8x | 0, 0 | 0, 4);
 $animation_present = 0;
 $fragments_present = 0;
 $9 = $8;
 $10 = ($9 | 0) != (0 | 0);
 if ($10) {
  $11 = $8;
  $12 = $11 + 8 | 0;
  $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
  $14 = $13;
 } else {
  $14 = 0;
 }
 $have_all_data = $14;
 $15 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 $16 = ($15 | 0) == (0 | 0);
 $17 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $18 = $17 >>> 0 < 12;
 $or$cond = $16 | $18;
 if ($or$cond) {
  $0 = 7;
  $204 = $0;
  STACKTOP = sp;
  return $204 | 0;
 }
 dest = $hdrs;
 stop = dest + 36 | 0;
 do {
  SAFE_HEAP_STORE(dest | 0, 0 | 0 | 0, 4);
  dest = dest + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $19 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($hdrs | 0, $19 | 0, 4);
 $20 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $21 = $hdrs + 4 | 0;
 SAFE_HEAP_STORE($21 | 0, $20 | 0, 4);
 $22 = $have_all_data;
 $23 = $hdrs + 28 | 0;
 $24 = _ParseRIFF($1, $2, $22, $23) | 0;
 $status = $24;
 $25 = $status;
 $26 = ($25 | 0) != 0;
 if ($26) {
  $27 = $status;
  $0 = $27;
  $204 = $0;
  STACKTOP = sp;
  return $204 | 0;
 }
 $28 = $hdrs + 28 | 0;
 $29 = SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0;
 $30 = $29 >>> 0 > 0;
 $31 = $30 & 1;
 $found_riff = $31;
 SAFE_HEAP_STORE($flags | 0, 0 | 0, 4);
 $32 = _ParseVP8X($1, $2, $found_vp8x, $canvas_width, $canvas_height, $flags) | 0;
 $status = $32;
 $33 = $status;
 $34 = ($33 | 0) != 0;
 if ($34) {
  $35 = $status;
  $0 = $35;
  $204 = $0;
  STACKTOP = sp;
  return $204 | 0;
 }
 $36 = SAFE_HEAP_LOAD($flags | 0, 4, 0) | 0 | 0;
 $37 = $36 & 2;
 $38 = ($37 | 0) != 0;
 $39 = $38 ^ 1;
 $40 = $39 ^ 1;
 $41 = $40 & 1;
 $animation_present = $41;
 $42 = SAFE_HEAP_LOAD($flags | 0, 4, 0) | 0 | 0;
 $43 = $42 & 1;
 $44 = ($43 | 0) != 0;
 $45 = $44 ^ 1;
 $46 = $45 ^ 1;
 $47 = $46 & 1;
 $fragments_present = $47;
 $48 = $found_riff;
 $49 = ($48 | 0) == 0;
 $50 = SAFE_HEAP_LOAD($found_vp8x | 0, 4, 0) | 0 | 0;
 $51 = ($50 | 0) != 0;
 $or$cond3 = $49 & $51;
 if ($or$cond3) {
  $0 = 3;
  $204 = $0;
  STACKTOP = sp;
  return $204 | 0;
 }
 $52 = $5;
 $53 = ($52 | 0) != (0 | 0);
 if ($53) {
  $54 = SAFE_HEAP_LOAD($flags | 0, 4, 0) | 0 | 0;
  $55 = $54 & 16;
  $56 = ($55 | 0) != 0;
  $57 = $56 ^ 1;
  $58 = $57 ^ 1;
  $59 = $58 & 1;
  $60 = $5;
  SAFE_HEAP_STORE($60 | 0, $59 | 0, 4);
 }
 $61 = $6;
 $62 = ($61 | 0) != (0 | 0);
 if ($62) {
  $63 = $animation_present;
  $64 = $6;
  SAFE_HEAP_STORE($64 | 0, $63 | 0, 4);
 }
 $65 = $7;
 $66 = ($65 | 0) != (0 | 0);
 if ($66) {
  $67 = $7;
  SAFE_HEAP_STORE($67 | 0, 0 | 0, 4);
 }
 $68 = SAFE_HEAP_LOAD($canvas_width | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($image_width | 0, $68 | 0, 4);
 $69 = SAFE_HEAP_LOAD($canvas_height | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($image_height | 0, $69 | 0, 4);
 $70 = SAFE_HEAP_LOAD($found_vp8x | 0, 4, 0) | 0 | 0;
 $71 = ($70 | 0) != 0;
 if ($71) {
  $72 = $animation_present;
  $73 = ($72 | 0) != 0;
  $74 = $fragments_present;
  $75 = ($74 | 0) != 0;
  $or$cond5 = $73 | $75;
  $76 = $8;
  $77 = ($76 | 0) == (0 | 0);
  $or$cond7 = $or$cond5 & $77;
  if ($or$cond7) {
   $status = 0;
  } else {
   label = 20;
  }
 } else {
  label = 20;
 }
 do {
  if ((label | 0) == 20) {
   $78 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
   $79 = $78 >>> 0 < 4;
   if ($79) {
    $status = 7;
    break;
   }
   $80 = $found_riff;
   $81 = ($80 | 0) != 0;
   $82 = SAFE_HEAP_LOAD($found_vp8x | 0, 4, 0) | 0 | 0;
   $83 = ($82 | 0) != 0;
   $or$cond9 = $81 & $83;
   if ($or$cond9) {
    label = 25;
   } else {
    $84 = $found_riff;
    $85 = ($84 | 0) != 0;
    $86 = SAFE_HEAP_LOAD($found_vp8x | 0, 4, 0) | 0 | 0;
    $87 = ($86 | 0) != 0;
    $or$cond11 = $85 | $87;
    if (!$or$cond11) {
     $88 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
     $89 = _memcmp($88, 8895, 4) | 0;
     $90 = ($89 | 0) != 0;
     if (!$90) {
      label = 25;
     }
    }
   }
   if ((label | 0) == 25) {
    $91 = $hdrs + 28 | 0;
    $92 = SAFE_HEAP_LOAD($91 | 0, 4, 0) | 0 | 0;
    $93 = $hdrs + 16 | 0;
    $94 = $hdrs + 20 | 0;
    $95 = _ParseOptionalChunks($1, $2, $92, $93, $94) | 0;
    $status = $95;
    $96 = $status;
    $97 = ($96 | 0) != 0;
    if ($97) {
     break;
    }
   }
   $98 = $have_all_data;
   $99 = $hdrs + 28 | 0;
   $100 = SAFE_HEAP_LOAD($99 | 0, 4, 0) | 0 | 0;
   $101 = $hdrs + 24 | 0;
   $102 = $hdrs + 32 | 0;
   $103 = _ParseVP8Header($1, $2, $98, $100, $101, $102) | 0;
   $status = $103;
   $104 = $status;
   $105 = ($104 | 0) != 0;
   if (!$105) {
    $106 = $hdrs + 24 | 0;
    $107 = SAFE_HEAP_LOAD($106 | 0, 4, 0) | 0 | 0;
    $108 = $107 >>> 0 > 4294967286;
    if ($108) {
     $0 = 3;
     $204 = $0;
     STACKTOP = sp;
     return $204 | 0;
    }
    $109 = $7;
    $110 = ($109 | 0) == (0 | 0);
    $111 = $animation_present;
    $112 = ($111 | 0) != 0;
    $or$cond13 = $110 | $112;
    $113 = $fragments_present;
    $114 = ($113 | 0) != 0;
    $or$cond15 = $or$cond13 | $114;
    if (!$or$cond15) {
     $115 = $hdrs + 32 | 0;
     $116 = SAFE_HEAP_LOAD($115 | 0, 4, 0) | 0 | 0;
     $117 = ($116 | 0) != 0;
     $118 = $117 ? 2 : 1;
     $119 = $7;
     SAFE_HEAP_STORE($119 | 0, $118 | 0, 4);
    }
    $120 = $hdrs + 32 | 0;
    $121 = SAFE_HEAP_LOAD($120 | 0, 4, 0) | 0 | 0;
    $122 = ($121 | 0) != 0;
    $123 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
    if ($122) {
     $131 = $123 >>> 0 < 5;
     if ($131) {
      $status = 7;
      break;
     }
     $132 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
     $133 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
     $134 = $5;
     $135 = _VP8LGetInfo($132, $133, $image_width, $image_height, $134) | 0;
     $136 = ($135 | 0) != 0;
     if (!$136) {
      $0 = 3;
      $204 = $0;
      STACKTOP = sp;
      return $204 | 0;
     }
    } else {
     $124 = $123 >>> 0 < 10;
     if ($124) {
      $status = 7;
      break;
     }
     $125 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
     $126 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
     $127 = $hdrs + 24 | 0;
     $128 = SAFE_HEAP_LOAD($127 | 0, 4, 0) | 0 | 0;
     $129 = _VP8GetInfo($125, $126, $128, $image_width, $image_height) | 0;
     $130 = ($129 | 0) != 0;
     if (!$130) {
      $0 = 3;
      $204 = $0;
      STACKTOP = sp;
      return $204 | 0;
     }
    }
    $137 = SAFE_HEAP_LOAD($found_vp8x | 0, 4, 0) | 0 | 0;
    $138 = ($137 | 0) != 0;
    do {
     if ($138) {
      $139 = SAFE_HEAP_LOAD($canvas_width | 0, 4, 0) | 0 | 0;
      $140 = SAFE_HEAP_LOAD($image_width | 0, 4, 0) | 0 | 0;
      $141 = ($139 | 0) != ($140 | 0);
      if (!$141) {
       $142 = SAFE_HEAP_LOAD($canvas_height | 0, 4, 0) | 0 | 0;
       $143 = SAFE_HEAP_LOAD($image_height | 0, 4, 0) | 0 | 0;
       $144 = ($142 | 0) != ($143 | 0);
       if (!$144) {
        break;
       }
      }
      $0 = 3;
      $204 = $0;
      STACKTOP = sp;
      return $204 | 0;
     }
    } while (0);
    $145 = $8;
    $146 = ($145 | 0) != (0 | 0);
    if ($146) {
     $147 = $8;
     dest = $147;
     src = $hdrs;
     stop = dest + 36 | 0;
     do {
      SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0 | 0 | 0, 4);
      dest = dest + 4 | 0;
      src = src + 4 | 0;
     } while ((dest | 0) < (stop | 0));
     $148 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
     $149 = $8;
     $150 = SAFE_HEAP_LOAD($149 | 0, 4, 0) | 0 | 0;
     $151 = $148;
     $152 = $150;
     $153 = $151 - $152 | 0;
     $154 = $8;
     $155 = $154 + 12 | 0;
     SAFE_HEAP_STORE($155 | 0, $153 | 0, 4);
     $156 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
     $157 = $8;
     $158 = SAFE_HEAP_LOAD($157 | 0, 4, 0) | 0 | 0;
     $159 = $156;
     $160 = $158;
     $161 = $159 - $160 | 0;
     $162 = ($161 | 0) < 0;
     $163 = $162 << 31 >> 31;
     $164 = $163 >>> 0 < 0;
     $165 = $161 >>> 0 < 4294967286;
     $166 = ($163 | 0) == 0;
     $167 = $166 & $165;
     $168 = $164 | $167;
     if (!$168) {
      ___assert_fail(9031 | 0, 8703 | 0, 398, 9084 | 0);
     }
     $169 = $8;
     $170 = $169 + 12 | 0;
     $171 = SAFE_HEAP_LOAD($170 | 0, 4, 0) | 0 | 0;
     $172 = $8;
     $173 = $172 + 4 | 0;
     $174 = SAFE_HEAP_LOAD($173 | 0, 4, 0) | 0 | 0;
     $175 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
     $176 = $174 - $175 | 0;
     $177 = ($171 | 0) == ($176 | 0);
     if ($177) {
      break;
     } else {
      ___assert_fail(9105 | 0, 8703 | 0, 399, 9084 | 0);
     }
    }
   }
  }
 } while (0);
 $178 = $status;
 $179 = ($178 | 0) == 0;
 if (!$179) {
  $180 = $status;
  $181 = ($180 | 0) == 7;
  $182 = SAFE_HEAP_LOAD($found_vp8x | 0, 4, 0) | 0 | 0;
  $183 = ($182 | 0) != 0;
  $or$cond17 = $181 & $183;
  $184 = $8;
  $185 = ($184 | 0) == (0 | 0);
  $or$cond19 = $or$cond17 & $185;
  if (!$or$cond19) {
   $203 = $status;
   $0 = $203;
   $204 = $0;
   STACKTOP = sp;
   return $204 | 0;
  }
 }
 $186 = $5;
 $187 = ($186 | 0) != (0 | 0);
 if ($187) {
  $188 = $hdrs + 16 | 0;
  $189 = SAFE_HEAP_LOAD($188 | 0, 4, 0) | 0 | 0;
  $190 = ($189 | 0) != (0 | 0);
  $191 = $190 & 1;
  $192 = $5;
  $193 = SAFE_HEAP_LOAD($192 | 0, 4, 0) | 0 | 0;
  $194 = $193 | $191;
  SAFE_HEAP_STORE($192 | 0, $194 | 0, 4);
 }
 $195 = $3;
 $196 = ($195 | 0) != (0 | 0);
 if ($196) {
  $197 = SAFE_HEAP_LOAD($image_width | 0, 4, 0) | 0 | 0;
  $198 = $3;
  SAFE_HEAP_STORE($198 | 0, $197 | 0, 4);
 }
 $199 = $4;
 $200 = ($199 | 0) != (0 | 0);
 if ($200) {
  $201 = SAFE_HEAP_LOAD($image_height | 0, 4, 0) | 0 | 0;
  $202 = $4;
  SAFE_HEAP_STORE($202 | 0, $201 | 0, 4);
 }
 $0 = 0;
 $204 = $0;
 STACKTOP = sp;
 return $204 | 0;
}

function _VP8GetHeaders($dec, $io) {
 $dec = $dec | 0;
 $io = $io | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bits = 0, $br = 0, $buf = 0, $buf_size = 0, $frm_hdr = 0, $pic_hdr = 0, $status = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $dec;
 $2 = $io;
 $3 = $1;
 $4 = ($3 | 0) == (0 | 0);
 if ($4) {
  $0 = 0;
  $263 = $0;
  STACKTOP = sp;
  return $263 | 0;
 }
 $5 = $1;
 _SetOk($5);
 $6 = $2;
 $7 = ($6 | 0) == (0 | 0);
 if ($7) {
  $8 = $1;
  $9 = _VP8SetError($8, 2, 6586) | 0;
  $0 = $9;
  $263 = $0;
  STACKTOP = sp;
  return $263 | 0;
 }
 $10 = $2;
 $11 = $10 + 64 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $buf = $12;
 $13 = $2;
 $14 = $13 + 60 | 0;
 $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
 $buf_size = $15;
 $16 = $buf_size;
 $17 = $16 >>> 0 < 4;
 if ($17) {
  $18 = $1;
  $19 = _VP8SetError($18, 7, 6623) | 0;
  $0 = $19;
  $263 = $0;
  STACKTOP = sp;
  return $263 | 0;
 }
 $20 = $buf;
 $21 = SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0;
 $22 = $21 & 255;
 $23 = $buf;
 $24 = $23 + 1 | 0;
 $25 = SAFE_HEAP_LOAD($24 >> 0 | 0, 1, 0) | 0 | 0;
 $26 = $25 & 255;
 $27 = $26 << 8;
 $28 = $22 | $27;
 $29 = $buf;
 $30 = $29 + 2 | 0;
 $31 = SAFE_HEAP_LOAD($30 >> 0 | 0, 1, 0) | 0 | 0;
 $32 = $31 & 255;
 $33 = $32 << 16;
 $34 = $28 | $33;
 $bits = $34;
 $35 = $1;
 $36 = $35 + 40 | 0;
 $frm_hdr = $36;
 $37 = $bits;
 $38 = $37 & 1;
 $39 = ($38 | 0) != 0;
 $40 = $39 ^ 1;
 $41 = $40 & 1;
 $42 = $41 & 255;
 $43 = $frm_hdr;
 SAFE_HEAP_STORE($43 >> 0 | 0, $42 | 0, 1);
 $44 = $bits;
 $45 = $44 >>> 1;
 $46 = $45 & 7;
 $47 = $46 & 255;
 $48 = $frm_hdr;
 $49 = $48 + 1 | 0;
 SAFE_HEAP_STORE($49 >> 0 | 0, $47 | 0, 1);
 $50 = $bits;
 $51 = $50 >>> 4;
 $52 = $51 & 1;
 $53 = $52 & 255;
 $54 = $frm_hdr;
 $55 = $54 + 2 | 0;
 SAFE_HEAP_STORE($55 >> 0 | 0, $53 | 0, 1);
 $56 = $bits;
 $57 = $56 >>> 5;
 $58 = $frm_hdr;
 $59 = $58 + 4 | 0;
 SAFE_HEAP_STORE($59 | 0, $57 | 0, 4);
 $60 = $frm_hdr;
 $61 = $60 + 1 | 0;
 $62 = SAFE_HEAP_LOAD($61 >> 0 | 0, 1, 0) | 0 | 0;
 $63 = $62 & 255;
 $64 = ($63 | 0) > 3;
 if ($64) {
  $65 = $1;
  $66 = _VP8SetError($65, 3, 6641) | 0;
  $0 = $66;
  $263 = $0;
  STACKTOP = sp;
  return $263 | 0;
 }
 $67 = $frm_hdr;
 $68 = $67 + 2 | 0;
 $69 = SAFE_HEAP_LOAD($68 >> 0 | 0, 1, 0) | 0 | 0;
 $70 = $69 << 24 >> 24 != 0;
 if (!$70) {
  $71 = $1;
  $72 = _VP8SetError($71, 4, 6672) | 0;
  $0 = $72;
  $263 = $0;
  STACKTOP = sp;
  return $263 | 0;
 }
 $73 = $buf;
 $74 = $73 + 3 | 0;
 $buf = $74;
 $75 = $buf_size;
 $76 = $75 - 3 | 0;
 $buf_size = $76;
 $77 = $1;
 $78 = $77 + 48 | 0;
 $pic_hdr = $78;
 $79 = $frm_hdr;
 $80 = SAFE_HEAP_LOAD($79 >> 0 | 0, 1, 0) | 0 | 0;
 $81 = $80 << 24 >> 24 != 0;
 do {
  if ($81) {
   $82 = $buf_size;
   $83 = $82 >>> 0 < 7;
   if ($83) {
    $84 = $1;
    $85 = _VP8SetError($84, 7, 6695) | 0;
    $0 = $85;
    $263 = $0;
    STACKTOP = sp;
    return $263 | 0;
   }
   $86 = $buf;
   $87 = $buf_size;
   $88 = _VP8CheckSignature($86, $87) | 0;
   $89 = ($88 | 0) != 0;
   if ($89) {
    $92 = $buf;
    $93 = $92 + 4 | 0;
    $94 = SAFE_HEAP_LOAD($93 >> 0 | 0, 1, 0) | 0 | 0;
    $95 = $94 & 255;
    $96 = $95 << 8;
    $97 = $buf;
    $98 = $97 + 3 | 0;
    $99 = SAFE_HEAP_LOAD($98 >> 0 | 0, 1, 0) | 0 | 0;
    $100 = $99 & 255;
    $101 = $96 | $100;
    $102 = $101 & 16383;
    $103 = $102 & 65535;
    $104 = $pic_hdr;
    SAFE_HEAP_STORE($104 | 0, $103 | 0, 2);
    $105 = $buf;
    $106 = $105 + 4 | 0;
    $107 = SAFE_HEAP_LOAD($106 >> 0 | 0, 1, 0) | 0 | 0;
    $108 = $107 & 255;
    $109 = $108 >> 6;
    $110 = $109 & 255;
    $111 = $pic_hdr;
    $112 = $111 + 4 | 0;
    SAFE_HEAP_STORE($112 >> 0 | 0, $110 | 0, 1);
    $113 = $buf;
    $114 = $113 + 6 | 0;
    $115 = SAFE_HEAP_LOAD($114 >> 0 | 0, 1, 0) | 0 | 0;
    $116 = $115 & 255;
    $117 = $116 << 8;
    $118 = $buf;
    $119 = $118 + 5 | 0;
    $120 = SAFE_HEAP_LOAD($119 >> 0 | 0, 1, 0) | 0 | 0;
    $121 = $120 & 255;
    $122 = $117 | $121;
    $123 = $122 & 16383;
    $124 = $123 & 65535;
    $125 = $pic_hdr;
    $126 = $125 + 2 | 0;
    SAFE_HEAP_STORE($126 | 0, $124 | 0, 2);
    $127 = $buf;
    $128 = $127 + 6 | 0;
    $129 = SAFE_HEAP_LOAD($128 >> 0 | 0, 1, 0) | 0 | 0;
    $130 = $129 & 255;
    $131 = $130 >> 6;
    $132 = $131 & 255;
    $133 = $pic_hdr;
    $134 = $133 + 5 | 0;
    SAFE_HEAP_STORE($134 >> 0 | 0, $132 | 0, 1);
    $135 = $buf;
    $136 = $135 + 7 | 0;
    $buf = $136;
    $137 = $buf_size;
    $138 = $137 - 7 | 0;
    $buf_size = $138;
    $139 = $pic_hdr;
    $140 = SAFE_HEAP_LOAD($139 | 0, 2, 0) | 0 | 0;
    $141 = $140 & 65535;
    $142 = $141 + 15 | 0;
    $143 = $142 >> 4;
    $144 = $1;
    $145 = $144 + 288 | 0;
    SAFE_HEAP_STORE($145 | 0, $143 | 0, 4);
    $146 = $pic_hdr;
    $147 = $146 + 2 | 0;
    $148 = SAFE_HEAP_LOAD($147 | 0, 2, 0) | 0 | 0;
    $149 = $148 & 65535;
    $150 = $149 + 15 | 0;
    $151 = $150 >> 4;
    $152 = $1;
    $153 = $152 + 292 | 0;
    SAFE_HEAP_STORE($153 | 0, $151 | 0, 4);
    $154 = $pic_hdr;
    $155 = SAFE_HEAP_LOAD($154 | 0, 2, 0) | 0 | 0;
    $156 = $155 & 65535;
    $157 = $2;
    SAFE_HEAP_STORE($157 | 0, $156 | 0, 4);
    $158 = $pic_hdr;
    $159 = $158 + 2 | 0;
    $160 = SAFE_HEAP_LOAD($159 | 0, 2, 0) | 0 | 0;
    $161 = $160 & 65535;
    $162 = $2;
    $163 = $162 + 4 | 0;
    SAFE_HEAP_STORE($163 | 0, $161 | 0, 4);
    $164 = $2;
    $165 = $164 + 92 | 0;
    SAFE_HEAP_STORE($165 | 0, 0 | 0, 4);
    $166 = $2;
    $167 = $166 + 72 | 0;
    SAFE_HEAP_STORE($167 | 0, 0 | 0, 4);
    $168 = $2;
    $169 = $168 + 84 | 0;
    SAFE_HEAP_STORE($169 | 0, 0 | 0, 4);
    $170 = $2;
    $171 = $170 + 76 | 0;
    SAFE_HEAP_STORE($171 | 0, 0 | 0, 4);
    $172 = $2;
    $173 = SAFE_HEAP_LOAD($172 | 0, 4, 0) | 0 | 0;
    $174 = $2;
    $175 = $174 + 80 | 0;
    SAFE_HEAP_STORE($175 | 0, $173 | 0, 4);
    $176 = $2;
    $177 = $176 + 4 | 0;
    $178 = SAFE_HEAP_LOAD($177 | 0, 4, 0) | 0 | 0;
    $179 = $2;
    $180 = $179 + 88 | 0;
    SAFE_HEAP_STORE($180 | 0, $178 | 0, 4);
    $181 = $2;
    $182 = SAFE_HEAP_LOAD($181 | 0, 4, 0) | 0 | 0;
    $183 = $2;
    $184 = $183 + 12 | 0;
    SAFE_HEAP_STORE($184 | 0, $182 | 0, 4);
    $185 = $2;
    $186 = $185 + 4 | 0;
    $187 = SAFE_HEAP_LOAD($186 | 0, 4, 0) | 0 | 0;
    $188 = $2;
    $189 = $188 + 16 | 0;
    SAFE_HEAP_STORE($189 | 0, $187 | 0, 4);
    $190 = $1;
    $191 = $190 + 904 | 0;
    _VP8ResetProba($191);
    $192 = $1;
    $193 = $192 + 104 | 0;
    _ResetSegmentHeader($193);
    break;
   }
   $90 = $1;
   $91 = _VP8SetError($90, 3, 6723) | 0;
   $0 = $91;
   $263 = $0;
   STACKTOP = sp;
   return $263 | 0;
  }
 } while (0);
 $194 = $frm_hdr;
 $195 = $194 + 4 | 0;
 $196 = SAFE_HEAP_LOAD($195 | 0, 4, 0) | 0 | 0;
 $197 = $buf_size;
 $198 = $196 >>> 0 > $197 >>> 0;
 $199 = $1;
 if ($198) {
  $200 = _VP8SetError($199, 7, 6737) | 0;
  $0 = $200;
  $263 = $0;
  STACKTOP = sp;
  return $263 | 0;
 }
 $201 = $199 + 12 | 0;
 $br = $201;
 $202 = $br;
 $203 = $buf;
 $204 = $frm_hdr;
 $205 = $204 + 4 | 0;
 $206 = SAFE_HEAP_LOAD($205 | 0, 4, 0) | 0 | 0;
 _VP8InitBitReader($202, $203, $206);
 $207 = $frm_hdr;
 $208 = $207 + 4 | 0;
 $209 = SAFE_HEAP_LOAD($208 | 0, 4, 0) | 0 | 0;
 $210 = $buf;
 $211 = $210 + $209 | 0;
 $buf = $211;
 $212 = $frm_hdr;
 $213 = $212 + 4 | 0;
 $214 = SAFE_HEAP_LOAD($213 | 0, 4, 0) | 0 | 0;
 $215 = $buf_size;
 $216 = $215 - $214 | 0;
 $buf_size = $216;
 $217 = $frm_hdr;
 $218 = SAFE_HEAP_LOAD($217 >> 0 | 0, 1, 0) | 0 | 0;
 $219 = $218 << 24 >> 24 != 0;
 if ($219) {
  $220 = $br;
  $221 = _VP8Get74($220) | 0;
  $222 = $221 & 255;
  $223 = $pic_hdr;
  $224 = $223 + 6 | 0;
  SAFE_HEAP_STORE($224 >> 0 | 0, $222 | 0, 1);
  $225 = $br;
  $226 = _VP8Get74($225) | 0;
  $227 = $226 & 255;
  $228 = $pic_hdr;
  $229 = $228 + 7 | 0;
  SAFE_HEAP_STORE($229 >> 0 | 0, $227 | 0, 1);
 }
 $230 = $br;
 $231 = $1;
 $232 = $231 + 104 | 0;
 $233 = $1;
 $234 = $233 + 904 | 0;
 $235 = _ParseSegmentHeader($230, $232, $234) | 0;
 $236 = ($235 | 0) != 0;
 if (!$236) {
  $237 = $1;
  $238 = _VP8SetError($237, 3, 6758) | 0;
  $0 = $238;
  $263 = $0;
  STACKTOP = sp;
  return $263 | 0;
 }
 $239 = $br;
 $240 = $1;
 $241 = _ParseFilterHeader($239, $240) | 0;
 $242 = ($241 | 0) != 0;
 $243 = $1;
 if (!$242) {
  $244 = _VP8SetError($243, 3, 6786) | 0;
  $0 = $244;
  $263 = $0;
  STACKTOP = sp;
  return $263 | 0;
 }
 $245 = $buf;
 $246 = $buf_size;
 $247 = _ParsePartitions($243, $245, $246) | 0;
 $status = $247;
 $248 = $status;
 $249 = ($248 | 0) != 0;
 $250 = $1;
 if ($249) {
  $251 = $status;
  $252 = _VP8SetError($250, $251, 6813) | 0;
  $0 = $252;
  $263 = $0;
  STACKTOP = sp;
  return $263 | 0;
 }
 _VP8ParseQuant($250);
 $253 = $frm_hdr;
 $254 = SAFE_HEAP_LOAD($253 >> 0 | 0, 1, 0) | 0 | 0;
 $255 = $254 << 24 >> 24 != 0;
 if ($255) {
  $258 = $br;
  _VP8Get74($258) | 0;
  $259 = $br;
  $260 = $1;
  _VP8ParseProba($259, $260);
  $261 = $1;
  $262 = $261 + 4 | 0;
  SAFE_HEAP_STORE($262 | 0, 1 | 0, 4);
  $0 = 1;
  $263 = $0;
  STACKTOP = sp;
  return $263 | 0;
 } else {
  $256 = $1;
  $257 = _VP8SetError($256, 4, 6837) | 0;
  $0 = $257;
  $263 = $0;
  STACKTOP = sp;
  return $263 | 0;
 }
 return 0 | 0;
}

function _CheckDecBuffer($buffer) {
 $buffer = $buffer | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $269 = 0, $27 = 0, $270 = 0, $271 = 0, $272 = 0, $273 = 0, $274 = 0, $275 = 0, $276 = 0, $277 = 0, $278 = 0;
 var $279 = 0, $28 = 0, $280 = 0, $281 = 0, $282 = 0, $283 = 0, $284 = 0, $285 = 0, $286 = 0, $287 = 0, $288 = 0, $289 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a_size = 0, $a_stride = 0, $buf = 0, $buf1 = 0, $height = 0, $mode = 0, $ok = 0, $size = 0, $stride = 0, $u_size = 0;
 var $u_stride = 0, $uv_height = 0, $uv_width = 0, $v_size = 0, $v_stride = 0, $width = 0, $y_size = 0, $y_stride = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $y_size = sp + 32 | 0;
 $u_size = sp + 24 | 0;
 $v_size = sp + 16 | 0;
 $a_size = sp + 8 | 0;
 $size = sp;
 $0 = $buffer;
 $ok = 1;
 $1 = $0;
 $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
 $mode = $2;
 $3 = $0;
 $4 = $3 + 4 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $width = $5;
 $6 = $0;
 $7 = $6 + 8 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $height = $8;
 $9 = $mode;
 $10 = _IsValidColorspace($9) | 0;
 $11 = ($10 | 0) != 0;
 if (!$11) {
  $ok = 0;
  $287 = $ok;
  $288 = ($287 | 0) != 0;
  $289 = $288 ? 0 : 2;
  STACKTOP = sp;
  return $289 | 0;
 }
 $12 = $mode;
 $13 = _WebPIsRGBMode($12) | 0;
 $14 = ($13 | 0) != 0;
 $15 = $0;
 $16 = $15 + 16 | 0;
 if ($14) {
  $buf1 = $16;
  $232 = $buf1;
  $233 = $232 + 4 | 0;
  $234 = SAFE_HEAP_LOAD($233 | 0, 4, 0) | 0 | 0;
  $235 = Math_abs($234 | 0) | 0;
  $stride = $235;
  $236 = $stride;
  $237 = ($236 | 0) < 0;
  $238 = $237 << 31 >> 31;
  $239 = $height;
  $240 = $239 - 1 | 0;
  $241 = ($240 | 0) < 0;
  $242 = $241 << 31 >> 31;
  $243 = ___muldi3($236 | 0, $238 | 0, $240 | 0, $242 | 0) | 0;
  $244 = tempRet0;
  $245 = $width;
  $246 = ($245 | 0) < 0;
  $247 = $246 << 31 >> 31;
  $248 = _i64Add($243 | 0, $244 | 0, $245 | 0, $247 | 0) | 0;
  $249 = tempRet0;
  $250 = $size;
  $251 = $250;
  SAFE_HEAP_STORE($251 | 0, $248 | 0, 4);
  $252 = $250 + 4 | 0;
  $253 = $252;
  SAFE_HEAP_STORE($253 | 0, $249 | 0, 4);
  $254 = $size;
  $255 = $254;
  $256 = SAFE_HEAP_LOAD($255 | 0, 4, 0) | 0 | 0;
  $257 = $254 + 4 | 0;
  $258 = $257;
  $259 = SAFE_HEAP_LOAD($258 | 0, 4, 0) | 0 | 0;
  $260 = $buf1;
  $261 = $260 + 8 | 0;
  $262 = SAFE_HEAP_LOAD($261 | 0, 4, 0) | 0 | 0;
  $263 = $259 >>> 0 < 0;
  $264 = $256 >>> 0 <= $262 >>> 0;
  $265 = ($259 | 0) == 0;
  $266 = $265 & $264;
  $267 = $263 | $266;
  $268 = $267 & 1;
  $269 = $ok;
  $270 = $269 & $268;
  $ok = $270;
  $271 = $stride;
  $272 = $width;
  $273 = $mode;
  $274 = 60 + ($273 << 2) | 0;
  $275 = SAFE_HEAP_LOAD($274 | 0, 4, 0) | 0 | 0;
  $276 = Math_imul($272, $275) | 0;
  $277 = ($271 | 0) >= ($276 | 0);
  $278 = $277 & 1;
  $279 = $ok;
  $280 = $279 & $278;
  $ok = $280;
  $281 = $buf1;
  $282 = SAFE_HEAP_LOAD($281 | 0, 4, 0) | 0 | 0;
  $283 = ($282 | 0) != (0 | 0);
  $284 = $283 & 1;
  $285 = $ok;
  $286 = $285 & $284;
  $ok = $286;
  $287 = $ok;
  $288 = ($287 | 0) != 0;
  $289 = $288 ? 0 : 2;
  STACKTOP = sp;
  return $289 | 0;
 }
 $buf = $16;
 $17 = $width;
 $18 = $17 + 1 | 0;
 $19 = ($18 | 0) / 2 & -1;
 $uv_width = $19;
 $20 = $height;
 $21 = $20 + 1 | 0;
 $22 = ($21 | 0) / 2 & -1;
 $uv_height = $22;
 $23 = $buf;
 $24 = $23 + 16 | 0;
 $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
 $26 = Math_abs($25 | 0) | 0;
 $y_stride = $26;
 $27 = $buf;
 $28 = $27 + 20 | 0;
 $29 = SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0;
 $30 = Math_abs($29 | 0) | 0;
 $u_stride = $30;
 $31 = $buf;
 $32 = $31 + 24 | 0;
 $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
 $34 = Math_abs($33 | 0) | 0;
 $v_stride = $34;
 $35 = $buf;
 $36 = $35 + 28 | 0;
 $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
 $38 = Math_abs($37 | 0) | 0;
 $a_stride = $38;
 $39 = $y_stride;
 $40 = ($39 | 0) < 0;
 $41 = $40 << 31 >> 31;
 $42 = $height;
 $43 = $42 - 1 | 0;
 $44 = ($43 | 0) < 0;
 $45 = $44 << 31 >> 31;
 $46 = ___muldi3($39 | 0, $41 | 0, $43 | 0, $45 | 0) | 0;
 $47 = tempRet0;
 $48 = $width;
 $49 = ($48 | 0) < 0;
 $50 = $49 << 31 >> 31;
 $51 = _i64Add($46 | 0, $47 | 0, $48 | 0, $50 | 0) | 0;
 $52 = tempRet0;
 $53 = $y_size;
 $54 = $53;
 SAFE_HEAP_STORE($54 | 0, $51 | 0, 4);
 $55 = $53 + 4 | 0;
 $56 = $55;
 SAFE_HEAP_STORE($56 | 0, $52 | 0, 4);
 $57 = $u_stride;
 $58 = ($57 | 0) < 0;
 $59 = $58 << 31 >> 31;
 $60 = $uv_height;
 $61 = $60 - 1 | 0;
 $62 = ($61 | 0) < 0;
 $63 = $62 << 31 >> 31;
 $64 = ___muldi3($57 | 0, $59 | 0, $61 | 0, $63 | 0) | 0;
 $65 = tempRet0;
 $66 = $uv_width;
 $67 = ($66 | 0) < 0;
 $68 = $67 << 31 >> 31;
 $69 = _i64Add($64 | 0, $65 | 0, $66 | 0, $68 | 0) | 0;
 $70 = tempRet0;
 $71 = $u_size;
 $72 = $71;
 SAFE_HEAP_STORE($72 | 0, $69 | 0, 4);
 $73 = $71 + 4 | 0;
 $74 = $73;
 SAFE_HEAP_STORE($74 | 0, $70 | 0, 4);
 $75 = $v_stride;
 $76 = ($75 | 0) < 0;
 $77 = $76 << 31 >> 31;
 $78 = $uv_height;
 $79 = $78 - 1 | 0;
 $80 = ($79 | 0) < 0;
 $81 = $80 << 31 >> 31;
 $82 = ___muldi3($75 | 0, $77 | 0, $79 | 0, $81 | 0) | 0;
 $83 = tempRet0;
 $84 = $uv_width;
 $85 = ($84 | 0) < 0;
 $86 = $85 << 31 >> 31;
 $87 = _i64Add($82 | 0, $83 | 0, $84 | 0, $86 | 0) | 0;
 $88 = tempRet0;
 $89 = $v_size;
 $90 = $89;
 SAFE_HEAP_STORE($90 | 0, $87 | 0, 4);
 $91 = $89 + 4 | 0;
 $92 = $91;
 SAFE_HEAP_STORE($92 | 0, $88 | 0, 4);
 $93 = $a_stride;
 $94 = ($93 | 0) < 0;
 $95 = $94 << 31 >> 31;
 $96 = $height;
 $97 = $96 - 1 | 0;
 $98 = ($97 | 0) < 0;
 $99 = $98 << 31 >> 31;
 $100 = ___muldi3($93 | 0, $95 | 0, $97 | 0, $99 | 0) | 0;
 $101 = tempRet0;
 $102 = $width;
 $103 = ($102 | 0) < 0;
 $104 = $103 << 31 >> 31;
 $105 = _i64Add($100 | 0, $101 | 0, $102 | 0, $104 | 0) | 0;
 $106 = tempRet0;
 $107 = $a_size;
 $108 = $107;
 SAFE_HEAP_STORE($108 | 0, $105 | 0, 4);
 $109 = $107 + 4 | 0;
 $110 = $109;
 SAFE_HEAP_STORE($110 | 0, $106 | 0, 4);
 $111 = $y_size;
 $112 = $111;
 $113 = SAFE_HEAP_LOAD($112 | 0, 4, 0) | 0 | 0;
 $114 = $111 + 4 | 0;
 $115 = $114;
 $116 = SAFE_HEAP_LOAD($115 | 0, 4, 0) | 0 | 0;
 $117 = $buf;
 $118 = $117 + 32 | 0;
 $119 = SAFE_HEAP_LOAD($118 | 0, 4, 0) | 0 | 0;
 $120 = $116 >>> 0 < 0;
 $121 = $113 >>> 0 <= $119 >>> 0;
 $122 = ($116 | 0) == 0;
 $123 = $122 & $121;
 $124 = $120 | $123;
 $125 = $124 & 1;
 $126 = $ok;
 $127 = $126 & $125;
 $ok = $127;
 $128 = $u_size;
 $129 = $128;
 $130 = SAFE_HEAP_LOAD($129 | 0, 4, 0) | 0 | 0;
 $131 = $128 + 4 | 0;
 $132 = $131;
 $133 = SAFE_HEAP_LOAD($132 | 0, 4, 0) | 0 | 0;
 $134 = $buf;
 $135 = $134 + 36 | 0;
 $136 = SAFE_HEAP_LOAD($135 | 0, 4, 0) | 0 | 0;
 $137 = $133 >>> 0 < 0;
 $138 = $130 >>> 0 <= $136 >>> 0;
 $139 = ($133 | 0) == 0;
 $140 = $139 & $138;
 $141 = $137 | $140;
 $142 = $141 & 1;
 $143 = $ok;
 $144 = $143 & $142;
 $ok = $144;
 $145 = $v_size;
 $146 = $145;
 $147 = SAFE_HEAP_LOAD($146 | 0, 4, 0) | 0 | 0;
 $148 = $145 + 4 | 0;
 $149 = $148;
 $150 = SAFE_HEAP_LOAD($149 | 0, 4, 0) | 0 | 0;
 $151 = $buf;
 $152 = $151 + 40 | 0;
 $153 = SAFE_HEAP_LOAD($152 | 0, 4, 0) | 0 | 0;
 $154 = $150 >>> 0 < 0;
 $155 = $147 >>> 0 <= $153 >>> 0;
 $156 = ($150 | 0) == 0;
 $157 = $156 & $155;
 $158 = $154 | $157;
 $159 = $158 & 1;
 $160 = $ok;
 $161 = $160 & $159;
 $ok = $161;
 $162 = $y_stride;
 $163 = $width;
 $164 = ($162 | 0) >= ($163 | 0);
 $165 = $164 & 1;
 $166 = $ok;
 $167 = $166 & $165;
 $ok = $167;
 $168 = $u_stride;
 $169 = $uv_width;
 $170 = ($168 | 0) >= ($169 | 0);
 $171 = $170 & 1;
 $172 = $ok;
 $173 = $172 & $171;
 $ok = $173;
 $174 = $v_stride;
 $175 = $uv_width;
 $176 = ($174 | 0) >= ($175 | 0);
 $177 = $176 & 1;
 $178 = $ok;
 $179 = $178 & $177;
 $ok = $179;
 $180 = $buf;
 $181 = SAFE_HEAP_LOAD($180 | 0, 4, 0) | 0 | 0;
 $182 = ($181 | 0) != (0 | 0);
 $183 = $182 & 1;
 $184 = $ok;
 $185 = $184 & $183;
 $ok = $185;
 $186 = $buf;
 $187 = $186 + 4 | 0;
 $188 = SAFE_HEAP_LOAD($187 | 0, 4, 0) | 0 | 0;
 $189 = ($188 | 0) != (0 | 0);
 $190 = $189 & 1;
 $191 = $ok;
 $192 = $191 & $190;
 $ok = $192;
 $193 = $buf;
 $194 = $193 + 8 | 0;
 $195 = SAFE_HEAP_LOAD($194 | 0, 4, 0) | 0 | 0;
 $196 = ($195 | 0) != (0 | 0);
 $197 = $196 & 1;
 $198 = $ok;
 $199 = $198 & $197;
 $ok = $199;
 $200 = $mode;
 $201 = ($200 | 0) == 12;
 if (!$201) {
  $287 = $ok;
  $288 = ($287 | 0) != 0;
  $289 = $288 ? 0 : 2;
  STACKTOP = sp;
  return $289 | 0;
 }
 $202 = $a_stride;
 $203 = $width;
 $204 = ($202 | 0) >= ($203 | 0);
 $205 = $204 & 1;
 $206 = $ok;
 $207 = $206 & $205;
 $ok = $207;
 $208 = $a_size;
 $209 = $208;
 $210 = SAFE_HEAP_LOAD($209 | 0, 4, 0) | 0 | 0;
 $211 = $208 + 4 | 0;
 $212 = $211;
 $213 = SAFE_HEAP_LOAD($212 | 0, 4, 0) | 0 | 0;
 $214 = $buf;
 $215 = $214 + 44 | 0;
 $216 = SAFE_HEAP_LOAD($215 | 0, 4, 0) | 0 | 0;
 $217 = $213 >>> 0 < 0;
 $218 = $210 >>> 0 <= $216 >>> 0;
 $219 = ($213 | 0) == 0;
 $220 = $219 & $218;
 $221 = $217 | $220;
 $222 = $221 & 1;
 $223 = $ok;
 $224 = $223 & $222;
 $ok = $224;
 $225 = $buf;
 $226 = $225 + 12 | 0;
 $227 = SAFE_HEAP_LOAD($226 | 0, 4, 0) | 0 | 0;
 $228 = ($227 | 0) != (0 | 0);
 $229 = $228 & 1;
 $230 = $ok;
 $231 = $230 & $229;
 $ok = $231;
 $287 = $ok;
 $288 = ($287 | 0) != 0;
 $289 = $288 ? 0 : 2;
 STACKTOP = sp;
 return $289 | 0;
}

function _AllocateBuffer($buffer) {
 $buffer = $buffer | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $a_size = 0, $a_stride = 0, $buf = 0, $buf1 = 0, $h = 0, $mode = 0, $or$cond = 0, $output = 0, $size = 0, $stride = 0, $total_size = 0, $uv_size = 0, $uv_stride = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $uv_size = sp + 24 | 0;
 $a_size = sp + 16 | 0;
 $total_size = sp + 8 | 0;
 $size = sp;
 $1 = $buffer;
 $2 = $1;
 $3 = $2 + 4 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $w = $4;
 $5 = $1;
 $6 = $5 + 8 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $h = $7;
 $8 = $1;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $mode = $9;
 $10 = $w;
 $11 = ($10 | 0) <= 0;
 $12 = $h;
 $13 = ($12 | 0) <= 0;
 $or$cond = $11 | $13;
 if (!$or$cond) {
  $14 = $mode;
  $15 = _IsValidColorspace($14) | 0;
  $16 = ($15 | 0) != 0;
  if ($16) {
   $17 = $1;
   $18 = $17 + 12 | 0;
   $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
   $20 = ($19 | 0) != 0;
   do {
    if (!$20) {
     $21 = $1;
     $22 = $21 + 80 | 0;
     $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
     $24 = ($23 | 0) == (0 | 0);
     if ($24) {
      $uv_stride = 0;
      $a_stride = 0;
      $25 = $uv_size;
      $26 = $25;
      SAFE_HEAP_STORE($26 | 0, 0 | 0, 4);
      $27 = $25 + 4 | 0;
      $28 = $27;
      SAFE_HEAP_STORE($28 | 0, 0 | 0, 4);
      $29 = $a_size;
      $30 = $29;
      SAFE_HEAP_STORE($30 | 0, 0 | 0, 4);
      $31 = $29 + 4 | 0;
      $32 = $31;
      SAFE_HEAP_STORE($32 | 0, 0 | 0, 4);
      $33 = $w;
      $34 = $mode;
      $35 = 60 + ($34 << 2) | 0;
      $36 = SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0;
      $37 = Math_imul($33, $36) | 0;
      $stride = $37;
      $38 = $stride;
      $39 = ($38 | 0) < 0;
      $40 = $39 << 31 >> 31;
      $41 = $h;
      $42 = ($41 | 0) < 0;
      $43 = $42 << 31 >> 31;
      $44 = ___muldi3($38 | 0, $40 | 0, $41 | 0, $43 | 0) | 0;
      $45 = tempRet0;
      $46 = $size;
      $47 = $46;
      SAFE_HEAP_STORE($47 | 0, $44 | 0, 4);
      $48 = $46 + 4 | 0;
      $49 = $48;
      SAFE_HEAP_STORE($49 | 0, $45 | 0, 4);
      $50 = $mode;
      $51 = _WebPIsRGBMode($50) | 0;
      $52 = ($51 | 0) != 0;
      if (!$52) {
       $53 = $w;
       $54 = $53 + 1 | 0;
       $55 = ($54 | 0) / 2 & -1;
       $uv_stride = $55;
       $56 = $uv_stride;
       $57 = ($56 | 0) < 0;
       $58 = $57 << 31 >> 31;
       $59 = $h;
       $60 = $59 + 1 | 0;
       $61 = ($60 | 0) / 2 & -1;
       $62 = ($61 | 0) < 0;
       $63 = $62 << 31 >> 31;
       $64 = ___muldi3($56 | 0, $58 | 0, $61 | 0, $63 | 0) | 0;
       $65 = tempRet0;
       $66 = $uv_size;
       $67 = $66;
       SAFE_HEAP_STORE($67 | 0, $64 | 0, 4);
       $68 = $66 + 4 | 0;
       $69 = $68;
       SAFE_HEAP_STORE($69 | 0, $65 | 0, 4);
       $70 = $mode;
       $71 = ($70 | 0) == 12;
       if ($71) {
        $72 = $w;
        $a_stride = $72;
        $73 = $a_stride;
        $74 = ($73 | 0) < 0;
        $75 = $74 << 31 >> 31;
        $76 = $h;
        $77 = ($76 | 0) < 0;
        $78 = $77 << 31 >> 31;
        $79 = ___muldi3($73 | 0, $75 | 0, $76 | 0, $78 | 0) | 0;
        $80 = tempRet0;
        $81 = $a_size;
        $82 = $81;
        SAFE_HEAP_STORE($82 | 0, $79 | 0, 4);
        $83 = $81 + 4 | 0;
        $84 = $83;
        SAFE_HEAP_STORE($84 | 0, $80 | 0, 4);
       }
      }
      $85 = $size;
      $86 = $85;
      $87 = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0;
      $88 = $85 + 4 | 0;
      $89 = $88;
      $90 = SAFE_HEAP_LOAD($89 | 0, 4, 0) | 0 | 0;
      $91 = $uv_size;
      $92 = $91;
      $93 = SAFE_HEAP_LOAD($92 | 0, 4, 0) | 0 | 0;
      $94 = $91 + 4 | 0;
      $95 = $94;
      $96 = SAFE_HEAP_LOAD($95 | 0, 4, 0) | 0 | 0;
      $97 = ___muldi3(2, 0, $93 | 0, $96 | 0) | 0;
      $98 = tempRet0;
      $99 = _i64Add($87 | 0, $90 | 0, $97 | 0, $98 | 0) | 0;
      $100 = tempRet0;
      $101 = $a_size;
      $102 = $101;
      $103 = SAFE_HEAP_LOAD($102 | 0, 4, 0) | 0 | 0;
      $104 = $101 + 4 | 0;
      $105 = $104;
      $106 = SAFE_HEAP_LOAD($105 | 0, 4, 0) | 0 | 0;
      $107 = _i64Add($99 | 0, $100 | 0, $103 | 0, $106 | 0) | 0;
      $108 = tempRet0;
      $109 = $total_size;
      $110 = $109;
      SAFE_HEAP_STORE($110 | 0, $107 | 0, 4);
      $111 = $109 + 4 | 0;
      $112 = $111;
      SAFE_HEAP_STORE($112 | 0, $108 | 0, 4);
      $113 = $total_size;
      $114 = $113;
      $115 = SAFE_HEAP_LOAD($114 | 0, 4, 0) | 0 | 0;
      $116 = $113 + 4 | 0;
      $117 = $116;
      $118 = SAFE_HEAP_LOAD($117 | 0, 4, 0) | 0 | 0;
      $119 = _WebPSafeMalloc($115, $118, 1) | 0;
      $output = $119;
      $120 = $output;
      $121 = ($120 | 0) == (0 | 0);
      if ($121) {
       $0 = 1;
       $239 = $0;
       STACKTOP = sp;
       return $239 | 0;
      }
      $122 = $output;
      $123 = $1;
      $124 = $123 + 80 | 0;
      SAFE_HEAP_STORE($124 | 0, $122 | 0, 4);
      $125 = $mode;
      $126 = _WebPIsRGBMode($125) | 0;
      $127 = ($126 | 0) != 0;
      $128 = $1;
      $129 = $128 + 16 | 0;
      if ($127) {
       $buf1 = $129;
       $224 = $output;
       $225 = $buf1;
       SAFE_HEAP_STORE($225 | 0, $224 | 0, 4);
       $226 = $stride;
       $227 = $buf1;
       $228 = $227 + 4 | 0;
       SAFE_HEAP_STORE($228 | 0, $226 | 0, 4);
       $229 = $size;
       $230 = $229;
       $231 = SAFE_HEAP_LOAD($230 | 0, 4, 0) | 0 | 0;
       $232 = $229 + 4 | 0;
       $233 = $232;
       $234 = SAFE_HEAP_LOAD($233 | 0, 4, 0) | 0 | 0;
       $235 = $buf1;
       $236 = $235 + 8 | 0;
       SAFE_HEAP_STORE($236 | 0, $231 | 0, 4);
       break;
      }
      $buf = $129;
      $130 = $output;
      $131 = $buf;
      SAFE_HEAP_STORE($131 | 0, $130 | 0, 4);
      $132 = $stride;
      $133 = $buf;
      $134 = $133 + 16 | 0;
      SAFE_HEAP_STORE($134 | 0, $132 | 0, 4);
      $135 = $size;
      $136 = $135;
      $137 = SAFE_HEAP_LOAD($136 | 0, 4, 0) | 0 | 0;
      $138 = $135 + 4 | 0;
      $139 = $138;
      $140 = SAFE_HEAP_LOAD($139 | 0, 4, 0) | 0 | 0;
      $141 = $buf;
      $142 = $141 + 32 | 0;
      SAFE_HEAP_STORE($142 | 0, $137 | 0, 4);
      $143 = $output;
      $144 = $size;
      $145 = $144;
      $146 = SAFE_HEAP_LOAD($145 | 0, 4, 0) | 0 | 0;
      $147 = $144 + 4 | 0;
      $148 = $147;
      $149 = SAFE_HEAP_LOAD($148 | 0, 4, 0) | 0 | 0;
      $150 = $143 + $146 | 0;
      $151 = $buf;
      $152 = $151 + 4 | 0;
      SAFE_HEAP_STORE($152 | 0, $150 | 0, 4);
      $153 = $uv_stride;
      $154 = $buf;
      $155 = $154 + 20 | 0;
      SAFE_HEAP_STORE($155 | 0, $153 | 0, 4);
      $156 = $uv_size;
      $157 = $156;
      $158 = SAFE_HEAP_LOAD($157 | 0, 4, 0) | 0 | 0;
      $159 = $156 + 4 | 0;
      $160 = $159;
      $161 = SAFE_HEAP_LOAD($160 | 0, 4, 0) | 0 | 0;
      $162 = $buf;
      $163 = $162 + 36 | 0;
      SAFE_HEAP_STORE($163 | 0, $158 | 0, 4);
      $164 = $output;
      $165 = $size;
      $166 = $165;
      $167 = SAFE_HEAP_LOAD($166 | 0, 4, 0) | 0 | 0;
      $168 = $165 + 4 | 0;
      $169 = $168;
      $170 = SAFE_HEAP_LOAD($169 | 0, 4, 0) | 0 | 0;
      $171 = $164 + $167 | 0;
      $172 = $uv_size;
      $173 = $172;
      $174 = SAFE_HEAP_LOAD($173 | 0, 4, 0) | 0 | 0;
      $175 = $172 + 4 | 0;
      $176 = $175;
      $177 = SAFE_HEAP_LOAD($176 | 0, 4, 0) | 0 | 0;
      $178 = $171 + $174 | 0;
      $179 = $buf;
      $180 = $179 + 8 | 0;
      SAFE_HEAP_STORE($180 | 0, $178 | 0, 4);
      $181 = $uv_stride;
      $182 = $buf;
      $183 = $182 + 24 | 0;
      SAFE_HEAP_STORE($183 | 0, $181 | 0, 4);
      $184 = $uv_size;
      $185 = $184;
      $186 = SAFE_HEAP_LOAD($185 | 0, 4, 0) | 0 | 0;
      $187 = $184 + 4 | 0;
      $188 = $187;
      $189 = SAFE_HEAP_LOAD($188 | 0, 4, 0) | 0 | 0;
      $190 = $buf;
      $191 = $190 + 40 | 0;
      SAFE_HEAP_STORE($191 | 0, $186 | 0, 4);
      $192 = $mode;
      $193 = ($192 | 0) == 12;
      if ($193) {
       $194 = $output;
       $195 = $size;
       $196 = $195;
       $197 = SAFE_HEAP_LOAD($196 | 0, 4, 0) | 0 | 0;
       $198 = $195 + 4 | 0;
       $199 = $198;
       $200 = SAFE_HEAP_LOAD($199 | 0, 4, 0) | 0 | 0;
       $201 = $194 + $197 | 0;
       $202 = $uv_size;
       $203 = $202;
       $204 = SAFE_HEAP_LOAD($203 | 0, 4, 0) | 0 | 0;
       $205 = $202 + 4 | 0;
       $206 = $205;
       $207 = SAFE_HEAP_LOAD($206 | 0, 4, 0) | 0 | 0;
       $208 = ___muldi3(2, 0, $204 | 0, $207 | 0) | 0;
       $209 = tempRet0;
       $210 = $201 + $208 | 0;
       $211 = $buf;
       $212 = $211 + 12 | 0;
       SAFE_HEAP_STORE($212 | 0, $210 | 0, 4);
      }
      $213 = $a_size;
      $214 = $213;
      $215 = SAFE_HEAP_LOAD($214 | 0, 4, 0) | 0 | 0;
      $216 = $213 + 4 | 0;
      $217 = $216;
      $218 = SAFE_HEAP_LOAD($217 | 0, 4, 0) | 0 | 0;
      $219 = $buf;
      $220 = $219 + 44 | 0;
      SAFE_HEAP_STORE($220 | 0, $215 | 0, 4);
      $221 = $a_stride;
      $222 = $buf;
      $223 = $222 + 28 | 0;
      SAFE_HEAP_STORE($223 | 0, $221 | 0, 4);
     }
    }
   } while (0);
   $237 = $1;
   $238 = _CheckDecBuffer($237) | 0;
   $0 = $238;
   $239 = $0;
   STACKTOP = sp;
   return $239 | 0;
  }
 }
 $0 = 2;
 $239 = $0;
 STACKTOP = sp;
 return $239 | 0;
}

function _ParseResiduals($dec, $mb, $token_br) {
 $dec = $dec | 0;
 $mb = $mb | 0;
 $token_br = $token_br | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $254 = 0, $255 = 0, $256 = 0, $257 = 0, $258 = 0, $259 = 0, $26 = 0;
 var $260 = 0, $261 = 0, $262 = 0, $263 = 0, $264 = 0, $265 = 0, $266 = 0, $267 = 0, $268 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0;
 var $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0;
 var $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0;
 var $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0;
 var $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ac_proba = 0, $bands = 0, $block = 0, $ch = 0, $ctx = 0, $ctx1 = 0, $ctx5 = 0, $dc = 0, $dc0 = 0, $dst = 0, $first = 0;
 var $i = 0, $l = 0, $l4 = 0, $left_mb = 0, $lnz = 0, $non_zero_uv = 0, $non_zero_y = 0, $nz = 0, $nz2 = 0, $nz6 = 0, $nz_coeffs = 0, $nz_coeffs3 = 0, $out_l_nz = 0, $out_t_nz = 0, $q = 0, $tnz = 0, $x = 0, $y = 0, dest = 0, label = 0;
 var sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 160 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $dc = sp + 120 | 0;
 $0 = $dec;
 $1 = $mb;
 $2 = $token_br;
 $3 = $0;
 $4 = $3 + 904 | 0;
 $5 = $4 + 1060 | 0;
 $bands = $5;
 $6 = $0;
 $7 = $6 + 2304 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $9 = $0;
 $10 = $9 + 2296 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = $8 + ($11 * 800 | 0) | 0;
 $block = $12;
 $13 = $block;
 $14 = $13 + 798 | 0;
 $15 = SAFE_HEAP_LOAD($14 >> 0 | 0, 1, 0) | 0 | 0;
 $16 = $15 & 255;
 $17 = $0;
 $18 = $17 + 776 | 0;
 $19 = $18 + ($16 << 5) | 0;
 $q = $19;
 $20 = $block;
 $dst = $20;
 $21 = $0;
 $22 = $21 + 2256 | 0;
 $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
 $24 = $23 + -2 | 0;
 $left_mb = $24;
 $non_zero_y = 0;
 $non_zero_uv = 0;
 $25 = $dst;
 _memset($25 | 0, 0, 768) | 0;
 $26 = $block;
 $27 = $26 + 768 | 0;
 $28 = SAFE_HEAP_LOAD($27 >> 0 | 0, 1, 0) | 0 | 0;
 $29 = $28 << 24 >> 24 != 0;
 if ($29) {
  $first = 0;
  $72 = $bands;
  $73 = $72 + 204 | 0;
  $ac_proba = $73;
 } else {
  dest = $dc;
  stop = dest + 32 | 0;
  do {
   SAFE_HEAP_STORE(dest | 0, 0 | 0 | 0, 2);
   dest = dest + 2 | 0;
  } while ((dest | 0) < (stop | 0));
  $30 = $1;
  $31 = $30 + 1 | 0;
  $32 = SAFE_HEAP_LOAD($31 >> 0 | 0, 1, 0) | 0 | 0;
  $33 = $32 & 255;
  $34 = $left_mb;
  $35 = $34 + 1 | 0;
  $36 = SAFE_HEAP_LOAD($35 >> 0 | 0, 1, 0) | 0 | 0;
  $37 = $36 & 255;
  $38 = $33 + $37 | 0;
  $ctx = $38;
  $39 = $2;
  $40 = $bands;
  $41 = $40 + 68 | 0;
  $42 = $ctx;
  $43 = $q;
  $44 = $43 + 8 | 0;
  $45 = _GetCoeffs($39, $41, $42, $44, 0, $dc) | 0;
  $nz = $45;
  $46 = $nz;
  $47 = ($46 | 0) > 0;
  $48 = $47 & 1;
  $49 = $48 & 255;
  $50 = $left_mb;
  $51 = $50 + 1 | 0;
  SAFE_HEAP_STORE($51 >> 0 | 0, $49 | 0, 1);
  $52 = $1;
  $53 = $52 + 1 | 0;
  SAFE_HEAP_STORE($53 >> 0 | 0, $49 | 0, 1);
  $54 = $nz;
  $55 = ($54 | 0) > 1;
  L4 : do {
   if ($55) {
    $56 = SAFE_HEAP_LOAD(416 | 0, 4, 0) | 0 | 0;
    $57 = $dst;
    FUNCTION_TABLE_vii[(SAFE_FT_MASK($56 | 0, 127 | 0) | 0) & 127]($dc, $57);
   } else {
    $58 = SAFE_HEAP_LOAD($dc | 0, 2, 0) | 0 | 0;
    $59 = $58 << 16 >> 16;
    $60 = $59 + 3 | 0;
    $61 = $60 >> 3;
    $dc0 = $61;
    $i = 0;
    while (1) {
     $62 = $i;
     $63 = ($62 | 0) < 256;
     if (!$63) {
      break L4;
     }
     $64 = $dc0;
     $65 = $64 & 65535;
     $66 = $i;
     $67 = $dst;
     $68 = $67 + ($66 << 1) | 0;
     SAFE_HEAP_STORE($68 | 0, $65 | 0, 2);
     $69 = $i;
     $70 = $69 + 16 | 0;
     $i = $70;
    }
   }
  } while (0);
  $first = 1;
  $71 = $bands;
  $ac_proba = $71;
 }
 $74 = $1;
 $75 = SAFE_HEAP_LOAD($74 >> 0 | 0, 1, 0) | 0 | 0;
 $76 = $75 & 255;
 $77 = $76 & 15;
 $78 = $77 & 255;
 $tnz = $78;
 $79 = $left_mb;
 $80 = SAFE_HEAP_LOAD($79 >> 0 | 0, 1, 0) | 0 | 0;
 $81 = $80 & 255;
 $82 = $81 & 15;
 $83 = $82 & 255;
 $lnz = $83;
 $y = 0;
 while (1) {
  $84 = $y;
  $85 = ($84 | 0) < 4;
  if (!$85) {
   break;
  }
  $86 = $lnz;
  $87 = $86 & 255;
  $88 = $87 & 1;
  $l = $88;
  $nz_coeffs = 0;
  $x = 0;
  while (1) {
   $89 = $x;
   $90 = ($89 | 0) < 4;
   if (!$90) {
    break;
   }
   $91 = $l;
   $92 = $tnz;
   $93 = $92 & 255;
   $94 = $93 & 1;
   $95 = $91 + $94 | 0;
   $ctx1 = $95;
   $96 = $2;
   $97 = $ac_proba;
   $98 = $ctx1;
   $99 = $q;
   $100 = $first;
   $101 = $dst;
   $102 = _GetCoeffs($96, $97, $98, $99, $100, $101) | 0;
   $nz2 = $102;
   $103 = $nz2;
   $104 = $first;
   $105 = ($103 | 0) > ($104 | 0);
   $106 = $105 & 1;
   $l = $106;
   $107 = $tnz;
   $108 = $107 & 255;
   $109 = $108 >> 1;
   $110 = $l;
   $111 = $110 << 7;
   $112 = $109 | $111;
   $113 = $112 & 255;
   $tnz = $113;
   $114 = $nz_coeffs;
   $115 = $nz2;
   $116 = $dst;
   $117 = SAFE_HEAP_LOAD($116 | 0, 2, 0) | 0 | 0;
   $118 = $117 << 16 >> 16;
   $119 = ($118 | 0) != 0;
   $120 = $119 & 1;
   $121 = _NzCodeBits($114, $115, $120) | 0;
   $nz_coeffs = $121;
   $122 = $dst;
   $123 = $122 + 32 | 0;
   $dst = $123;
   $124 = $x;
   $125 = $124 + 1 | 0;
   $x = $125;
  }
  $126 = $tnz;
  $127 = $126 & 255;
  $128 = $127 >> 4;
  $129 = $128 & 255;
  $tnz = $129;
  $130 = $lnz;
  $131 = $130 & 255;
  $132 = $131 >> 1;
  $133 = $l;
  $134 = $133 << 7;
  $135 = $132 | $134;
  $136 = $135 & 255;
  $lnz = $136;
  $137 = $non_zero_y;
  $138 = $137 << 8;
  $139 = $nz_coeffs;
  $140 = $138 | $139;
  $non_zero_y = $140;
  $141 = $y;
  $142 = $141 + 1 | 0;
  $y = $142;
 }
 $143 = $tnz;
 $144 = $143 & 255;
 $out_t_nz = $144;
 $145 = $lnz;
 $146 = $145 & 255;
 $147 = $146 >> 4;
 $out_l_nz = $147;
 $ch = 0;
 while (1) {
  $148 = $ch;
  $149 = ($148 | 0) < 4;
  if (!$149) {
   break;
  }
  $nz_coeffs3 = 0;
  $150 = $1;
  $151 = SAFE_HEAP_LOAD($150 >> 0 | 0, 1, 0) | 0 | 0;
  $152 = $151 & 255;
  $153 = $ch;
  $154 = 4 + $153 | 0;
  $155 = $152 >> $154;
  $156 = $155 & 255;
  $tnz = $156;
  $157 = $left_mb;
  $158 = SAFE_HEAP_LOAD($157 >> 0 | 0, 1, 0) | 0 | 0;
  $159 = $158 & 255;
  $160 = $ch;
  $161 = 4 + $160 | 0;
  $162 = $159 >> $161;
  $163 = $162 & 255;
  $lnz = $163;
  $y = 0;
  while (1) {
   $164 = $y;
   $165 = ($164 | 0) < 2;
   if (!$165) {
    break;
   }
   $166 = $lnz;
   $167 = $166 & 255;
   $168 = $167 & 1;
   $l4 = $168;
   $x = 0;
   while (1) {
    $169 = $x;
    $170 = ($169 | 0) < 2;
    if (!$170) {
     break;
    }
    $171 = $l4;
    $172 = $tnz;
    $173 = $172 & 255;
    $174 = $173 & 1;
    $175 = $171 + $174 | 0;
    $ctx5 = $175;
    $176 = $2;
    $177 = $bands;
    $178 = $177 + 136 | 0;
    $179 = $ctx5;
    $180 = $q;
    $181 = $180 + 16 | 0;
    $182 = $dst;
    $183 = _GetCoeffs($176, $178, $179, $181, 0, $182) | 0;
    $nz6 = $183;
    $184 = $nz6;
    $185 = ($184 | 0) > 0;
    $186 = $185 & 1;
    $l4 = $186;
    $187 = $tnz;
    $188 = $187 & 255;
    $189 = $188 >> 1;
    $190 = $l4;
    $191 = $190 << 3;
    $192 = $189 | $191;
    $193 = $192 & 255;
    $tnz = $193;
    $194 = $nz_coeffs3;
    $195 = $nz6;
    $196 = $dst;
    $197 = SAFE_HEAP_LOAD($196 | 0, 2, 0) | 0 | 0;
    $198 = $197 << 16 >> 16;
    $199 = ($198 | 0) != 0;
    $200 = $199 & 1;
    $201 = _NzCodeBits($194, $195, $200) | 0;
    $nz_coeffs3 = $201;
    $202 = $dst;
    $203 = $202 + 32 | 0;
    $dst = $203;
    $204 = $x;
    $205 = $204 + 1 | 0;
    $x = $205;
   }
   $206 = $tnz;
   $207 = $206 & 255;
   $208 = $207 >> 2;
   $209 = $208 & 255;
   $tnz = $209;
   $210 = $lnz;
   $211 = $210 & 255;
   $212 = $211 >> 1;
   $213 = $l4;
   $214 = $213 << 5;
   $215 = $212 | $214;
   $216 = $215 & 255;
   $lnz = $216;
   $217 = $y;
   $218 = $217 + 1 | 0;
   $y = $218;
  }
  $219 = $nz_coeffs3;
  $220 = $ch;
  $221 = $220 << 2;
  $222 = $219 << $221;
  $223 = $non_zero_uv;
  $224 = $223 | $222;
  $non_zero_uv = $224;
  $225 = $tnz;
  $226 = $225 & 255;
  $227 = $226 << 4;
  $228 = $ch;
  $229 = $227 << $228;
  $230 = $out_t_nz;
  $231 = $230 | $229;
  $out_t_nz = $231;
  $232 = $lnz;
  $233 = $232 & 255;
  $234 = $233 & 240;
  $235 = $ch;
  $236 = $234 << $235;
  $237 = $out_l_nz;
  $238 = $237 | $236;
  $out_l_nz = $238;
  $239 = $ch;
  $240 = $239 + 2 | 0;
  $ch = $240;
 }
 $241 = $out_t_nz;
 $242 = $241 & 255;
 $243 = $1;
 SAFE_HEAP_STORE($243 >> 0 | 0, $242 | 0, 1);
 $244 = $out_l_nz;
 $245 = $244 & 255;
 $246 = $left_mb;
 SAFE_HEAP_STORE($246 >> 0 | 0, $245 | 0, 1);
 $247 = $non_zero_y;
 $248 = $block;
 $249 = $248 + 788 | 0;
 SAFE_HEAP_STORE($249 | 0, $247 | 0, 4);
 $250 = $non_zero_uv;
 $251 = $block;
 $252 = $251 + 792 | 0;
 SAFE_HEAP_STORE($252 | 0, $250 | 0, 4);
 $253 = $non_zero_uv;
 $254 = $253 & 43690;
 $255 = ($254 | 0) != 0;
 if ($255) {
  $260 = 0;
  $259 = $260 & 255;
  $261 = $block;
  $262 = $261 + 796 | 0;
  SAFE_HEAP_STORE($262 >> 0 | 0, $259 | 0, 1);
  $263 = $non_zero_y;
  $264 = $non_zero_uv;
  $265 = $263 | $264;
  $266 = ($265 | 0) != 0;
  $267 = $266 ^ 1;
  $268 = $267 & 1;
  STACKTOP = sp;
  return $268 | 0;
 }
 $256 = $q;
 $257 = $256 + 28 | 0;
 $258 = SAFE_HEAP_LOAD($257 | 0, 4, 0) | 0 | 0;
 $260 = $258;
 $259 = $260 & 255;
 $261 = $block;
 $262 = $261 + 796 | 0;
 SAFE_HEAP_STORE($262 >> 0 | 0, $259 | 0, 1);
 $263 = $non_zero_y;
 $264 = $non_zero_uv;
 $265 = $263 | $264;
 $266 = ($265 | 0) != 0;
 $267 = $266 ^ 1;
 $268 = $267 & 1;
 STACKTOP = sp;
 return $268 | 0;
}

function _UpsampleArgbLinePair($top_y, $bottom_y, $top_u, $top_v, $cur_u, $cur_v, $top_dst, $bottom_dst, $len) {
 $top_y = $top_y | 0;
 $bottom_y = $bottom_y | 0;
 $top_u = $top_u | 0;
 $top_v = $top_v | 0;
 $cur_u = $cur_u | 0;
 $cur_v = $cur_v | 0;
 $top_dst = $top_dst | 0;
 $bottom_dst = $bottom_dst | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $avg = 0, $diag_03 = 0, $diag_12 = 0, $l_uv = 0, $last_pixel_pair = 0, $t_uv = 0;
 var $tl_uv = 0, $uv = 0, $uv0 = 0, $uv01 = 0, $uv02 = 0, $uv03 = 0, $uv05 = 0, $uv06 = 0, $uv1 = 0, $uv14 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $top_y;
 $1 = $bottom_y;
 $2 = $top_u;
 $3 = $top_v;
 $4 = $cur_u;
 $5 = $cur_v;
 $6 = $top_dst;
 $7 = $bottom_dst;
 $8 = $len;
 $9 = $8;
 $10 = $9 - 1 | 0;
 $11 = $10 >> 1;
 $last_pixel_pair = $11;
 $12 = $2;
 $13 = SAFE_HEAP_LOAD($12 >> 0 | 0, 1, 0) | 0 | 0;
 $14 = $13 & 255;
 $15 = $3;
 $16 = SAFE_HEAP_LOAD($15 >> 0 | 0, 1, 0) | 0 | 0;
 $17 = $16 & 255;
 $18 = $17 << 16;
 $19 = $14 | $18;
 $tl_uv = $19;
 $20 = $4;
 $21 = SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0;
 $22 = $21 & 255;
 $23 = $5;
 $24 = SAFE_HEAP_LOAD($23 >> 0 | 0, 1, 0) | 0 | 0;
 $25 = $24 & 255;
 $26 = $25 << 16;
 $27 = $22 | $26;
 $l_uv = $27;
 $28 = $0;
 $29 = ($28 | 0) != (0 | 0);
 if (!$29) {
  ___assert_fail(13572 | 0, 13586 | 0, 100, 13662 | 0);
 }
 $30 = $tl_uv;
 $31 = $30 * 3 | 0;
 $32 = $l_uv;
 $33 = $31 + $32 | 0;
 $34 = $33 + 131074 | 0;
 $35 = $34 >>> 2;
 $uv0 = $35;
 $36 = $0;
 $37 = SAFE_HEAP_LOAD($36 >> 0 | 0, 1, 0) | 0 | 0;
 $38 = $uv0;
 $39 = $38 & 255;
 $40 = $39 & 255;
 $41 = $uv0;
 $42 = $41 >>> 16;
 $43 = $42 & 255;
 $44 = $6;
 _VP8YuvToArgb($37, $40, $43, $44);
 $45 = $1;
 $46 = ($45 | 0) != (0 | 0);
 if ($46) {
  $47 = $l_uv;
  $48 = $47 * 3 | 0;
  $49 = $tl_uv;
  $50 = $48 + $49 | 0;
  $51 = $50 + 131074 | 0;
  $52 = $51 >>> 2;
  $uv01 = $52;
  $53 = $1;
  $54 = SAFE_HEAP_LOAD($53 >> 0 | 0, 1, 0) | 0 | 0;
  $55 = $uv01;
  $56 = $55 & 255;
  $57 = $56 & 255;
  $58 = $uv01;
  $59 = $58 >>> 16;
  $60 = $59 & 255;
  $61 = $7;
  _VP8YuvToArgb($54, $57, $60, $61);
 }
 $x = 1;
 while (1) {
  $62 = $x;
  $63 = $last_pixel_pair;
  $64 = ($62 | 0) <= ($63 | 0);
  if (!$64) {
   break;
  }
  $65 = $x;
  $66 = $2;
  $67 = $66 + $65 | 0;
  $68 = SAFE_HEAP_LOAD($67 >> 0 | 0, 1, 0) | 0 | 0;
  $69 = $68 & 255;
  $70 = $x;
  $71 = $3;
  $72 = $71 + $70 | 0;
  $73 = SAFE_HEAP_LOAD($72 >> 0 | 0, 1, 0) | 0 | 0;
  $74 = $73 & 255;
  $75 = $74 << 16;
  $76 = $69 | $75;
  $t_uv = $76;
  $77 = $x;
  $78 = $4;
  $79 = $78 + $77 | 0;
  $80 = SAFE_HEAP_LOAD($79 >> 0 | 0, 1, 0) | 0 | 0;
  $81 = $80 & 255;
  $82 = $x;
  $83 = $5;
  $84 = $83 + $82 | 0;
  $85 = SAFE_HEAP_LOAD($84 >> 0 | 0, 1, 0) | 0 | 0;
  $86 = $85 & 255;
  $87 = $86 << 16;
  $88 = $81 | $87;
  $uv = $88;
  $89 = $tl_uv;
  $90 = $t_uv;
  $91 = $89 + $90 | 0;
  $92 = $l_uv;
  $93 = $91 + $92 | 0;
  $94 = $uv;
  $95 = $93 + $94 | 0;
  $96 = $95 + 524296 | 0;
  $avg = $96;
  $97 = $avg;
  $98 = $t_uv;
  $99 = $l_uv;
  $100 = $98 + $99 | 0;
  $101 = $100 << 1;
  $102 = $97 + $101 | 0;
  $103 = $102 >>> 3;
  $diag_12 = $103;
  $104 = $avg;
  $105 = $tl_uv;
  $106 = $uv;
  $107 = $105 + $106 | 0;
  $108 = $107 << 1;
  $109 = $104 + $108 | 0;
  $110 = $109 >>> 3;
  $diag_03 = $110;
  $111 = $diag_12;
  $112 = $tl_uv;
  $113 = $111 + $112 | 0;
  $114 = $113 >>> 1;
  $uv02 = $114;
  $115 = $diag_03;
  $116 = $t_uv;
  $117 = $115 + $116 | 0;
  $118 = $117 >>> 1;
  $uv1 = $118;
  $119 = $x;
  $120 = $119 << 1;
  $121 = $120 - 1 | 0;
  $122 = $0;
  $123 = $122 + $121 | 0;
  $124 = SAFE_HEAP_LOAD($123 >> 0 | 0, 1, 0) | 0 | 0;
  $125 = $uv02;
  $126 = $125 & 255;
  $127 = $126 & 255;
  $128 = $uv02;
  $129 = $128 >>> 16;
  $130 = $129 & 255;
  $131 = $6;
  $132 = $x;
  $133 = $132 << 1;
  $134 = $133 - 1 | 0;
  $135 = $134 << 2;
  $136 = $131 + $135 | 0;
  _VP8YuvToArgb($124, $127, $130, $136);
  $137 = $x;
  $138 = $137 << 1;
  $139 = $138 - 0 | 0;
  $140 = $0;
  $141 = $140 + $139 | 0;
  $142 = SAFE_HEAP_LOAD($141 >> 0 | 0, 1, 0) | 0 | 0;
  $143 = $uv1;
  $144 = $143 & 255;
  $145 = $144 & 255;
  $146 = $uv1;
  $147 = $146 >>> 16;
  $148 = $147 & 255;
  $149 = $6;
  $150 = $x;
  $151 = $150 << 1;
  $152 = $151 - 0 | 0;
  $153 = $152 << 2;
  $154 = $149 + $153 | 0;
  _VP8YuvToArgb($142, $145, $148, $154);
  $155 = $1;
  $156 = ($155 | 0) != (0 | 0);
  if ($156) {
   $157 = $diag_03;
   $158 = $l_uv;
   $159 = $157 + $158 | 0;
   $160 = $159 >>> 1;
   $uv03 = $160;
   $161 = $diag_12;
   $162 = $uv;
   $163 = $161 + $162 | 0;
   $164 = $163 >>> 1;
   $uv14 = $164;
   $165 = $x;
   $166 = $165 << 1;
   $167 = $166 - 1 | 0;
   $168 = $1;
   $169 = $168 + $167 | 0;
   $170 = SAFE_HEAP_LOAD($169 >> 0 | 0, 1, 0) | 0 | 0;
   $171 = $uv03;
   $172 = $171 & 255;
   $173 = $172 & 255;
   $174 = $uv03;
   $175 = $174 >>> 16;
   $176 = $175 & 255;
   $177 = $7;
   $178 = $x;
   $179 = $178 << 1;
   $180 = $179 - 1 | 0;
   $181 = $180 << 2;
   $182 = $177 + $181 | 0;
   _VP8YuvToArgb($170, $173, $176, $182);
   $183 = $x;
   $184 = $183 << 1;
   $185 = $184 + 0 | 0;
   $186 = $1;
   $187 = $186 + $185 | 0;
   $188 = SAFE_HEAP_LOAD($187 >> 0 | 0, 1, 0) | 0 | 0;
   $189 = $uv14;
   $190 = $189 & 255;
   $191 = $190 & 255;
   $192 = $uv14;
   $193 = $192 >>> 16;
   $194 = $193 & 255;
   $195 = $7;
   $196 = $x;
   $197 = $196 << 1;
   $198 = $197 + 0 | 0;
   $199 = $198 << 2;
   $200 = $195 + $199 | 0;
   _VP8YuvToArgb($188, $191, $194, $200);
  }
  $201 = $t_uv;
  $tl_uv = $201;
  $202 = $uv;
  $l_uv = $202;
  $203 = $x;
  $204 = $203 + 1 | 0;
  $x = $204;
 }
 $205 = $8;
 $206 = $205 & 1;
 $207 = ($206 | 0) != 0;
 if ($207) {
  STACKTOP = sp;
  return;
 }
 $208 = $tl_uv;
 $209 = $208 * 3 | 0;
 $210 = $l_uv;
 $211 = $209 + $210 | 0;
 $212 = $211 + 131074 | 0;
 $213 = $212 >>> 2;
 $uv05 = $213;
 $214 = $8;
 $215 = $214 - 1 | 0;
 $216 = $0;
 $217 = $216 + $215 | 0;
 $218 = SAFE_HEAP_LOAD($217 >> 0 | 0, 1, 0) | 0 | 0;
 $219 = $uv05;
 $220 = $219 & 255;
 $221 = $220 & 255;
 $222 = $uv05;
 $223 = $222 >>> 16;
 $224 = $223 & 255;
 $225 = $6;
 $226 = $8;
 $227 = $226 - 1 | 0;
 $228 = $227 << 2;
 $229 = $225 + $228 | 0;
 _VP8YuvToArgb($218, $221, $224, $229);
 $230 = $1;
 $231 = ($230 | 0) != (0 | 0);
 if (!$231) {
  STACKTOP = sp;
  return;
 }
 $232 = $l_uv;
 $233 = $232 * 3 | 0;
 $234 = $tl_uv;
 $235 = $233 + $234 | 0;
 $236 = $235 + 131074 | 0;
 $237 = $236 >>> 2;
 $uv06 = $237;
 $238 = $8;
 $239 = $238 - 1 | 0;
 $240 = $1;
 $241 = $240 + $239 | 0;
 $242 = SAFE_HEAP_LOAD($241 >> 0 | 0, 1, 0) | 0 | 0;
 $243 = $uv06;
 $244 = $243 & 255;
 $245 = $244 & 255;
 $246 = $uv06;
 $247 = $246 >>> 16;
 $248 = $247 & 255;
 $249 = $7;
 $250 = $8;
 $251 = $250 - 1 | 0;
 $252 = $251 << 2;
 $253 = $249 + $252 | 0;
 _VP8YuvToArgb($242, $245, $248, $253);
 STACKTOP = sp;
 return;
}

function _UpsampleRgbaLinePair($top_y, $bottom_y, $top_u, $top_v, $cur_u, $cur_v, $top_dst, $bottom_dst, $len) {
 $top_y = $top_y | 0;
 $bottom_y = $bottom_y | 0;
 $top_u = $top_u | 0;
 $top_v = $top_v | 0;
 $cur_u = $cur_u | 0;
 $cur_v = $cur_v | 0;
 $top_dst = $top_dst | 0;
 $bottom_dst = $bottom_dst | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $avg = 0, $diag_03 = 0, $diag_12 = 0, $l_uv = 0, $last_pixel_pair = 0, $t_uv = 0;
 var $tl_uv = 0, $uv = 0, $uv0 = 0, $uv01 = 0, $uv02 = 0, $uv03 = 0, $uv05 = 0, $uv06 = 0, $uv1 = 0, $uv14 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $top_y;
 $1 = $bottom_y;
 $2 = $top_u;
 $3 = $top_v;
 $4 = $cur_u;
 $5 = $cur_v;
 $6 = $top_dst;
 $7 = $bottom_dst;
 $8 = $len;
 $9 = $8;
 $10 = $9 - 1 | 0;
 $11 = $10 >> 1;
 $last_pixel_pair = $11;
 $12 = $2;
 $13 = SAFE_HEAP_LOAD($12 >> 0 | 0, 1, 0) | 0 | 0;
 $14 = $13 & 255;
 $15 = $3;
 $16 = SAFE_HEAP_LOAD($15 >> 0 | 0, 1, 0) | 0 | 0;
 $17 = $16 & 255;
 $18 = $17 << 16;
 $19 = $14 | $18;
 $tl_uv = $19;
 $20 = $4;
 $21 = SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0;
 $22 = $21 & 255;
 $23 = $5;
 $24 = SAFE_HEAP_LOAD($23 >> 0 | 0, 1, 0) | 0 | 0;
 $25 = $24 & 255;
 $26 = $25 << 16;
 $27 = $22 | $26;
 $l_uv = $27;
 $28 = $0;
 $29 = ($28 | 0) != (0 | 0);
 if (!$29) {
  ___assert_fail(13572 | 0, 13586 | 0, 98, 13724 | 0);
 }
 $30 = $tl_uv;
 $31 = $30 * 3 | 0;
 $32 = $l_uv;
 $33 = $31 + $32 | 0;
 $34 = $33 + 131074 | 0;
 $35 = $34 >>> 2;
 $uv0 = $35;
 $36 = $0;
 $37 = SAFE_HEAP_LOAD($36 >> 0 | 0, 1, 0) | 0 | 0;
 $38 = $uv0;
 $39 = $38 & 255;
 $40 = $39 & 255;
 $41 = $uv0;
 $42 = $41 >>> 16;
 $43 = $42 & 255;
 $44 = $6;
 _VP8YuvToRgba($37, $40, $43, $44);
 $45 = $1;
 $46 = ($45 | 0) != (0 | 0);
 if ($46) {
  $47 = $l_uv;
  $48 = $47 * 3 | 0;
  $49 = $tl_uv;
  $50 = $48 + $49 | 0;
  $51 = $50 + 131074 | 0;
  $52 = $51 >>> 2;
  $uv01 = $52;
  $53 = $1;
  $54 = SAFE_HEAP_LOAD($53 >> 0 | 0, 1, 0) | 0 | 0;
  $55 = $uv01;
  $56 = $55 & 255;
  $57 = $56 & 255;
  $58 = $uv01;
  $59 = $58 >>> 16;
  $60 = $59 & 255;
  $61 = $7;
  _VP8YuvToRgba($54, $57, $60, $61);
 }
 $x = 1;
 while (1) {
  $62 = $x;
  $63 = $last_pixel_pair;
  $64 = ($62 | 0) <= ($63 | 0);
  if (!$64) {
   break;
  }
  $65 = $x;
  $66 = $2;
  $67 = $66 + $65 | 0;
  $68 = SAFE_HEAP_LOAD($67 >> 0 | 0, 1, 0) | 0 | 0;
  $69 = $68 & 255;
  $70 = $x;
  $71 = $3;
  $72 = $71 + $70 | 0;
  $73 = SAFE_HEAP_LOAD($72 >> 0 | 0, 1, 0) | 0 | 0;
  $74 = $73 & 255;
  $75 = $74 << 16;
  $76 = $69 | $75;
  $t_uv = $76;
  $77 = $x;
  $78 = $4;
  $79 = $78 + $77 | 0;
  $80 = SAFE_HEAP_LOAD($79 >> 0 | 0, 1, 0) | 0 | 0;
  $81 = $80 & 255;
  $82 = $x;
  $83 = $5;
  $84 = $83 + $82 | 0;
  $85 = SAFE_HEAP_LOAD($84 >> 0 | 0, 1, 0) | 0 | 0;
  $86 = $85 & 255;
  $87 = $86 << 16;
  $88 = $81 | $87;
  $uv = $88;
  $89 = $tl_uv;
  $90 = $t_uv;
  $91 = $89 + $90 | 0;
  $92 = $l_uv;
  $93 = $91 + $92 | 0;
  $94 = $uv;
  $95 = $93 + $94 | 0;
  $96 = $95 + 524296 | 0;
  $avg = $96;
  $97 = $avg;
  $98 = $t_uv;
  $99 = $l_uv;
  $100 = $98 + $99 | 0;
  $101 = $100 << 1;
  $102 = $97 + $101 | 0;
  $103 = $102 >>> 3;
  $diag_12 = $103;
  $104 = $avg;
  $105 = $tl_uv;
  $106 = $uv;
  $107 = $105 + $106 | 0;
  $108 = $107 << 1;
  $109 = $104 + $108 | 0;
  $110 = $109 >>> 3;
  $diag_03 = $110;
  $111 = $diag_12;
  $112 = $tl_uv;
  $113 = $111 + $112 | 0;
  $114 = $113 >>> 1;
  $uv02 = $114;
  $115 = $diag_03;
  $116 = $t_uv;
  $117 = $115 + $116 | 0;
  $118 = $117 >>> 1;
  $uv1 = $118;
  $119 = $x;
  $120 = $119 << 1;
  $121 = $120 - 1 | 0;
  $122 = $0;
  $123 = $122 + $121 | 0;
  $124 = SAFE_HEAP_LOAD($123 >> 0 | 0, 1, 0) | 0 | 0;
  $125 = $uv02;
  $126 = $125 & 255;
  $127 = $126 & 255;
  $128 = $uv02;
  $129 = $128 >>> 16;
  $130 = $129 & 255;
  $131 = $6;
  $132 = $x;
  $133 = $132 << 1;
  $134 = $133 - 1 | 0;
  $135 = $134 << 2;
  $136 = $131 + $135 | 0;
  _VP8YuvToRgba($124, $127, $130, $136);
  $137 = $x;
  $138 = $137 << 1;
  $139 = $138 - 0 | 0;
  $140 = $0;
  $141 = $140 + $139 | 0;
  $142 = SAFE_HEAP_LOAD($141 >> 0 | 0, 1, 0) | 0 | 0;
  $143 = $uv1;
  $144 = $143 & 255;
  $145 = $144 & 255;
  $146 = $uv1;
  $147 = $146 >>> 16;
  $148 = $147 & 255;
  $149 = $6;
  $150 = $x;
  $151 = $150 << 1;
  $152 = $151 - 0 | 0;
  $153 = $152 << 2;
  $154 = $149 + $153 | 0;
  _VP8YuvToRgba($142, $145, $148, $154);
  $155 = $1;
  $156 = ($155 | 0) != (0 | 0);
  if ($156) {
   $157 = $diag_03;
   $158 = $l_uv;
   $159 = $157 + $158 | 0;
   $160 = $159 >>> 1;
   $uv03 = $160;
   $161 = $diag_12;
   $162 = $uv;
   $163 = $161 + $162 | 0;
   $164 = $163 >>> 1;
   $uv14 = $164;
   $165 = $x;
   $166 = $165 << 1;
   $167 = $166 - 1 | 0;
   $168 = $1;
   $169 = $168 + $167 | 0;
   $170 = SAFE_HEAP_LOAD($169 >> 0 | 0, 1, 0) | 0 | 0;
   $171 = $uv03;
   $172 = $171 & 255;
   $173 = $172 & 255;
   $174 = $uv03;
   $175 = $174 >>> 16;
   $176 = $175 & 255;
   $177 = $7;
   $178 = $x;
   $179 = $178 << 1;
   $180 = $179 - 1 | 0;
   $181 = $180 << 2;
   $182 = $177 + $181 | 0;
   _VP8YuvToRgba($170, $173, $176, $182);
   $183 = $x;
   $184 = $183 << 1;
   $185 = $184 + 0 | 0;
   $186 = $1;
   $187 = $186 + $185 | 0;
   $188 = SAFE_HEAP_LOAD($187 >> 0 | 0, 1, 0) | 0 | 0;
   $189 = $uv14;
   $190 = $189 & 255;
   $191 = $190 & 255;
   $192 = $uv14;
   $193 = $192 >>> 16;
   $194 = $193 & 255;
   $195 = $7;
   $196 = $x;
   $197 = $196 << 1;
   $198 = $197 + 0 | 0;
   $199 = $198 << 2;
   $200 = $195 + $199 | 0;
   _VP8YuvToRgba($188, $191, $194, $200);
  }
  $201 = $t_uv;
  $tl_uv = $201;
  $202 = $uv;
  $l_uv = $202;
  $203 = $x;
  $204 = $203 + 1 | 0;
  $x = $204;
 }
 $205 = $8;
 $206 = $205 & 1;
 $207 = ($206 | 0) != 0;
 if ($207) {
  STACKTOP = sp;
  return;
 }
 $208 = $tl_uv;
 $209 = $208 * 3 | 0;
 $210 = $l_uv;
 $211 = $209 + $210 | 0;
 $212 = $211 + 131074 | 0;
 $213 = $212 >>> 2;
 $uv05 = $213;
 $214 = $8;
 $215 = $214 - 1 | 0;
 $216 = $0;
 $217 = $216 + $215 | 0;
 $218 = SAFE_HEAP_LOAD($217 >> 0 | 0, 1, 0) | 0 | 0;
 $219 = $uv05;
 $220 = $219 & 255;
 $221 = $220 & 255;
 $222 = $uv05;
 $223 = $222 >>> 16;
 $224 = $223 & 255;
 $225 = $6;
 $226 = $8;
 $227 = $226 - 1 | 0;
 $228 = $227 << 2;
 $229 = $225 + $228 | 0;
 _VP8YuvToRgba($218, $221, $224, $229);
 $230 = $1;
 $231 = ($230 | 0) != (0 | 0);
 if (!$231) {
  STACKTOP = sp;
  return;
 }
 $232 = $l_uv;
 $233 = $232 * 3 | 0;
 $234 = $tl_uv;
 $235 = $233 + $234 | 0;
 $236 = $235 + 131074 | 0;
 $237 = $236 >>> 2;
 $uv06 = $237;
 $238 = $8;
 $239 = $238 - 1 | 0;
 $240 = $1;
 $241 = $240 + $239 | 0;
 $242 = SAFE_HEAP_LOAD($241 >> 0 | 0, 1, 0) | 0 | 0;
 $243 = $uv06;
 $244 = $243 & 255;
 $245 = $244 & 255;
 $246 = $uv06;
 $247 = $246 >>> 16;
 $248 = $247 & 255;
 $249 = $7;
 $250 = $8;
 $251 = $250 - 1 | 0;
 $252 = $251 << 2;
 $253 = $249 + $252 | 0;
 _VP8YuvToRgba($242, $245, $248, $253);
 STACKTOP = sp;
 return;
}

function _UpsampleBgraLinePair($top_y, $bottom_y, $top_u, $top_v, $cur_u, $cur_v, $top_dst, $bottom_dst, $len) {
 $top_y = $top_y | 0;
 $bottom_y = $bottom_y | 0;
 $top_u = $top_u | 0;
 $top_v = $top_v | 0;
 $cur_u = $cur_u | 0;
 $cur_v = $cur_v | 0;
 $top_dst = $top_dst | 0;
 $bottom_dst = $bottom_dst | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $246 = 0, $247 = 0, $248 = 0, $249 = 0, $25 = 0, $250 = 0, $251 = 0, $252 = 0, $253 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $avg = 0, $diag_03 = 0, $diag_12 = 0, $l_uv = 0, $last_pixel_pair = 0, $t_uv = 0;
 var $tl_uv = 0, $uv = 0, $uv0 = 0, $uv01 = 0, $uv02 = 0, $uv03 = 0, $uv05 = 0, $uv06 = 0, $uv1 = 0, $uv14 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $top_y;
 $1 = $bottom_y;
 $2 = $top_u;
 $3 = $top_v;
 $4 = $cur_u;
 $5 = $cur_v;
 $6 = $top_dst;
 $7 = $bottom_dst;
 $8 = $len;
 $9 = $8;
 $10 = $9 - 1 | 0;
 $11 = $10 >> 1;
 $last_pixel_pair = $11;
 $12 = $2;
 $13 = SAFE_HEAP_LOAD($12 >> 0 | 0, 1, 0) | 0 | 0;
 $14 = $13 & 255;
 $15 = $3;
 $16 = SAFE_HEAP_LOAD($15 >> 0 | 0, 1, 0) | 0 | 0;
 $17 = $16 & 255;
 $18 = $17 << 16;
 $19 = $14 | $18;
 $tl_uv = $19;
 $20 = $4;
 $21 = SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0;
 $22 = $21 & 255;
 $23 = $5;
 $24 = SAFE_HEAP_LOAD($23 >> 0 | 0, 1, 0) | 0 | 0;
 $25 = $24 & 255;
 $26 = $25 << 16;
 $27 = $22 | $26;
 $l_uv = $27;
 $28 = $0;
 $29 = ($28 | 0) != (0 | 0);
 if (!$29) {
  ___assert_fail(13572 | 0, 13586 | 0, 99, 13683 | 0);
 }
 $30 = $tl_uv;
 $31 = $30 * 3 | 0;
 $32 = $l_uv;
 $33 = $31 + $32 | 0;
 $34 = $33 + 131074 | 0;
 $35 = $34 >>> 2;
 $uv0 = $35;
 $36 = $0;
 $37 = SAFE_HEAP_LOAD($36 >> 0 | 0, 1, 0) | 0 | 0;
 $38 = $uv0;
 $39 = $38 & 255;
 $40 = $39 & 255;
 $41 = $uv0;
 $42 = $41 >>> 16;
 $43 = $42 & 255;
 $44 = $6;
 _VP8YuvToBgra($37, $40, $43, $44);
 $45 = $1;
 $46 = ($45 | 0) != (0 | 0);
 if ($46) {
  $47 = $l_uv;
  $48 = $47 * 3 | 0;
  $49 = $tl_uv;
  $50 = $48 + $49 | 0;
  $51 = $50 + 131074 | 0;
  $52 = $51 >>> 2;
  $uv01 = $52;
  $53 = $1;
  $54 = SAFE_HEAP_LOAD($53 >> 0 | 0, 1, 0) | 0 | 0;
  $55 = $uv01;
  $56 = $55 & 255;
  $57 = $56 & 255;
  $58 = $uv01;
  $59 = $58 >>> 16;
  $60 = $59 & 255;
  $61 = $7;
  _VP8YuvToBgra($54, $57, $60, $61);
 }
 $x = 1;
 while (1) {
  $62 = $x;
  $63 = $last_pixel_pair;
  $64 = ($62 | 0) <= ($63 | 0);
  if (!$64) {
   break;
  }
  $65 = $x;
  $66 = $2;
  $67 = $66 + $65 | 0;
  $68 = SAFE_HEAP_LOAD($67 >> 0 | 0, 1, 0) | 0 | 0;
  $69 = $68 & 255;
  $70 = $x;
  $71 = $3;
  $72 = $71 + $70 | 0;
  $73 = SAFE_HEAP_LOAD($72 >> 0 | 0, 1, 0) | 0 | 0;
  $74 = $73 & 255;
  $75 = $74 << 16;
  $76 = $69 | $75;
  $t_uv = $76;
  $77 = $x;
  $78 = $4;
  $79 = $78 + $77 | 0;
  $80 = SAFE_HEAP_LOAD($79 >> 0 | 0, 1, 0) | 0 | 0;
  $81 = $80 & 255;
  $82 = $x;
  $83 = $5;
  $84 = $83 + $82 | 0;
  $85 = SAFE_HEAP_LOAD($84 >> 0 | 0, 1, 0) | 0 | 0;
  $86 = $85 & 255;
  $87 = $86 << 16;
  $88 = $81 | $87;
  $uv = $88;
  $89 = $tl_uv;
  $90 = $t_uv;
  $91 = $89 + $90 | 0;
  $92 = $l_uv;
  $93 = $91 + $92 | 0;
  $94 = $uv;
  $95 = $93 + $94 | 0;
  $96 = $95 + 524296 | 0;
  $avg = $96;
  $97 = $avg;
  $98 = $t_uv;
  $99 = $l_uv;
  $100 = $98 + $99 | 0;
  $101 = $100 << 1;
  $102 = $97 + $101 | 0;
  $103 = $102 >>> 3;
  $diag_12 = $103;
  $104 = $avg;
  $105 = $tl_uv;
  $106 = $uv;
  $107 = $105 + $106 | 0;
  $108 = $107 << 1;
  $109 = $104 + $108 | 0;
  $110 = $109 >>> 3;
  $diag_03 = $110;
  $111 = $diag_12;
  $112 = $tl_uv;
  $113 = $111 + $112 | 0;
  $114 = $113 >>> 1;
  $uv02 = $114;
  $115 = $diag_03;
  $116 = $t_uv;
  $117 = $115 + $116 | 0;
  $118 = $117 >>> 1;
  $uv1 = $118;
  $119 = $x;
  $120 = $119 << 1;
  $121 = $120 - 1 | 0;
  $122 = $0;
  $123 = $122 + $121 | 0;
  $124 = SAFE_HEAP_LOAD($123 >> 0 | 0, 1, 0) | 0 | 0;
  $125 = $uv02;
  $126 = $125 & 255;
  $127 = $126 & 255;
  $128 = $uv02;
  $129 = $128 >>> 16;
  $130 = $129 & 255;
  $131 = $6;
  $132 = $x;
  $133 = $132 << 1;
  $134 = $133 - 1 | 0;
  $135 = $134 << 2;
  $136 = $131 + $135 | 0;
  _VP8YuvToBgra($124, $127, $130, $136);
  $137 = $x;
  $138 = $137 << 1;
  $139 = $138 - 0 | 0;
  $140 = $0;
  $141 = $140 + $139 | 0;
  $142 = SAFE_HEAP_LOAD($141 >> 0 | 0, 1, 0) | 0 | 0;
  $143 = $uv1;
  $144 = $143 & 255;
  $145 = $144 & 255;
  $146 = $uv1;
  $147 = $146 >>> 16;
  $148 = $147 & 255;
  $149 = $6;
  $150 = $x;
  $151 = $150 << 1;
  $152 = $151 - 0 | 0;
  $153 = $152 << 2;
  $154 = $149 + $153 | 0;
  _VP8YuvToBgra($142, $145, $148, $154);
  $155 = $1;
  $156 = ($155 | 0) != (0 | 0);
  if ($156) {
   $157 = $diag_03;
   $158 = $l_uv;
   $159 = $157 + $158 | 0;
   $160 = $159 >>> 1;
   $uv03 = $160;
   $161 = $diag_12;
   $162 = $uv;
   $163 = $161 + $162 | 0;
   $164 = $163 >>> 1;
   $uv14 = $164;
   $165 = $x;
   $166 = $165 << 1;
   $167 = $166 - 1 | 0;
   $168 = $1;
   $169 = $168 + $167 | 0;
   $170 = SAFE_HEAP_LOAD($169 >> 0 | 0, 1, 0) | 0 | 0;
   $171 = $uv03;
   $172 = $171 & 255;
   $173 = $172 & 255;
   $174 = $uv03;
   $175 = $174 >>> 16;
   $176 = $175 & 255;
   $177 = $7;
   $178 = $x;
   $179 = $178 << 1;
   $180 = $179 - 1 | 0;
   $181 = $180 << 2;
   $182 = $177 + $181 | 0;
   _VP8YuvToBgra($170, $173, $176, $182);
   $183 = $x;
   $184 = $183 << 1;
   $185 = $184 + 0 | 0;
   $186 = $1;
   $187 = $186 + $185 | 0;
   $188 = SAFE_HEAP_LOAD($187 >> 0 | 0, 1, 0) | 0 | 0;
   $189 = $uv14;
   $190 = $189 & 255;
   $191 = $190 & 255;
   $192 = $uv14;
   $193 = $192 >>> 16;
   $194 = $193 & 255;
   $195 = $7;
   $196 = $x;
   $197 = $196 << 1;
   $198 = $197 + 0 | 0;
   $199 = $198 << 2;
   $200 = $195 + $199 | 0;
   _VP8YuvToBgra($188, $191, $194, $200);
  }
  $201 = $t_uv;
  $tl_uv = $201;
  $202 = $uv;
  $l_uv = $202;
  $203 = $x;
  $204 = $203 + 1 | 0;
  $x = $204;
 }
 $205 = $8;
 $206 = $205 & 1;
 $207 = ($206 | 0) != 0;
 if ($207) {
  STACKTOP = sp;
  return;
 }
 $208 = $tl_uv;
 $209 = $208 * 3 | 0;
 $210 = $l_uv;
 $211 = $209 + $210 | 0;
 $212 = $211 + 131074 | 0;
 $213 = $212 >>> 2;
 $uv05 = $213;
 $214 = $8;
 $215 = $214 - 1 | 0;
 $216 = $0;
 $217 = $216 + $215 | 0;
 $218 = SAFE_HEAP_LOAD($217 >> 0 | 0, 1, 0) | 0 | 0;
 $219 = $uv05;
 $220 = $219 & 255;
 $221 = $220 & 255;
 $222 = $uv05;
 $223 = $222 >>> 16;
 $224 = $223 & 255;
 $225 = $6;
 $226 = $8;
 $227 = $226 - 1 | 0;
 $228 = $227 << 2;
 $229 = $225 + $228 | 0;
 _VP8YuvToBgra($218, $221, $224, $229);
 $230 = $1;
 $231 = ($230 | 0) != (0 | 0);
 if (!$231) {
  STACKTOP = sp;
  return;
 }
 $232 = $l_uv;
 $233 = $232 * 3 | 0;
 $234 = $tl_uv;
 $235 = $233 + $234 | 0;
 $236 = $235 + 131074 | 0;
 $237 = $236 >>> 2;
 $uv06 = $237;
 $238 = $8;
 $239 = $238 - 1 | 0;
 $240 = $1;
 $241 = $240 + $239 | 0;
 $242 = SAFE_HEAP_LOAD($241 >> 0 | 0, 1, 0) | 0 | 0;
 $243 = $uv06;
 $244 = $243 & 255;
 $245 = $244 & 255;
 $246 = $uv06;
 $247 = $246 >>> 16;
 $248 = $247 & 255;
 $249 = $7;
 $250 = $8;
 $251 = $250 - 1 | 0;
 $252 = $251 << 2;
 $253 = $249 + $252 | 0;
 _VP8YuvToBgra($242, $245, $248, $253);
 STACKTOP = sp;
 return;
}

function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 $rem = $rem | 0;
 var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
 $n_sroa_0_0_extract_trunc = $a$0;
 $n_sroa_1_4_extract_shift$0 = $a$1;
 $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
 $d_sroa_0_0_extract_trunc = $b$0;
 $d_sroa_1_4_extract_shift$0 = $b$1;
 $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
 if (($n_sroa_1_4_extract_trunc | 0) == 0) {
  $4 = ($rem | 0) != 0;
  if (($d_sroa_1_4_extract_trunc | 0) == 0) {
   if ($4) {
    SAFE_HEAP_STORE($rem | 0, ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0) | 0, 4);
    SAFE_HEAP_STORE($rem + 4 | 0, 0 | 0, 4);
   }
   $_0$1 = 0;
   $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$4) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   SAFE_HEAP_STORE($rem | 0, $a$0 & -1 | 0, 4);
   SAFE_HEAP_STORE($rem + 4 | 0, $a$1 & 0 | 0, 4);
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  }
 }
 $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
 do {
  if (($d_sroa_0_0_extract_trunc | 0) == 0) {
   if ($17) {
    if (($rem | 0) != 0) {
     SAFE_HEAP_STORE($rem | 0, ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0) | 0, 4);
     SAFE_HEAP_STORE($rem + 4 | 0, 0 | 0, 4);
    }
    $_0$1 = 0;
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   if (($n_sroa_0_0_extract_trunc | 0) == 0) {
    if (($rem | 0) != 0) {
     SAFE_HEAP_STORE($rem | 0, 0 | 0, 4);
     SAFE_HEAP_STORE($rem + 4 | 0, ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0) | 0, 4);
    }
    $_0$1 = 0;
    $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
   if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
    if (($rem | 0) != 0) {
     SAFE_HEAP_STORE($rem | 0, 0 | $a$0 & -1 | 0, 4);
     SAFE_HEAP_STORE($rem + 4 | 0, $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0 | 0, 4);
    }
    $_0$1 = 0;
    $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $49 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
   $51 = $49 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
   if ($51 >>> 0 <= 30) {
    $57 = $51 + 1 | 0;
    $58 = 31 - $51 | 0;
    $sr_1_ph = $57;
    $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
    $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
    $q_sroa_0_1_ph = 0;
    $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
    break;
   }
   if (($rem | 0) == 0) {
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   SAFE_HEAP_STORE($rem | 0, 0 | $a$0 & -1 | 0, 4);
   SAFE_HEAP_STORE($rem + 4 | 0, $n_sroa_1_4_extract_shift$0 | $a$1 & 0 | 0, 4);
   $_0$1 = 0;
   $_0$0 = 0;
   return (tempRet0 = $_0$1, $_0$0) | 0;
  } else {
   if (!$17) {
    $117 = Math_clz32($d_sroa_1_4_extract_trunc | 0) | 0;
    $119 = $117 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
    if ($119 >>> 0 <= 31) {
     $125 = $119 + 1 | 0;
     $126 = 31 - $119 | 0;
     $130 = $119 - 31 >> 31;
     $sr_1_ph = $125;
     $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
     $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
     $q_sroa_0_1_ph = 0;
     $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
     break;
    }
    if (($rem | 0) == 0) {
     $_0$1 = 0;
     $_0$0 = 0;
     return (tempRet0 = $_0$1, $_0$0) | 0;
    }
    SAFE_HEAP_STORE($rem | 0, 0 | $a$0 & -1 | 0, 4);
    SAFE_HEAP_STORE($rem + 4 | 0, $n_sroa_1_4_extract_shift$0 | $a$1 & 0 | 0, 4);
    $_0$1 = 0;
    $_0$0 = 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
   $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
   if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
    $86 = (Math_clz32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
    $88 = $86 - (Math_clz32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
    $89 = 64 - $88 | 0;
    $91 = 32 - $88 | 0;
    $92 = $91 >> 31;
    $95 = $88 - 32 | 0;
    $105 = $95 >> 31;
    $sr_1_ph = $88;
    $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
    $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
    $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
    $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
    break;
   }
   if (($rem | 0) != 0) {
    SAFE_HEAP_STORE($rem | 0, $66 & $n_sroa_0_0_extract_trunc | 0, 4);
    SAFE_HEAP_STORE($rem + 4 | 0, 0 | 0, 4);
   }
   if (($d_sroa_0_0_extract_trunc | 0) == 1) {
    $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
    $_0$0 = 0 | $a$0 & -1;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   } else {
    $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
    $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
    $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
    return (tempRet0 = $_0$1, $_0$0) | 0;
   }
  }
 } while (0);
 if (($sr_1_ph | 0) == 0) {
  $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
  $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
  $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
  $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = 0;
 } else {
  $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
  $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
  $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0 | 0, $d_sroa_0_0_insert_insert99$1 | 0, -1, -1) | 0;
  $137$1 = tempRet0;
  $q_sroa_1_1198 = $q_sroa_1_1_ph;
  $q_sroa_0_1199 = $q_sroa_0_1_ph;
  $r_sroa_1_1200 = $r_sroa_1_1_ph;
  $r_sroa_0_1201 = $r_sroa_0_1_ph;
  $sr_1202 = $sr_1_ph;
  $carry_0203 = 0;
  while (1) {
   $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
   $149 = $carry_0203 | $q_sroa_0_1199 << 1;
   $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
   $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
   _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
   $150$1 = tempRet0;
   $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
   $152 = $151$0 & 1;
   $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
   $r_sroa_0_0_extract_trunc = $154$0;
   $r_sroa_1_4_extract_trunc = tempRet0;
   $155 = $sr_1202 - 1 | 0;
   if (($155 | 0) == 0) {
    break;
   } else {
    $q_sroa_1_1198 = $147;
    $q_sroa_0_1199 = $149;
    $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
    $sr_1202 = $155;
    $carry_0203 = $152;
   }
  }
  $q_sroa_1_1_lcssa = $147;
  $q_sroa_0_1_lcssa = $149;
  $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
  $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
  $carry_0_lcssa$1 = 0;
  $carry_0_lcssa$0 = $152;
 }
 $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
 $q_sroa_0_0_insert_ext75$1 = 0;
 $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
 if (($rem | 0) != 0) {
  SAFE_HEAP_STORE($rem | 0, 0 | $r_sroa_0_1_lcssa | 0, 4);
  SAFE_HEAP_STORE($rem + 4 | 0, $r_sroa_1_1_lcssa | 0 | 0, 4);
 }
 $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
 $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
 return (tempRet0 = $_0$1, $_0$0) | 0;
}

function _UpsampleRgba4444LinePair($top_y, $bottom_y, $top_u, $top_v, $cur_u, $cur_v, $top_dst, $bottom_dst, $len) {
 $top_y = $top_y | 0;
 $bottom_y = $bottom_y | 0;
 $top_u = $top_u | 0;
 $top_v = $top_v | 0;
 $cur_u = $cur_u | 0;
 $cur_v = $cur_v | 0;
 $top_dst = $top_dst | 0;
 $bottom_dst = $bottom_dst | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $avg = 0, $diag_03 = 0, $diag_12 = 0, $l_uv = 0, $last_pixel_pair = 0, $t_uv = 0, $tl_uv = 0, $uv = 0, $uv0 = 0, $uv01 = 0, $uv02 = 0, $uv03 = 0, $uv05 = 0, $uv06 = 0;
 var $uv1 = 0, $uv14 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $top_y;
 $1 = $bottom_y;
 $2 = $top_u;
 $3 = $top_v;
 $4 = $cur_u;
 $5 = $cur_v;
 $6 = $top_dst;
 $7 = $bottom_dst;
 $8 = $len;
 $9 = $8;
 $10 = $9 - 1 | 0;
 $11 = $10 >> 1;
 $last_pixel_pair = $11;
 $12 = $2;
 $13 = SAFE_HEAP_LOAD($12 >> 0 | 0, 1, 0) | 0 | 0;
 $14 = $13 & 255;
 $15 = $3;
 $16 = SAFE_HEAP_LOAD($15 >> 0 | 0, 1, 0) | 0 | 0;
 $17 = $16 & 255;
 $18 = $17 << 16;
 $19 = $14 | $18;
 $tl_uv = $19;
 $20 = $4;
 $21 = SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0;
 $22 = $21 & 255;
 $23 = $5;
 $24 = SAFE_HEAP_LOAD($23 >> 0 | 0, 1, 0) | 0 | 0;
 $25 = $24 & 255;
 $26 = $25 << 16;
 $27 = $22 | $26;
 $l_uv = $27;
 $28 = $0;
 $29 = ($28 | 0) != (0 | 0);
 if (!$29) {
  ___assert_fail(13572 | 0, 13586 | 0, 101, 13637 | 0);
 }
 $30 = $tl_uv;
 $31 = $30 * 3 | 0;
 $32 = $l_uv;
 $33 = $31 + $32 | 0;
 $34 = $33 + 131074 | 0;
 $35 = $34 >>> 2;
 $uv0 = $35;
 $36 = $0;
 $37 = SAFE_HEAP_LOAD($36 >> 0 | 0, 1, 0) | 0 | 0;
 $38 = $37 & 255;
 $39 = $uv0;
 $40 = $39 & 255;
 $41 = $uv0;
 $42 = $41 >>> 16;
 $43 = $6;
 _VP8YuvToRgba4444($38, $40, $42, $43);
 $44 = $1;
 $45 = ($44 | 0) != (0 | 0);
 if ($45) {
  $46 = $l_uv;
  $47 = $46 * 3 | 0;
  $48 = $tl_uv;
  $49 = $47 + $48 | 0;
  $50 = $49 + 131074 | 0;
  $51 = $50 >>> 2;
  $uv01 = $51;
  $52 = $1;
  $53 = SAFE_HEAP_LOAD($52 >> 0 | 0, 1, 0) | 0 | 0;
  $54 = $53 & 255;
  $55 = $uv01;
  $56 = $55 & 255;
  $57 = $uv01;
  $58 = $57 >>> 16;
  $59 = $7;
  _VP8YuvToRgba4444($54, $56, $58, $59);
 }
 $x = 1;
 while (1) {
  $60 = $x;
  $61 = $last_pixel_pair;
  $62 = ($60 | 0) <= ($61 | 0);
  if (!$62) {
   break;
  }
  $63 = $x;
  $64 = $2;
  $65 = $64 + $63 | 0;
  $66 = SAFE_HEAP_LOAD($65 >> 0 | 0, 1, 0) | 0 | 0;
  $67 = $66 & 255;
  $68 = $x;
  $69 = $3;
  $70 = $69 + $68 | 0;
  $71 = SAFE_HEAP_LOAD($70 >> 0 | 0, 1, 0) | 0 | 0;
  $72 = $71 & 255;
  $73 = $72 << 16;
  $74 = $67 | $73;
  $t_uv = $74;
  $75 = $x;
  $76 = $4;
  $77 = $76 + $75 | 0;
  $78 = SAFE_HEAP_LOAD($77 >> 0 | 0, 1, 0) | 0 | 0;
  $79 = $78 & 255;
  $80 = $x;
  $81 = $5;
  $82 = $81 + $80 | 0;
  $83 = SAFE_HEAP_LOAD($82 >> 0 | 0, 1, 0) | 0 | 0;
  $84 = $83 & 255;
  $85 = $84 << 16;
  $86 = $79 | $85;
  $uv = $86;
  $87 = $tl_uv;
  $88 = $t_uv;
  $89 = $87 + $88 | 0;
  $90 = $l_uv;
  $91 = $89 + $90 | 0;
  $92 = $uv;
  $93 = $91 + $92 | 0;
  $94 = $93 + 524296 | 0;
  $avg = $94;
  $95 = $avg;
  $96 = $t_uv;
  $97 = $l_uv;
  $98 = $96 + $97 | 0;
  $99 = $98 << 1;
  $100 = $95 + $99 | 0;
  $101 = $100 >>> 3;
  $diag_12 = $101;
  $102 = $avg;
  $103 = $tl_uv;
  $104 = $uv;
  $105 = $103 + $104 | 0;
  $106 = $105 << 1;
  $107 = $102 + $106 | 0;
  $108 = $107 >>> 3;
  $diag_03 = $108;
  $109 = $diag_12;
  $110 = $tl_uv;
  $111 = $109 + $110 | 0;
  $112 = $111 >>> 1;
  $uv02 = $112;
  $113 = $diag_03;
  $114 = $t_uv;
  $115 = $113 + $114 | 0;
  $116 = $115 >>> 1;
  $uv1 = $116;
  $117 = $x;
  $118 = $117 << 1;
  $119 = $118 - 1 | 0;
  $120 = $0;
  $121 = $120 + $119 | 0;
  $122 = SAFE_HEAP_LOAD($121 >> 0 | 0, 1, 0) | 0 | 0;
  $123 = $122 & 255;
  $124 = $uv02;
  $125 = $124 & 255;
  $126 = $uv02;
  $127 = $126 >>> 16;
  $128 = $6;
  $129 = $x;
  $130 = $129 << 1;
  $131 = $130 - 1 | 0;
  $132 = $131 << 1;
  $133 = $128 + $132 | 0;
  _VP8YuvToRgba4444($123, $125, $127, $133);
  $134 = $x;
  $135 = $134 << 1;
  $136 = $135 - 0 | 0;
  $137 = $0;
  $138 = $137 + $136 | 0;
  $139 = SAFE_HEAP_LOAD($138 >> 0 | 0, 1, 0) | 0 | 0;
  $140 = $139 & 255;
  $141 = $uv1;
  $142 = $141 & 255;
  $143 = $uv1;
  $144 = $143 >>> 16;
  $145 = $6;
  $146 = $x;
  $147 = $146 << 1;
  $148 = $147 - 0 | 0;
  $149 = $148 << 1;
  $150 = $145 + $149 | 0;
  _VP8YuvToRgba4444($140, $142, $144, $150);
  $151 = $1;
  $152 = ($151 | 0) != (0 | 0);
  if ($152) {
   $153 = $diag_03;
   $154 = $l_uv;
   $155 = $153 + $154 | 0;
   $156 = $155 >>> 1;
   $uv03 = $156;
   $157 = $diag_12;
   $158 = $uv;
   $159 = $157 + $158 | 0;
   $160 = $159 >>> 1;
   $uv14 = $160;
   $161 = $x;
   $162 = $161 << 1;
   $163 = $162 - 1 | 0;
   $164 = $1;
   $165 = $164 + $163 | 0;
   $166 = SAFE_HEAP_LOAD($165 >> 0 | 0, 1, 0) | 0 | 0;
   $167 = $166 & 255;
   $168 = $uv03;
   $169 = $168 & 255;
   $170 = $uv03;
   $171 = $170 >>> 16;
   $172 = $7;
   $173 = $x;
   $174 = $173 << 1;
   $175 = $174 - 1 | 0;
   $176 = $175 << 1;
   $177 = $172 + $176 | 0;
   _VP8YuvToRgba4444($167, $169, $171, $177);
   $178 = $x;
   $179 = $178 << 1;
   $180 = $179 + 0 | 0;
   $181 = $1;
   $182 = $181 + $180 | 0;
   $183 = SAFE_HEAP_LOAD($182 >> 0 | 0, 1, 0) | 0 | 0;
   $184 = $183 & 255;
   $185 = $uv14;
   $186 = $185 & 255;
   $187 = $uv14;
   $188 = $187 >>> 16;
   $189 = $7;
   $190 = $x;
   $191 = $190 << 1;
   $192 = $191 + 0 | 0;
   $193 = $192 << 1;
   $194 = $189 + $193 | 0;
   _VP8YuvToRgba4444($184, $186, $188, $194);
  }
  $195 = $t_uv;
  $tl_uv = $195;
  $196 = $uv;
  $l_uv = $196;
  $197 = $x;
  $198 = $197 + 1 | 0;
  $x = $198;
 }
 $199 = $8;
 $200 = $199 & 1;
 $201 = ($200 | 0) != 0;
 if ($201) {
  STACKTOP = sp;
  return;
 }
 $202 = $tl_uv;
 $203 = $202 * 3 | 0;
 $204 = $l_uv;
 $205 = $203 + $204 | 0;
 $206 = $205 + 131074 | 0;
 $207 = $206 >>> 2;
 $uv05 = $207;
 $208 = $8;
 $209 = $208 - 1 | 0;
 $210 = $0;
 $211 = $210 + $209 | 0;
 $212 = SAFE_HEAP_LOAD($211 >> 0 | 0, 1, 0) | 0 | 0;
 $213 = $212 & 255;
 $214 = $uv05;
 $215 = $214 & 255;
 $216 = $uv05;
 $217 = $216 >>> 16;
 $218 = $6;
 $219 = $8;
 $220 = $219 - 1 | 0;
 $221 = $220 << 1;
 $222 = $218 + $221 | 0;
 _VP8YuvToRgba4444($213, $215, $217, $222);
 $223 = $1;
 $224 = ($223 | 0) != (0 | 0);
 if (!$224) {
  STACKTOP = sp;
  return;
 }
 $225 = $l_uv;
 $226 = $225 * 3 | 0;
 $227 = $tl_uv;
 $228 = $226 + $227 | 0;
 $229 = $228 + 131074 | 0;
 $230 = $229 >>> 2;
 $uv06 = $230;
 $231 = $8;
 $232 = $231 - 1 | 0;
 $233 = $1;
 $234 = $233 + $232 | 0;
 $235 = SAFE_HEAP_LOAD($234 >> 0 | 0, 1, 0) | 0 | 0;
 $236 = $235 & 255;
 $237 = $uv06;
 $238 = $237 & 255;
 $239 = $uv06;
 $240 = $239 >>> 16;
 $241 = $7;
 $242 = $8;
 $243 = $242 - 1 | 0;
 $244 = $243 << 1;
 $245 = $241 + $244 | 0;
 _VP8YuvToRgba4444($236, $238, $240, $245);
 STACKTOP = sp;
 return;
}

function _UpsampleRgb565LinePair($top_y, $bottom_y, $top_u, $top_v, $cur_u, $cur_v, $top_dst, $bottom_dst, $len) {
 $top_y = $top_y | 0;
 $bottom_y = $bottom_y | 0;
 $top_u = $top_u | 0;
 $top_v = $top_v | 0;
 $cur_u = $cur_u | 0;
 $cur_v = $cur_v | 0;
 $top_dst = $top_dst | 0;
 $bottom_dst = $bottom_dst | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $avg = 0, $diag_03 = 0, $diag_12 = 0, $l_uv = 0, $last_pixel_pair = 0, $t_uv = 0, $tl_uv = 0, $uv = 0, $uv0 = 0, $uv01 = 0, $uv02 = 0, $uv03 = 0, $uv05 = 0, $uv06 = 0;
 var $uv1 = 0, $uv14 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $top_y;
 $1 = $bottom_y;
 $2 = $top_u;
 $3 = $top_v;
 $4 = $cur_u;
 $5 = $cur_v;
 $6 = $top_dst;
 $7 = $bottom_dst;
 $8 = $len;
 $9 = $8;
 $10 = $9 - 1 | 0;
 $11 = $10 >> 1;
 $last_pixel_pair = $11;
 $12 = $2;
 $13 = SAFE_HEAP_LOAD($12 >> 0 | 0, 1, 0) | 0 | 0;
 $14 = $13 & 255;
 $15 = $3;
 $16 = SAFE_HEAP_LOAD($15 >> 0 | 0, 1, 0) | 0 | 0;
 $17 = $16 & 255;
 $18 = $17 << 16;
 $19 = $14 | $18;
 $tl_uv = $19;
 $20 = $4;
 $21 = SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0;
 $22 = $21 & 255;
 $23 = $5;
 $24 = SAFE_HEAP_LOAD($23 >> 0 | 0, 1, 0) | 0 | 0;
 $25 = $24 & 255;
 $26 = $25 << 16;
 $27 = $22 | $26;
 $l_uv = $27;
 $28 = $0;
 $29 = ($28 | 0) != (0 | 0);
 if (!$29) {
  ___assert_fail(13572 | 0, 13586 | 0, 102, 13614 | 0);
 }
 $30 = $tl_uv;
 $31 = $30 * 3 | 0;
 $32 = $l_uv;
 $33 = $31 + $32 | 0;
 $34 = $33 + 131074 | 0;
 $35 = $34 >>> 2;
 $uv0 = $35;
 $36 = $0;
 $37 = SAFE_HEAP_LOAD($36 >> 0 | 0, 1, 0) | 0 | 0;
 $38 = $37 & 255;
 $39 = $uv0;
 $40 = $39 & 255;
 $41 = $uv0;
 $42 = $41 >>> 16;
 $43 = $6;
 _VP8YuvToRgb565($38, $40, $42, $43);
 $44 = $1;
 $45 = ($44 | 0) != (0 | 0);
 if ($45) {
  $46 = $l_uv;
  $47 = $46 * 3 | 0;
  $48 = $tl_uv;
  $49 = $47 + $48 | 0;
  $50 = $49 + 131074 | 0;
  $51 = $50 >>> 2;
  $uv01 = $51;
  $52 = $1;
  $53 = SAFE_HEAP_LOAD($52 >> 0 | 0, 1, 0) | 0 | 0;
  $54 = $53 & 255;
  $55 = $uv01;
  $56 = $55 & 255;
  $57 = $uv01;
  $58 = $57 >>> 16;
  $59 = $7;
  _VP8YuvToRgb565($54, $56, $58, $59);
 }
 $x = 1;
 while (1) {
  $60 = $x;
  $61 = $last_pixel_pair;
  $62 = ($60 | 0) <= ($61 | 0);
  if (!$62) {
   break;
  }
  $63 = $x;
  $64 = $2;
  $65 = $64 + $63 | 0;
  $66 = SAFE_HEAP_LOAD($65 >> 0 | 0, 1, 0) | 0 | 0;
  $67 = $66 & 255;
  $68 = $x;
  $69 = $3;
  $70 = $69 + $68 | 0;
  $71 = SAFE_HEAP_LOAD($70 >> 0 | 0, 1, 0) | 0 | 0;
  $72 = $71 & 255;
  $73 = $72 << 16;
  $74 = $67 | $73;
  $t_uv = $74;
  $75 = $x;
  $76 = $4;
  $77 = $76 + $75 | 0;
  $78 = SAFE_HEAP_LOAD($77 >> 0 | 0, 1, 0) | 0 | 0;
  $79 = $78 & 255;
  $80 = $x;
  $81 = $5;
  $82 = $81 + $80 | 0;
  $83 = SAFE_HEAP_LOAD($82 >> 0 | 0, 1, 0) | 0 | 0;
  $84 = $83 & 255;
  $85 = $84 << 16;
  $86 = $79 | $85;
  $uv = $86;
  $87 = $tl_uv;
  $88 = $t_uv;
  $89 = $87 + $88 | 0;
  $90 = $l_uv;
  $91 = $89 + $90 | 0;
  $92 = $uv;
  $93 = $91 + $92 | 0;
  $94 = $93 + 524296 | 0;
  $avg = $94;
  $95 = $avg;
  $96 = $t_uv;
  $97 = $l_uv;
  $98 = $96 + $97 | 0;
  $99 = $98 << 1;
  $100 = $95 + $99 | 0;
  $101 = $100 >>> 3;
  $diag_12 = $101;
  $102 = $avg;
  $103 = $tl_uv;
  $104 = $uv;
  $105 = $103 + $104 | 0;
  $106 = $105 << 1;
  $107 = $102 + $106 | 0;
  $108 = $107 >>> 3;
  $diag_03 = $108;
  $109 = $diag_12;
  $110 = $tl_uv;
  $111 = $109 + $110 | 0;
  $112 = $111 >>> 1;
  $uv02 = $112;
  $113 = $diag_03;
  $114 = $t_uv;
  $115 = $113 + $114 | 0;
  $116 = $115 >>> 1;
  $uv1 = $116;
  $117 = $x;
  $118 = $117 << 1;
  $119 = $118 - 1 | 0;
  $120 = $0;
  $121 = $120 + $119 | 0;
  $122 = SAFE_HEAP_LOAD($121 >> 0 | 0, 1, 0) | 0 | 0;
  $123 = $122 & 255;
  $124 = $uv02;
  $125 = $124 & 255;
  $126 = $uv02;
  $127 = $126 >>> 16;
  $128 = $6;
  $129 = $x;
  $130 = $129 << 1;
  $131 = $130 - 1 | 0;
  $132 = $131 << 1;
  $133 = $128 + $132 | 0;
  _VP8YuvToRgb565($123, $125, $127, $133);
  $134 = $x;
  $135 = $134 << 1;
  $136 = $135 - 0 | 0;
  $137 = $0;
  $138 = $137 + $136 | 0;
  $139 = SAFE_HEAP_LOAD($138 >> 0 | 0, 1, 0) | 0 | 0;
  $140 = $139 & 255;
  $141 = $uv1;
  $142 = $141 & 255;
  $143 = $uv1;
  $144 = $143 >>> 16;
  $145 = $6;
  $146 = $x;
  $147 = $146 << 1;
  $148 = $147 - 0 | 0;
  $149 = $148 << 1;
  $150 = $145 + $149 | 0;
  _VP8YuvToRgb565($140, $142, $144, $150);
  $151 = $1;
  $152 = ($151 | 0) != (0 | 0);
  if ($152) {
   $153 = $diag_03;
   $154 = $l_uv;
   $155 = $153 + $154 | 0;
   $156 = $155 >>> 1;
   $uv03 = $156;
   $157 = $diag_12;
   $158 = $uv;
   $159 = $157 + $158 | 0;
   $160 = $159 >>> 1;
   $uv14 = $160;
   $161 = $x;
   $162 = $161 << 1;
   $163 = $162 - 1 | 0;
   $164 = $1;
   $165 = $164 + $163 | 0;
   $166 = SAFE_HEAP_LOAD($165 >> 0 | 0, 1, 0) | 0 | 0;
   $167 = $166 & 255;
   $168 = $uv03;
   $169 = $168 & 255;
   $170 = $uv03;
   $171 = $170 >>> 16;
   $172 = $7;
   $173 = $x;
   $174 = $173 << 1;
   $175 = $174 - 1 | 0;
   $176 = $175 << 1;
   $177 = $172 + $176 | 0;
   _VP8YuvToRgb565($167, $169, $171, $177);
   $178 = $x;
   $179 = $178 << 1;
   $180 = $179 + 0 | 0;
   $181 = $1;
   $182 = $181 + $180 | 0;
   $183 = SAFE_HEAP_LOAD($182 >> 0 | 0, 1, 0) | 0 | 0;
   $184 = $183 & 255;
   $185 = $uv14;
   $186 = $185 & 255;
   $187 = $uv14;
   $188 = $187 >>> 16;
   $189 = $7;
   $190 = $x;
   $191 = $190 << 1;
   $192 = $191 + 0 | 0;
   $193 = $192 << 1;
   $194 = $189 + $193 | 0;
   _VP8YuvToRgb565($184, $186, $188, $194);
  }
  $195 = $t_uv;
  $tl_uv = $195;
  $196 = $uv;
  $l_uv = $196;
  $197 = $x;
  $198 = $197 + 1 | 0;
  $x = $198;
 }
 $199 = $8;
 $200 = $199 & 1;
 $201 = ($200 | 0) != 0;
 if ($201) {
  STACKTOP = sp;
  return;
 }
 $202 = $tl_uv;
 $203 = $202 * 3 | 0;
 $204 = $l_uv;
 $205 = $203 + $204 | 0;
 $206 = $205 + 131074 | 0;
 $207 = $206 >>> 2;
 $uv05 = $207;
 $208 = $8;
 $209 = $208 - 1 | 0;
 $210 = $0;
 $211 = $210 + $209 | 0;
 $212 = SAFE_HEAP_LOAD($211 >> 0 | 0, 1, 0) | 0 | 0;
 $213 = $212 & 255;
 $214 = $uv05;
 $215 = $214 & 255;
 $216 = $uv05;
 $217 = $216 >>> 16;
 $218 = $6;
 $219 = $8;
 $220 = $219 - 1 | 0;
 $221 = $220 << 1;
 $222 = $218 + $221 | 0;
 _VP8YuvToRgb565($213, $215, $217, $222);
 $223 = $1;
 $224 = ($223 | 0) != (0 | 0);
 if (!$224) {
  STACKTOP = sp;
  return;
 }
 $225 = $l_uv;
 $226 = $225 * 3 | 0;
 $227 = $tl_uv;
 $228 = $226 + $227 | 0;
 $229 = $228 + 131074 | 0;
 $230 = $229 >>> 2;
 $uv06 = $230;
 $231 = $8;
 $232 = $231 - 1 | 0;
 $233 = $1;
 $234 = $233 + $232 | 0;
 $235 = SAFE_HEAP_LOAD($234 >> 0 | 0, 1, 0) | 0 | 0;
 $236 = $235 & 255;
 $237 = $uv06;
 $238 = $237 & 255;
 $239 = $uv06;
 $240 = $239 >>> 16;
 $241 = $7;
 $242 = $8;
 $243 = $242 - 1 | 0;
 $244 = $243 << 1;
 $245 = $241 + $244 | 0;
 _VP8YuvToRgb565($236, $238, $240, $245);
 STACKTOP = sp;
 return;
}

function _UpsampleRgbLinePair($top_y, $bottom_y, $top_u, $top_v, $cur_u, $cur_v, $top_dst, $bottom_dst, $len) {
 $top_y = $top_y | 0;
 $bottom_y = $bottom_y | 0;
 $top_u = $top_u | 0;
 $top_v = $top_v | 0;
 $cur_u = $cur_u | 0;
 $cur_v = $cur_v | 0;
 $top_dst = $top_dst | 0;
 $bottom_dst = $bottom_dst | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $avg = 0, $diag_03 = 0, $diag_12 = 0, $l_uv = 0, $last_pixel_pair = 0, $t_uv = 0, $tl_uv = 0, $uv = 0, $uv0 = 0, $uv01 = 0, $uv02 = 0, $uv03 = 0, $uv05 = 0, $uv06 = 0;
 var $uv1 = 0, $uv14 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $top_y;
 $1 = $bottom_y;
 $2 = $top_u;
 $3 = $top_v;
 $4 = $cur_u;
 $5 = $cur_v;
 $6 = $top_dst;
 $7 = $bottom_dst;
 $8 = $len;
 $9 = $8;
 $10 = $9 - 1 | 0;
 $11 = $10 >> 1;
 $last_pixel_pair = $11;
 $12 = $2;
 $13 = SAFE_HEAP_LOAD($12 >> 0 | 0, 1, 0) | 0 | 0;
 $14 = $13 & 255;
 $15 = $3;
 $16 = SAFE_HEAP_LOAD($15 >> 0 | 0, 1, 0) | 0 | 0;
 $17 = $16 & 255;
 $18 = $17 << 16;
 $19 = $14 | $18;
 $tl_uv = $19;
 $20 = $4;
 $21 = SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0;
 $22 = $21 & 255;
 $23 = $5;
 $24 = SAFE_HEAP_LOAD($23 >> 0 | 0, 1, 0) | 0 | 0;
 $25 = $24 & 255;
 $26 = $25 << 16;
 $27 = $22 | $26;
 $l_uv = $27;
 $28 = $0;
 $29 = ($28 | 0) != (0 | 0);
 if (!$29) {
  ___assert_fail(13572 | 0, 13586 | 0, 96, 13745 | 0);
 }
 $30 = $tl_uv;
 $31 = $30 * 3 | 0;
 $32 = $l_uv;
 $33 = $31 + $32 | 0;
 $34 = $33 + 131074 | 0;
 $35 = $34 >>> 2;
 $uv0 = $35;
 $36 = $0;
 $37 = SAFE_HEAP_LOAD($36 >> 0 | 0, 1, 0) | 0 | 0;
 $38 = $37 & 255;
 $39 = $uv0;
 $40 = $39 & 255;
 $41 = $uv0;
 $42 = $41 >>> 16;
 $43 = $6;
 _VP8YuvToRgb($38, $40, $42, $43);
 $44 = $1;
 $45 = ($44 | 0) != (0 | 0);
 if ($45) {
  $46 = $l_uv;
  $47 = $46 * 3 | 0;
  $48 = $tl_uv;
  $49 = $47 + $48 | 0;
  $50 = $49 + 131074 | 0;
  $51 = $50 >>> 2;
  $uv01 = $51;
  $52 = $1;
  $53 = SAFE_HEAP_LOAD($52 >> 0 | 0, 1, 0) | 0 | 0;
  $54 = $53 & 255;
  $55 = $uv01;
  $56 = $55 & 255;
  $57 = $uv01;
  $58 = $57 >>> 16;
  $59 = $7;
  _VP8YuvToRgb($54, $56, $58, $59);
 }
 $x = 1;
 while (1) {
  $60 = $x;
  $61 = $last_pixel_pair;
  $62 = ($60 | 0) <= ($61 | 0);
  if (!$62) {
   break;
  }
  $63 = $x;
  $64 = $2;
  $65 = $64 + $63 | 0;
  $66 = SAFE_HEAP_LOAD($65 >> 0 | 0, 1, 0) | 0 | 0;
  $67 = $66 & 255;
  $68 = $x;
  $69 = $3;
  $70 = $69 + $68 | 0;
  $71 = SAFE_HEAP_LOAD($70 >> 0 | 0, 1, 0) | 0 | 0;
  $72 = $71 & 255;
  $73 = $72 << 16;
  $74 = $67 | $73;
  $t_uv = $74;
  $75 = $x;
  $76 = $4;
  $77 = $76 + $75 | 0;
  $78 = SAFE_HEAP_LOAD($77 >> 0 | 0, 1, 0) | 0 | 0;
  $79 = $78 & 255;
  $80 = $x;
  $81 = $5;
  $82 = $81 + $80 | 0;
  $83 = SAFE_HEAP_LOAD($82 >> 0 | 0, 1, 0) | 0 | 0;
  $84 = $83 & 255;
  $85 = $84 << 16;
  $86 = $79 | $85;
  $uv = $86;
  $87 = $tl_uv;
  $88 = $t_uv;
  $89 = $87 + $88 | 0;
  $90 = $l_uv;
  $91 = $89 + $90 | 0;
  $92 = $uv;
  $93 = $91 + $92 | 0;
  $94 = $93 + 524296 | 0;
  $avg = $94;
  $95 = $avg;
  $96 = $t_uv;
  $97 = $l_uv;
  $98 = $96 + $97 | 0;
  $99 = $98 << 1;
  $100 = $95 + $99 | 0;
  $101 = $100 >>> 3;
  $diag_12 = $101;
  $102 = $avg;
  $103 = $tl_uv;
  $104 = $uv;
  $105 = $103 + $104 | 0;
  $106 = $105 << 1;
  $107 = $102 + $106 | 0;
  $108 = $107 >>> 3;
  $diag_03 = $108;
  $109 = $diag_12;
  $110 = $tl_uv;
  $111 = $109 + $110 | 0;
  $112 = $111 >>> 1;
  $uv02 = $112;
  $113 = $diag_03;
  $114 = $t_uv;
  $115 = $113 + $114 | 0;
  $116 = $115 >>> 1;
  $uv1 = $116;
  $117 = $x;
  $118 = $117 << 1;
  $119 = $118 - 1 | 0;
  $120 = $0;
  $121 = $120 + $119 | 0;
  $122 = SAFE_HEAP_LOAD($121 >> 0 | 0, 1, 0) | 0 | 0;
  $123 = $122 & 255;
  $124 = $uv02;
  $125 = $124 & 255;
  $126 = $uv02;
  $127 = $126 >>> 16;
  $128 = $6;
  $129 = $x;
  $130 = $129 << 1;
  $131 = $130 - 1 | 0;
  $132 = $131 * 3 | 0;
  $133 = $128 + $132 | 0;
  _VP8YuvToRgb($123, $125, $127, $133);
  $134 = $x;
  $135 = $134 << 1;
  $136 = $135 - 0 | 0;
  $137 = $0;
  $138 = $137 + $136 | 0;
  $139 = SAFE_HEAP_LOAD($138 >> 0 | 0, 1, 0) | 0 | 0;
  $140 = $139 & 255;
  $141 = $uv1;
  $142 = $141 & 255;
  $143 = $uv1;
  $144 = $143 >>> 16;
  $145 = $6;
  $146 = $x;
  $147 = $146 << 1;
  $148 = $147 - 0 | 0;
  $149 = $148 * 3 | 0;
  $150 = $145 + $149 | 0;
  _VP8YuvToRgb($140, $142, $144, $150);
  $151 = $1;
  $152 = ($151 | 0) != (0 | 0);
  if ($152) {
   $153 = $diag_03;
   $154 = $l_uv;
   $155 = $153 + $154 | 0;
   $156 = $155 >>> 1;
   $uv03 = $156;
   $157 = $diag_12;
   $158 = $uv;
   $159 = $157 + $158 | 0;
   $160 = $159 >>> 1;
   $uv14 = $160;
   $161 = $x;
   $162 = $161 << 1;
   $163 = $162 - 1 | 0;
   $164 = $1;
   $165 = $164 + $163 | 0;
   $166 = SAFE_HEAP_LOAD($165 >> 0 | 0, 1, 0) | 0 | 0;
   $167 = $166 & 255;
   $168 = $uv03;
   $169 = $168 & 255;
   $170 = $uv03;
   $171 = $170 >>> 16;
   $172 = $7;
   $173 = $x;
   $174 = $173 << 1;
   $175 = $174 - 1 | 0;
   $176 = $175 * 3 | 0;
   $177 = $172 + $176 | 0;
   _VP8YuvToRgb($167, $169, $171, $177);
   $178 = $x;
   $179 = $178 << 1;
   $180 = $179 + 0 | 0;
   $181 = $1;
   $182 = $181 + $180 | 0;
   $183 = SAFE_HEAP_LOAD($182 >> 0 | 0, 1, 0) | 0 | 0;
   $184 = $183 & 255;
   $185 = $uv14;
   $186 = $185 & 255;
   $187 = $uv14;
   $188 = $187 >>> 16;
   $189 = $7;
   $190 = $x;
   $191 = $190 << 1;
   $192 = $191 + 0 | 0;
   $193 = $192 * 3 | 0;
   $194 = $189 + $193 | 0;
   _VP8YuvToRgb($184, $186, $188, $194);
  }
  $195 = $t_uv;
  $tl_uv = $195;
  $196 = $uv;
  $l_uv = $196;
  $197 = $x;
  $198 = $197 + 1 | 0;
  $x = $198;
 }
 $199 = $8;
 $200 = $199 & 1;
 $201 = ($200 | 0) != 0;
 if ($201) {
  STACKTOP = sp;
  return;
 }
 $202 = $tl_uv;
 $203 = $202 * 3 | 0;
 $204 = $l_uv;
 $205 = $203 + $204 | 0;
 $206 = $205 + 131074 | 0;
 $207 = $206 >>> 2;
 $uv05 = $207;
 $208 = $8;
 $209 = $208 - 1 | 0;
 $210 = $0;
 $211 = $210 + $209 | 0;
 $212 = SAFE_HEAP_LOAD($211 >> 0 | 0, 1, 0) | 0 | 0;
 $213 = $212 & 255;
 $214 = $uv05;
 $215 = $214 & 255;
 $216 = $uv05;
 $217 = $216 >>> 16;
 $218 = $6;
 $219 = $8;
 $220 = $219 - 1 | 0;
 $221 = $220 * 3 | 0;
 $222 = $218 + $221 | 0;
 _VP8YuvToRgb($213, $215, $217, $222);
 $223 = $1;
 $224 = ($223 | 0) != (0 | 0);
 if (!$224) {
  STACKTOP = sp;
  return;
 }
 $225 = $l_uv;
 $226 = $225 * 3 | 0;
 $227 = $tl_uv;
 $228 = $226 + $227 | 0;
 $229 = $228 + 131074 | 0;
 $230 = $229 >>> 2;
 $uv06 = $230;
 $231 = $8;
 $232 = $231 - 1 | 0;
 $233 = $1;
 $234 = $233 + $232 | 0;
 $235 = SAFE_HEAP_LOAD($234 >> 0 | 0, 1, 0) | 0 | 0;
 $236 = $235 & 255;
 $237 = $uv06;
 $238 = $237 & 255;
 $239 = $uv06;
 $240 = $239 >>> 16;
 $241 = $7;
 $242 = $8;
 $243 = $242 - 1 | 0;
 $244 = $243 * 3 | 0;
 $245 = $241 + $244 | 0;
 _VP8YuvToRgb($236, $238, $240, $245);
 STACKTOP = sp;
 return;
}

function _UpsampleBgrLinePair($top_y, $bottom_y, $top_u, $top_v, $cur_u, $cur_v, $top_dst, $bottom_dst, $len) {
 $top_y = $top_y | 0;
 $bottom_y = $bottom_y | 0;
 $top_u = $top_u | 0;
 $top_v = $top_v | 0;
 $cur_u = $cur_u | 0;
 $cur_v = $cur_v | 0;
 $top_dst = $top_dst | 0;
 $bottom_dst = $bottom_dst | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $242 = 0, $243 = 0, $244 = 0, $245 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $avg = 0, $diag_03 = 0, $diag_12 = 0, $l_uv = 0, $last_pixel_pair = 0, $t_uv = 0, $tl_uv = 0, $uv = 0, $uv0 = 0, $uv01 = 0, $uv02 = 0, $uv03 = 0, $uv05 = 0, $uv06 = 0;
 var $uv1 = 0, $uv14 = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $top_y;
 $1 = $bottom_y;
 $2 = $top_u;
 $3 = $top_v;
 $4 = $cur_u;
 $5 = $cur_v;
 $6 = $top_dst;
 $7 = $bottom_dst;
 $8 = $len;
 $9 = $8;
 $10 = $9 - 1 | 0;
 $11 = $10 >> 1;
 $last_pixel_pair = $11;
 $12 = $2;
 $13 = SAFE_HEAP_LOAD($12 >> 0 | 0, 1, 0) | 0 | 0;
 $14 = $13 & 255;
 $15 = $3;
 $16 = SAFE_HEAP_LOAD($15 >> 0 | 0, 1, 0) | 0 | 0;
 $17 = $16 & 255;
 $18 = $17 << 16;
 $19 = $14 | $18;
 $tl_uv = $19;
 $20 = $4;
 $21 = SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0;
 $22 = $21 & 255;
 $23 = $5;
 $24 = SAFE_HEAP_LOAD($23 >> 0 | 0, 1, 0) | 0 | 0;
 $25 = $24 & 255;
 $26 = $25 << 16;
 $27 = $22 | $26;
 $l_uv = $27;
 $28 = $0;
 $29 = ($28 | 0) != (0 | 0);
 if (!$29) {
  ___assert_fail(13572 | 0, 13586 | 0, 97, 13704 | 0);
 }
 $30 = $tl_uv;
 $31 = $30 * 3 | 0;
 $32 = $l_uv;
 $33 = $31 + $32 | 0;
 $34 = $33 + 131074 | 0;
 $35 = $34 >>> 2;
 $uv0 = $35;
 $36 = $0;
 $37 = SAFE_HEAP_LOAD($36 >> 0 | 0, 1, 0) | 0 | 0;
 $38 = $37 & 255;
 $39 = $uv0;
 $40 = $39 & 255;
 $41 = $uv0;
 $42 = $41 >>> 16;
 $43 = $6;
 _VP8YuvToBgr($38, $40, $42, $43);
 $44 = $1;
 $45 = ($44 | 0) != (0 | 0);
 if ($45) {
  $46 = $l_uv;
  $47 = $46 * 3 | 0;
  $48 = $tl_uv;
  $49 = $47 + $48 | 0;
  $50 = $49 + 131074 | 0;
  $51 = $50 >>> 2;
  $uv01 = $51;
  $52 = $1;
  $53 = SAFE_HEAP_LOAD($52 >> 0 | 0, 1, 0) | 0 | 0;
  $54 = $53 & 255;
  $55 = $uv01;
  $56 = $55 & 255;
  $57 = $uv01;
  $58 = $57 >>> 16;
  $59 = $7;
  _VP8YuvToBgr($54, $56, $58, $59);
 }
 $x = 1;
 while (1) {
  $60 = $x;
  $61 = $last_pixel_pair;
  $62 = ($60 | 0) <= ($61 | 0);
  if (!$62) {
   break;
  }
  $63 = $x;
  $64 = $2;
  $65 = $64 + $63 | 0;
  $66 = SAFE_HEAP_LOAD($65 >> 0 | 0, 1, 0) | 0 | 0;
  $67 = $66 & 255;
  $68 = $x;
  $69 = $3;
  $70 = $69 + $68 | 0;
  $71 = SAFE_HEAP_LOAD($70 >> 0 | 0, 1, 0) | 0 | 0;
  $72 = $71 & 255;
  $73 = $72 << 16;
  $74 = $67 | $73;
  $t_uv = $74;
  $75 = $x;
  $76 = $4;
  $77 = $76 + $75 | 0;
  $78 = SAFE_HEAP_LOAD($77 >> 0 | 0, 1, 0) | 0 | 0;
  $79 = $78 & 255;
  $80 = $x;
  $81 = $5;
  $82 = $81 + $80 | 0;
  $83 = SAFE_HEAP_LOAD($82 >> 0 | 0, 1, 0) | 0 | 0;
  $84 = $83 & 255;
  $85 = $84 << 16;
  $86 = $79 | $85;
  $uv = $86;
  $87 = $tl_uv;
  $88 = $t_uv;
  $89 = $87 + $88 | 0;
  $90 = $l_uv;
  $91 = $89 + $90 | 0;
  $92 = $uv;
  $93 = $91 + $92 | 0;
  $94 = $93 + 524296 | 0;
  $avg = $94;
  $95 = $avg;
  $96 = $t_uv;
  $97 = $l_uv;
  $98 = $96 + $97 | 0;
  $99 = $98 << 1;
  $100 = $95 + $99 | 0;
  $101 = $100 >>> 3;
  $diag_12 = $101;
  $102 = $avg;
  $103 = $tl_uv;
  $104 = $uv;
  $105 = $103 + $104 | 0;
  $106 = $105 << 1;
  $107 = $102 + $106 | 0;
  $108 = $107 >>> 3;
  $diag_03 = $108;
  $109 = $diag_12;
  $110 = $tl_uv;
  $111 = $109 + $110 | 0;
  $112 = $111 >>> 1;
  $uv02 = $112;
  $113 = $diag_03;
  $114 = $t_uv;
  $115 = $113 + $114 | 0;
  $116 = $115 >>> 1;
  $uv1 = $116;
  $117 = $x;
  $118 = $117 << 1;
  $119 = $118 - 1 | 0;
  $120 = $0;
  $121 = $120 + $119 | 0;
  $122 = SAFE_HEAP_LOAD($121 >> 0 | 0, 1, 0) | 0 | 0;
  $123 = $122 & 255;
  $124 = $uv02;
  $125 = $124 & 255;
  $126 = $uv02;
  $127 = $126 >>> 16;
  $128 = $6;
  $129 = $x;
  $130 = $129 << 1;
  $131 = $130 - 1 | 0;
  $132 = $131 * 3 | 0;
  $133 = $128 + $132 | 0;
  _VP8YuvToBgr($123, $125, $127, $133);
  $134 = $x;
  $135 = $134 << 1;
  $136 = $135 - 0 | 0;
  $137 = $0;
  $138 = $137 + $136 | 0;
  $139 = SAFE_HEAP_LOAD($138 >> 0 | 0, 1, 0) | 0 | 0;
  $140 = $139 & 255;
  $141 = $uv1;
  $142 = $141 & 255;
  $143 = $uv1;
  $144 = $143 >>> 16;
  $145 = $6;
  $146 = $x;
  $147 = $146 << 1;
  $148 = $147 - 0 | 0;
  $149 = $148 * 3 | 0;
  $150 = $145 + $149 | 0;
  _VP8YuvToBgr($140, $142, $144, $150);
  $151 = $1;
  $152 = ($151 | 0) != (0 | 0);
  if ($152) {
   $153 = $diag_03;
   $154 = $l_uv;
   $155 = $153 + $154 | 0;
   $156 = $155 >>> 1;
   $uv03 = $156;
   $157 = $diag_12;
   $158 = $uv;
   $159 = $157 + $158 | 0;
   $160 = $159 >>> 1;
   $uv14 = $160;
   $161 = $x;
   $162 = $161 << 1;
   $163 = $162 - 1 | 0;
   $164 = $1;
   $165 = $164 + $163 | 0;
   $166 = SAFE_HEAP_LOAD($165 >> 0 | 0, 1, 0) | 0 | 0;
   $167 = $166 & 255;
   $168 = $uv03;
   $169 = $168 & 255;
   $170 = $uv03;
   $171 = $170 >>> 16;
   $172 = $7;
   $173 = $x;
   $174 = $173 << 1;
   $175 = $174 - 1 | 0;
   $176 = $175 * 3 | 0;
   $177 = $172 + $176 | 0;
   _VP8YuvToBgr($167, $169, $171, $177);
   $178 = $x;
   $179 = $178 << 1;
   $180 = $179 + 0 | 0;
   $181 = $1;
   $182 = $181 + $180 | 0;
   $183 = SAFE_HEAP_LOAD($182 >> 0 | 0, 1, 0) | 0 | 0;
   $184 = $183 & 255;
   $185 = $uv14;
   $186 = $185 & 255;
   $187 = $uv14;
   $188 = $187 >>> 16;
   $189 = $7;
   $190 = $x;
   $191 = $190 << 1;
   $192 = $191 + 0 | 0;
   $193 = $192 * 3 | 0;
   $194 = $189 + $193 | 0;
   _VP8YuvToBgr($184, $186, $188, $194);
  }
  $195 = $t_uv;
  $tl_uv = $195;
  $196 = $uv;
  $l_uv = $196;
  $197 = $x;
  $198 = $197 + 1 | 0;
  $x = $198;
 }
 $199 = $8;
 $200 = $199 & 1;
 $201 = ($200 | 0) != 0;
 if ($201) {
  STACKTOP = sp;
  return;
 }
 $202 = $tl_uv;
 $203 = $202 * 3 | 0;
 $204 = $l_uv;
 $205 = $203 + $204 | 0;
 $206 = $205 + 131074 | 0;
 $207 = $206 >>> 2;
 $uv05 = $207;
 $208 = $8;
 $209 = $208 - 1 | 0;
 $210 = $0;
 $211 = $210 + $209 | 0;
 $212 = SAFE_HEAP_LOAD($211 >> 0 | 0, 1, 0) | 0 | 0;
 $213 = $212 & 255;
 $214 = $uv05;
 $215 = $214 & 255;
 $216 = $uv05;
 $217 = $216 >>> 16;
 $218 = $6;
 $219 = $8;
 $220 = $219 - 1 | 0;
 $221 = $220 * 3 | 0;
 $222 = $218 + $221 | 0;
 _VP8YuvToBgr($213, $215, $217, $222);
 $223 = $1;
 $224 = ($223 | 0) != (0 | 0);
 if (!$224) {
  STACKTOP = sp;
  return;
 }
 $225 = $l_uv;
 $226 = $225 * 3 | 0;
 $227 = $tl_uv;
 $228 = $226 + $227 | 0;
 $229 = $228 + 131074 | 0;
 $230 = $229 >>> 2;
 $uv06 = $230;
 $231 = $8;
 $232 = $231 - 1 | 0;
 $233 = $1;
 $234 = $233 + $232 | 0;
 $235 = SAFE_HEAP_LOAD($234 >> 0 | 0, 1, 0) | 0 | 0;
 $236 = $235 & 255;
 $237 = $uv06;
 $238 = $237 & 255;
 $239 = $uv06;
 $240 = $239 >>> 16;
 $241 = $7;
 $242 = $8;
 $243 = $242 - 1 | 0;
 $244 = $243 * 3 | 0;
 $245 = $241 + $244 | 0;
 _VP8YuvToBgr($236, $238, $240, $245);
 STACKTOP = sp;
 return;
}
function _TransformAC3($in, $dst) {
 $in = $in | 0;
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $192 = 0, $193 = 0, $194 = 0, $195 = 0, $196 = 0, $197 = 0, $198 = 0, $199 = 0, $2 = 0, $20 = 0, $200 = 0, $201 = 0, $202 = 0, $203 = 0, $204 = 0, $205 = 0;
 var $206 = 0, $207 = 0, $208 = 0, $209 = 0, $21 = 0, $210 = 0, $211 = 0, $212 = 0, $213 = 0, $214 = 0, $215 = 0, $216 = 0, $217 = 0, $218 = 0, $219 = 0, $22 = 0, $220 = 0, $221 = 0, $222 = 0, $223 = 0;
 var $224 = 0, $225 = 0, $226 = 0, $227 = 0, $228 = 0, $229 = 0, $23 = 0, $230 = 0, $231 = 0, $232 = 0, $233 = 0, $234 = 0, $235 = 0, $236 = 0, $237 = 0, $238 = 0, $239 = 0, $24 = 0, $240 = 0, $241 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $DC = 0, $DC1 = 0, $DC2 = 0, $DC3 = 0, $a = 0, $c1 = 0, $c4 = 0, $d1 = 0, $d4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $in;
 $1 = $dst;
 $2 = $0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0;
 $4 = $3 << 16 >> 16;
 $5 = $4 + 4 | 0;
 $a = $5;
 $6 = $0;
 $7 = $6 + 8 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 2, 0) | 0 | 0;
 $9 = $8 << 16 >> 16;
 $10 = $9 * 35468 | 0;
 $11 = $10 >> 16;
 $c4 = $11;
 $12 = $0;
 $13 = $12 + 8 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 2, 0) | 0 | 0;
 $15 = $14 << 16 >> 16;
 $16 = $15 * 20091 | 0;
 $17 = $16 >> 16;
 $18 = $0;
 $19 = $18 + 8 | 0;
 $20 = SAFE_HEAP_LOAD($19 | 0, 2, 0) | 0 | 0;
 $21 = $20 << 16 >> 16;
 $22 = $17 + $21 | 0;
 $d4 = $22;
 $23 = $0;
 $24 = $23 + 2 | 0;
 $25 = SAFE_HEAP_LOAD($24 | 0, 2, 0) | 0 | 0;
 $26 = $25 << 16 >> 16;
 $27 = $26 * 35468 | 0;
 $28 = $27 >> 16;
 $c1 = $28;
 $29 = $0;
 $30 = $29 + 2 | 0;
 $31 = SAFE_HEAP_LOAD($30 | 0, 2, 0) | 0 | 0;
 $32 = $31 << 16 >> 16;
 $33 = $32 * 20091 | 0;
 $34 = $33 >> 16;
 $35 = $0;
 $36 = $35 + 2 | 0;
 $37 = SAFE_HEAP_LOAD($36 | 0, 2, 0) | 0 | 0;
 $38 = $37 << 16 >> 16;
 $39 = $34 + $38 | 0;
 $d1 = $39;
 $40 = $a;
 $41 = $d4;
 $42 = $40 + $41 | 0;
 $DC = $42;
 $43 = $1;
 $44 = SAFE_HEAP_LOAD($43 >> 0 | 0, 1, 0) | 0 | 0;
 $45 = $44 & 255;
 $46 = $DC;
 $47 = $d1;
 $48 = $46 + $47 | 0;
 $49 = $48 >> 3;
 $50 = $45 + $49 | 0;
 $51 = _clip_8b($50) | 0;
 $52 = $1;
 SAFE_HEAP_STORE($52 >> 0 | 0, $51 | 0, 1);
 $53 = $1;
 $54 = $53 + 1 | 0;
 $55 = SAFE_HEAP_LOAD($54 >> 0 | 0, 1, 0) | 0 | 0;
 $56 = $55 & 255;
 $57 = $DC;
 $58 = $c1;
 $59 = $57 + $58 | 0;
 $60 = $59 >> 3;
 $61 = $56 + $60 | 0;
 $62 = _clip_8b($61) | 0;
 $63 = $1;
 $64 = $63 + 1 | 0;
 SAFE_HEAP_STORE($64 >> 0 | 0, $62 | 0, 1);
 $65 = $1;
 $66 = $65 + 2 | 0;
 $67 = SAFE_HEAP_LOAD($66 >> 0 | 0, 1, 0) | 0 | 0;
 $68 = $67 & 255;
 $69 = $DC;
 $70 = $c1;
 $71 = $69 - $70 | 0;
 $72 = $71 >> 3;
 $73 = $68 + $72 | 0;
 $74 = _clip_8b($73) | 0;
 $75 = $1;
 $76 = $75 + 2 | 0;
 SAFE_HEAP_STORE($76 >> 0 | 0, $74 | 0, 1);
 $77 = $1;
 $78 = $77 + 3 | 0;
 $79 = SAFE_HEAP_LOAD($78 >> 0 | 0, 1, 0) | 0 | 0;
 $80 = $79 & 255;
 $81 = $DC;
 $82 = $d1;
 $83 = $81 - $82 | 0;
 $84 = $83 >> 3;
 $85 = $80 + $84 | 0;
 $86 = _clip_8b($85) | 0;
 $87 = $1;
 $88 = $87 + 3 | 0;
 SAFE_HEAP_STORE($88 >> 0 | 0, $86 | 0, 1);
 $89 = $a;
 $90 = $c4;
 $91 = $89 + $90 | 0;
 $DC1 = $91;
 $92 = $1;
 $93 = $92 + 32 | 0;
 $94 = SAFE_HEAP_LOAD($93 >> 0 | 0, 1, 0) | 0 | 0;
 $95 = $94 & 255;
 $96 = $DC1;
 $97 = $d1;
 $98 = $96 + $97 | 0;
 $99 = $98 >> 3;
 $100 = $95 + $99 | 0;
 $101 = _clip_8b($100) | 0;
 $102 = $1;
 $103 = $102 + 32 | 0;
 SAFE_HEAP_STORE($103 >> 0 | 0, $101 | 0, 1);
 $104 = $1;
 $105 = $104 + 33 | 0;
 $106 = SAFE_HEAP_LOAD($105 >> 0 | 0, 1, 0) | 0 | 0;
 $107 = $106 & 255;
 $108 = $DC1;
 $109 = $c1;
 $110 = $108 + $109 | 0;
 $111 = $110 >> 3;
 $112 = $107 + $111 | 0;
 $113 = _clip_8b($112) | 0;
 $114 = $1;
 $115 = $114 + 33 | 0;
 SAFE_HEAP_STORE($115 >> 0 | 0, $113 | 0, 1);
 $116 = $1;
 $117 = $116 + 34 | 0;
 $118 = SAFE_HEAP_LOAD($117 >> 0 | 0, 1, 0) | 0 | 0;
 $119 = $118 & 255;
 $120 = $DC1;
 $121 = $c1;
 $122 = $120 - $121 | 0;
 $123 = $122 >> 3;
 $124 = $119 + $123 | 0;
 $125 = _clip_8b($124) | 0;
 $126 = $1;
 $127 = $126 + 34 | 0;
 SAFE_HEAP_STORE($127 >> 0 | 0, $125 | 0, 1);
 $128 = $1;
 $129 = $128 + 35 | 0;
 $130 = SAFE_HEAP_LOAD($129 >> 0 | 0, 1, 0) | 0 | 0;
 $131 = $130 & 255;
 $132 = $DC1;
 $133 = $d1;
 $134 = $132 - $133 | 0;
 $135 = $134 >> 3;
 $136 = $131 + $135 | 0;
 $137 = _clip_8b($136) | 0;
 $138 = $1;
 $139 = $138 + 35 | 0;
 SAFE_HEAP_STORE($139 >> 0 | 0, $137 | 0, 1);
 $140 = $a;
 $141 = $c4;
 $142 = $140 - $141 | 0;
 $DC2 = $142;
 $143 = $1;
 $144 = $143 + 64 | 0;
 $145 = SAFE_HEAP_LOAD($144 >> 0 | 0, 1, 0) | 0 | 0;
 $146 = $145 & 255;
 $147 = $DC2;
 $148 = $d1;
 $149 = $147 + $148 | 0;
 $150 = $149 >> 3;
 $151 = $146 + $150 | 0;
 $152 = _clip_8b($151) | 0;
 $153 = $1;
 $154 = $153 + 64 | 0;
 SAFE_HEAP_STORE($154 >> 0 | 0, $152 | 0, 1);
 $155 = $1;
 $156 = $155 + 65 | 0;
 $157 = SAFE_HEAP_LOAD($156 >> 0 | 0, 1, 0) | 0 | 0;
 $158 = $157 & 255;
 $159 = $DC2;
 $160 = $c1;
 $161 = $159 + $160 | 0;
 $162 = $161 >> 3;
 $163 = $158 + $162 | 0;
 $164 = _clip_8b($163) | 0;
 $165 = $1;
 $166 = $165 + 65 | 0;
 SAFE_HEAP_STORE($166 >> 0 | 0, $164 | 0, 1);
 $167 = $1;
 $168 = $167 + 66 | 0;
 $169 = SAFE_HEAP_LOAD($168 >> 0 | 0, 1, 0) | 0 | 0;
 $170 = $169 & 255;
 $171 = $DC2;
 $172 = $c1;
 $173 = $171 - $172 | 0;
 $174 = $173 >> 3;
 $175 = $170 + $174 | 0;
 $176 = _clip_8b($175) | 0;
 $177 = $1;
 $178 = $177 + 66 | 0;
 SAFE_HEAP_STORE($178 >> 0 | 0, $176 | 0, 1);
 $179 = $1;
 $180 = $179 + 67 | 0;
 $181 = SAFE_HEAP_LOAD($180 >> 0 | 0, 1, 0) | 0 | 0;
 $182 = $181 & 255;
 $183 = $DC2;
 $184 = $d1;
 $185 = $183 - $184 | 0;
 $186 = $185 >> 3;
 $187 = $182 + $186 | 0;
 $188 = _clip_8b($187) | 0;
 $189 = $1;
 $190 = $189 + 67 | 0;
 SAFE_HEAP_STORE($190 >> 0 | 0, $188 | 0, 1);
 $191 = $a;
 $192 = $d4;
 $193 = $191 - $192 | 0;
 $DC3 = $193;
 $194 = $1;
 $195 = $194 + 96 | 0;
 $196 = SAFE_HEAP_LOAD($195 >> 0 | 0, 1, 0) | 0 | 0;
 $197 = $196 & 255;
 $198 = $DC3;
 $199 = $d1;
 $200 = $198 + $199 | 0;
 $201 = $200 >> 3;
 $202 = $197 + $201 | 0;
 $203 = _clip_8b($202) | 0;
 $204 = $1;
 $205 = $204 + 96 | 0;
 SAFE_HEAP_STORE($205 >> 0 | 0, $203 | 0, 1);
 $206 = $1;
 $207 = $206 + 97 | 0;
 $208 = SAFE_HEAP_LOAD($207 >> 0 | 0, 1, 0) | 0 | 0;
 $209 = $208 & 255;
 $210 = $DC3;
 $211 = $c1;
 $212 = $210 + $211 | 0;
 $213 = $212 >> 3;
 $214 = $209 + $213 | 0;
 $215 = _clip_8b($214) | 0;
 $216 = $1;
 $217 = $216 + 97 | 0;
 SAFE_HEAP_STORE($217 >> 0 | 0, $215 | 0, 1);
 $218 = $1;
 $219 = $218 + 98 | 0;
 $220 = SAFE_HEAP_LOAD($219 >> 0 | 0, 1, 0) | 0 | 0;
 $221 = $220 & 255;
 $222 = $DC3;
 $223 = $c1;
 $224 = $222 - $223 | 0;
 $225 = $224 >> 3;
 $226 = $221 + $225 | 0;
 $227 = _clip_8b($226) | 0;
 $228 = $1;
 $229 = $228 + 98 | 0;
 SAFE_HEAP_STORE($229 >> 0 | 0, $227 | 0, 1);
 $230 = $1;
 $231 = $230 + 99 | 0;
 $232 = SAFE_HEAP_LOAD($231 >> 0 | 0, 1, 0) | 0 | 0;
 $233 = $232 & 255;
 $234 = $DC3;
 $235 = $d1;
 $236 = $234 - $235 | 0;
 $237 = $236 >> 3;
 $238 = $233 + $237 | 0;
 $239 = _clip_8b($238) | 0;
 $240 = $1;
 $241 = $240 + 99 | 0;
 SAFE_HEAP_STORE($241 >> 0 | 0, $239 | 0, 1);
 STACKTOP = sp;
 return;
}

function _WebPRescalerInit($wrk, $src_width, $src_height, $dst, $dst_width, $dst_height, $dst_stride, $num_channels, $work) {
 $wrk = $wrk | 0;
 $src_width = $src_width | 0;
 $src_height = $src_height | 0;
 $dst = $dst | 0;
 $dst_width = $dst_width | 0;
 $dst_height = $dst_height | 0;
 $dst_stride = $dst_stride | 0;
 $num_channels = $num_channels | 0;
 $work = $work | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $182 = 0, $183 = 0, $184 = 0, $185 = 0, $186 = 0, $187 = 0, $188 = 0;
 var $189 = 0, $19 = 0, $190 = 0, $191 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ratio = 0, $x_add = 0, $x_sub = 0, $y_add = 0, $y_sub = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $ratio = sp;
 $0 = $wrk;
 $1 = $src_width;
 $2 = $src_height;
 $3 = $dst;
 $4 = $dst_width;
 $5 = $dst_height;
 $6 = $dst_stride;
 $7 = $num_channels;
 $8 = $work;
 $9 = $1;
 $x_add = $9;
 $10 = $4;
 $x_sub = $10;
 $11 = $2;
 $y_add = $11;
 $12 = $5;
 $y_sub = $12;
 $13 = $1;
 $14 = $4;
 $15 = ($13 | 0) < ($14 | 0);
 $16 = $15 & 1;
 $17 = $0;
 SAFE_HEAP_STORE($17 | 0, $16 | 0, 4);
 $18 = $2;
 $19 = $5;
 $20 = ($18 | 0) < ($19 | 0);
 $21 = $20 & 1;
 $22 = $0;
 $23 = $22 + 4 | 0;
 SAFE_HEAP_STORE($23 | 0, $21 | 0, 4);
 $24 = $1;
 $25 = $0;
 $26 = $25 + 44 | 0;
 SAFE_HEAP_STORE($26 | 0, $24 | 0, 4);
 $27 = $2;
 $28 = $0;
 $29 = $28 + 48 | 0;
 SAFE_HEAP_STORE($29 | 0, $27 | 0, 4);
 $30 = $4;
 $31 = $0;
 $32 = $31 + 52 | 0;
 SAFE_HEAP_STORE($32 | 0, $30 | 0, 4);
 $33 = $5;
 $34 = $0;
 $35 = $34 + 56 | 0;
 SAFE_HEAP_STORE($35 | 0, $33 | 0, 4);
 $36 = $0;
 $37 = $36 + 60 | 0;
 SAFE_HEAP_STORE($37 | 0, 0 | 0, 4);
 $38 = $0;
 $39 = $38 + 64 | 0;
 SAFE_HEAP_STORE($39 | 0, 0 | 0, 4);
 $40 = $3;
 $41 = $0;
 $42 = $41 + 68 | 0;
 SAFE_HEAP_STORE($42 | 0, $40 | 0, 4);
 $43 = $6;
 $44 = $0;
 $45 = $44 + 72 | 0;
 SAFE_HEAP_STORE($45 | 0, $43 | 0, 4);
 $46 = $7;
 $47 = $0;
 $48 = $47 + 8 | 0;
 SAFE_HEAP_STORE($48 | 0, $46 | 0, 4);
 $49 = $0;
 $50 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0;
 $51 = ($50 | 0) != 0;
 $52 = $x_sub;
 $53 = $52 - 1 | 0;
 $54 = $x_add;
 $55 = $51 ? $53 : $54;
 $56 = $0;
 $57 = $56 + 36 | 0;
 SAFE_HEAP_STORE($57 | 0, $55 | 0, 4);
 $58 = $0;
 $59 = SAFE_HEAP_LOAD($58 | 0, 4, 0) | 0 | 0;
 $60 = ($59 | 0) != 0;
 $61 = $x_add;
 $62 = $61 - 1 | 0;
 $63 = $x_sub;
 $64 = $60 ? $62 : $63;
 $65 = $0;
 $66 = $65 + 40 | 0;
 SAFE_HEAP_STORE($66 | 0, $64 | 0, 4);
 $67 = $0;
 $68 = SAFE_HEAP_LOAD($67 | 0, 4, 0) | 0 | 0;
 $69 = ($68 | 0) != 0;
 if (!$69) {
  $70 = $0;
  $71 = $70 + 40 | 0;
  $72 = SAFE_HEAP_LOAD($71 | 0, 4, 0) | 0 | 0;
  $73 = ($72 | 0) < 0;
  $74 = $73 << 31 >> 31;
  $75 = ___udivdi3(0, 1, $72 | 0, $74 | 0) | 0;
  $76 = tempRet0;
  $77 = $0;
  $78 = $77 + 12 | 0;
  SAFE_HEAP_STORE($78 | 0, $75 | 0, 4);
 }
 $79 = $0;
 $80 = $79 + 4 | 0;
 $81 = SAFE_HEAP_LOAD($80 | 0, 4, 0) | 0 | 0;
 $82 = ($81 | 0) != 0;
 $83 = $y_add;
 $84 = $83 - 1 | 0;
 $85 = $82 ? $84 : $83;
 $86 = $0;
 $87 = $86 + 28 | 0;
 SAFE_HEAP_STORE($87 | 0, $85 | 0, 4);
 $88 = $0;
 $89 = $88 + 4 | 0;
 $90 = SAFE_HEAP_LOAD($89 | 0, 4, 0) | 0 | 0;
 $91 = ($90 | 0) != 0;
 $92 = $y_sub;
 $93 = $92 - 1 | 0;
 $94 = $91 ? $93 : $92;
 $95 = $0;
 $96 = $95 + 32 | 0;
 SAFE_HEAP_STORE($96 | 0, $94 | 0, 4);
 $97 = $0;
 $98 = $97 + 4 | 0;
 $99 = SAFE_HEAP_LOAD($98 | 0, 4, 0) | 0 | 0;
 $100 = ($99 | 0) != 0;
 $101 = $0;
 if ($100) {
  $102 = $101 + 32 | 0;
  $103 = SAFE_HEAP_LOAD($102 | 0, 4, 0) | 0 | 0;
  $108 = $103;
 } else {
  $104 = $101 + 28 | 0;
  $105 = SAFE_HEAP_LOAD($104 | 0, 4, 0) | 0 | 0;
  $108 = $105;
 }
 $106 = $0;
 $107 = $106 + 24 | 0;
 SAFE_HEAP_STORE($107 | 0, $108 | 0, 4);
 $109 = $0;
 $110 = $109 + 4 | 0;
 $111 = SAFE_HEAP_LOAD($110 | 0, 4, 0) | 0 | 0;
 $112 = ($111 | 0) != 0;
 if ($112) {
  $167 = $0;
  $168 = $167 + 36 | 0;
  $169 = SAFE_HEAP_LOAD($168 | 0, 4, 0) | 0 | 0;
  $170 = ($169 | 0) < 0;
  $171 = $170 << 31 >> 31;
  $172 = ___udivdi3(0, 1, $169 | 0, $171 | 0) | 0;
  $173 = tempRet0;
  $174 = $0;
  $175 = $174 + 16 | 0;
  SAFE_HEAP_STORE($175 | 0, $172 | 0, 4);
  $176 = $8;
  $177 = $0;
  $178 = $177 + 76 | 0;
  SAFE_HEAP_STORE($178 | 0, $176 | 0, 4);
  $179 = $8;
  $180 = $7;
  $181 = $4;
  $182 = Math_imul($180, $181) | 0;
  $183 = $179 + ($182 << 2) | 0;
  $184 = $0;
  $185 = $184 + 80 | 0;
  SAFE_HEAP_STORE($185 | 0, $183 | 0, 4);
  $186 = $8;
  $187 = $4;
  $188 = $187 << 1;
  $189 = $7;
  $190 = Math_imul($188, $189) | 0;
  $191 = $190 << 2;
  _memset($186 | 0, 0, $191 | 0) | 0;
  _WebPRescalerDspInit();
  STACKTOP = sp;
  return;
 }
 $113 = $5;
 $114 = ($113 | 0) < 0;
 $115 = $114 << 31 >> 31;
 $116 = ___muldi3($113 | 0, $115 | 0, 0, 1) | 0;
 $117 = tempRet0;
 $118 = $0;
 $119 = $118 + 36 | 0;
 $120 = SAFE_HEAP_LOAD($119 | 0, 4, 0) | 0 | 0;
 $121 = $0;
 $122 = $121 + 28 | 0;
 $123 = SAFE_HEAP_LOAD($122 | 0, 4, 0) | 0 | 0;
 $124 = Math_imul($120, $123) | 0;
 $125 = ($124 | 0) < 0;
 $126 = $125 << 31 >> 31;
 $127 = ___udivdi3($116 | 0, $117 | 0, $124 | 0, $126 | 0) | 0;
 $128 = tempRet0;
 $129 = $ratio;
 $130 = $129;
 SAFE_HEAP_STORE($130 | 0, $127 | 0, 4);
 $131 = $129 + 4 | 0;
 $132 = $131;
 SAFE_HEAP_STORE($132 | 0, $128 | 0, 4);
 $133 = $ratio;
 $134 = $133;
 $135 = SAFE_HEAP_LOAD($134 | 0, 4, 0) | 0 | 0;
 $136 = $133 + 4 | 0;
 $137 = $136;
 $138 = SAFE_HEAP_LOAD($137 | 0, 4, 0) | 0 | 0;
 $139 = $ratio;
 $140 = $139;
 $141 = SAFE_HEAP_LOAD($140 | 0, 4, 0) | 0 | 0;
 $142 = $139 + 4 | 0;
 $143 = $142;
 $144 = SAFE_HEAP_LOAD($143 | 0, 4, 0) | 0 | 0;
 $145 = ($135 | 0) != ($141 | 0);
 $146 = ($138 | 0) != 0;
 $147 = $145 | $146;
 if ($147) {
  $148 = $0;
  $149 = $148 + 20 | 0;
  SAFE_HEAP_STORE($149 | 0, 0 | 0, 4);
 } else {
  $150 = $ratio;
  $151 = $150;
  $152 = SAFE_HEAP_LOAD($151 | 0, 4, 0) | 0 | 0;
  $153 = $150 + 4 | 0;
  $154 = $153;
  $155 = SAFE_HEAP_LOAD($154 | 0, 4, 0) | 0 | 0;
  $156 = $0;
  $157 = $156 + 20 | 0;
  SAFE_HEAP_STORE($157 | 0, $152 | 0, 4);
 }
 $158 = $0;
 $159 = $158 + 32 | 0;
 $160 = SAFE_HEAP_LOAD($159 | 0, 4, 0) | 0 | 0;
 $161 = ($160 | 0) < 0;
 $162 = $161 << 31 >> 31;
 $163 = ___udivdi3(0, 1, $160 | 0, $162 | 0) | 0;
 $164 = tempRet0;
 $165 = $0;
 $166 = $165 + 16 | 0;
 SAFE_HEAP_STORE($166 | 0, $163 | 0, 4);
 $176 = $8;
 $177 = $0;
 $178 = $177 + 76 | 0;
 SAFE_HEAP_STORE($178 | 0, $176 | 0, 4);
 $179 = $8;
 $180 = $7;
 $181 = $4;
 $182 = Math_imul($180, $181) | 0;
 $183 = $179 + ($182 << 2) | 0;
 $184 = $0;
 $185 = $184 + 80 | 0;
 SAFE_HEAP_STORE($185 | 0, $183 | 0, 4);
 $186 = $8;
 $187 = $4;
 $188 = $187 << 1;
 $189 = $7;
 $190 = Math_imul($188, $189) | 0;
 $191 = $190 << 2;
 _memset($186 | 0, 0, $191 | 0) | 0;
 _WebPRescalerDspInit();
 STACKTOP = sp;
 return;
}

function _DecodeAlphaData($dec, $data, $width, $height, $last_row) {
 $dec = $dec | 0;
 $data = $data | 0;
 $width = $width | 0;
 $height = $height | 0;
 $last_row = $last_row | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $br = 0, $code = 0, $col = 0, $dist = 0, $dist_code = 0;
 var $dist_symbol = 0, $end = 0, $hdr = 0, $htree_group = 0, $last = 0, $len_code_limit = 0, $length = 0, $length_sym = 0, $mask = 0, $ok = 0, $pos = 0, $row = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $data;
 $2 = $width;
 $3 = $height;
 $4 = $last_row;
 $ok = 1;
 $5 = $0;
 $6 = $5 + 112 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = $2;
 $9 = ($7 | 0) / ($8 | 0) & -1;
 $row = $9;
 $10 = $0;
 $11 = $10 + 112 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = $2;
 $14 = ($12 | 0) % ($13 | 0) & -1;
 $col = $14;
 $15 = $0;
 $16 = $15 + 24 | 0;
 $br = $16;
 $17 = $0;
 $18 = $17 + 120 | 0;
 $hdr = $18;
 $19 = $hdr;
 $20 = $col;
 $21 = $row;
 $22 = _GetHtreeGroupForPos($19, $20, $21) | 0;
 $htree_group = $22;
 $23 = $0;
 $24 = $23 + 112 | 0;
 $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
 $pos = $25;
 $26 = $2;
 $27 = $3;
 $28 = Math_imul($26, $27) | 0;
 $end = $28;
 $29 = $2;
 $30 = $4;
 $31 = Math_imul($29, $30) | 0;
 $last = $31;
 $len_code_limit = 280;
 $32 = $hdr;
 $33 = $32 + 28 | 0;
 $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
 $mask = $34;
 $35 = $htree_group;
 $36 = ($35 | 0) != (0 | 0);
 if (!$36) {
  ___assert_fail(8373 | 0, 7124 | 0, 931, 8512 | 0);
 }
 $37 = $pos;
 $38 = $end;
 $39 = ($37 | 0) < ($38 | 0);
 if (!$39) {
  ___assert_fail(8528 | 0, 7124 | 0, 932, 8512 | 0);
 }
 $40 = $4;
 $41 = $3;
 $42 = ($40 | 0) <= ($41 | 0);
 if (!$42) {
  ___assert_fail(8538 | 0, 7124 | 0, 933, 8512 | 0);
 }
 $43 = $hdr;
 $44 = _Is8bOptimizable($43) | 0;
 $45 = ($44 | 0) != 0;
 if (!$45) {
  ___assert_fail(8557 | 0, 7124 | 0, 934, 8512 | 0);
 }
 while (1) {
  $46 = $br;
  $47 = $46 + 24 | 0;
  $48 = SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 0;
  $49 = ($48 | 0) != 0;
  if ($49) {
   label = 33;
   break;
  }
  $50 = $pos;
  $51 = $last;
  $52 = ($50 | 0) < ($51 | 0);
  if (!$52) {
   label = 33;
   break;
  }
  $53 = $col;
  $54 = $mask;
  $55 = $53 & $54;
  $56 = ($55 | 0) == 0;
  if ($56) {
   $57 = $hdr;
   $58 = $col;
   $59 = $row;
   $60 = _GetHtreeGroupForPos($57, $58, $59) | 0;
   $htree_group = $60;
  }
  $61 = $br;
  _VP8LFillBitWindow($61);
  $62 = $htree_group;
  $63 = SAFE_HEAP_LOAD($62 | 0, 4, 0) | 0 | 0;
  $64 = $br;
  $65 = _ReadSymbol($63, $64) | 0;
  $code = $65;
  $66 = $code;
  $67 = ($66 | 0) < 256;
  $68 = $code;
  if ($67) {
   $69 = $68 & 255;
   $70 = $pos;
   $71 = $1;
   $72 = $71 + $70 | 0;
   SAFE_HEAP_STORE($72 >> 0 | 0, $69 | 0, 1);
   $73 = $pos;
   $74 = $73 + 1 | 0;
   $pos = $74;
   $75 = $col;
   $76 = $75 + 1 | 0;
   $col = $76;
   $77 = $col;
   $78 = $2;
   $79 = ($77 | 0) >= ($78 | 0);
   if ($79) {
    $col = 0;
    $80 = $row;
    $81 = $80 + 1 | 0;
    $row = $81;
    $82 = $row;
    $83 = ($82 | 0) % 16 & -1;
    $84 = ($83 | 0) == 0;
    if ($84) {
     $85 = $0;
     $86 = $row;
     _ExtractPalettedAlphaRows($85, $86);
    }
   }
  } else {
   $87 = ($68 | 0) < 280;
   if (!$87) {
    label = 29;
    break;
   }
   $88 = $code;
   $89 = $88 - 256 | 0;
   $length_sym = $89;
   $90 = $length_sym;
   $91 = $br;
   $92 = _GetCopyLength($90, $91) | 0;
   $length = $92;
   $93 = $htree_group;
   $94 = $93 + 16 | 0;
   $95 = SAFE_HEAP_LOAD($94 | 0, 4, 0) | 0 | 0;
   $96 = $br;
   $97 = _ReadSymbol($95, $96) | 0;
   $dist_symbol = $97;
   $98 = $br;
   _VP8LFillBitWindow($98);
   $99 = $dist_symbol;
   $100 = $br;
   $101 = _GetCopyDistance($99, $100) | 0;
   $dist_code = $101;
   $102 = $2;
   $103 = $dist_code;
   $104 = _PlaneCodeToDistance($102, $103) | 0;
   $dist = $104;
   $105 = $pos;
   $106 = $dist;
   $107 = ($105 | 0) >= ($106 | 0);
   if (!$107) {
    label = 22;
    break;
   }
   $108 = $end;
   $109 = $pos;
   $110 = $108 - $109 | 0;
   $111 = $length;
   $112 = ($110 | 0) >= ($111 | 0);
   if (!$112) {
    label = 22;
    break;
   }
   $113 = $1;
   $114 = $pos;
   $115 = $113 + $114 | 0;
   $116 = $dist;
   $117 = $length;
   _CopyBlock8b($115, $116, $117);
   $118 = $length;
   $119 = $pos;
   $120 = $119 + $118 | 0;
   $pos = $120;
   $121 = $length;
   $122 = $col;
   $123 = $122 + $121 | 0;
   $col = $123;
   while (1) {
    $124 = $col;
    $125 = $2;
    $126 = ($124 | 0) >= ($125 | 0);
    if (!$126) {
     break;
    }
    $127 = $2;
    $128 = $col;
    $129 = $128 - $127 | 0;
    $col = $129;
    $130 = $row;
    $131 = $130 + 1 | 0;
    $row = $131;
    $132 = $row;
    $133 = ($132 | 0) % 16 & -1;
    $134 = ($133 | 0) == 0;
    if (!$134) {
     continue;
    }
    $135 = $0;
    $136 = $row;
    _ExtractPalettedAlphaRows($135, $136);
   }
   $137 = $pos;
   $138 = $last;
   $139 = ($137 | 0) < ($138 | 0);
   if ($139) {
    $140 = $col;
    $141 = $mask;
    $142 = $140 & $141;
    $143 = ($142 | 0) != 0;
    if ($143) {
     $144 = $hdr;
     $145 = $col;
     $146 = $row;
     $147 = _GetHtreeGroupForPos($144, $145, $146) | 0;
     $htree_group = $147;
    }
   }
  }
  $148 = $br;
  $149 = $148 + 24 | 0;
  $150 = SAFE_HEAP_LOAD($149 | 0, 4, 0) | 0 | 0;
  $151 = $br;
  $152 = _VP8LIsEndOfStream($151) | 0;
  $153 = ($150 | 0) == ($152 | 0);
  if (!$153) {
   label = 31;
   break;
  }
 }
 if ((label | 0) == 22) {
  $ok = 0;
 } else if ((label | 0) == 29) {
  $ok = 0;
 } else if ((label | 0) == 31) {
  ___assert_fail(8478 | 0, 7124 | 0, 985, 8512 | 0);
 } else if ((label | 0) == 33) {
  $154 = $0;
  $155 = $row;
  _ExtractPalettedAlphaRows($154, $155);
 }
 $156 = $ok;
 $157 = ($156 | 0) != 0;
 do {
  if ($157) {
   $158 = $br;
   $159 = $158 + 24 | 0;
   $160 = SAFE_HEAP_LOAD($159 | 0, 4, 0) | 0 | 0;
   $161 = ($160 | 0) != 0;
   if ($161) {
    $162 = $pos;
    $163 = $end;
    $164 = ($162 | 0) < ($163 | 0);
    if ($164) {
     break;
    }
   }
   $171 = $pos;
   $172 = $0;
   $173 = $172 + 112 | 0;
   SAFE_HEAP_STORE($173 | 0, $171 | 0, 4);
   $174 = $ok;
   STACKTOP = sp;
   return $174 | 0;
  }
 } while (0);
 $ok = 0;
 $165 = $br;
 $166 = $165 + 24 | 0;
 $167 = SAFE_HEAP_LOAD($166 | 0, 4, 0) | 0 | 0;
 $168 = ($167 | 0) != 0;
 $169 = $168 ? 5 : 3;
 $170 = $0;
 SAFE_HEAP_STORE($170 | 0, $169 | 0, 4);
 $174 = $ok;
 STACKTOP = sp;
 return $174 | 0;
}

function _ParseIntraMode($br, $dec, $mb_x) {
 $br = $br | 0;
 $dec = $dec | 0;
 $mb_x = $mb_x | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $block = 0, $i = 0, $left = 0, $modes = 0, $prob = 0, $top = 0, $x = 0, $y = 0, $ymode = 0, $ymode1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $br;
 $1 = $dec;
 $2 = $mb_x;
 $3 = $1;
 $4 = $3 + 2244 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = $2;
 $7 = $6 << 2;
 $8 = $5 + $7 | 0;
 $top = $8;
 $9 = $1;
 $10 = $9 + 2248 | 0;
 $left = $10;
 $11 = $1;
 $12 = $11 + 2304 | 0;
 $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
 $14 = $2;
 $15 = $13 + ($14 * 800 | 0) | 0;
 $block = $15;
 $16 = $1;
 $17 = $16 + 104 | 0;
 $18 = $17 + 4 | 0;
 $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
 $20 = ($19 | 0) != 0;
 if ($20) {
  $21 = $0;
  $22 = $1;
  $23 = $22 + 904 | 0;
  $24 = SAFE_HEAP_LOAD($23 >> 0 | 0, 1, 0) | 0 | 0;
  $25 = $24 & 255;
  $26 = _VP8GetBit($21, $25) | 0;
  $27 = ($26 | 0) != 0;
  $28 = $0;
  $29 = $1;
  $30 = $29 + 904 | 0;
  if ($27) {
   $35 = $30 + 2 | 0;
   $36 = SAFE_HEAP_LOAD($35 >> 0 | 0, 1, 0) | 0 | 0;
   $37 = $36 & 255;
   $38 = _VP8GetBit($28, $37) | 0;
   $39 = 2 + $38 | 0;
   $41 = $39;
  } else {
   $31 = $30 + 1 | 0;
   $32 = SAFE_HEAP_LOAD($31 >> 0 | 0, 1, 0) | 0 | 0;
   $33 = $32 & 255;
   $34 = _VP8GetBit($28, $33) | 0;
   $41 = $34;
  }
  $40 = $41 & 255;
  $42 = $block;
  $43 = $42 + 798 | 0;
  SAFE_HEAP_STORE($43 >> 0 | 0, $40 | 0, 1);
 } else {
  $44 = $block;
  $45 = $44 + 798 | 0;
  SAFE_HEAP_STORE($45 >> 0 | 0, 0 | 0, 1);
 }
 $46 = $1;
 $47 = $46 + 2236 | 0;
 $48 = SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 0;
 $49 = ($48 | 0) != 0;
 if ($49) {
  $50 = $0;
  $51 = $1;
  $52 = $51 + 2240 | 0;
  $53 = SAFE_HEAP_LOAD($52 >> 0 | 0, 1, 0) | 0 | 0;
  $54 = $53 & 255;
  $55 = _VP8GetBit($50, $54) | 0;
  $56 = $55 & 255;
  $57 = $block;
  $58 = $57 + 797 | 0;
  SAFE_HEAP_STORE($58 >> 0 | 0, $56 | 0, 1);
 }
 $59 = $0;
 $60 = _VP8GetBit($59, 145) | 0;
 $61 = ($60 | 0) != 0;
 $62 = $61 ^ 1;
 $63 = $62 & 1;
 $64 = $63 & 255;
 $65 = $block;
 $66 = $65 + 768 | 0;
 SAFE_HEAP_STORE($66 >> 0 | 0, $64 | 0, 1);
 $67 = $block;
 $68 = $67 + 768 | 0;
 $69 = SAFE_HEAP_LOAD($68 >> 0 | 0, 1, 0) | 0 | 0;
 $70 = $69 << 24 >> 24 != 0;
 L12 : do {
  if ($70) {
   $92 = $block;
   $93 = $92 + 769 | 0;
   $modes = $93;
   $y = 0;
   while (1) {
    $94 = $y;
    $95 = ($94 | 0) < 4;
    if (!$95) {
     break L12;
    }
    $96 = $y;
    $97 = $left;
    $98 = $97 + $96 | 0;
    $99 = SAFE_HEAP_LOAD($98 >> 0 | 0, 1, 0) | 0 | 0;
    $100 = $99 & 255;
    $ymode1 = $100;
    $x = 0;
    while (1) {
     $101 = $x;
     $102 = ($101 | 0) < 4;
     if (!$102) {
      break;
     }
     $103 = $ymode1;
     $104 = $x;
     $105 = $top;
     $106 = $105 + $104 | 0;
     $107 = SAFE_HEAP_LOAD($106 >> 0 | 0, 1, 0) | 0 | 0;
     $108 = $107 & 255;
     $109 = 5665 + ($108 * 90 | 0) | 0;
     $110 = $109 + ($103 * 9 | 0) | 0;
     $prob = $110;
     $111 = $0;
     $112 = $prob;
     $113 = SAFE_HEAP_LOAD($112 >> 0 | 0, 1, 0) | 0 | 0;
     $114 = $113 & 255;
     $115 = _VP8GetBit($111, $114) | 0;
     $116 = 6565 + $115 | 0;
     $117 = SAFE_HEAP_LOAD($116 >> 0 | 0, 1, 0) | 0 | 0;
     $118 = $117 << 24 >> 24;
     $i = $118;
     while (1) {
      $119 = $i;
      $120 = ($119 | 0) > 0;
      $121 = $i;
      if (!$120) {
       break;
      }
      $122 = $121 << 1;
      $123 = $0;
      $124 = $i;
      $125 = $prob;
      $126 = $125 + $124 | 0;
      $127 = SAFE_HEAP_LOAD($126 >> 0 | 0, 1, 0) | 0 | 0;
      $128 = $127 & 255;
      $129 = _VP8GetBit($123, $128) | 0;
      $130 = $122 + $129 | 0;
      $131 = 6565 + $130 | 0;
      $132 = SAFE_HEAP_LOAD($131 >> 0 | 0, 1, 0) | 0 | 0;
      $133 = $132 << 24 >> 24;
      $i = $133;
     }
     $134 = 0 - $121 | 0;
     $ymode1 = $134;
     $135 = $ymode1;
     $136 = $135 & 255;
     $137 = $x;
     $138 = $top;
     $139 = $138 + $137 | 0;
     SAFE_HEAP_STORE($139 >> 0 | 0, $136 | 0, 1);
     $140 = $x;
     $141 = $140 + 1 | 0;
     $x = $141;
    }
    $142 = $modes;
    $143 = $top;
    {}
    SAFE_HEAP_STORE($142 >> 0 | 0, SAFE_HEAP_LOAD($143 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
    SAFE_HEAP_STORE($142 + 1 >> 0 | 0, SAFE_HEAP_LOAD($143 + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
    SAFE_HEAP_STORE($142 + 2 >> 0 | 0, SAFE_HEAP_LOAD($143 + 2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
    SAFE_HEAP_STORE($142 + 3 >> 0 | 0, SAFE_HEAP_LOAD($143 + 3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
    $144 = $modes;
    $145 = $144 + 4 | 0;
    $modes = $145;
    $146 = $ymode1;
    $147 = $146 & 255;
    $148 = $y;
    $149 = $left;
    $150 = $149 + $148 | 0;
    SAFE_HEAP_STORE($150 >> 0 | 0, $147 | 0, 1);
    $151 = $y;
    $152 = $151 + 1 | 0;
    $y = $152;
   }
  } else {
   $71 = $0;
   $72 = _VP8GetBit($71, 156) | 0;
   $73 = ($72 | 0) != 0;
   $74 = $0;
   if ($73) {
    $75 = _VP8GetBit($74, 128) | 0;
    $76 = ($75 | 0) != 0;
    $77 = $76 ? 1 : 3;
    $81 = $77;
   } else {
    $78 = _VP8GetBit($74, 163) | 0;
    $79 = ($78 | 0) != 0;
    $80 = $79 ? 2 : 0;
    $81 = $80;
   }
   $ymode = $81;
   $82 = $ymode;
   $83 = $82 & 255;
   $84 = $block;
   $85 = $84 + 769 | 0;
   SAFE_HEAP_STORE($85 >> 0 | 0, $83 | 0, 1);
   $86 = $top;
   $87 = $ymode;
   $88 = $87 & 255;
   _memset($86 | 0, $88 | 0, 4) | 0;
   $89 = $left;
   $90 = $ymode;
   $91 = $90 & 255;
   _memset($89 | 0, $91 | 0, 4) | 0;
  }
 } while (0);
 $153 = $0;
 $154 = _VP8GetBit($153, 142) | 0;
 $155 = ($154 | 0) != 0;
 if (!$155) {
  $164 = 0;
  $163 = $164 & 255;
  $165 = $block;
  $166 = $165 + 785 | 0;
  SAFE_HEAP_STORE($166 >> 0 | 0, $163 | 0, 1);
  STACKTOP = sp;
  return;
 }
 $156 = $0;
 $157 = _VP8GetBit($156, 114) | 0;
 $158 = ($157 | 0) != 0;
 if (!$158) {
  $164 = 2;
  $163 = $164 & 255;
  $165 = $block;
  $166 = $165 + 785 | 0;
  SAFE_HEAP_STORE($166 >> 0 | 0, $163 | 0, 1);
  STACKTOP = sp;
  return;
 }
 $159 = $0;
 $160 = _VP8GetBit($159, 183) | 0;
 $161 = ($160 | 0) != 0;
 $162 = $161 ? 1 : 3;
 $164 = $162;
 $163 = $164 & 255;
 $165 = $block;
 $166 = $165 + 785 | 0;
 SAFE_HEAP_STORE($166 >> 0 | 0, $163 | 0, 1);
 STACKTOP = sp;
 return;
}

function _DoFilter($dec, $mb_x, $mb_y) {
 $dec = $dec | 0;
 $mb_x = $mb_x | 0;
 $mb_y = $mb_y | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $cache_id = 0, $ctx = 0, $f_info = 0, $hev_thresh = 0, $ilevel = 0, $limit = 0, $u_dst = 0, $uv_bps = 0, $v_dst = 0, $y_bps = 0, $y_dst = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $mb_x;
 $2 = $mb_y;
 $3 = $0;
 $4 = $3 + 160 | 0;
 $ctx = $4;
 $5 = $ctx;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $cache_id = $6;
 $7 = $0;
 $8 = $7 + 2280 | 0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $y_bps = $9;
 $10 = $ctx;
 $11 = $10 + 12 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = $1;
 $14 = $12 + ($13 << 2) | 0;
 $f_info = $14;
 $15 = $0;
 $16 = $15 + 2268 | 0;
 $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
 $18 = $cache_id;
 $19 = $18 << 4;
 $20 = $y_bps;
 $21 = Math_imul($19, $20) | 0;
 $22 = $17 + $21 | 0;
 $23 = $1;
 $24 = $23 << 4;
 $25 = $22 + $24 | 0;
 $y_dst = $25;
 $26 = $f_info;
 $27 = $26 + 1 | 0;
 $28 = SAFE_HEAP_LOAD($27 >> 0 | 0, 1, 0) | 0 | 0;
 $29 = $28 & 255;
 $ilevel = $29;
 $30 = $f_info;
 $31 = SAFE_HEAP_LOAD($30 >> 0 | 0, 1, 0) | 0 | 0;
 $32 = $31 & 255;
 $limit = $32;
 $33 = $limit;
 $34 = ($33 | 0) == 0;
 if ($34) {
  STACKTOP = sp;
  return;
 }
 $35 = $limit;
 $36 = ($35 | 0) >= 3;
 if (!$36) {
  ___assert_fail(2799 | 0, 2535 | 0, 214, 2810 | 0);
 }
 $37 = $0;
 $38 = $37 + 2308 | 0;
 $39 = SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0;
 $40 = ($39 | 0) == 1;
 if ($40) {
  $41 = $1;
  $42 = ($41 | 0) > 0;
  if ($42) {
   $43 = SAFE_HEAP_LOAD(476 | 0, 4, 0) | 0 | 0;
   $44 = $y_dst;
   $45 = $y_bps;
   $46 = $limit;
   $47 = $46 + 4 | 0;
   FUNCTION_TABLE_viii[(SAFE_FT_MASK($43 | 0, 255 | 0) | 0) & 255]($44, $45, $47);
  }
  $48 = $f_info;
  $49 = $48 + 2 | 0;
  $50 = SAFE_HEAP_LOAD($49 >> 0 | 0, 1, 0) | 0 | 0;
  $51 = $50 << 24 >> 24 != 0;
  if ($51) {
   $52 = SAFE_HEAP_LOAD(484 | 0, 4, 0) | 0 | 0;
   $53 = $y_dst;
   $54 = $y_bps;
   $55 = $limit;
   FUNCTION_TABLE_viii[(SAFE_FT_MASK($52 | 0, 255 | 0) | 0) & 255]($53, $54, $55);
  }
  $56 = $2;
  $57 = ($56 | 0) > 0;
  if ($57) {
   $58 = SAFE_HEAP_LOAD(472 | 0, 4, 0) | 0 | 0;
   $59 = $y_dst;
   $60 = $y_bps;
   $61 = $limit;
   $62 = $61 + 4 | 0;
   FUNCTION_TABLE_viii[(SAFE_FT_MASK($58 | 0, 255 | 0) | 0) & 255]($59, $60, $62);
  }
  $63 = $f_info;
  $64 = $63 + 2 | 0;
  $65 = SAFE_HEAP_LOAD($64 >> 0 | 0, 1, 0) | 0 | 0;
  $66 = $65 << 24 >> 24 != 0;
  if (!$66) {
   STACKTOP = sp;
   return;
  }
  $67 = SAFE_HEAP_LOAD(480 | 0, 4, 0) | 0 | 0;
  $68 = $y_dst;
  $69 = $y_bps;
  $70 = $limit;
  FUNCTION_TABLE_viii[(SAFE_FT_MASK($67 | 0, 255 | 0) | 0) & 255]($68, $69, $70);
  STACKTOP = sp;
  return;
 } else {
  $71 = $0;
  $72 = $71 + 2284 | 0;
  $73 = SAFE_HEAP_LOAD($72 | 0, 4, 0) | 0 | 0;
  $uv_bps = $73;
  $74 = $0;
  $75 = $74 + 2272 | 0;
  $76 = SAFE_HEAP_LOAD($75 | 0, 4, 0) | 0 | 0;
  $77 = $cache_id;
  $78 = $77 << 3;
  $79 = $uv_bps;
  $80 = Math_imul($78, $79) | 0;
  $81 = $76 + $80 | 0;
  $82 = $1;
  $83 = $82 << 3;
  $84 = $81 + $83 | 0;
  $u_dst = $84;
  $85 = $0;
  $86 = $85 + 2276 | 0;
  $87 = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0;
  $88 = $cache_id;
  $89 = $88 << 3;
  $90 = $uv_bps;
  $91 = Math_imul($89, $90) | 0;
  $92 = $87 + $91 | 0;
  $93 = $1;
  $94 = $93 << 3;
  $95 = $92 + $94 | 0;
  $v_dst = $95;
  $96 = $f_info;
  $97 = $96 + 3 | 0;
  $98 = SAFE_HEAP_LOAD($97 >> 0 | 0, 1, 0) | 0 | 0;
  $99 = $98 & 255;
  $hev_thresh = $99;
  $100 = $1;
  $101 = ($100 | 0) > 0;
  if ($101) {
   $102 = SAFE_HEAP_LOAD(444 | 0, 4, 0) | 0 | 0;
   $103 = $y_dst;
   $104 = $y_bps;
   $105 = $limit;
   $106 = $105 + 4 | 0;
   $107 = $ilevel;
   $108 = $hev_thresh;
   FUNCTION_TABLE_viiiii[(SAFE_FT_MASK($102 | 0, 255 | 0) | 0) & 255]($103, $104, $106, $107, $108);
   $109 = SAFE_HEAP_LOAD(452 | 0, 4, 0) | 0 | 0;
   $110 = $u_dst;
   $111 = $v_dst;
   $112 = $uv_bps;
   $113 = $limit;
   $114 = $113 + 4 | 0;
   $115 = $ilevel;
   $116 = $hev_thresh;
   FUNCTION_TABLE_viiiiii[(SAFE_FT_MASK($109 | 0, 127 | 0) | 0) & 127]($110, $111, $112, $114, $115, $116);
  }
  $117 = $f_info;
  $118 = $117 + 2 | 0;
  $119 = SAFE_HEAP_LOAD($118 >> 0 | 0, 1, 0) | 0 | 0;
  $120 = $119 << 24 >> 24 != 0;
  if ($120) {
   $121 = SAFE_HEAP_LOAD(460 | 0, 4, 0) | 0 | 0;
   $122 = $y_dst;
   $123 = $y_bps;
   $124 = $limit;
   $125 = $ilevel;
   $126 = $hev_thresh;
   FUNCTION_TABLE_viiiii[(SAFE_FT_MASK($121 | 0, 255 | 0) | 0) & 255]($122, $123, $124, $125, $126);
   $127 = SAFE_HEAP_LOAD(468 | 0, 4, 0) | 0 | 0;
   $128 = $u_dst;
   $129 = $v_dst;
   $130 = $uv_bps;
   $131 = $limit;
   $132 = $ilevel;
   $133 = $hev_thresh;
   FUNCTION_TABLE_viiiiii[(SAFE_FT_MASK($127 | 0, 127 | 0) | 0) & 127]($128, $129, $130, $131, $132, $133);
  }
  $134 = $2;
  $135 = ($134 | 0) > 0;
  if ($135) {
   $136 = SAFE_HEAP_LOAD(440 | 0, 4, 0) | 0 | 0;
   $137 = $y_dst;
   $138 = $y_bps;
   $139 = $limit;
   $140 = $139 + 4 | 0;
   $141 = $ilevel;
   $142 = $hev_thresh;
   FUNCTION_TABLE_viiiii[(SAFE_FT_MASK($136 | 0, 255 | 0) | 0) & 255]($137, $138, $140, $141, $142);
   $143 = SAFE_HEAP_LOAD(448 | 0, 4, 0) | 0 | 0;
   $144 = $u_dst;
   $145 = $v_dst;
   $146 = $uv_bps;
   $147 = $limit;
   $148 = $147 + 4 | 0;
   $149 = $ilevel;
   $150 = $hev_thresh;
   FUNCTION_TABLE_viiiiii[(SAFE_FT_MASK($143 | 0, 127 | 0) | 0) & 127]($144, $145, $146, $148, $149, $150);
  }
  $151 = $f_info;
  $152 = $151 + 2 | 0;
  $153 = SAFE_HEAP_LOAD($152 >> 0 | 0, 1, 0) | 0 | 0;
  $154 = $153 << 24 >> 24 != 0;
  if (!$154) {
   STACKTOP = sp;
   return;
  }
  $155 = SAFE_HEAP_LOAD(456 | 0, 4, 0) | 0 | 0;
  $156 = $y_dst;
  $157 = $y_bps;
  $158 = $limit;
  $159 = $ilevel;
  $160 = $hev_thresh;
  FUNCTION_TABLE_viiiii[(SAFE_FT_MASK($155 | 0, 255 | 0) | 0) & 255]($156, $157, $158, $159, $160);
  $161 = SAFE_HEAP_LOAD(464 | 0, 4, 0) | 0 | 0;
  $162 = $u_dst;
  $163 = $v_dst;
  $164 = $uv_bps;
  $165 = $limit;
  $166 = $ilevel;
  $167 = $hev_thresh;
  FUNCTION_TABLE_viiiiii[(SAFE_FT_MASK($161 | 0, 127 | 0) | 0) & 127]($162, $163, $164, $165, $166, $167);
  STACKTOP = sp;
  return;
 }
}

function _EmitFancyRGB($io, $p) {
 $io = $io | 0;
 $p = $p | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $178 = 0, $179 = 0, $18 = 0, $180 = 0, $181 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $buf = 0, $cur_u = 0, $cur_v = 0, $cur_y = 0, $dst = 0, $mb_w = 0, $num_lines_out = 0, $top_u = 0, $top_v = 0, $upsample = 0, $uv_w = 0, $y = 0, $y_end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $io;
 $1 = $p;
 $2 = $0;
 $3 = $2 + 16 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $num_lines_out = $4;
 $5 = $1;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = $6 + 16 | 0;
 $buf = $7;
 $8 = $buf;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $10 = $0;
 $11 = $10 + 8 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = $buf;
 $14 = $13 + 4 | 0;
 $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
 $16 = Math_imul($12, $15) | 0;
 $17 = $9 + $16 | 0;
 $dst = $17;
 $18 = $1;
 $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
 $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
 $21 = 764 + ($20 << 2) | 0;
 $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
 $upsample = $22;
 $23 = $0;
 $24 = $23 + 20 | 0;
 $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
 $cur_y = $25;
 $26 = $0;
 $27 = $26 + 24 | 0;
 $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
 $cur_u = $28;
 $29 = $0;
 $30 = $29 + 28 | 0;
 $31 = SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0;
 $cur_v = $31;
 $32 = $1;
 $33 = $32 + 8 | 0;
 $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
 $top_u = $34;
 $35 = $1;
 $36 = $35 + 12 | 0;
 $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
 $top_v = $37;
 $38 = $0;
 $39 = $38 + 8 | 0;
 $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
 $y = $40;
 $41 = $0;
 $42 = $41 + 8 | 0;
 $43 = SAFE_HEAP_LOAD($42 | 0, 4, 0) | 0 | 0;
 $44 = $0;
 $45 = $44 + 16 | 0;
 $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
 $47 = $43 + $46 | 0;
 $y_end = $47;
 $48 = $0;
 $49 = $48 + 12 | 0;
 $50 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0;
 $mb_w = $50;
 $51 = $mb_w;
 $52 = $51 + 1 | 0;
 $53 = ($52 | 0) / 2 & -1;
 $uv_w = $53;
 $54 = $y;
 $55 = ($54 | 0) == 0;
 $56 = $upsample;
 if ($55) {
  $57 = $cur_y;
  $58 = $cur_u;
  $59 = $cur_v;
  $60 = $cur_u;
  $61 = $cur_v;
  $62 = $dst;
  $63 = $mb_w;
  FUNCTION_TABLE_viiiiiiiii[(SAFE_FT_MASK($56 | 0, 127 | 0) | 0) & 127]($57, 0, $58, $59, $60, $61, $62, 0, $63);
 } else {
  $64 = $1;
  $65 = $64 + 4 | 0;
  $66 = SAFE_HEAP_LOAD($65 | 0, 4, 0) | 0 | 0;
  $67 = $cur_y;
  $68 = $top_u;
  $69 = $top_v;
  $70 = $cur_u;
  $71 = $cur_v;
  $72 = $dst;
  $73 = $buf;
  $74 = $73 + 4 | 0;
  $75 = SAFE_HEAP_LOAD($74 | 0, 4, 0) | 0 | 0;
  $76 = 0 - $75 | 0;
  $77 = $72 + $76 | 0;
  $78 = $dst;
  $79 = $mb_w;
  FUNCTION_TABLE_viiiiiiiii[(SAFE_FT_MASK($56 | 0, 127 | 0) | 0) & 127]($66, $67, $68, $69, $70, $71, $77, $78, $79);
  $80 = $num_lines_out;
  $81 = $80 + 1 | 0;
  $num_lines_out = $81;
 }
 while (1) {
  $82 = $y;
  $83 = $82 + 2 | 0;
  $84 = $y_end;
  $85 = ($83 | 0) < ($84 | 0);
  if (!$85) {
   break;
  }
  $86 = $cur_u;
  $top_u = $86;
  $87 = $cur_v;
  $top_v = $87;
  $88 = $0;
  $89 = $88 + 36 | 0;
  $90 = SAFE_HEAP_LOAD($89 | 0, 4, 0) | 0 | 0;
  $91 = $cur_u;
  $92 = $91 + $90 | 0;
  $cur_u = $92;
  $93 = $0;
  $94 = $93 + 36 | 0;
  $95 = SAFE_HEAP_LOAD($94 | 0, 4, 0) | 0 | 0;
  $96 = $cur_v;
  $97 = $96 + $95 | 0;
  $cur_v = $97;
  $98 = $buf;
  $99 = $98 + 4 | 0;
  $100 = SAFE_HEAP_LOAD($99 | 0, 4, 0) | 0 | 0;
  $101 = $100 << 1;
  $102 = $dst;
  $103 = $102 + $101 | 0;
  $dst = $103;
  $104 = $0;
  $105 = $104 + 32 | 0;
  $106 = SAFE_HEAP_LOAD($105 | 0, 4, 0) | 0 | 0;
  $107 = $106 << 1;
  $108 = $cur_y;
  $109 = $108 + $107 | 0;
  $cur_y = $109;
  $110 = $upsample;
  $111 = $cur_y;
  $112 = $0;
  $113 = $112 + 32 | 0;
  $114 = SAFE_HEAP_LOAD($113 | 0, 4, 0) | 0 | 0;
  $115 = 0 - $114 | 0;
  $116 = $111 + $115 | 0;
  $117 = $cur_y;
  $118 = $top_u;
  $119 = $top_v;
  $120 = $cur_u;
  $121 = $cur_v;
  $122 = $dst;
  $123 = $buf;
  $124 = $123 + 4 | 0;
  $125 = SAFE_HEAP_LOAD($124 | 0, 4, 0) | 0 | 0;
  $126 = 0 - $125 | 0;
  $127 = $122 + $126 | 0;
  $128 = $dst;
  $129 = $mb_w;
  FUNCTION_TABLE_viiiiiiiii[(SAFE_FT_MASK($110 | 0, 127 | 0) | 0) & 127]($116, $117, $118, $119, $120, $121, $127, $128, $129);
  $130 = $y;
  $131 = $130 + 2 | 0;
  $y = $131;
 }
 $132 = $0;
 $133 = $132 + 32 | 0;
 $134 = SAFE_HEAP_LOAD($133 | 0, 4, 0) | 0 | 0;
 $135 = $cur_y;
 $136 = $135 + $134 | 0;
 $cur_y = $136;
 $137 = $0;
 $138 = $137 + 84 | 0;
 $139 = SAFE_HEAP_LOAD($138 | 0, 4, 0) | 0 | 0;
 $140 = $y_end;
 $141 = $139 + $140 | 0;
 $142 = $0;
 $143 = $142 + 88 | 0;
 $144 = SAFE_HEAP_LOAD($143 | 0, 4, 0) | 0 | 0;
 $145 = ($141 | 0) < ($144 | 0);
 if ($145) {
  $146 = $1;
  $147 = $146 + 4 | 0;
  $148 = SAFE_HEAP_LOAD($147 | 0, 4, 0) | 0 | 0;
  $149 = $cur_y;
  $150 = $mb_w;
  $151 = $150;
  _memcpy($148 | 0, $149 | 0, $151 | 0) | 0;
  $152 = $1;
  $153 = $152 + 8 | 0;
  $154 = SAFE_HEAP_LOAD($153 | 0, 4, 0) | 0 | 0;
  $155 = $cur_u;
  $156 = $uv_w;
  $157 = $156;
  _memcpy($154 | 0, $155 | 0, $157 | 0) | 0;
  $158 = $1;
  $159 = $158 + 12 | 0;
  $160 = SAFE_HEAP_LOAD($159 | 0, 4, 0) | 0 | 0;
  $161 = $cur_v;
  $162 = $uv_w;
  $163 = $162;
  _memcpy($160 | 0, $161 | 0, $163 | 0) | 0;
  $164 = $num_lines_out;
  $165 = $164 + -1 | 0;
  $num_lines_out = $165;
  $181 = $num_lines_out;
  STACKTOP = sp;
  return $181 | 0;
 }
 $166 = $y_end;
 $167 = $166 & 1;
 $168 = ($167 | 0) != 0;
 if ($168) {
  $181 = $num_lines_out;
  STACKTOP = sp;
  return $181 | 0;
 }
 $169 = $upsample;
 $170 = $cur_y;
 $171 = $cur_u;
 $172 = $cur_v;
 $173 = $cur_u;
 $174 = $cur_v;
 $175 = $dst;
 $176 = $buf;
 $177 = $176 + 4 | 0;
 $178 = SAFE_HEAP_LOAD($177 | 0, 4, 0) | 0 | 0;
 $179 = $175 + $178 | 0;
 $180 = $mb_w;
 FUNCTION_TABLE_viiiiiiiii[(SAFE_FT_MASK($169 | 0, 127 | 0) | 0) & 127]($170, 0, $171, $172, $173, $174, $179, 0, $180);
 $181 = $num_lines_out;
 STACKTOP = sp;
 return $181 | 0;
}

function _WebPIoInitFromOptions($options, $io, $src_colorspace) {
 $options = $options | 0;
 $io = $io | 0;
 $src_colorspace = $src_colorspace | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $H = 0;
 var $W = 0, $h = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $scaled_height = 0, $scaled_width = 0, $w = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $scaled_width = sp + 4 | 0;
 $scaled_height = sp;
 $1 = $options;
 $2 = $io;
 $3 = $src_colorspace;
 $4 = $2;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $W = $5;
 $6 = $2;
 $7 = $6 + 4 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $H = $8;
 $x = 0;
 $y = 0;
 $9 = $W;
 $w = $9;
 $10 = $H;
 $h = $10;
 $11 = $1;
 $12 = ($11 | 0) != (0 | 0);
 if ($12) {
  $13 = $1;
  $14 = $13 + 8 | 0;
  $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
  $16 = ($15 | 0) > 0;
  $18 = $16;
 } else {
  $18 = 0;
 }
 $17 = $18 & 1;
 $19 = $2;
 $20 = $19 + 72 | 0;
 SAFE_HEAP_STORE($20 | 0, $17 | 0, 4);
 $21 = $2;
 $22 = $21 + 72 | 0;
 $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
 $24 = ($23 | 0) != 0;
 do {
  if ($24) {
   $25 = $1;
   $26 = $25 + 20 | 0;
   $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
   $w = $27;
   $28 = $1;
   $29 = $28 + 24 | 0;
   $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
   $h = $30;
   $31 = $1;
   $32 = $31 + 12 | 0;
   $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
   $x = $33;
   $34 = $1;
   $35 = $34 + 16 | 0;
   $36 = SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0;
   $y = $36;
   $37 = $3;
   $38 = _WebPIsRGBMode146($37) | 0;
   $39 = ($38 | 0) != 0;
   if (!$39) {
    $40 = $x;
    $41 = $40 & -2;
    $x = $41;
    $42 = $y;
    $43 = $42 & -2;
    $y = $43;
   }
   $44 = $x;
   $45 = ($44 | 0) < 0;
   $46 = $y;
   $47 = ($46 | 0) < 0;
   $or$cond = $45 | $47;
   $48 = $w;
   $49 = ($48 | 0) <= 0;
   $or$cond3 = $or$cond | $49;
   $50 = $h;
   $51 = ($50 | 0) <= 0;
   $or$cond5 = $or$cond3 | $51;
   if (!$or$cond5) {
    $52 = $x;
    $53 = $w;
    $54 = $52 + $53 | 0;
    $55 = $W;
    $56 = ($54 | 0) > ($55 | 0);
    if (!$56) {
     $57 = $y;
     $58 = $h;
     $59 = $57 + $58 | 0;
     $60 = $H;
     $61 = ($59 | 0) > ($60 | 0);
     if (!$61) {
      break;
     }
    }
   }
   $0 = 0;
   $158 = $0;
   STACKTOP = sp;
   return $158 | 0;
  }
 } while (0);
 $62 = $x;
 $63 = $2;
 $64 = $63 + 76 | 0;
 SAFE_HEAP_STORE($64 | 0, $62 | 0, 4);
 $65 = $y;
 $66 = $2;
 $67 = $66 + 84 | 0;
 SAFE_HEAP_STORE($67 | 0, $65 | 0, 4);
 $68 = $x;
 $69 = $w;
 $70 = $68 + $69 | 0;
 $71 = $2;
 $72 = $71 + 80 | 0;
 SAFE_HEAP_STORE($72 | 0, $70 | 0, 4);
 $73 = $y;
 $74 = $h;
 $75 = $73 + $74 | 0;
 $76 = $2;
 $77 = $76 + 88 | 0;
 SAFE_HEAP_STORE($77 | 0, $75 | 0, 4);
 $78 = $w;
 $79 = $2;
 $80 = $79 + 12 | 0;
 SAFE_HEAP_STORE($80 | 0, $78 | 0, 4);
 $81 = $h;
 $82 = $2;
 $83 = $82 + 16 | 0;
 SAFE_HEAP_STORE($83 | 0, $81 | 0, 4);
 $84 = $1;
 $85 = ($84 | 0) != (0 | 0);
 if ($85) {
  $86 = $1;
  $87 = $86 + 28 | 0;
  $88 = SAFE_HEAP_LOAD($87 | 0, 4, 0) | 0 | 0;
  $89 = ($88 | 0) > 0;
  $91 = $89;
 } else {
  $91 = 0;
 }
 $90 = $91 & 1;
 $92 = $2;
 $93 = $92 + 92 | 0;
 SAFE_HEAP_STORE($93 | 0, $90 | 0, 4);
 $94 = $2;
 $95 = $94 + 92 | 0;
 $96 = SAFE_HEAP_LOAD($95 | 0, 4, 0) | 0 | 0;
 $97 = ($96 | 0) != 0;
 do {
  if ($97) {
   $98 = $1;
   $99 = $98 + 32 | 0;
   $100 = SAFE_HEAP_LOAD($99 | 0, 4, 0) | 0 | 0;
   SAFE_HEAP_STORE($scaled_width | 0, $100 | 0, 4);
   $101 = $1;
   $102 = $101 + 36 | 0;
   $103 = SAFE_HEAP_LOAD($102 | 0, 4, 0) | 0 | 0;
   SAFE_HEAP_STORE($scaled_height | 0, $103 | 0, 4);
   $104 = $w;
   $105 = $h;
   $106 = _WebPRescalerGetScaledDimensions($104, $105, $scaled_width, $scaled_height) | 0;
   $107 = ($106 | 0) != 0;
   if ($107) {
    $108 = SAFE_HEAP_LOAD($scaled_width | 0, 4, 0) | 0 | 0;
    $109 = $2;
    $110 = $109 + 96 | 0;
    SAFE_HEAP_STORE($110 | 0, $108 | 0, 4);
    $111 = SAFE_HEAP_LOAD($scaled_height | 0, 4, 0) | 0 | 0;
    $112 = $2;
    $113 = $112 + 100 | 0;
    SAFE_HEAP_STORE($113 | 0, $111 | 0, 4);
    break;
   }
   $0 = 0;
   $158 = $0;
   STACKTOP = sp;
   return $158 | 0;
  }
 } while (0);
 $114 = $1;
 $115 = ($114 | 0) != (0 | 0);
 if ($115) {
  $116 = $1;
  $117 = SAFE_HEAP_LOAD($116 | 0, 4, 0) | 0 | 0;
  $118 = ($117 | 0) != 0;
  $120 = $118;
 } else {
  $120 = 0;
 }
 $119 = $120 & 1;
 $121 = $2;
 $122 = $121 + 68 | 0;
 SAFE_HEAP_STORE($122 | 0, $119 | 0, 4);
 $123 = $1;
 $124 = ($123 | 0) == (0 | 0);
 if ($124) {
  $131 = 1;
 } else {
  $125 = $1;
  $126 = $125 + 4 | 0;
  $127 = SAFE_HEAP_LOAD($126 | 0, 4, 0) | 0 | 0;
  $128 = ($127 | 0) != 0;
  $129 = $128 ^ 1;
  $131 = $129;
 }
 $130 = $131 & 1;
 $132 = $2;
 $133 = $132 + 56 | 0;
 SAFE_HEAP_STORE($133 | 0, $130 | 0, 4);
 $134 = $2;
 $135 = $134 + 92 | 0;
 $136 = SAFE_HEAP_LOAD($135 | 0, 4, 0) | 0 | 0;
 $137 = ($136 | 0) != 0;
 if ($137) {
  $138 = $2;
  $139 = $138 + 96 | 0;
  $140 = SAFE_HEAP_LOAD($139 | 0, 4, 0) | 0 | 0;
  $141 = $W;
  $142 = $141 * 3 | 0;
  $143 = ($142 | 0) / 4 & -1;
  $144 = ($140 | 0) < ($143 | 0);
  if ($144) {
   $145 = $2;
   $146 = $145 + 100 | 0;
   $147 = SAFE_HEAP_LOAD($146 | 0, 4, 0) | 0 | 0;
   $148 = $H;
   $149 = $148 * 3 | 0;
   $150 = ($149 | 0) / 4 & -1;
   $151 = ($147 | 0) < ($150 | 0);
   $153 = $151;
  } else {
   $153 = 0;
  }
  $152 = $153 & 1;
  $154 = $2;
  $155 = $154 + 68 | 0;
  SAFE_HEAP_STORE($155 | 0, $152 | 0, 4);
  $156 = $2;
  $157 = $156 + 56 | 0;
  SAFE_HEAP_STORE($157 | 0, 0 | 0, 4);
 }
 $0 = 1;
 $158 = $0;
 STACKTOP = sp;
 return $158 | 0;
}

function _decodeWebP($buf, $length) {
 $buf = $buf | 0;
 $length = $length | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0.0, $34 = 0.0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0.0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0.0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0.0, $62 = 0.0, $63 = 0.0, $64 = 0.0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0.0, $74 = 0.0, $75 = 0.0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0.0, $85 = 0.0, $86 = 0.0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $aFraction = 0.0, $b = 0.0, $b3 = 0, $byteCount = 0, $flip = 0, $g = 0.0, $height = 0, $i = 0, $i4 = 0, $image = 0, $or$cond = 0, $r = 0.0, $r2 = 0, $stride = 0, $stride1 = 0, $webp = 0;
 var $webpsize = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $width = sp + 44 | 0;
 $height = sp + 40 | 0;
 $1 = $buf;
 $2 = $length;
 $byteCount = 0;
 $3 = $1;
 $webp = $3;
 $4 = $2;
 $webpsize = $4;
 $flip = 0;
 $5 = SAFE_HEAP_LOAD(52 | 0, 4, 0) | 0 | 0;
 $6 = SAFE_HEAP_LOAD(56 | 0, 4, 0) | 0 | 0;
 $7 = Math_imul($5, $6) | 0;
 $8 = $7 << 2;
 $byteCount = $8;
 $9 = $webp;
 $10 = $webpsize;
 $11 = _WebPDecodeRGBA($9, $10, $width, $height) | 0;
 $image = $11;
 $12 = SAFE_HEAP_LOAD($width | 0, 4, 0) | 0 | 0;
 $13 = SAFE_HEAP_LOAD(52 | 0, 4, 0) | 0 | 0;
 $14 = ($12 | 0) != ($13 | 0);
 if (!$14) {
  $15 = SAFE_HEAP_LOAD($height | 0, 4, 0) | 0 | 0;
  $16 = SAFE_HEAP_LOAD(56 | 0, 4, 0) | 0 | 0;
  $17 = ($15 | 0) != ($16 | 0);
  if (!$17) {
   $18 = SAFE_HEAP_LOAD(2228 >> 0 | 0, 1, 0) | 0 | 0;
   $19 = $18 & 1;
   L4 : do {
    if ($19) {
     $stride = 4;
     $i = 0;
     while (1) {
      $20 = $i;
      $21 = SAFE_HEAP_LOAD(52 | 0, 4, 0) | 0 | 0;
      $22 = SAFE_HEAP_LOAD(56 | 0, 4, 0) | 0 | 0;
      $23 = Math_imul($21, $22) | 0;
      $24 = ($20 | 0) != ($23 | 0);
      if (!$24) {
       break L4;
      }
      $25 = $i;
      $26 = $stride;
      $27 = $26 & 255;
      $28 = Math_imul($25, $27) | 0;
      $29 = $28 + 3 | 0;
      $30 = $image;
      $31 = $30 + $29 | 0;
      $32 = SAFE_HEAP_LOAD($31 >> 0 | 0, 1, 0) | 0 | 0;
      $33 = +($32 & 255);
      $34 = $33 / 255.0;
      $aFraction = $34;
      $35 = $i;
      $36 = $stride;
      $37 = $36 & 255;
      $38 = Math_imul($35, $37) | 0;
      $39 = $38 + 2 | 0;
      $40 = $image;
      $41 = $40 + $39 | 0;
      $42 = SAFE_HEAP_LOAD($41 >> 0 | 0, 1, 0) | 0 | 0;
      $43 = +($42 & 255);
      $b = $43;
      $44 = $i;
      $45 = $stride;
      $46 = $45 & 255;
      $47 = Math_imul($44, $46) | 0;
      $48 = $47 + 1 | 0;
      $49 = $image;
      $50 = $49 + $48 | 0;
      $51 = SAFE_HEAP_LOAD($50 >> 0 | 0, 1, 0) | 0 | 0;
      $52 = +($51 & 255);
      $g = $52;
      $53 = $i;
      $54 = $stride;
      $55 = $54 & 255;
      $56 = Math_imul($53, $55) | 0;
      $57 = $56 + 0 | 0;
      $58 = $image;
      $59 = $58 + $57 | 0;
      $60 = SAFE_HEAP_LOAD($59 >> 0 | 0, 1, 0) | 0 | 0;
      $61 = +($60 & 255);
      $r = $61;
      $62 = $r;
      $63 = $aFraction;
      $64 = $62 * $63;
      $65 = ~~$64 & 255;
      $66 = $i;
      $67 = $stride;
      $68 = $67 & 255;
      $69 = Math_imul($66, $68) | 0;
      $70 = $69 + 0 | 0;
      $71 = $image;
      $72 = $71 + $70 | 0;
      SAFE_HEAP_STORE($72 >> 0 | 0, $65 | 0, 1);
      $73 = $g;
      $74 = $aFraction;
      $75 = $73 * $74;
      $76 = ~~$75 & 255;
      $77 = $i;
      $78 = $stride;
      $79 = $78 & 255;
      $80 = Math_imul($77, $79) | 0;
      $81 = $80 + 1 | 0;
      $82 = $image;
      $83 = $82 + $81 | 0;
      SAFE_HEAP_STORE($83 >> 0 | 0, $76 | 0, 1);
      $84 = $b;
      $85 = $aFraction;
      $86 = $84 * $85;
      $87 = ~~$86 & 255;
      $88 = $i;
      $89 = $stride;
      $90 = $89 & 255;
      $91 = Math_imul($88, $90) | 0;
      $92 = $91 + 2 | 0;
      $93 = $image;
      $94 = $93 + $92 | 0;
      SAFE_HEAP_STORE($94 >> 0 | 0, $87 | 0, 1);
      $95 = $i;
      $96 = $95 + 1 | 0;
      $i = $96;
     }
    }
   } while (0);
   $97 = $flip;
   $98 = $97 & 1;
   L10 : do {
    if ($98) {
     $99 = SAFE_HEAP_LOAD(48 | 0, 4, 0) | 0 | 0;
     $100 = ($99 | 0) == 1;
     $101 = SAFE_HEAP_LOAD(48 | 0, 4, 0) | 0 | 0;
     $102 = ($101 | 0) == 0;
     $or$cond = $100 | $102;
     if ($or$cond) {
      $stride1 = 4;
      $i4 = 0;
      while (1) {
       $103 = $i4;
       $104 = SAFE_HEAP_LOAD(52 | 0, 4, 0) | 0 | 0;
       $105 = SAFE_HEAP_LOAD(56 | 0, 4, 0) | 0 | 0;
       $106 = Math_imul($104, $105) | 0;
       $107 = ($103 | 0) != ($106 | 0);
       if (!$107) {
        break L10;
       }
       $108 = $i4;
       $109 = $stride1;
       $110 = $109 & 255;
       $111 = Math_imul($108, $110) | 0;
       $112 = $111 + 0 | 0;
       $113 = $image;
       $114 = $113 + $112 | 0;
       $115 = SAFE_HEAP_LOAD($114 >> 0 | 0, 1, 0) | 0 | 0;
       $r2 = $115;
       $116 = $i4;
       $117 = $stride1;
       $118 = $117 & 255;
       $119 = Math_imul($116, $118) | 0;
       $120 = $119 + 2 | 0;
       $121 = $image;
       $122 = $121 + $120 | 0;
       $123 = SAFE_HEAP_LOAD($122 >> 0 | 0, 1, 0) | 0 | 0;
       $b3 = $123;
       $124 = $b3;
       $125 = $i4;
       $126 = $stride1;
       $127 = $126 & 255;
       $128 = Math_imul($125, $127) | 0;
       $129 = $128 + 0 | 0;
       $130 = $image;
       $131 = $130 + $129 | 0;
       SAFE_HEAP_STORE($131 >> 0 | 0, $124 | 0, 1);
       $132 = $r2;
       $133 = $i4;
       $134 = $stride1;
       $135 = $134 & 255;
       $136 = Math_imul($133, $135) | 0;
       $137 = $136 + 2 | 0;
       $138 = $image;
       $139 = $138 + $137 | 0;
       SAFE_HEAP_STORE($139 >> 0 | 0, $132 | 0, 1);
       $140 = $i4;
       $141 = $140 + 1 | 0;
       $i4 = $141;
      }
     }
    }
   } while (0);
   $142 = $image;
   $0 = $142;
   $143 = $0;
   STACKTOP = sp;
   return $143 | 0;
  }
 }
 $0 = 0;
 $143 = $0;
 STACKTOP = sp;
 return $143 | 0;
}

function _TransformOne($in, $dst) {
 $in = $in | 0;
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $157 = 0, $158 = 0, $159 = 0, $16 = 0, $160 = 0, $161 = 0, $162 = 0, $163 = 0, $164 = 0, $165 = 0, $166 = 0, $167 = 0, $168 = 0, $169 = 0, $17 = 0;
 var $170 = 0, $171 = 0, $172 = 0, $173 = 0, $174 = 0, $175 = 0, $176 = 0, $177 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $C = 0, $a = 0;
 var $a1 = 0, $b = 0, $b2 = 0, $c = 0, $c3 = 0, $d = 0, $d4 = 0, $dc = 0, $i = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 128 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $C = sp + 48 | 0;
 $0 = $in;
 $1 = $dst;
 $tmp = $C;
 $i = 0;
 while (1) {
  $2 = $i;
  $3 = ($2 | 0) < 4;
  if (!$3) {
   break;
  }
  $4 = $0;
  $5 = SAFE_HEAP_LOAD($4 | 0, 2, 0) | 0 | 0;
  $6 = $5 << 16 >> 16;
  $7 = $0;
  $8 = $7 + 16 | 0;
  $9 = SAFE_HEAP_LOAD($8 | 0, 2, 0) | 0 | 0;
  $10 = $9 << 16 >> 16;
  $11 = $6 + $10 | 0;
  $a = $11;
  $12 = $0;
  $13 = SAFE_HEAP_LOAD($12 | 0, 2, 0) | 0 | 0;
  $14 = $13 << 16 >> 16;
  $15 = $0;
  $16 = $15 + 16 | 0;
  $17 = SAFE_HEAP_LOAD($16 | 0, 2, 0) | 0 | 0;
  $18 = $17 << 16 >> 16;
  $19 = $14 - $18 | 0;
  $b = $19;
  $20 = $0;
  $21 = $20 + 8 | 0;
  $22 = SAFE_HEAP_LOAD($21 | 0, 2, 0) | 0 | 0;
  $23 = $22 << 16 >> 16;
  $24 = $23 * 35468 | 0;
  $25 = $24 >> 16;
  $26 = $0;
  $27 = $26 + 24 | 0;
  $28 = SAFE_HEAP_LOAD($27 | 0, 2, 0) | 0 | 0;
  $29 = $28 << 16 >> 16;
  $30 = $29 * 20091 | 0;
  $31 = $30 >> 16;
  $32 = $0;
  $33 = $32 + 24 | 0;
  $34 = SAFE_HEAP_LOAD($33 | 0, 2, 0) | 0 | 0;
  $35 = $34 << 16 >> 16;
  $36 = $31 + $35 | 0;
  $37 = $25 - $36 | 0;
  $c = $37;
  $38 = $0;
  $39 = $38 + 8 | 0;
  $40 = SAFE_HEAP_LOAD($39 | 0, 2, 0) | 0 | 0;
  $41 = $40 << 16 >> 16;
  $42 = $41 * 20091 | 0;
  $43 = $42 >> 16;
  $44 = $0;
  $45 = $44 + 8 | 0;
  $46 = SAFE_HEAP_LOAD($45 | 0, 2, 0) | 0 | 0;
  $47 = $46 << 16 >> 16;
  $48 = $43 + $47 | 0;
  $49 = $0;
  $50 = $49 + 24 | 0;
  $51 = SAFE_HEAP_LOAD($50 | 0, 2, 0) | 0 | 0;
  $52 = $51 << 16 >> 16;
  $53 = $52 * 35468 | 0;
  $54 = $53 >> 16;
  $55 = $48 + $54 | 0;
  $d = $55;
  $56 = $a;
  $57 = $d;
  $58 = $56 + $57 | 0;
  $59 = $tmp;
  SAFE_HEAP_STORE($59 | 0, $58 | 0, 4);
  $60 = $b;
  $61 = $c;
  $62 = $60 + $61 | 0;
  $63 = $tmp;
  $64 = $63 + 4 | 0;
  SAFE_HEAP_STORE($64 | 0, $62 | 0, 4);
  $65 = $b;
  $66 = $c;
  $67 = $65 - $66 | 0;
  $68 = $tmp;
  $69 = $68 + 8 | 0;
  SAFE_HEAP_STORE($69 | 0, $67 | 0, 4);
  $70 = $a;
  $71 = $d;
  $72 = $70 - $71 | 0;
  $73 = $tmp;
  $74 = $73 + 12 | 0;
  SAFE_HEAP_STORE($74 | 0, $72 | 0, 4);
  $75 = $tmp;
  $76 = $75 + 16 | 0;
  $tmp = $76;
  $77 = $0;
  $78 = $77 + 2 | 0;
  $0 = $78;
  $79 = $i;
  $80 = $79 + 1 | 0;
  $i = $80;
 }
 $tmp = $C;
 $i = 0;
 while (1) {
  $81 = $i;
  $82 = ($81 | 0) < 4;
  if (!$82) {
   break;
  }
  $83 = $tmp;
  $84 = SAFE_HEAP_LOAD($83 | 0, 4, 0) | 0 | 0;
  $85 = $84 + 4 | 0;
  $dc = $85;
  $86 = $dc;
  $87 = $tmp;
  $88 = $87 + 32 | 0;
  $89 = SAFE_HEAP_LOAD($88 | 0, 4, 0) | 0 | 0;
  $90 = $86 + $89 | 0;
  $a1 = $90;
  $91 = $dc;
  $92 = $tmp;
  $93 = $92 + 32 | 0;
  $94 = SAFE_HEAP_LOAD($93 | 0, 4, 0) | 0 | 0;
  $95 = $91 - $94 | 0;
  $b2 = $95;
  $96 = $tmp;
  $97 = $96 + 16 | 0;
  $98 = SAFE_HEAP_LOAD($97 | 0, 4, 0) | 0 | 0;
  $99 = $98 * 35468 | 0;
  $100 = $99 >> 16;
  $101 = $tmp;
  $102 = $101 + 48 | 0;
  $103 = SAFE_HEAP_LOAD($102 | 0, 4, 0) | 0 | 0;
  $104 = $103 * 20091 | 0;
  $105 = $104 >> 16;
  $106 = $tmp;
  $107 = $106 + 48 | 0;
  $108 = SAFE_HEAP_LOAD($107 | 0, 4, 0) | 0 | 0;
  $109 = $105 + $108 | 0;
  $110 = $100 - $109 | 0;
  $c3 = $110;
  $111 = $tmp;
  $112 = $111 + 16 | 0;
  $113 = SAFE_HEAP_LOAD($112 | 0, 4, 0) | 0 | 0;
  $114 = $113 * 20091 | 0;
  $115 = $114 >> 16;
  $116 = $tmp;
  $117 = $116 + 16 | 0;
  $118 = SAFE_HEAP_LOAD($117 | 0, 4, 0) | 0 | 0;
  $119 = $115 + $118 | 0;
  $120 = $tmp;
  $121 = $120 + 48 | 0;
  $122 = SAFE_HEAP_LOAD($121 | 0, 4, 0) | 0 | 0;
  $123 = $122 * 35468 | 0;
  $124 = $123 >> 16;
  $125 = $119 + $124 | 0;
  $d4 = $125;
  $126 = $1;
  $127 = SAFE_HEAP_LOAD($126 >> 0 | 0, 1, 0) | 0 | 0;
  $128 = $127 & 255;
  $129 = $a1;
  $130 = $d4;
  $131 = $129 + $130 | 0;
  $132 = $131 >> 3;
  $133 = $128 + $132 | 0;
  $134 = _clip_8b($133) | 0;
  $135 = $1;
  SAFE_HEAP_STORE($135 >> 0 | 0, $134 | 0, 1);
  $136 = $1;
  $137 = $136 + 1 | 0;
  $138 = SAFE_HEAP_LOAD($137 >> 0 | 0, 1, 0) | 0 | 0;
  $139 = $138 & 255;
  $140 = $b2;
  $141 = $c3;
  $142 = $140 + $141 | 0;
  $143 = $142 >> 3;
  $144 = $139 + $143 | 0;
  $145 = _clip_8b($144) | 0;
  $146 = $1;
  $147 = $146 + 1 | 0;
  SAFE_HEAP_STORE($147 >> 0 | 0, $145 | 0, 1);
  $148 = $1;
  $149 = $148 + 2 | 0;
  $150 = SAFE_HEAP_LOAD($149 >> 0 | 0, 1, 0) | 0 | 0;
  $151 = $150 & 255;
  $152 = $b2;
  $153 = $c3;
  $154 = $152 - $153 | 0;
  $155 = $154 >> 3;
  $156 = $151 + $155 | 0;
  $157 = _clip_8b($156) | 0;
  $158 = $1;
  $159 = $158 + 2 | 0;
  SAFE_HEAP_STORE($159 >> 0 | 0, $157 | 0, 1);
  $160 = $1;
  $161 = $160 + 3 | 0;
  $162 = SAFE_HEAP_LOAD($161 >> 0 | 0, 1, 0) | 0 | 0;
  $163 = $162 & 255;
  $164 = $a1;
  $165 = $d4;
  $166 = $164 - $165 | 0;
  $167 = $166 >> 3;
  $168 = $163 + $167 | 0;
  $169 = _clip_8b($168) | 0;
  $170 = $1;
  $171 = $170 + 3 | 0;
  SAFE_HEAP_STORE($171 >> 0 | 0, $169 | 0, 1);
  $172 = $tmp;
  $173 = $172 + 4 | 0;
  $tmp = $173;
  $174 = $1;
  $175 = $174 + 32 | 0;
  $1 = $175;
  $176 = $i;
  $177 = $176 + 1 | 0;
  $i = $177;
 }
 STACKTOP = sp;
 return;
}

function _VP8LDecodeImage($dec) {
 $dec = $dec | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $io = 0, $params = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $dec;
 $io = 0;
 $params = 0;
 $2 = $1;
 $3 = ($2 | 0) == (0 | 0);
 if ($3) {
  $0 = 0;
  $133 = $0;
  STACKTOP = sp;
  return $133 | 0;
 }
 $4 = $1;
 $5 = $4 + 120 | 0;
 $6 = $5 + 52 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = ($7 | 0) != (0 | 0);
 if (!$8) {
  ___assert_fail(7279 | 0, 7124 | 0, 1568, 7313 | 0);
 }
 $9 = $1;
 $10 = $9 + 120 | 0;
 $11 = $10 + 48 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = ($12 | 0) != (0 | 0);
 if (!$13) {
  ___assert_fail(7329 | 0, 7124 | 0, 1569, 7313 | 0);
 }
 $14 = $1;
 $15 = $14 + 120 | 0;
 $16 = $15 + 44 | 0;
 $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
 $18 = ($17 | 0) > 0;
 if (!$18) {
  ___assert_fail(7361 | 0, 7124 | 0, 1570, 7313 | 0);
 }
 $19 = $1;
 $20 = $19 + 8 | 0;
 $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
 $io = $21;
 $22 = $io;
 $23 = ($22 | 0) != (0 | 0);
 if (!$23) {
  ___assert_fail(7393 | 0, 7124 | 0, 1573, 7313 | 0);
 }
 $24 = $io;
 $25 = $24 + 40 | 0;
 $26 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
 $params = $26;
 $27 = $params;
 $28 = ($27 | 0) != (0 | 0);
 if (!$28) {
  ___assert_fail(9005 | 0, 7124 | 0, 1575, 7313 | 0);
 }
 $29 = $1;
 $30 = $29 + 4 | 0;
 $31 = SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0;
 $32 = ($31 | 0) != 0;
 do {
  if ($32) {
   $33 = $params;
   $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
   $35 = $1;
   $36 = $35 + 12 | 0;
   SAFE_HEAP_STORE($36 | 0, $34 | 0, 4);
   $37 = $1;
   $38 = $37 + 12 | 0;
   $39 = SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0;
   $40 = ($39 | 0) != (0 | 0);
   if (!$40) {
    ___assert_fail(7404 | 0, 7124 | 0, 1580, 7313 | 0);
   }
   $41 = $params;
   $42 = $41 + 20 | 0;
   $43 = SAFE_HEAP_LOAD($42 | 0, 4, 0) | 0 | 0;
   $44 = $io;
   $45 = _WebPIoInitFromOptions($43, $44, 3) | 0;
   $46 = ($45 | 0) != 0;
   $47 = $1;
   if (!$46) {
    SAFE_HEAP_STORE($47 | 0, 2 | 0, 4);
    break;
   }
   $48 = $io;
   $49 = SAFE_HEAP_LOAD($48 | 0, 4, 0) | 0 | 0;
   $50 = _AllocateInternalBuffers32b($47, $49) | 0;
   $51 = ($50 | 0) != 0;
   if ($51) {
    $52 = $io;
    $53 = $52 + 92 | 0;
    $54 = SAFE_HEAP_LOAD($53 | 0, 4, 0) | 0 | 0;
    $55 = ($54 | 0) != 0;
    if ($55) {
     $56 = $1;
     $57 = $io;
     $58 = _AllocateAndInitRescaler($56, $57) | 0;
     $59 = ($58 | 0) != 0;
     if (!$59) {
      break;
     }
    }
    $60 = $io;
    $61 = $60 + 92 | 0;
    $62 = SAFE_HEAP_LOAD($61 | 0, 4, 0) | 0 | 0;
    $63 = ($62 | 0) != 0;
    if ($63) {
     label = 23;
    } else {
     $64 = $1;
     $65 = $64 + 12 | 0;
     $66 = SAFE_HEAP_LOAD($65 | 0, 4, 0) | 0 | 0;
     $67 = SAFE_HEAP_LOAD($66 | 0, 4, 0) | 0 | 0;
     $68 = _WebPIsPremultipliedMode114($67) | 0;
     $69 = ($68 | 0) != 0;
     if ($69) {
      label = 23;
     }
    }
    if ((label | 0) == 23) {
     _WebPInitAlphaProcessing();
    }
    $70 = $1;
    $71 = $70 + 12 | 0;
    $72 = SAFE_HEAP_LOAD($71 | 0, 4, 0) | 0 | 0;
    $73 = SAFE_HEAP_LOAD($72 | 0, 4, 0) | 0 | 0;
    $74 = _WebPIsRGBMode115($73) | 0;
    $75 = ($74 | 0) != 0;
    if (!$75) {
     _WebPInitConvertARGBToYUV();
     $76 = $1;
     $77 = $76 + 12 | 0;
     $78 = SAFE_HEAP_LOAD($77 | 0, 4, 0) | 0 | 0;
     $79 = $78 + 16 | 0;
     $80 = $79 + 12 | 0;
     $81 = SAFE_HEAP_LOAD($80 | 0, 4, 0) | 0 | 0;
     $82 = ($81 | 0) != (0 | 0);
     if ($82) {
      _WebPInitAlphaProcessing();
     }
    }
    $83 = $1;
    $84 = $83 + 56 | 0;
    $85 = SAFE_HEAP_LOAD($84 | 0, 4, 0) | 0 | 0;
    $86 = ($85 | 0) != 0;
    if ($86) {
     $87 = $1;
     $88 = $87 + 120 | 0;
     $89 = SAFE_HEAP_LOAD($88 | 0, 4, 0) | 0 | 0;
     $90 = ($89 | 0) > 0;
     if ($90) {
      $91 = $1;
      $92 = $91 + 120 | 0;
      $93 = $92 + 16 | 0;
      $94 = SAFE_HEAP_LOAD($93 | 0, 4, 0) | 0 | 0;
      $95 = ($94 | 0) == (0 | 0);
      if ($95) {
       $96 = $1;
       $97 = $96 + 120 | 0;
       $98 = $97 + 16 | 0;
       $99 = $1;
       $100 = $99 + 120 | 0;
       $101 = $100 + 4 | 0;
       $102 = $101 + 8 | 0;
       $103 = SAFE_HEAP_LOAD($102 | 0, 4, 0) | 0 | 0;
       $104 = _VP8LColorCacheInit($98, $103) | 0;
       $105 = ($104 | 0) != 0;
       if (!$105) {
        $106 = $1;
        SAFE_HEAP_STORE($106 | 0, 1 | 0, 4);
        break;
       }
      }
     }
    }
    $107 = $1;
    $108 = $107 + 4 | 0;
    SAFE_HEAP_STORE($108 | 0, 0 | 0, 4);
    label = 33;
   }
  } else {
   label = 33;
  }
 } while (0);
 if ((label | 0) == 33) {
  $109 = $1;
  $110 = $1;
  $111 = $110 + 16 | 0;
  $112 = SAFE_HEAP_LOAD($111 | 0, 4, 0) | 0 | 0;
  $113 = $1;
  $114 = $113 + 100 | 0;
  $115 = SAFE_HEAP_LOAD($114 | 0, 4, 0) | 0 | 0;
  $116 = $1;
  $117 = $116 + 104 | 0;
  $118 = SAFE_HEAP_LOAD($117 | 0, 4, 0) | 0 | 0;
  $119 = $1;
  $120 = $119 + 104 | 0;
  $121 = SAFE_HEAP_LOAD($120 | 0, 4, 0) | 0 | 0;
  $122 = _DecodeImageData($109, $112, $115, $118, $121, 27) | 0;
  $123 = ($122 | 0) != 0;
  if ($123) {
   $124 = $1;
   $125 = $124 + 116 | 0;
   $126 = SAFE_HEAP_LOAD($125 | 0, 4, 0) | 0 | 0;
   $127 = $params;
   $128 = $127 + 16 | 0;
   SAFE_HEAP_STORE($128 | 0, $126 | 0, 4);
   $0 = 1;
   $133 = $0;
   STACKTOP = sp;
   return $133 | 0;
  }
 }
 $129 = $1;
 _VP8LClear($129);
 $130 = $1;
 $131 = SAFE_HEAP_LOAD($130 | 0, 4, 0) | 0 | 0;
 $132 = ($131 | 0) != 0;
 if (!$132) {
  ___assert_fail(7232 | 0, 7124 | 0, 1623, 7313 | 0);
 }
 $0 = 0;
 $133 = $0;
 STACKTOP = sp;
 return $133 | 0;
}

function _PredictorInverseTransform($transform, $y_start, $y_end, $data) {
 $transform = $transform | 0;
 $y_start = $y_start | 0;
 $y_end = $y_end | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0;
 var $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0;
 var $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0;
 var $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0;
 var $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $mask = 0, $pred = 0, $pred0 = 0, $pred1 = 0, $pred2 = 0, $pred3 = 0;
 var $pred_func = 0, $pred_mode_base = 0, $pred_mode_src = 0, $safe_width = 0, $t = 0, $tile_width = 0, $tiles_per_row = 0, $width = 0, $x = 0, $x1 = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $transform;
 $1 = $y_start;
 $2 = $y_end;
 $3 = $data;
 $4 = $0;
 $5 = $4 + 8 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $width = $6;
 $7 = $1;
 $8 = ($7 | 0) == 0;
 if ($8) {
  $9 = $3;
  $10 = $9 + -4 | 0;
  $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
  $12 = _Predictor0($11, 0) | 0;
  $pred0 = $12;
  $13 = $3;
  $14 = $pred0;
  _AddPixelsEq($13, $14);
  $x = 1;
  while (1) {
   $15 = $x;
   $16 = $width;
   $17 = ($15 | 0) < ($16 | 0);
   if (!$17) {
    break;
   }
   $18 = $x;
   $19 = $18 - 1 | 0;
   $20 = $3;
   $21 = $20 + ($19 << 2) | 0;
   $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
   $23 = _Predictor1($22, 0) | 0;
   $pred1 = $23;
   $24 = $3;
   $25 = $x;
   $26 = $24 + ($25 << 2) | 0;
   $27 = $pred1;
   _AddPixelsEq($26, $27);
   $28 = $x;
   $29 = $28 + 1 | 0;
   $x = $29;
  }
  $30 = $width;
  $31 = $3;
  $32 = $31 + ($30 << 2) | 0;
  $3 = $32;
  $33 = $1;
  $34 = $33 + 1 | 0;
  $1 = $34;
 }
 $35 = $1;
 $y = $35;
 $36 = $0;
 $37 = $36 + 4 | 0;
 $38 = SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0;
 $39 = 1 << $38;
 $tile_width = $39;
 $40 = $tile_width;
 $41 = $40 - 1 | 0;
 $mask = $41;
 $42 = $width;
 $43 = $mask;
 $44 = $43 ^ -1;
 $45 = $42 & $44;
 $safe_width = $45;
 $46 = $width;
 $47 = $0;
 $48 = $47 + 4 | 0;
 $49 = SAFE_HEAP_LOAD($48 | 0, 4, 0) | 0 | 0;
 $50 = _VP8LSubSampleSize315($46, $49) | 0;
 $tiles_per_row = $50;
 $51 = $0;
 $52 = $51 + 16 | 0;
 $53 = SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0;
 $54 = $y;
 $55 = $0;
 $56 = $55 + 4 | 0;
 $57 = SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0;
 $58 = $54 >> $57;
 $59 = $tiles_per_row;
 $60 = Math_imul($58, $59) | 0;
 $61 = $53 + ($60 << 2) | 0;
 $pred_mode_base = $61;
 while (1) {
  $62 = $y;
  $63 = $2;
  $64 = ($62 | 0) < ($63 | 0);
  if (!$64) {
   break;
  }
  $65 = $3;
  $66 = $65 + -4 | 0;
  $67 = SAFE_HEAP_LOAD($66 | 0, 4, 0) | 0 | 0;
  $68 = $3;
  $69 = $width;
  $70 = 0 - $69 | 0;
  $71 = $68 + ($70 << 2) | 0;
  $72 = _Predictor2($67, $71) | 0;
  $pred2 = $72;
  $73 = $pred_mode_base;
  $pred_mode_src = $73;
  $x1 = 1;
  $t = 1;
  $74 = $3;
  $75 = $pred2;
  _AddPixelsEq($74, $75);
  while (1) {
   $76 = $x1;
   $77 = $safe_width;
   $78 = ($76 | 0) < ($77 | 0);
   if (!$78) {
    break;
   }
   $79 = $pred_mode_src;
   $80 = $79 + 4 | 0;
   $pred_mode_src = $80;
   $81 = SAFE_HEAP_LOAD($79 | 0, 4, 0) | 0 | 0;
   $82 = $81 >>> 8;
   $83 = $82 & 15;
   $84 = 668 + ($83 << 2) | 0;
   $85 = SAFE_HEAP_LOAD($84 | 0, 4, 0) | 0 | 0;
   $pred_func = $85;
   while (1) {
    $86 = $t;
    $87 = $tile_width;
    $88 = ($86 | 0) < ($87 | 0);
    if (!$88) {
     break;
    }
    $89 = $pred_func;
    $90 = $x1;
    $91 = $90 - 1 | 0;
    $92 = $3;
    $93 = $92 + ($91 << 2) | 0;
    $94 = SAFE_HEAP_LOAD($93 | 0, 4, 0) | 0 | 0;
    $95 = $3;
    $96 = $x1;
    $97 = $95 + ($96 << 2) | 0;
    $98 = $width;
    $99 = 0 - $98 | 0;
    $100 = $97 + ($99 << 2) | 0;
    $101 = FUNCTION_TABLE_iii[(SAFE_FT_MASK($89 | 0, 127 | 0) | 0) & 127]($94, $100) | 0;
    $pred = $101;
    $102 = $3;
    $103 = $x1;
    $104 = $102 + ($103 << 2) | 0;
    $105 = $pred;
    _AddPixelsEq($104, $105);
    $106 = $t;
    $107 = $106 + 1 | 0;
    $t = $107;
    $108 = $x1;
    $109 = $108 + 1 | 0;
    $x1 = $109;
   }
   $t = 0;
  }
  $110 = $x1;
  $111 = $width;
  $112 = ($110 | 0) < ($111 | 0);
  L19 : do {
   if ($112) {
    $113 = $pred_mode_src;
    $114 = $113 + 4 | 0;
    $pred_mode_src = $114;
    $115 = SAFE_HEAP_LOAD($113 | 0, 4, 0) | 0 | 0;
    $116 = $115 >>> 8;
    $117 = $116 & 15;
    $118 = 668 + ($117 << 2) | 0;
    $119 = SAFE_HEAP_LOAD($118 | 0, 4, 0) | 0 | 0;
    $pred_func = $119;
    while (1) {
     $120 = $x1;
     $121 = $width;
     $122 = ($120 | 0) < ($121 | 0);
     if (!$122) {
      break L19;
     }
     $123 = $pred_func;
     $124 = $x1;
     $125 = $124 - 1 | 0;
     $126 = $3;
     $127 = $126 + ($125 << 2) | 0;
     $128 = SAFE_HEAP_LOAD($127 | 0, 4, 0) | 0 | 0;
     $129 = $3;
     $130 = $x1;
     $131 = $129 + ($130 << 2) | 0;
     $132 = $width;
     $133 = 0 - $132 | 0;
     $134 = $131 + ($133 << 2) | 0;
     $135 = FUNCTION_TABLE_iii[(SAFE_FT_MASK($123 | 0, 127 | 0) | 0) & 127]($128, $134) | 0;
     $pred3 = $135;
     $136 = $3;
     $137 = $x1;
     $138 = $136 + ($137 << 2) | 0;
     $139 = $pred3;
     _AddPixelsEq($138, $139);
     $140 = $x1;
     $141 = $140 + 1 | 0;
     $x1 = $141;
    }
   }
  } while (0);
  $142 = $width;
  $143 = $3;
  $144 = $143 + ($142 << 2) | 0;
  $3 = $144;
  $145 = $y;
  $146 = $145 + 1 | 0;
  $y = $146;
  $147 = $y;
  $148 = $mask;
  $149 = $147 & $148;
  $150 = ($149 | 0) == 0;
  if (!$150) {
   continue;
  }
  $151 = $tiles_per_row;
  $152 = $pred_mode_base;
  $153 = $152 + ($151 << 2) | 0;
  $pred_mode_base = $153;
 }
 STACKTOP = sp;
 return;
}

function _DecodeImageStream($xsize, $ysize, $is_level0, $dec, $decoded_data) {
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $is_level0 = $is_level0 | 0;
 $dec = $dec | 0;
 $decoded_data = $decoded_data | 0;
 var $$old = 0, $$old1 = 0, $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0;
 var $114 = 0, $115 = 0, $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $br = 0, $color_cache_bits = 0, $data = 0, $hdr = 0, $ok = 0, $or$cond = 0, $total_size = 0, $transform_xsize = 0, $transform_ysize = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $transform_xsize = sp + 28 | 0;
 $transform_ysize = sp + 24 | 0;
 $total_size = sp;
 $0 = $xsize;
 $1 = $ysize;
 $2 = $is_level0;
 $3 = $dec;
 $4 = $decoded_data;
 $ok = 1;
 $5 = $0;
 SAFE_HEAP_STORE($transform_xsize | 0, $5 | 0, 4);
 $6 = $1;
 SAFE_HEAP_STORE($transform_ysize | 0, $6 | 0, 4);
 $7 = $3;
 $8 = $7 + 24 | 0;
 $br = $8;
 $9 = $3;
 $10 = $9 + 120 | 0;
 $hdr = $10;
 $data = 0;
 $color_cache_bits = 0;
 $11 = $2;
 $12 = ($11 | 0) != 0;
 $13 = $ok;
 $14 = ($13 | 0) != 0;
 $or$cond = $12 & $14;
 L1 : do {
  if ($or$cond) {
   while (1) {
    $15 = $br;
    $16 = _VP8LReadBits($15, 1) | 0;
    $17 = ($16 | 0) != 0;
    if (!$17) {
     break L1;
    }
    $18 = $3;
    $19 = _ReadTransform($transform_xsize, $transform_ysize, $18) | 0;
    $ok = $19;
    $$old = $ok;
    $$old1 = ($$old | 0) != 0;
    if (!$$old1) {
     break;
    }
   }
  }
 } while (0);
 $20 = $ok;
 $21 = ($20 | 0) != 0;
 if ($21) {
  $22 = $br;
  $23 = _VP8LReadBits($22, 1) | 0;
  $24 = ($23 | 0) != 0;
  if ($24) {
   $25 = $br;
   $26 = _VP8LReadBits($25, 4) | 0;
   $color_cache_bits = $26;
   $27 = $color_cache_bits;
   $28 = ($27 | 0) >= 1;
   $29 = $color_cache_bits;
   $30 = ($29 | 0) <= 11;
   $31 = $28 ? $30 : 0;
   $32 = $31 & 1;
   $ok = $32;
   $33 = $ok;
   $34 = ($33 | 0) != 0;
   if ($34) {
    label = 8;
   } else {
    $35 = $3;
    SAFE_HEAP_STORE($35 | 0, 3 | 0, 4);
   }
  } else {
   label = 8;
  }
 } else {
  label = 8;
 }
 do {
  if ((label | 0) == 8) {
   $36 = $ok;
   $37 = ($36 | 0) != 0;
   if ($37) {
    $38 = $3;
    $39 = SAFE_HEAP_LOAD($transform_xsize | 0, 4, 0) | 0 | 0;
    $40 = SAFE_HEAP_LOAD($transform_ysize | 0, 4, 0) | 0 | 0;
    $41 = $color_cache_bits;
    $42 = $2;
    $43 = _ReadHuffmanCodes($38, $39, $40, $41, $42) | 0;
    $44 = ($43 | 0) != 0;
    $46 = $44;
   } else {
    $46 = 0;
   }
   $45 = $46 & 1;
   $ok = $45;
   $47 = $ok;
   $48 = ($47 | 0) != 0;
   if (!$48) {
    $49 = $3;
    SAFE_HEAP_STORE($49 | 0, 3 | 0, 4);
    break;
   }
   $50 = $color_cache_bits;
   $51 = ($50 | 0) > 0;
   if ($51) {
    $52 = $color_cache_bits;
    $53 = 1 << $52;
    $54 = $hdr;
    SAFE_HEAP_STORE($54 | 0, $53 | 0, 4);
    $55 = $hdr;
    $56 = $55 + 4 | 0;
    $57 = $color_cache_bits;
    $58 = _VP8LColorCacheInit($56, $57) | 0;
    $59 = ($58 | 0) != 0;
    if (!$59) {
     $60 = $3;
     SAFE_HEAP_STORE($60 | 0, 1 | 0, 4);
     $ok = 0;
     break;
    }
   } else {
    $61 = $hdr;
    SAFE_HEAP_STORE($61 | 0, 0 | 0, 4);
   }
   $62 = $3;
   $63 = SAFE_HEAP_LOAD($transform_xsize | 0, 4, 0) | 0 | 0;
   $64 = SAFE_HEAP_LOAD($transform_ysize | 0, 4, 0) | 0 | 0;
   _UpdateDecoder($62, $63, $64);
   $65 = $2;
   $66 = ($65 | 0) != 0;
   if ($66) {
    $67 = $3;
    $68 = $67 + 4 | 0;
    SAFE_HEAP_STORE($68 | 0, 1 | 0, 4);
    break;
   }
   $69 = SAFE_HEAP_LOAD($transform_xsize | 0, 4, 0) | 0 | 0;
   $70 = ($69 | 0) < 0;
   $71 = $70 << 31 >> 31;
   $72 = SAFE_HEAP_LOAD($transform_ysize | 0, 4, 0) | 0 | 0;
   $73 = ($72 | 0) < 0;
   $74 = $73 << 31 >> 31;
   $75 = ___muldi3($69 | 0, $71 | 0, $72 | 0, $74 | 0) | 0;
   $76 = tempRet0;
   $77 = $total_size;
   $78 = $77;
   SAFE_HEAP_STORE($78 | 0, $75 | 0, 4);
   $79 = $77 + 4 | 0;
   $80 = $79;
   SAFE_HEAP_STORE($80 | 0, $76 | 0, 4);
   $81 = $total_size;
   $82 = $81;
   $83 = SAFE_HEAP_LOAD($82 | 0, 4, 0) | 0 | 0;
   $84 = $81 + 4 | 0;
   $85 = $84;
   $86 = SAFE_HEAP_LOAD($85 | 0, 4, 0) | 0 | 0;
   $87 = _WebPSafeMalloc($83, $86, 4) | 0;
   $data = $87;
   $88 = $data;
   $89 = ($88 | 0) == (0 | 0);
   $90 = $3;
   if ($89) {
    SAFE_HEAP_STORE($90 | 0, 1 | 0, 4);
    $ok = 0;
    break;
   }
   $91 = $data;
   $92 = SAFE_HEAP_LOAD($transform_xsize | 0, 4, 0) | 0 | 0;
   $93 = SAFE_HEAP_LOAD($transform_ysize | 0, 4, 0) | 0 | 0;
   $94 = SAFE_HEAP_LOAD($transform_ysize | 0, 4, 0) | 0 | 0;
   $95 = _DecodeImageData($90, $91, $92, $93, $94, 0) | 0;
   $ok = $95;
   $96 = $ok;
   $97 = ($96 | 0) != 0;
   if ($97) {
    $98 = $br;
    $99 = $98 + 24 | 0;
    $100 = SAFE_HEAP_LOAD($99 | 0, 4, 0) | 0 | 0;
    $101 = ($100 | 0) != 0;
    $102 = $101 ^ 1;
    $104 = $102;
   } else {
    $104 = 0;
   }
   $103 = $104 & 1;
   $ok = $103;
  }
 } while (0);
 $105 = $ok;
 $106 = ($105 | 0) != 0;
 if (!$106) {
  $107 = $data;
  _WebPSafeFree($107);
  $108 = $hdr;
  _ClearMetadata($108);
  $121 = $ok;
  STACKTOP = sp;
  return $121 | 0;
 }
 $109 = $4;
 $110 = ($109 | 0) != (0 | 0);
 $111 = $data;
 do {
  if ($110) {
   $112 = $4;
   SAFE_HEAP_STORE($112 | 0, $111 | 0, 4);
  } else {
   $113 = ($111 | 0) == (0 | 0);
   if (!$113) {
    ___assert_fail(8632 | 0, 7124 | 0, 1395, 8645 | 0);
   }
   $114 = $2;
   $115 = ($114 | 0) != 0;
   if ($115) {
    break;
   } else {
    ___assert_fail(8663 | 0, 7124 | 0, 1396, 8645 | 0);
   }
  }
 } while (0);
 $116 = $3;
 $117 = $116 + 112 | 0;
 SAFE_HEAP_STORE($117 | 0, 0 | 0, 4);
 $118 = $2;
 $119 = ($118 | 0) != 0;
 if ($119) {
  $121 = $ok;
  STACKTOP = sp;
  return $121 | 0;
 }
 $120 = $hdr;
 _ClearMetadata($120);
 $121 = $ok;
 STACKTOP = sp;
 return $121 | 0;
}

function _VP8ParseQuant($dec) {
 $dec = $dec | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $base_q0 = 0;
 var $br = 0, $dquv_ac = 0, $dquv_dc = 0, $dqy1_dc = 0, $dqy2_ac = 0, $dqy2_dc = 0, $hdr = 0, $i = 0, $m = 0, $q = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $0;
 $2 = $1 + 12 | 0;
 $br = $2;
 $3 = $br;
 $4 = _VP8GetValue($3, 7) | 0;
 $base_q0 = $4;
 $5 = $br;
 $6 = _VP8Get($5) | 0;
 $7 = ($6 | 0) != 0;
 if ($7) {
  $8 = $br;
  $9 = _VP8GetSignedValue($8, 4) | 0;
  $10 = $9;
 } else {
  $10 = 0;
 }
 $dqy1_dc = $10;
 $11 = $br;
 $12 = _VP8Get($11) | 0;
 $13 = ($12 | 0) != 0;
 if ($13) {
  $14 = $br;
  $15 = _VP8GetSignedValue($14, 4) | 0;
  $16 = $15;
 } else {
  $16 = 0;
 }
 $dqy2_dc = $16;
 $17 = $br;
 $18 = _VP8Get($17) | 0;
 $19 = ($18 | 0) != 0;
 if ($19) {
  $20 = $br;
  $21 = _VP8GetSignedValue($20, 4) | 0;
  $22 = $21;
 } else {
  $22 = 0;
 }
 $dqy2_ac = $22;
 $23 = $br;
 $24 = _VP8Get($23) | 0;
 $25 = ($24 | 0) != 0;
 if ($25) {
  $26 = $br;
  $27 = _VP8GetSignedValue($26, 4) | 0;
  $28 = $27;
 } else {
  $28 = 0;
 }
 $dquv_dc = $28;
 $29 = $br;
 $30 = _VP8Get($29) | 0;
 $31 = ($30 | 0) != 0;
 if ($31) {
  $32 = $br;
  $33 = _VP8GetSignedValue($32, 4) | 0;
  $34 = $33;
 } else {
  $34 = 0;
 }
 $dquv_ac = $34;
 $35 = $0;
 $36 = $35 + 104 | 0;
 $hdr = $36;
 $i = 0;
 while (1) {
  $37 = $i;
  $38 = ($37 | 0) < 4;
  if (!$38) {
   break;
  }
  $39 = $hdr;
  $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
  $41 = ($40 | 0) != 0;
  $42 = $i;
  do {
   if ($41) {
    $43 = $hdr;
    $44 = $43 + 12 | 0;
    $45 = $44 + $42 | 0;
    $46 = SAFE_HEAP_LOAD($45 >> 0 | 0, 1, 0) | 0 | 0;
    $47 = $46 << 24 >> 24;
    $q = $47;
    $48 = $hdr;
    $49 = $48 + 8 | 0;
    $50 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0;
    $51 = ($50 | 0) != 0;
    if ($51) {
     label = 19;
    } else {
     $52 = $base_q0;
     $53 = $q;
     $54 = $53 + $52 | 0;
     $q = $54;
     label = 19;
    }
   } else {
    $55 = ($42 | 0) > 0;
    if ($55) {
     $56 = $i;
     $57 = $0;
     $58 = $57 + 776 | 0;
     $59 = $58 + ($56 << 5) | 0;
     $60 = $0;
     $61 = $60 + 776 | 0;
     {}
     SAFE_HEAP_STORE($59 | 0, SAFE_HEAP_LOAD($61 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($59 + 4 | 0, SAFE_HEAP_LOAD($61 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($59 + 8 | 0, SAFE_HEAP_LOAD($61 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($59 + 12 | 0, SAFE_HEAP_LOAD($61 + 12 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($59 + 16 | 0, SAFE_HEAP_LOAD($61 + 16 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($59 + 20 | 0, SAFE_HEAP_LOAD($61 + 20 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($59 + 24 | 0, SAFE_HEAP_LOAD($61 + 24 | 0, 4, 0) | 0 | 0 | 0, 4);
     SAFE_HEAP_STORE($59 + 28 | 0, SAFE_HEAP_LOAD($61 + 28 | 0, 4, 0) | 0 | 0 | 0, 4);
     break;
    } else {
     $62 = $base_q0;
     $q = $62;
     label = 19;
     break;
    }
   }
  } while (0);
  if ((label | 0) == 19) {
   label = 0;
   $63 = $i;
   $64 = $0;
   $65 = $64 + 776 | 0;
   $66 = $65 + ($63 << 5) | 0;
   $m = $66;
   $67 = $q;
   $68 = $dqy1_dc;
   $69 = $67 + $68 | 0;
   $70 = _clip($69, 127) | 0;
   $71 = 3425 + $70 | 0;
   $72 = SAFE_HEAP_LOAD($71 >> 0 | 0, 1, 0) | 0 | 0;
   $73 = $72 & 255;
   $74 = $m;
   SAFE_HEAP_STORE($74 | 0, $73 | 0, 4);
   $75 = $q;
   $76 = $75 + 0 | 0;
   $77 = _clip($76, 127) | 0;
   $78 = 1960 + ($77 << 1) | 0;
   $79 = SAFE_HEAP_LOAD($78 | 0, 2, 0) | 0 | 0;
   $80 = $79 & 65535;
   $81 = $m;
   $82 = $81 + 4 | 0;
   SAFE_HEAP_STORE($82 | 0, $80 | 0, 4);
   $83 = $q;
   $84 = $dqy2_dc;
   $85 = $83 + $84 | 0;
   $86 = _clip($85, 127) | 0;
   $87 = 3425 + $86 | 0;
   $88 = SAFE_HEAP_LOAD($87 >> 0 | 0, 1, 0) | 0 | 0;
   $89 = $88 & 255;
   $90 = $89 << 1;
   $91 = $m;
   $92 = $91 + 8 | 0;
   SAFE_HEAP_STORE($92 | 0, $90 | 0, 4);
   $93 = $q;
   $94 = $dqy2_ac;
   $95 = $93 + $94 | 0;
   $96 = _clip($95, 127) | 0;
   $97 = 1960 + ($96 << 1) | 0;
   $98 = SAFE_HEAP_LOAD($97 | 0, 2, 0) | 0 | 0;
   $99 = $98 & 65535;
   $100 = $99 * 101581 | 0;
   $101 = $100 >> 16;
   $102 = $m;
   $103 = $102 + 8 | 0;
   $104 = $103 + 4 | 0;
   SAFE_HEAP_STORE($104 | 0, $101 | 0, 4);
   $105 = $m;
   $106 = $105 + 8 | 0;
   $107 = $106 + 4 | 0;
   $108 = SAFE_HEAP_LOAD($107 | 0, 4, 0) | 0 | 0;
   $109 = ($108 | 0) < 8;
   if ($109) {
    $110 = $m;
    $111 = $110 + 8 | 0;
    $112 = $111 + 4 | 0;
    SAFE_HEAP_STORE($112 | 0, 8 | 0, 4);
   }
   $113 = $q;
   $114 = $dquv_dc;
   $115 = $113 + $114 | 0;
   $116 = _clip($115, 117) | 0;
   $117 = 3425 + $116 | 0;
   $118 = SAFE_HEAP_LOAD($117 >> 0 | 0, 1, 0) | 0 | 0;
   $119 = $118 & 255;
   $120 = $m;
   $121 = $120 + 16 | 0;
   SAFE_HEAP_STORE($121 | 0, $119 | 0, 4);
   $122 = $q;
   $123 = $dquv_ac;
   $124 = $122 + $123 | 0;
   $125 = _clip($124, 127) | 0;
   $126 = 1960 + ($125 << 1) | 0;
   $127 = SAFE_HEAP_LOAD($126 | 0, 2, 0) | 0 | 0;
   $128 = $127 & 65535;
   $129 = $m;
   $130 = $129 + 16 | 0;
   $131 = $130 + 4 | 0;
   SAFE_HEAP_STORE($131 | 0, $128 | 0, 4);
   $132 = $q;
   $133 = $dquv_ac;
   $134 = $132 + $133 | 0;
   $135 = $m;
   $136 = $135 + 24 | 0;
   SAFE_HEAP_STORE($136 | 0, $134 | 0, 4);
  }
  $137 = $i;
  $138 = $137 + 1 | 0;
  $i = $138;
 }
 STACKTOP = sp;
 return;
}

function _ProcessRows($dec, $row) {
 $dec = $dec | 0;
 $row = $row | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $14 = 0, $15 = 0;
 var $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0;
 var $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0;
 var $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0;
 var $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0;
 var $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $in_stride = 0, $io = 0, $num_rows = 0, $num_rows_out = 0, $output = 0, $rgba = 0, $rows = 0;
 var $rows_data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $rows_data = sp + 20 | 0;
 $0 = $dec;
 $1 = $row;
 $2 = $0;
 $3 = $2 + 16 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = $0;
 $6 = $5 + 100 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = $0;
 $9 = $8 + 108 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $11 = Math_imul($7, $10) | 0;
 $12 = $4 + ($11 << 2) | 0;
 $rows = $12;
 $13 = $1;
 $14 = $0;
 $15 = $14 + 108 | 0;
 $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
 $17 = $13 - $16 | 0;
 $num_rows = $17;
 $18 = $num_rows;
 $19 = ($18 | 0) <= 0;
 if ($19) {
  STACKTOP = sp;
  return;
 }
 $20 = $0;
 $21 = $num_rows;
 $22 = $rows;
 _ApplyInverseTransforms($20, $21, $22);
 $23 = $0;
 $24 = $23 + 8 | 0;
 $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
 $io = $25;
 $26 = $0;
 $27 = $26 + 20 | 0;
 $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($rows_data | 0, $28 | 0, 4);
 $29 = $io;
 $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
 $31 = $30 << 2;
 $in_stride = $31;
 $32 = $io;
 $33 = $0;
 $34 = $33 + 108 | 0;
 $35 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
 $36 = $1;
 $37 = $in_stride;
 $38 = _SetCropWindow($32, $35, $36, $rows_data, $37) | 0;
 $39 = ($38 | 0) != 0;
 do {
  if ($39) {
   $40 = $0;
   $41 = $40 + 12 | 0;
   $42 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
   $output = $42;
   $43 = $output;
   $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
   $45 = _WebPIsRGBMode115($44) | 0;
   $46 = ($45 | 0) != 0;
   if ($46) {
    $47 = $output;
    $48 = $47 + 16 | 0;
    $buf = $48;
    $49 = $buf;
    $50 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0;
    $51 = $0;
    $52 = $51 + 116 | 0;
    $53 = SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0;
    $54 = $buf;
    $55 = $54 + 4 | 0;
    $56 = SAFE_HEAP_LOAD($55 | 0, 4, 0) | 0 | 0;
    $57 = Math_imul($53, $56) | 0;
    $58 = $50 + $57 | 0;
    $rgba = $58;
    $59 = $io;
    $60 = $59 + 92 | 0;
    $61 = SAFE_HEAP_LOAD($60 | 0, 4, 0) | 0 | 0;
    $62 = ($61 | 0) != 0;
    if ($62) {
     $63 = $0;
     $64 = SAFE_HEAP_LOAD($rows_data | 0, 4, 0) | 0 | 0;
     $65 = $in_stride;
     $66 = $io;
     $67 = $66 + 16 | 0;
     $68 = SAFE_HEAP_LOAD($67 | 0, 4, 0) | 0 | 0;
     $69 = $rgba;
     $70 = $buf;
     $71 = $70 + 4 | 0;
     $72 = SAFE_HEAP_LOAD($71 | 0, 4, 0) | 0 | 0;
     $73 = _EmitRescaledRowsRGBA($63, $64, $65, $68, $69, $72) | 0;
     $89 = $73;
    } else {
     $74 = $output;
     $75 = SAFE_HEAP_LOAD($74 | 0, 4, 0) | 0 | 0;
     $76 = SAFE_HEAP_LOAD($rows_data | 0, 4, 0) | 0 | 0;
     $77 = $in_stride;
     $78 = $io;
     $79 = $78 + 12 | 0;
     $80 = SAFE_HEAP_LOAD($79 | 0, 4, 0) | 0 | 0;
     $81 = $io;
     $82 = $81 + 16 | 0;
     $83 = SAFE_HEAP_LOAD($82 | 0, 4, 0) | 0 | 0;
     $84 = $rgba;
     $85 = $buf;
     $86 = $85 + 4 | 0;
     $87 = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0;
     $88 = _EmitRows($75, $76, $77, $80, $83, $84, $87) | 0;
     $89 = $88;
    }
    $num_rows_out = $89;
    $90 = $num_rows_out;
    $91 = $0;
    $92 = $91 + 116 | 0;
    $93 = SAFE_HEAP_LOAD($92 | 0, 4, 0) | 0 | 0;
    $94 = $93 + $90 | 0;
    SAFE_HEAP_STORE($92 | 0, $94 | 0, 4);
   } else {
    $95 = $io;
    $96 = $95 + 92 | 0;
    $97 = SAFE_HEAP_LOAD($96 | 0, 4, 0) | 0 | 0;
    $98 = ($97 | 0) != 0;
    $99 = $0;
    $100 = SAFE_HEAP_LOAD($rows_data | 0, 4, 0) | 0 | 0;
    $101 = $in_stride;
    $102 = $io;
    if ($98) {
     $103 = $102 + 16 | 0;
     $104 = SAFE_HEAP_LOAD($103 | 0, 4, 0) | 0 | 0;
     $105 = _EmitRescaledRowsYUVA($99, $100, $101, $104) | 0;
     $114 = $105;
    } else {
     $106 = $102 + 12 | 0;
     $107 = SAFE_HEAP_LOAD($106 | 0, 4, 0) | 0 | 0;
     $108 = $io;
     $109 = $108 + 16 | 0;
     $110 = SAFE_HEAP_LOAD($109 | 0, 4, 0) | 0 | 0;
     $111 = _EmitRowsYUVA($99, $100, $101, $107, $110) | 0;
     $114 = $111;
    }
    $112 = $0;
    $113 = $112 + 116 | 0;
    SAFE_HEAP_STORE($113 | 0, $114 | 0, 4);
   }
   $115 = $0;
   $116 = $115 + 116 | 0;
   $117 = SAFE_HEAP_LOAD($116 | 0, 4, 0) | 0 | 0;
   $118 = $output;
   $119 = $118 + 8 | 0;
   $120 = SAFE_HEAP_LOAD($119 | 0, 4, 0) | 0 | 0;
   $121 = ($117 | 0) <= ($120 | 0);
   if ($121) {
    break;
   } else {
    ___assert_fail(8240 | 0, 7124 | 0, 764, 8277 | 0);
   }
  }
 } while (0);
 $122 = $1;
 $123 = $0;
 $124 = $123 + 108 | 0;
 SAFE_HEAP_STORE($124 | 0, $122 | 0, 4);
 $125 = $0;
 $126 = $125 + 108 | 0;
 $127 = SAFE_HEAP_LOAD($126 | 0, 4, 0) | 0 | 0;
 $128 = $0;
 $129 = $128 + 104 | 0;
 $130 = SAFE_HEAP_LOAD($129 | 0, 4, 0) | 0 | 0;
 $131 = ($127 | 0) <= ($130 | 0);
 if (!$131) {
  ___assert_fail(8289 | 0, 7124 | 0, 770, 8277 | 0);
 }
 STACKTOP = sp;
 return;
}

function _WebPRescalerExportRowExpandC($wrk) {
 $wrk = $wrk | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $A = 0, $B = 0, $I = 0, $J = 0, $J1 = 0, $dst = 0, $frow = 0, $irow = 0, $or$cond = 0, $or$cond3 = 0, $v = 0, $v2 = 0, $x_out = 0, $x_out_max = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $I = sp;
 $0 = $wrk;
 $1 = $0;
 $2 = $1 + 68 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $dst = $3;
 $4 = $0;
 $5 = $4 + 76 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $irow = $6;
 $7 = $0;
 $8 = $7 + 52 | 0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $10 = $0;
 $11 = $10 + 8 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = Math_imul($9, $12) | 0;
 $x_out_max = $13;
 $14 = $0;
 $15 = $14 + 80 | 0;
 $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
 $frow = $16;
 $17 = $0;
 $18 = _WebPRescalerOutputDone334($17) | 0;
 $19 = ($18 | 0) != 0;
 if ($19) {
  ___assert_fail(13271 | 0, 13084 | 0, 101, 13300 | 0);
 }
 $20 = $0;
 $21 = $20 + 24 | 0;
 $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
 $23 = ($22 | 0) <= 0;
 if (!$23) {
  ___assert_fail(13329 | 0, 13084 | 0, 102, 13300 | 0);
 }
 $24 = $0;
 $25 = $24 + 4 | 0;
 $26 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
 $27 = ($26 | 0) != 0;
 if (!$27) {
  ___assert_fail(13347 | 0, 13084 | 0, 103, 13300 | 0);
 }
 $28 = $0;
 $29 = $28 + 32 | 0;
 $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
 $31 = ($30 | 0) != 0;
 if (!$31) {
  ___assert_fail(13361 | 0, 13084 | 0, 104, 13300 | 0);
 }
 $32 = $0;
 $33 = $32 + 24 | 0;
 $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
 $35 = ($34 | 0) == 0;
 if ($35) {
  $x_out = 0;
  while (1) {
   $36 = $x_out;
   $37 = $x_out_max;
   $38 = ($36 | 0) < ($37 | 0);
   if (!$38) {
    label = 20;
    break;
   }
   $39 = $x_out;
   $40 = $frow;
   $41 = $40 + ($39 << 2) | 0;
   $42 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
   $J = $42;
   $43 = $J;
   $44 = $0;
   $45 = $44 + 16 | 0;
   $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
   $47 = ___muldi3($43 | 0, 0, $46 | 0, 0) | 0;
   $48 = tempRet0;
   _i64Add($47 | 0, $48 | 0, -2147483648, 0) | 0;
   $49 = tempRet0;
   $v = $49;
   $50 = $v;
   $51 = ($50 | 0) >= 0;
   $52 = $v;
   $53 = ($52 | 0) <= 255;
   $or$cond = $51 & $53;
   if (!$or$cond) {
    label = 13;
    break;
   }
   $54 = $v;
   $55 = $54 & 255;
   $56 = $x_out;
   $57 = $dst;
   $58 = $57 + $56 | 0;
   SAFE_HEAP_STORE($58 >> 0 | 0, $55 | 0, 1);
   $59 = $x_out;
   $60 = $59 + 1 | 0;
   $x_out = $60;
  }
  if ((label | 0) == 13) {
   ___assert_fail(13377 | 0, 13084 | 0, 109, 13300 | 0);
  } else if ((label | 0) == 20) {
   STACKTOP = sp;
   return;
  }
 } else {
  $61 = $0;
  $62 = $61 + 24 | 0;
  $63 = SAFE_HEAP_LOAD($62 | 0, 4, 0) | 0 | 0;
  $64 = 0 - $63 | 0;
  $65 = ($64 | 0) < 0;
  $65 << 31 >> 31;
  $66 = $0;
  $67 = $66 + 32 | 0;
  $68 = SAFE_HEAP_LOAD($67 | 0, 4, 0) | 0 | 0;
  $69 = ($68 | 0) < 0;
  $70 = $69 << 31 >> 31;
  $71 = ___udivdi3(0, $64 | 0, $68 | 0, $70 | 0) | 0;
  $72 = tempRet0;
  $B = $71;
  $73 = $B;
  $74 = _i64Subtract(0, 1, $73 | 0, 0) | 0;
  $75 = tempRet0;
  $A = $74;
  $x_out = 0;
  while (1) {
   $76 = $x_out;
   $77 = $x_out_max;
   $78 = ($76 | 0) < ($77 | 0);
   if (!$78) {
    label = 20;
    break;
   }
   $79 = $A;
   $80 = $x_out;
   $81 = $frow;
   $82 = $81 + ($80 << 2) | 0;
   $83 = SAFE_HEAP_LOAD($82 | 0, 4, 0) | 0 | 0;
   $84 = ___muldi3($79 | 0, 0, $83 | 0, 0) | 0;
   $85 = tempRet0;
   $86 = $B;
   $87 = $x_out;
   $88 = $irow;
   $89 = $88 + ($87 << 2) | 0;
   $90 = SAFE_HEAP_LOAD($89 | 0, 4, 0) | 0 | 0;
   $91 = ___muldi3($86 | 0, 0, $90 | 0, 0) | 0;
   $92 = tempRet0;
   $93 = _i64Add($84 | 0, $85 | 0, $91 | 0, $92 | 0) | 0;
   $94 = tempRet0;
   $95 = $I;
   $96 = $95;
   SAFE_HEAP_STORE($96 | 0, $93 | 0, 4);
   $97 = $95 + 4 | 0;
   $98 = $97;
   SAFE_HEAP_STORE($98 | 0, $94 | 0, 4);
   $99 = $I;
   $100 = $99;
   $101 = SAFE_HEAP_LOAD($100 | 0, 4, 0) | 0 | 0;
   $102 = $99 + 4 | 0;
   $103 = $102;
   $104 = SAFE_HEAP_LOAD($103 | 0, 4, 0) | 0 | 0;
   _i64Add($101 | 0, $104 | 0, -2147483648, 0) | 0;
   $105 = tempRet0;
   $J1 = $105;
   $106 = $J1;
   $107 = $0;
   $108 = $107 + 16 | 0;
   $109 = SAFE_HEAP_LOAD($108 | 0, 4, 0) | 0 | 0;
   $110 = ___muldi3($106 | 0, 0, $109 | 0, 0) | 0;
   $111 = tempRet0;
   _i64Add($110 | 0, $111 | 0, -2147483648, 0) | 0;
   $112 = tempRet0;
   $v2 = $112;
   $113 = $v2;
   $114 = ($113 | 0) >= 0;
   $115 = $v2;
   $116 = ($115 | 0) <= 255;
   $or$cond3 = $114 & $116;
   if (!$or$cond3) {
    label = 18;
    break;
   }
   $117 = $v2;
   $118 = $117 & 255;
   $119 = $x_out;
   $120 = $dst;
   $121 = $120 + $119 | 0;
   SAFE_HEAP_STORE($121 >> 0 | 0, $118 | 0, 1);
   $122 = $x_out;
   $123 = $122 + 1 | 0;
   $x_out = $123;
  }
  if ((label | 0) == 18) {
   ___assert_fail(13377 | 0, 13084 | 0, 120, 13300 | 0);
  } else if ((label | 0) == 20) {
   STACKTOP = sp;
   return;
  }
 }
}

function _DecodeInto($data, $data_size, $params) {
 $data = $data | 0;
 $data_size = $data_size | 0;
 $params = $params | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $dec = 0;
 var $dec1 = 0, $headers = 0, $io = 0, $status = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 176 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $io = sp + 44 | 0;
 $headers = sp + 8 | 0;
 $1 = $data;
 $2 = $data_size;
 $3 = $params;
 $4 = $1;
 SAFE_HEAP_STORE($headers | 0, $4 | 0, 4);
 $5 = $2;
 $6 = $headers + 4 | 0;
 SAFE_HEAP_STORE($6 | 0, $5 | 0, 4);
 $7 = $headers + 8 | 0;
 SAFE_HEAP_STORE($7 | 0, 1 | 0, 4);
 $8 = _WebPParseHeaders($headers) | 0;
 $status = $8;
 $9 = $status;
 $10 = ($9 | 0) != 0;
 if ($10) {
  $11 = $status;
  $0 = $11;
  $118 = $0;
  STACKTOP = sp;
  return $118 | 0;
 }
 $12 = $3;
 $13 = ($12 | 0) != (0 | 0);
 if (!$13) {
  ___assert_fail(9005 | 0, 8703 | 0, 461, 9020 | 0);
 }
 _VP8InitIo147($io) | 0;
 $14 = SAFE_HEAP_LOAD($headers | 0, 4, 0) | 0 | 0;
 $15 = $headers + 12 | 0;
 $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
 $17 = $14 + $16 | 0;
 $18 = $io + 64 | 0;
 SAFE_HEAP_STORE($18 | 0, $17 | 0, 4);
 $19 = $headers + 4 | 0;
 $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
 $21 = $headers + 12 | 0;
 $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
 $23 = $20 - $22 | 0;
 $24 = $io + 60 | 0;
 SAFE_HEAP_STORE($24 | 0, $23 | 0, 4);
 $25 = $3;
 _WebPInitCustomIo($25, $io);
 $26 = $headers + 32 | 0;
 $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
 $28 = ($27 | 0) != 0;
 if ($28) {
  $75 = _VP8LNew() | 0;
  $dec1 = $75;
  $76 = $dec1;
  $77 = ($76 | 0) == (0 | 0);
  if ($77) {
   $0 = 1;
   $118 = $0;
   STACKTOP = sp;
   return $118 | 0;
  }
  $78 = $dec1;
  $79 = _VP8LDecodeHeader($78, $io) | 0;
  $80 = ($79 | 0) != 0;
  if ($80) {
   $83 = SAFE_HEAP_LOAD($io | 0, 4, 0) | 0 | 0;
   $84 = $io + 4 | 0;
   $85 = SAFE_HEAP_LOAD($84 | 0, 4, 0) | 0 | 0;
   $86 = $3;
   $87 = $86 + 20 | 0;
   $88 = SAFE_HEAP_LOAD($87 | 0, 4, 0) | 0 | 0;
   $89 = $3;
   $90 = SAFE_HEAP_LOAD($89 | 0, 4, 0) | 0 | 0;
   $91 = _WebPAllocateDecBuffer($83, $85, $88, $90) | 0;
   $status = $91;
   $92 = $status;
   $93 = ($92 | 0) == 0;
   if ($93) {
    $94 = $dec1;
    $95 = _VP8LDecodeImage($94) | 0;
    $96 = ($95 | 0) != 0;
    if (!$96) {
     $97 = $dec1;
     $98 = SAFE_HEAP_LOAD($97 | 0, 4, 0) | 0 | 0;
     $status = $98;
    }
   }
  } else {
   $81 = $dec1;
   $82 = SAFE_HEAP_LOAD($81 | 0, 4, 0) | 0 | 0;
   $status = $82;
  }
  $99 = $dec1;
  _VP8LDelete($99);
 } else {
  $29 = _VP8New() | 0;
  $dec = $29;
  $30 = $dec;
  $31 = ($30 | 0) == (0 | 0);
  if ($31) {
   $0 = 1;
   $118 = $0;
   STACKTOP = sp;
   return $118 | 0;
  }
  $32 = $headers + 16 | 0;
  $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
  $34 = $dec;
  $35 = $34 + 2348 | 0;
  SAFE_HEAP_STORE($35 | 0, $33 | 0, 4);
  $36 = $headers + 20 | 0;
  $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
  $38 = $dec;
  $39 = $38 + 2352 | 0;
  SAFE_HEAP_STORE($39 | 0, $37 | 0, 4);
  $40 = $dec;
  $41 = _VP8GetHeaders($40, $io) | 0;
  $42 = ($41 | 0) != 0;
  if ($42) {
   $45 = SAFE_HEAP_LOAD($io | 0, 4, 0) | 0 | 0;
   $46 = $io + 4 | 0;
   $47 = SAFE_HEAP_LOAD($46 | 0, 4, 0) | 0 | 0;
   $48 = $3;
   $49 = $48 + 20 | 0;
   $50 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0;
   $51 = $3;
   $52 = SAFE_HEAP_LOAD($51 | 0, 4, 0) | 0 | 0;
   $53 = _WebPAllocateDecBuffer($45, $47, $50, $52) | 0;
   $status = $53;
   $54 = $status;
   $55 = ($54 | 0) == 0;
   if ($55) {
    $56 = $3;
    $57 = $56 + 20 | 0;
    $58 = SAFE_HEAP_LOAD($57 | 0, 4, 0) | 0 | 0;
    $59 = SAFE_HEAP_LOAD($io | 0, 4, 0) | 0 | 0;
    $60 = $io + 4 | 0;
    $61 = SAFE_HEAP_LOAD($60 | 0, 4, 0) | 0 | 0;
    $62 = _VP8GetThreadMethod($58, $headers, $59, $61) | 0;
    $63 = $dec;
    $64 = $63 + 148 | 0;
    SAFE_HEAP_STORE($64 | 0, $62 | 0, 4);
    $65 = $3;
    $66 = $65 + 20 | 0;
    $67 = SAFE_HEAP_LOAD($66 | 0, 4, 0) | 0 | 0;
    $68 = $dec;
    _VP8InitDithering($67, $68);
    $69 = $dec;
    $70 = _VP8Decode($69, $io) | 0;
    $71 = ($70 | 0) != 0;
    if (!$71) {
     $72 = $dec;
     $73 = SAFE_HEAP_LOAD($72 | 0, 4, 0) | 0 | 0;
     $status = $73;
    }
   }
  } else {
   $43 = $dec;
   $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
   $status = $44;
  }
  $74 = $dec;
  _VP8Delete($74);
 }
 $100 = $status;
 $101 = ($100 | 0) != 0;
 if ($101) {
  $102 = $3;
  $103 = SAFE_HEAP_LOAD($102 | 0, 4, 0) | 0 | 0;
  _WebPFreeDecBuffer($103);
 }
 $104 = $3;
 $105 = $104 + 20 | 0;
 $106 = SAFE_HEAP_LOAD($105 | 0, 4, 0) | 0 | 0;
 $107 = ($106 | 0) != (0 | 0);
 if ($107) {
  $108 = $3;
  $109 = $108 + 20 | 0;
  $110 = SAFE_HEAP_LOAD($109 | 0, 4, 0) | 0 | 0;
  $111 = $110 + 48 | 0;
  $112 = SAFE_HEAP_LOAD($111 | 0, 4, 0) | 0 | 0;
  $113 = ($112 | 0) != 0;
  if ($113) {
   $114 = $3;
   $115 = SAFE_HEAP_LOAD($114 | 0, 4, 0) | 0 | 0;
   $116 = _WebPFlipBuffer($115) | 0;
   $status = $116;
  }
 }
 $117 = $status;
 $0 = $117;
 $118 = $0;
 STACKTOP = sp;
 return $118 | 0;
}

function _TransformWHT($in, $out) {
 $in = $in | 0;
 $out = $out | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $155 = 0, $156 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0;
 var $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0;
 var $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0;
 var $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0;
 var $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a0 = 0, $a01 = 0, $a1 = 0;
 var $a12 = 0, $a2 = 0, $a23 = 0, $a3 = 0, $a34 = 0, $dc = 0, $i = 0, $tmp = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 112 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $tmp = sp + 40 | 0;
 $0 = $in;
 $1 = $out;
 $i = 0;
 while (1) {
  $2 = $i;
  $3 = ($2 | 0) < 4;
  if (!$3) {
   break;
  }
  $4 = $i;
  $5 = 0 + $4 | 0;
  $6 = $0;
  $7 = $6 + ($5 << 1) | 0;
  $8 = SAFE_HEAP_LOAD($7 | 0, 2, 0) | 0 | 0;
  $9 = $8 << 16 >> 16;
  $10 = $i;
  $11 = 12 + $10 | 0;
  $12 = $0;
  $13 = $12 + ($11 << 1) | 0;
  $14 = SAFE_HEAP_LOAD($13 | 0, 2, 0) | 0 | 0;
  $15 = $14 << 16 >> 16;
  $16 = $9 + $15 | 0;
  $a0 = $16;
  $17 = $i;
  $18 = 4 + $17 | 0;
  $19 = $0;
  $20 = $19 + ($18 << 1) | 0;
  $21 = SAFE_HEAP_LOAD($20 | 0, 2, 0) | 0 | 0;
  $22 = $21 << 16 >> 16;
  $23 = $i;
  $24 = 8 + $23 | 0;
  $25 = $0;
  $26 = $25 + ($24 << 1) | 0;
  $27 = SAFE_HEAP_LOAD($26 | 0, 2, 0) | 0 | 0;
  $28 = $27 << 16 >> 16;
  $29 = $22 + $28 | 0;
  $a1 = $29;
  $30 = $i;
  $31 = 4 + $30 | 0;
  $32 = $0;
  $33 = $32 + ($31 << 1) | 0;
  $34 = SAFE_HEAP_LOAD($33 | 0, 2, 0) | 0 | 0;
  $35 = $34 << 16 >> 16;
  $36 = $i;
  $37 = 8 + $36 | 0;
  $38 = $0;
  $39 = $38 + ($37 << 1) | 0;
  $40 = SAFE_HEAP_LOAD($39 | 0, 2, 0) | 0 | 0;
  $41 = $40 << 16 >> 16;
  $42 = $35 - $41 | 0;
  $a2 = $42;
  $43 = $i;
  $44 = 0 + $43 | 0;
  $45 = $0;
  $46 = $45 + ($44 << 1) | 0;
  $47 = SAFE_HEAP_LOAD($46 | 0, 2, 0) | 0 | 0;
  $48 = $47 << 16 >> 16;
  $49 = $i;
  $50 = 12 + $49 | 0;
  $51 = $0;
  $52 = $51 + ($50 << 1) | 0;
  $53 = SAFE_HEAP_LOAD($52 | 0, 2, 0) | 0 | 0;
  $54 = $53 << 16 >> 16;
  $55 = $48 - $54 | 0;
  $a3 = $55;
  $56 = $a0;
  $57 = $a1;
  $58 = $56 + $57 | 0;
  $59 = $i;
  $60 = 0 + $59 | 0;
  $61 = $tmp + ($60 << 2) | 0;
  SAFE_HEAP_STORE($61 | 0, $58 | 0, 4);
  $62 = $a0;
  $63 = $a1;
  $64 = $62 - $63 | 0;
  $65 = $i;
  $66 = 8 + $65 | 0;
  $67 = $tmp + ($66 << 2) | 0;
  SAFE_HEAP_STORE($67 | 0, $64 | 0, 4);
  $68 = $a3;
  $69 = $a2;
  $70 = $68 + $69 | 0;
  $71 = $i;
  $72 = 4 + $71 | 0;
  $73 = $tmp + ($72 << 2) | 0;
  SAFE_HEAP_STORE($73 | 0, $70 | 0, 4);
  $74 = $a3;
  $75 = $a2;
  $76 = $74 - $75 | 0;
  $77 = $i;
  $78 = 12 + $77 | 0;
  $79 = $tmp + ($78 << 2) | 0;
  SAFE_HEAP_STORE($79 | 0, $76 | 0, 4);
  $80 = $i;
  $81 = $80 + 1 | 0;
  $i = $81;
 }
 $i = 0;
 while (1) {
  $82 = $i;
  $83 = ($82 | 0) < 4;
  if (!$83) {
   break;
  }
  $84 = $i;
  $85 = $84 << 2;
  $86 = 0 + $85 | 0;
  $87 = $tmp + ($86 << 2) | 0;
  $88 = SAFE_HEAP_LOAD($87 | 0, 4, 0) | 0 | 0;
  $89 = $88 + 3 | 0;
  $dc = $89;
  $90 = $dc;
  $91 = $i;
  $92 = $91 << 2;
  $93 = 3 + $92 | 0;
  $94 = $tmp + ($93 << 2) | 0;
  $95 = SAFE_HEAP_LOAD($94 | 0, 4, 0) | 0 | 0;
  $96 = $90 + $95 | 0;
  $a01 = $96;
  $97 = $i;
  $98 = $97 << 2;
  $99 = 1 + $98 | 0;
  $100 = $tmp + ($99 << 2) | 0;
  $101 = SAFE_HEAP_LOAD($100 | 0, 4, 0) | 0 | 0;
  $102 = $i;
  $103 = $102 << 2;
  $104 = 2 + $103 | 0;
  $105 = $tmp + ($104 << 2) | 0;
  $106 = SAFE_HEAP_LOAD($105 | 0, 4, 0) | 0 | 0;
  $107 = $101 + $106 | 0;
  $a12 = $107;
  $108 = $i;
  $109 = $108 << 2;
  $110 = 1 + $109 | 0;
  $111 = $tmp + ($110 << 2) | 0;
  $112 = SAFE_HEAP_LOAD($111 | 0, 4, 0) | 0 | 0;
  $113 = $i;
  $114 = $113 << 2;
  $115 = 2 + $114 | 0;
  $116 = $tmp + ($115 << 2) | 0;
  $117 = SAFE_HEAP_LOAD($116 | 0, 4, 0) | 0 | 0;
  $118 = $112 - $117 | 0;
  $a23 = $118;
  $119 = $dc;
  $120 = $i;
  $121 = $120 << 2;
  $122 = 3 + $121 | 0;
  $123 = $tmp + ($122 << 2) | 0;
  $124 = SAFE_HEAP_LOAD($123 | 0, 4, 0) | 0 | 0;
  $125 = $119 - $124 | 0;
  $a34 = $125;
  $126 = $a01;
  $127 = $a12;
  $128 = $126 + $127 | 0;
  $129 = $128 >> 3;
  $130 = $129 & 65535;
  $131 = $1;
  SAFE_HEAP_STORE($131 | 0, $130 | 0, 2);
  $132 = $a34;
  $133 = $a23;
  $134 = $132 + $133 | 0;
  $135 = $134 >> 3;
  $136 = $135 & 65535;
  $137 = $1;
  $138 = $137 + 32 | 0;
  SAFE_HEAP_STORE($138 | 0, $136 | 0, 2);
  $139 = $a01;
  $140 = $a12;
  $141 = $139 - $140 | 0;
  $142 = $141 >> 3;
  $143 = $142 & 65535;
  $144 = $1;
  $145 = $144 + 64 | 0;
  SAFE_HEAP_STORE($145 | 0, $143 | 0, 2);
  $146 = $a34;
  $147 = $a23;
  $148 = $146 - $147 | 0;
  $149 = $148 >> 3;
  $150 = $149 & 65535;
  $151 = $1;
  $152 = $151 + 96 | 0;
  SAFE_HEAP_STORE($152 | 0, $150 | 0, 2);
  $153 = $1;
  $154 = $153 + 128 | 0;
  $1 = $154;
  $155 = $i;
  $156 = $155 + 1 | 0;
  $i = $156;
 }
 STACKTOP = sp;
 return;
}

function _WebPConvertARGBToUV_C($argb, $u, $v, $src_width, $do_store) {
 $argb = $argb | 0;
 $u = $u | 0;
 $v = $v | 0;
 $src_width = $src_width | 0;
 $do_store = $do_store | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $142 = 0, $143 = 0, $144 = 0, $145 = 0, $146 = 0, $147 = 0, $148 = 0, $149 = 0, $15 = 0, $150 = 0, $151 = 0;
 var $152 = 0, $153 = 0, $154 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $b = 0, $b4 = 0, $g = 0, $g3 = 0, $i = 0;
 var $r = 0, $r2 = 0, $tmp_u = 0, $tmp_u5 = 0, $tmp_v = 0, $tmp_v6 = 0, $uv_width = 0, $v0 = 0, $v01 = 0, $v1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $argb;
 $1 = $u;
 $2 = $v;
 $3 = $src_width;
 $4 = $do_store;
 $5 = $3;
 $6 = $5 >> 1;
 $uv_width = $6;
 $i = 0;
 while (1) {
  $7 = $i;
  $8 = $uv_width;
  $9 = ($7 | 0) < ($8 | 0);
  if (!$9) {
   break;
  }
  $10 = $i;
  $11 = $10 << 1;
  $12 = $11 + 0 | 0;
  $13 = $0;
  $14 = $13 + ($12 << 2) | 0;
  $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
  $v0 = $15;
  $16 = $i;
  $17 = $16 << 1;
  $18 = $17 + 1 | 0;
  $19 = $0;
  $20 = $19 + ($18 << 2) | 0;
  $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
  $v1 = $21;
  $22 = $v0;
  $23 = $22 >>> 15;
  $24 = $23 & 510;
  $25 = $v1;
  $26 = $25 >>> 15;
  $27 = $26 & 510;
  $28 = $24 + $27 | 0;
  $r = $28;
  $29 = $v0;
  $30 = $29 >>> 7;
  $31 = $30 & 510;
  $32 = $v1;
  $33 = $32 >>> 7;
  $34 = $33 & 510;
  $35 = $31 + $34 | 0;
  $g = $35;
  $36 = $v0;
  $37 = $36 << 1;
  $38 = $37 & 510;
  $39 = $v1;
  $40 = $39 << 1;
  $41 = $40 & 510;
  $42 = $38 + $41 | 0;
  $b = $42;
  $43 = $r;
  $44 = $g;
  $45 = $b;
  $46 = _VP8RGBToU($43, $44, $45, 131072) | 0;
  $tmp_u = $46;
  $47 = $r;
  $48 = $g;
  $49 = $b;
  $50 = _VP8RGBToV($47, $48, $49, 131072) | 0;
  $tmp_v = $50;
  $51 = $4;
  $52 = ($51 | 0) != 0;
  if ($52) {
   $53 = $tmp_u;
   $54 = $53 & 255;
   $55 = $i;
   $56 = $1;
   $57 = $56 + $55 | 0;
   SAFE_HEAP_STORE($57 >> 0 | 0, $54 | 0, 1);
   $58 = $tmp_v;
   $59 = $58 & 255;
   $60 = $i;
   $61 = $2;
   $62 = $61 + $60 | 0;
   SAFE_HEAP_STORE($62 >> 0 | 0, $59 | 0, 1);
  } else {
   $63 = $i;
   $64 = $1;
   $65 = $64 + $63 | 0;
   $66 = SAFE_HEAP_LOAD($65 >> 0 | 0, 1, 0) | 0 | 0;
   $67 = $66 & 255;
   $68 = $tmp_u;
   $69 = $67 + $68 | 0;
   $70 = $69 + 1 | 0;
   $71 = $70 >> 1;
   $72 = $71 & 255;
   $73 = $i;
   $74 = $1;
   $75 = $74 + $73 | 0;
   SAFE_HEAP_STORE($75 >> 0 | 0, $72 | 0, 1);
   $76 = $i;
   $77 = $2;
   $78 = $77 + $76 | 0;
   $79 = SAFE_HEAP_LOAD($78 >> 0 | 0, 1, 0) | 0 | 0;
   $80 = $79 & 255;
   $81 = $tmp_v;
   $82 = $80 + $81 | 0;
   $83 = $82 + 1 | 0;
   $84 = $83 >> 1;
   $85 = $84 & 255;
   $86 = $i;
   $87 = $2;
   $88 = $87 + $86 | 0;
   SAFE_HEAP_STORE($88 >> 0 | 0, $85 | 0, 1);
  }
  $89 = $i;
  $90 = $89 + 1 | 0;
  $i = $90;
 }
 $91 = $3;
 $92 = $91 & 1;
 $93 = ($92 | 0) != 0;
 if (!$93) {
  STACKTOP = sp;
  return;
 }
 $94 = $i;
 $95 = $94 << 1;
 $96 = $95 + 0 | 0;
 $97 = $0;
 $98 = $97 + ($96 << 2) | 0;
 $99 = SAFE_HEAP_LOAD($98 | 0, 4, 0) | 0 | 0;
 $v01 = $99;
 $100 = $v01;
 $101 = $100 >>> 14;
 $102 = $101 & 1020;
 $r2 = $102;
 $103 = $v01;
 $104 = $103 >>> 6;
 $105 = $104 & 1020;
 $g3 = $105;
 $106 = $v01;
 $107 = $106 << 2;
 $108 = $107 & 1020;
 $b4 = $108;
 $109 = $r2;
 $110 = $g3;
 $111 = $b4;
 $112 = _VP8RGBToU($109, $110, $111, 131072) | 0;
 $tmp_u5 = $112;
 $113 = $r2;
 $114 = $g3;
 $115 = $b4;
 $116 = _VP8RGBToV($113, $114, $115, 131072) | 0;
 $tmp_v6 = $116;
 $117 = $4;
 $118 = ($117 | 0) != 0;
 if ($118) {
  $119 = $tmp_u5;
  $120 = $119 & 255;
  $121 = $i;
  $122 = $1;
  $123 = $122 + $121 | 0;
  SAFE_HEAP_STORE($123 >> 0 | 0, $120 | 0, 1);
  $124 = $tmp_v6;
  $125 = $124 & 255;
  $126 = $i;
  $127 = $2;
  $128 = $127 + $126 | 0;
  SAFE_HEAP_STORE($128 >> 0 | 0, $125 | 0, 1);
  STACKTOP = sp;
  return;
 } else {
  $129 = $i;
  $130 = $1;
  $131 = $130 + $129 | 0;
  $132 = SAFE_HEAP_LOAD($131 >> 0 | 0, 1, 0) | 0 | 0;
  $133 = $132 & 255;
  $134 = $tmp_u5;
  $135 = $133 + $134 | 0;
  $136 = $135 + 1 | 0;
  $137 = $136 >> 1;
  $138 = $137 & 255;
  $139 = $i;
  $140 = $1;
  $141 = $140 + $139 | 0;
  SAFE_HEAP_STORE($141 >> 0 | 0, $138 | 0, 1);
  $142 = $i;
  $143 = $2;
  $144 = $143 + $142 | 0;
  $145 = SAFE_HEAP_LOAD($144 >> 0 | 0, 1, 0) | 0 | 0;
  $146 = $145 & 255;
  $147 = $tmp_v6;
  $148 = $146 + $147 | 0;
  $149 = $148 + 1 | 0;
  $150 = $149 >> 1;
  $151 = $150 & 255;
  $152 = $i;
  $153 = $2;
  $154 = $153 + $152 | 0;
  SAFE_HEAP_STORE($154 >> 0 | 0, $151 | 0, 1);
  STACKTOP = sp;
  return;
 }
}

function _InitRGBRescaler($io, $p) {
 $io = $io | 0;
 $p = $p | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $has_alpha = 0;
 var $out_height = 0, $out_width = 0, $tmp = 0, $tmp_size1 = 0, $tmp_size2 = 0, $total_size = 0, $uv_in_height = 0, $uv_in_width = 0, $work = 0, $work_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $io;
 $2 = $p;
 $3 = $2;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = _WebPIsAlphaMode($5) | 0;
 $has_alpha = $6;
 $7 = $1;
 $8 = $7 + 96 | 0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $out_width = $9;
 $10 = $1;
 $11 = $10 + 100 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $out_height = $12;
 $13 = $1;
 $14 = $13 + 12 | 0;
 $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
 $16 = $15 + 1 | 0;
 $17 = $16 >> 1;
 $uv_in_width = $17;
 $18 = $1;
 $19 = $18 + 16 | 0;
 $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
 $21 = $20 + 1 | 0;
 $22 = $21 >> 1;
 $uv_in_height = $22;
 $23 = $out_width;
 $24 = $23 << 1;
 $work_size = $24;
 $25 = $work_size;
 $26 = $25 * 3 | 0;
 $tmp_size1 = $26;
 $27 = $out_width;
 $28 = $27 * 3 | 0;
 $tmp_size2 = $28;
 $29 = $has_alpha;
 $30 = ($29 | 0) != 0;
 if ($30) {
  $31 = $work_size;
  $32 = $tmp_size1;
  $33 = $32 + $31 | 0;
  $tmp_size1 = $33;
  $34 = $out_width;
  $35 = $tmp_size2;
  $36 = $35 + $34 | 0;
  $tmp_size2 = $36;
 }
 $37 = $tmp_size1;
 $38 = $37 << 2;
 $39 = $tmp_size2;
 $40 = $39;
 $41 = $38 + $40 | 0;
 $total_size = $41;
 $42 = $total_size;
 $43 = _WebPSafeMalloc(1, 0, $42) | 0;
 $44 = $2;
 $45 = $44 + 360 | 0;
 SAFE_HEAP_STORE($45 | 0, $43 | 0, 4);
 $46 = $2;
 $47 = $46 + 360 | 0;
 $48 = SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 0;
 $49 = ($48 | 0) == (0 | 0);
 if ($49) {
  $0 = 0;
  $138 = $0;
  STACKTOP = sp;
  return $138 | 0;
 }
 $50 = $2;
 $51 = $50 + 360 | 0;
 $52 = SAFE_HEAP_LOAD($51 | 0, 4, 0) | 0 | 0;
 $work = $52;
 $53 = $work;
 $54 = $tmp_size1;
 $55 = $53 + ($54 << 2) | 0;
 $tmp = $55;
 $56 = $2;
 $57 = $56 + 24 | 0;
 $58 = $1;
 $59 = $58 + 12 | 0;
 $60 = SAFE_HEAP_LOAD($59 | 0, 4, 0) | 0 | 0;
 $61 = $1;
 $62 = $61 + 16 | 0;
 $63 = SAFE_HEAP_LOAD($62 | 0, 4, 0) | 0 | 0;
 $64 = $tmp;
 $65 = $out_width;
 $66 = 0;
 $67 = $64 + $66 | 0;
 $68 = $out_width;
 $69 = $out_height;
 $70 = $work;
 $71 = $work_size;
 $72 = 0;
 $73 = $70 + ($72 << 2) | 0;
 _WebPRescalerInit($57, $60, $63, $67, $68, $69, 0, 1, $73);
 $74 = $2;
 $75 = $74 + 108 | 0;
 $76 = $uv_in_width;
 $77 = $uv_in_height;
 $78 = $tmp;
 $79 = $out_width;
 $80 = $79;
 $81 = $78 + $80 | 0;
 $82 = $out_width;
 $83 = $out_height;
 $84 = $work;
 $85 = $work_size;
 $86 = $85;
 $87 = $84 + ($86 << 2) | 0;
 _WebPRescalerInit($75, $76, $77, $81, $82, $83, 0, 1, $87);
 $88 = $2;
 $89 = $88 + 192 | 0;
 $90 = $uv_in_width;
 $91 = $uv_in_height;
 $92 = $tmp;
 $93 = $out_width;
 $94 = $93 << 1;
 $95 = $92 + $94 | 0;
 $96 = $out_width;
 $97 = $out_height;
 $98 = $work;
 $99 = $work_size;
 $100 = $99 << 1;
 $101 = $98 + ($100 << 2) | 0;
 _WebPRescalerInit($89, $90, $91, $95, $96, $97, 0, 1, $101);
 $102 = $2;
 $103 = $102 + 364 | 0;
 SAFE_HEAP_STORE($103 | 0, 20 | 0, 4);
 _WebPInitYUV444Converters();
 $104 = $has_alpha;
 $105 = ($104 | 0) != 0;
 if ($105) {
  $106 = $2;
  $107 = $106 + 276 | 0;
  $108 = $1;
  $109 = $108 + 12 | 0;
  $110 = SAFE_HEAP_LOAD($109 | 0, 4, 0) | 0 | 0;
  $111 = $1;
  $112 = $111 + 16 | 0;
  $113 = SAFE_HEAP_LOAD($112 | 0, 4, 0) | 0 | 0;
  $114 = $tmp;
  $115 = $out_width;
  $116 = $115 * 3 | 0;
  $117 = $114 + $116 | 0;
  $118 = $out_width;
  $119 = $out_height;
  $120 = $work;
  $121 = $work_size;
  $122 = $121 * 3 | 0;
  $123 = $120 + ($122 << 2) | 0;
  _WebPRescalerInit($107, $110, $113, $117, $118, $119, 0, 1, $123);
  $124 = $2;
  $125 = $124 + 368 | 0;
  SAFE_HEAP_STORE($125 | 0, 21 | 0, 4);
  $126 = $2;
  $127 = SAFE_HEAP_LOAD($126 | 0, 4, 0) | 0 | 0;
  $128 = SAFE_HEAP_LOAD($127 | 0, 4, 0) | 0 | 0;
  $129 = ($128 | 0) == 5;
  if ($129) {
   label = 8;
  } else {
   $130 = $2;
   $131 = SAFE_HEAP_LOAD($130 | 0, 4, 0) | 0 | 0;
   $132 = SAFE_HEAP_LOAD($131 | 0, 4, 0) | 0 | 0;
   $133 = ($132 | 0) == 10;
   if ($133) {
    label = 8;
   } else {
    $136 = $2;
    $137 = $136 + 372 | 0;
    SAFE_HEAP_STORE($137 | 0, 23 | 0, 4);
   }
  }
  if ((label | 0) == 8) {
   $134 = $2;
   $135 = $134 + 372 | 0;
   SAFE_HEAP_STORE($135 | 0, 22 | 0, 4);
  }
  _WebPInitAlphaProcessing();
 }
 $0 = 1;
 $138 = $0;
 STACKTOP = sp;
 return $138 | 0;
}

function _InitYUVRescaler($io, $p) {
 $io = $io | 0;
 $p = $p | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $has_alpha = 0, $out_height = 0, $out_width = 0, $tmp_size = 0;
 var $uv_in_height = 0, $uv_in_width = 0, $uv_out_height = 0, $uv_out_width = 0, $uv_work_size = 0, $work = 0, $work_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $io;
 $2 = $p;
 $3 = $2;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = _WebPIsAlphaMode($5) | 0;
 $has_alpha = $6;
 $7 = $2;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $9 = $8 + 16 | 0;
 $buf = $9;
 $10 = $1;
 $11 = $10 + 96 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $out_width = $12;
 $13 = $1;
 $14 = $13 + 100 | 0;
 $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
 $out_height = $15;
 $16 = $out_width;
 $17 = $16 + 1 | 0;
 $18 = $17 >> 1;
 $uv_out_width = $18;
 $19 = $out_height;
 $20 = $19 + 1 | 0;
 $21 = $20 >> 1;
 $uv_out_height = $21;
 $22 = $1;
 $23 = $22 + 12 | 0;
 $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
 $25 = $24 + 1 | 0;
 $26 = $25 >> 1;
 $uv_in_width = $26;
 $27 = $1;
 $28 = $27 + 16 | 0;
 $29 = SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0;
 $30 = $29 + 1 | 0;
 $31 = $30 >> 1;
 $uv_in_height = $31;
 $32 = $out_width;
 $33 = $32 << 1;
 $work_size = $33;
 $34 = $uv_out_width;
 $35 = $34 << 1;
 $uv_work_size = $35;
 $36 = $work_size;
 $37 = $uv_work_size;
 $38 = $37 << 1;
 $39 = $36 + $38 | 0;
 $40 = $39 << 2;
 $tmp_size = $40;
 $41 = $has_alpha;
 $42 = ($41 | 0) != 0;
 if ($42) {
  $43 = $work_size;
  $44 = $43 << 2;
  $45 = $tmp_size;
  $46 = $45 + $44 | 0;
  $tmp_size = $46;
 }
 $47 = $tmp_size;
 $48 = _WebPSafeMalloc(1, 0, $47) | 0;
 $49 = $2;
 $50 = $49 + 360 | 0;
 SAFE_HEAP_STORE($50 | 0, $48 | 0, 4);
 $51 = $2;
 $52 = $51 + 360 | 0;
 $53 = SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0;
 $54 = ($53 | 0) == (0 | 0);
 if ($54) {
  $0 = 0;
  $134 = $0;
  STACKTOP = sp;
  return $134 | 0;
 }
 $55 = $2;
 $56 = $55 + 360 | 0;
 $57 = SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0;
 $work = $57;
 $58 = $2;
 $59 = $58 + 24 | 0;
 $60 = $1;
 $61 = $60 + 12 | 0;
 $62 = SAFE_HEAP_LOAD($61 | 0, 4, 0) | 0 | 0;
 $63 = $1;
 $64 = $63 + 16 | 0;
 $65 = SAFE_HEAP_LOAD($64 | 0, 4, 0) | 0 | 0;
 $66 = $buf;
 $67 = SAFE_HEAP_LOAD($66 | 0, 4, 0) | 0 | 0;
 $68 = $out_width;
 $69 = $out_height;
 $70 = $buf;
 $71 = $70 + 16 | 0;
 $72 = SAFE_HEAP_LOAD($71 | 0, 4, 0) | 0 | 0;
 $73 = $work;
 _WebPRescalerInit($59, $62, $65, $67, $68, $69, $72, 1, $73);
 $74 = $2;
 $75 = $74 + 108 | 0;
 $76 = $uv_in_width;
 $77 = $uv_in_height;
 $78 = $buf;
 $79 = $78 + 4 | 0;
 $80 = SAFE_HEAP_LOAD($79 | 0, 4, 0) | 0 | 0;
 $81 = $uv_out_width;
 $82 = $uv_out_height;
 $83 = $buf;
 $84 = $83 + 20 | 0;
 $85 = SAFE_HEAP_LOAD($84 | 0, 4, 0) | 0 | 0;
 $86 = $work;
 $87 = $work_size;
 $88 = $86 + ($87 << 2) | 0;
 _WebPRescalerInit($75, $76, $77, $80, $81, $82, $85, 1, $88);
 $89 = $2;
 $90 = $89 + 192 | 0;
 $91 = $uv_in_width;
 $92 = $uv_in_height;
 $93 = $buf;
 $94 = $93 + 8 | 0;
 $95 = SAFE_HEAP_LOAD($94 | 0, 4, 0) | 0 | 0;
 $96 = $uv_out_width;
 $97 = $uv_out_height;
 $98 = $buf;
 $99 = $98 + 24 | 0;
 $100 = SAFE_HEAP_LOAD($99 | 0, 4, 0) | 0 | 0;
 $101 = $work;
 $102 = $work_size;
 $103 = $101 + ($102 << 2) | 0;
 $104 = $uv_work_size;
 $105 = $103 + ($104 << 2) | 0;
 _WebPRescalerInit($90, $91, $92, $95, $96, $97, $100, 1, $105);
 $106 = $2;
 $107 = $106 + 364 | 0;
 SAFE_HEAP_STORE($107 | 0, 24 | 0, 4);
 $108 = $has_alpha;
 $109 = ($108 | 0) != 0;
 if ($109) {
  $110 = $2;
  $111 = $110 + 276 | 0;
  $112 = $1;
  $113 = $112 + 12 | 0;
  $114 = SAFE_HEAP_LOAD($113 | 0, 4, 0) | 0 | 0;
  $115 = $1;
  $116 = $115 + 16 | 0;
  $117 = SAFE_HEAP_LOAD($116 | 0, 4, 0) | 0 | 0;
  $118 = $buf;
  $119 = $118 + 12 | 0;
  $120 = SAFE_HEAP_LOAD($119 | 0, 4, 0) | 0 | 0;
  $121 = $out_width;
  $122 = $out_height;
  $123 = $buf;
  $124 = $123 + 28 | 0;
  $125 = SAFE_HEAP_LOAD($124 | 0, 4, 0) | 0 | 0;
  $126 = $work;
  $127 = $work_size;
  $128 = $126 + ($127 << 2) | 0;
  $129 = $uv_work_size;
  $130 = $129 << 1;
  $131 = $128 + ($130 << 2) | 0;
  _WebPRescalerInit($111, $114, $117, $120, $121, $122, $125, 1, $131);
  $132 = $2;
  $133 = $132 + 368 | 0;
  SAFE_HEAP_STORE($133 | 0, 25 | 0, 4);
  _WebPInitAlphaProcessing();
 }
 $0 = 1;
 $134 = $0;
 STACKTOP = sp;
 return $134 | 0;
}

function _VP8DecompressAlphaRows($dec, $row, $num_rows) {
 $dec = $dec | 0;
 $row = $row | 0;
 $num_rows = $num_rows | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0;
 var $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0;
 var $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0;
 var $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0;
 var $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0;
 var $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $height = 0, $ok = 0, $or$cond = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $dec;
 $2 = $row;
 $3 = $num_rows;
 $4 = $1;
 $5 = $4 + 48 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 2, 0) | 0 | 0;
 $7 = $6 & 65535;
 $width = $7;
 $8 = $1;
 $9 = $8 + 48 | 0;
 $10 = $9 + 2 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 2, 0) | 0 | 0;
 $12 = $11 & 65535;
 $height = $12;
 $13 = $2;
 $14 = ($13 | 0) < 0;
 $15 = $3;
 $16 = ($15 | 0) <= 0;
 $or$cond = $14 | $16;
 if (!$or$cond) {
  $17 = $2;
  $18 = $3;
  $19 = $17 + $18 | 0;
  $20 = $height;
  $21 = ($19 | 0) > ($20 | 0);
  if (!$21) {
   $22 = $2;
   $23 = ($22 | 0) == 0;
   do {
    if ($23) {
     $24 = $1;
     $25 = $24 + 2360 | 0;
     $26 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
     $27 = ($26 | 0) != (0 | 0);
     if (!$27) {
      ___assert_fail(2230 | 0, 2256 | 0, 133, 2279 | 0);
     }
     $28 = _ALPHNew() | 0;
     $29 = $1;
     $30 = $29 + 2344 | 0;
     SAFE_HEAP_STORE($30 | 0, $28 | 0, 4);
     $31 = $1;
     $32 = $31 + 2344 | 0;
     $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
     $34 = ($33 | 0) == (0 | 0);
     if ($34) {
      $0 = 0;
      $109 = $0;
      STACKTOP = sp;
      return $109 | 0;
     }
     $35 = $1;
     $36 = $35 + 2344 | 0;
     $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
     $38 = $1;
     $39 = $38 + 2348 | 0;
     $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
     $41 = $1;
     $42 = $41 + 2352 | 0;
     $43 = SAFE_HEAP_LOAD($42 | 0, 4, 0) | 0 | 0;
     $44 = $width;
     $45 = $height;
     $46 = $1;
     $47 = $46 + 2360 | 0;
     $48 = SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 0;
     $49 = _ALPHInit($37, $40, $43, $44, $45, $48) | 0;
     $50 = ($49 | 0) != 0;
     $51 = $1;
     $52 = $51 + 2344 | 0;
     $53 = SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0;
     if (!$50) {
      _ALPHDelete($53);
      $54 = $1;
      $55 = $54 + 2344 | 0;
      SAFE_HEAP_STORE($55 | 0, 0 | 0, 4);
      $0 = 0;
      $109 = $0;
      STACKTOP = sp;
      return $109 | 0;
     }
     $56 = $53 + 16 | 0;
     $57 = SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0;
     $58 = ($57 | 0) != 1;
     if ($58) {
      $59 = $1;
      $60 = $59 + 2364 | 0;
      SAFE_HEAP_STORE($60 | 0, 0 | 0, 4);
      break;
     } else {
      $61 = $height;
      $3 = $61;
      break;
     }
    }
   } while (0);
   $62 = $1;
   $63 = $62 + 2356 | 0;
   $64 = SAFE_HEAP_LOAD($63 | 0, 4, 0) | 0 | 0;
   $65 = ($64 | 0) != 0;
   if (!$65) {
    $ok = 0;
    $66 = $1;
    $67 = $66 + 2344 | 0;
    $68 = SAFE_HEAP_LOAD($67 | 0, 4, 0) | 0 | 0;
    $69 = ($68 | 0) != (0 | 0);
    if (!$69) {
     ___assert_fail(2302 | 0, 2256 | 0, 152, 2279 | 0);
    }
    $70 = $1;
    $71 = $2;
    $72 = $3;
    $73 = _ALPHDecode($70, $71, $72) | 0;
    $ok = $73;
    $74 = $ok;
    $75 = ($74 | 0) != 0;
    if ($75) {
     $76 = $1;
     $77 = $76 + 2364 | 0;
     $78 = SAFE_HEAP_LOAD($77 | 0, 4, 0) | 0 | 0;
     $79 = ($78 | 0) > 0;
     if ($79) {
      $80 = $1;
      $81 = $80 + 2360 | 0;
      $82 = SAFE_HEAP_LOAD($81 | 0, 4, 0) | 0 | 0;
      $83 = $width;
      $84 = $height;
      $85 = $1;
      $86 = $85 + 2364 | 0;
      $87 = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0;
      $88 = _WebPDequantizeLevels($82, $83, $84, $87) | 0;
      $ok = $88;
     }
    }
    $89 = $ok;
    $90 = ($89 | 0) != 0;
    if ($90) {
     $91 = $1;
     $92 = $91 + 2356 | 0;
     $93 = SAFE_HEAP_LOAD($92 | 0, 4, 0) | 0 | 0;
     $94 = ($93 | 0) != 0;
     if ($94) {
      label = 22;
     }
    } else {
     label = 22;
    }
    if ((label | 0) == 22) {
     $95 = $1;
     $96 = $95 + 2344 | 0;
     $97 = SAFE_HEAP_LOAD($96 | 0, 4, 0) | 0 | 0;
     _ALPHDelete($97);
     $98 = $1;
     $99 = $98 + 2344 | 0;
     SAFE_HEAP_STORE($99 | 0, 0 | 0, 4);
    }
    $100 = $ok;
    $101 = ($100 | 0) != 0;
    if (!$101) {
     $0 = 0;
     $109 = $0;
     STACKTOP = sp;
     return $109 | 0;
    }
   }
   $102 = $1;
   $103 = $102 + 2360 | 0;
   $104 = SAFE_HEAP_LOAD($103 | 0, 4, 0) | 0 | 0;
   $105 = $2;
   $106 = $width;
   $107 = Math_imul($105, $106) | 0;
   $108 = $104 + $107 | 0;
   $0 = $108;
   $109 = $0;
   STACKTOP = sp;
   return $109 | 0;
  }
 }
 $0 = 0;
 $109 = $0;
 STACKTOP = sp;
 return $109 | 0;
}

function _CustomSetup($io) {
 $io = $io | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $12 = 0, $13 = 0, $14 = 0;
 var $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0;
 var $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0;
 var $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0;
 var $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0;
 var $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $colorspace = 0, $is_alpha = 0, $is_rgb = 0, $ok = 0, $or$cond = 0, $p = 0, $uv_width = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $io;
 $2 = $1;
 $3 = $2 + 40 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $p = $4;
 $5 = $p;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $colorspace = $7;
 $8 = $colorspace;
 $9 = _WebPIsRGBMode35($8) | 0;
 $is_rgb = $9;
 $10 = $colorspace;
 $11 = _WebPIsAlphaMode($10) | 0;
 $is_alpha = $11;
 $12 = $p;
 $13 = $12 + 360 | 0;
 SAFE_HEAP_STORE($13 | 0, 0 | 0, 4);
 $14 = $p;
 $15 = $14 + 364 | 0;
 SAFE_HEAP_STORE($15 | 0, 0 | 0, 4);
 $16 = $p;
 $17 = $16 + 368 | 0;
 SAFE_HEAP_STORE($17 | 0, 0 | 0, 4);
 $18 = $p;
 $19 = $18 + 372 | 0;
 SAFE_HEAP_STORE($19 | 0, 0 | 0, 4);
 $20 = $p;
 $21 = $20 + 20 | 0;
 $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
 $23 = $1;
 $24 = $is_alpha;
 $25 = ($24 | 0) != 0;
 $26 = $25 ? 11 : 12;
 $27 = _WebPIoInitFromOptions($22, $23, $26) | 0;
 $28 = ($27 | 0) != 0;
 if (!$28) {
  $0 = 0;
  $112 = $0;
  STACKTOP = sp;
  return $112 | 0;
 }
 $29 = $is_alpha;
 $30 = ($29 | 0) != 0;
 if ($30) {
  $31 = $colorspace;
  $32 = _WebPIsPremultipliedMode($31) | 0;
  $33 = ($32 | 0) != 0;
  if ($33) {
   _WebPInitUpsamplers();
  }
 }
 $34 = $1;
 $35 = $34 + 92 | 0;
 $36 = SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0;
 $37 = ($36 | 0) != 0;
 $38 = $is_rgb;
 $39 = ($38 | 0) != 0;
 if ($37) {
  $40 = $1;
  $41 = $p;
  if ($39) {
   $42 = _InitRGBRescaler($40, $41) | 0;
   $44 = $42;
  } else {
   $43 = _InitYUVRescaler($40, $41) | 0;
   $44 = $43;
  }
  $ok = $44;
  $45 = $ok;
  $46 = ($45 | 0) != 0;
  if (!$46) {
   $0 = 0;
   $112 = $0;
   STACKTOP = sp;
   return $112 | 0;
  }
 } else {
  do {
   if ($39) {
    _WebPInitSamplers();
    $47 = $p;
    $48 = $47 + 364 | 0;
    SAFE_HEAP_STORE($48 | 0, 14 | 0, 4);
    $49 = $1;
    $50 = $49 + 56 | 0;
    $51 = SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0;
    $52 = ($51 | 0) != 0;
    if ($52) {
     $53 = $1;
     $54 = $53 + 12 | 0;
     $55 = SAFE_HEAP_LOAD($54 | 0, 4, 0) | 0 | 0;
     $56 = $55 + 1 | 0;
     $57 = $56 >> 1;
     $uv_width = $57;
     $58 = $1;
     $59 = $58 + 12 | 0;
     $60 = SAFE_HEAP_LOAD($59 | 0, 4, 0) | 0 | 0;
     $61 = $uv_width;
     $62 = $61 << 1;
     $63 = $60 + $62 | 0;
     $64 = _WebPSafeMalloc(1, 0, $63) | 0;
     $65 = $p;
     $66 = $65 + 360 | 0;
     SAFE_HEAP_STORE($66 | 0, $64 | 0, 4);
     $67 = $p;
     $68 = $67 + 360 | 0;
     $69 = SAFE_HEAP_LOAD($68 | 0, 4, 0) | 0 | 0;
     $70 = ($69 | 0) == (0 | 0);
     if (!$70) {
      $71 = $p;
      $72 = $71 + 360 | 0;
      $73 = SAFE_HEAP_LOAD($72 | 0, 4, 0) | 0 | 0;
      $74 = $p;
      $75 = $74 + 4 | 0;
      SAFE_HEAP_STORE($75 | 0, $73 | 0, 4);
      $76 = $p;
      $77 = $76 + 4 | 0;
      $78 = SAFE_HEAP_LOAD($77 | 0, 4, 0) | 0 | 0;
      $79 = $1;
      $80 = $79 + 12 | 0;
      $81 = SAFE_HEAP_LOAD($80 | 0, 4, 0) | 0 | 0;
      $82 = $78 + $81 | 0;
      $83 = $p;
      $84 = $83 + 8 | 0;
      SAFE_HEAP_STORE($84 | 0, $82 | 0, 4);
      $85 = $p;
      $86 = $85 + 8 | 0;
      $87 = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0;
      $88 = $uv_width;
      $89 = $87 + $88 | 0;
      $90 = $p;
      $91 = $90 + 12 | 0;
      SAFE_HEAP_STORE($91 | 0, $89 | 0, 4);
      $92 = $p;
      $93 = $92 + 364 | 0;
      SAFE_HEAP_STORE($93 | 0, 15 | 0, 4);
      _WebPInitUpsamplers();
      break;
     }
     $0 = 0;
     $112 = $0;
     STACKTOP = sp;
     return $112 | 0;
    }
   } else {
    $94 = $p;
    $95 = $94 + 364 | 0;
    SAFE_HEAP_STORE($95 | 0, 16 | 0, 4);
   }
  } while (0);
  $96 = $is_alpha;
  $97 = ($96 | 0) != 0;
  if ($97) {
   $98 = $colorspace;
   $99 = ($98 | 0) == 5;
   $100 = $colorspace;
   $101 = ($100 | 0) == 10;
   $or$cond = $99 | $101;
   if ($or$cond) {
    $107 = 19;
   } else {
    $102 = $is_rgb;
    $103 = ($102 | 0) != 0;
    $104 = $103 ? 17 : 18;
    $107 = $104;
   }
   $105 = $p;
   $106 = $105 + 368 | 0;
   SAFE_HEAP_STORE($106 | 0, $107 | 0, 4);
   $108 = $is_rgb;
   $109 = ($108 | 0) != 0;
   if ($109) {
    _WebPInitAlphaProcessing();
   }
  }
 }
 $110 = $is_rgb;
 $111 = ($110 | 0) != 0;
 if ($111) {
  _VP8YUVInit();
 }
 $0 = 1;
 $112 = $0;
 STACKTOP = sp;
 return $112 | 0;
}

function _VP8ProcessRow($dec, $io) {
 $dec = $dec | 0;
 $io = $io | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $12 = 0;
 var $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0;
 var $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0;
 var $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0;
 var $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0;
 var $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $ctx = 0, $filter_row = 0, $ok = 0, $tmp = 0, $tmp1 = 0;
 var $worker = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $io;
 $ok = 1;
 $2 = $0;
 $3 = $2 + 160 | 0;
 $ctx = $3;
 $4 = $0;
 $5 = $4 + 2308 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = ($6 | 0) > 0;
 if ($7) {
  $8 = $0;
  $9 = $8 + 2300 | 0;
  $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
  $11 = $0;
  $12 = $11 + 300 | 0;
  $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
  $14 = ($10 | 0) >= ($13 | 0);
  if ($14) {
   $15 = $0;
   $16 = $15 + 2300 | 0;
   $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
   $18 = $0;
   $19 = $18 + 308 | 0;
   $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
   $21 = ($17 | 0) <= ($20 | 0);
   $23 = $21;
  } else {
   $23 = 0;
  }
 } else {
  $23 = 0;
 }
 $22 = $23 & 1;
 $filter_row = $22;
 $24 = $0;
 $25 = $24 + 148 | 0;
 $26 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
 $27 = ($26 | 0) == 0;
 $28 = $0;
 if ($27) {
  $29 = $28 + 2300 | 0;
  $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
  $31 = $ctx;
  $32 = $31 + 4 | 0;
  SAFE_HEAP_STORE($32 | 0, $30 | 0, 4);
  $33 = $filter_row;
  $34 = $ctx;
  $35 = $34 + 8 | 0;
  SAFE_HEAP_STORE($35 | 0, $33 | 0, 4);
  $36 = $0;
  $37 = $ctx;
  _ReconstructRow($36, $37);
  $38 = $0;
  $39 = $1;
  $40 = _FinishRow($38, $39) | 0;
  $ok = $40;
  $114 = $ok;
  STACKTOP = sp;
  return $114 | 0;
 }
 $41 = $28 + 124 | 0;
 $worker = $41;
 $42 = _WebPGetWorkerInterface() | 0;
 $43 = $42 + 8 | 0;
 $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
 $45 = $worker;
 $46 = FUNCTION_TABLE_ii[(SAFE_FT_MASK($44 | 0, 15 | 0) | 0) & 15]($45) | 0;
 $47 = $ok;
 $48 = $47 & $46;
 $ok = $48;
 $49 = $worker;
 $50 = $49 + 4 | 0;
 $51 = SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0;
 $52 = ($51 | 0) == 1;
 if (!$52) {
  ___assert_fail(2575 | 0, 2535 | 0, 527, 2597 | 0);
 }
 $53 = $ok;
 $54 = ($53 | 0) != 0;
 if (!$54) {
  $114 = $ok;
  STACKTOP = sp;
  return $114 | 0;
 }
 $55 = $ctx;
 $56 = $55 + 20 | 0;
 $57 = $1;
 dest = $56;
 src = $57;
 stop = dest + 108 | 0;
 do {
  SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0 | 0 | 0, 4);
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $58 = $0;
 $59 = $58 + 152 | 0;
 $60 = SAFE_HEAP_LOAD($59 | 0, 4, 0) | 0 | 0;
 $61 = $ctx;
 SAFE_HEAP_STORE($61 | 0, $60 | 0, 4);
 $62 = $0;
 $63 = $62 + 2300 | 0;
 $64 = SAFE_HEAP_LOAD($63 | 0, 4, 0) | 0 | 0;
 $65 = $ctx;
 $66 = $65 + 4 | 0;
 SAFE_HEAP_STORE($66 | 0, $64 | 0, 4);
 $67 = $filter_row;
 $68 = $ctx;
 $69 = $68 + 8 | 0;
 SAFE_HEAP_STORE($69 | 0, $67 | 0, 4);
 $70 = $0;
 $71 = $70 + 148 | 0;
 $72 = SAFE_HEAP_LOAD($71 | 0, 4, 0) | 0 | 0;
 $73 = ($72 | 0) == 2;
 if ($73) {
  $74 = $ctx;
  $75 = $74 + 16 | 0;
  $76 = SAFE_HEAP_LOAD($75 | 0, 4, 0) | 0 | 0;
  $tmp = $76;
  $77 = $0;
  $78 = $77 + 2304 | 0;
  $79 = SAFE_HEAP_LOAD($78 | 0, 4, 0) | 0 | 0;
  $80 = $ctx;
  $81 = $80 + 16 | 0;
  SAFE_HEAP_STORE($81 | 0, $79 | 0, 4);
  $82 = $tmp;
  $83 = $0;
  $84 = $83 + 2304 | 0;
  SAFE_HEAP_STORE($84 | 0, $82 | 0, 4);
 } else {
  $85 = $0;
  $86 = $ctx;
  _ReconstructRow($85, $86);
 }
 $87 = $filter_row;
 $88 = ($87 | 0) != 0;
 if ($88) {
  $89 = $ctx;
  $90 = $89 + 12 | 0;
  $91 = SAFE_HEAP_LOAD($90 | 0, 4, 0) | 0 | 0;
  $tmp1 = $91;
  $92 = $0;
  $93 = $92 + 2260 | 0;
  $94 = SAFE_HEAP_LOAD($93 | 0, 4, 0) | 0 | 0;
  $95 = $ctx;
  $96 = $95 + 12 | 0;
  SAFE_HEAP_STORE($96 | 0, $94 | 0, 4);
  $97 = $tmp1;
  $98 = $0;
  $99 = $98 + 2260 | 0;
  SAFE_HEAP_STORE($99 | 0, $97 | 0, 4);
 }
 $100 = _WebPGetWorkerInterface() | 0;
 $101 = $100 + 12 | 0;
 $102 = SAFE_HEAP_LOAD($101 | 0, 4, 0) | 0 | 0;
 $103 = $worker;
 FUNCTION_TABLE_vi[(SAFE_FT_MASK($102 | 0, 255 | 0) | 0) & 255]($103);
 $104 = $0;
 $105 = $104 + 152 | 0;
 $106 = SAFE_HEAP_LOAD($105 | 0, 4, 0) | 0 | 0;
 $107 = $106 + 1 | 0;
 SAFE_HEAP_STORE($105 | 0, $107 | 0, 4);
 $108 = $0;
 $109 = $108 + 156 | 0;
 $110 = SAFE_HEAP_LOAD($109 | 0, 4, 0) | 0 | 0;
 $111 = ($107 | 0) == ($110 | 0);
 if (!$111) {
  $114 = $ok;
  STACKTOP = sp;
  return $114 | 0;
 }
 $112 = $0;
 $113 = $112 + 152 | 0;
 SAFE_HEAP_STORE($113 | 0, 0 | 0, 4);
 $114 = $ok;
 STACKTOP = sp;
 return $114 | 0;
}

function _PrecomputeFilterStrengths($dec) {
 $dec = $dec | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0;
 var $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0;
 var $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0;
 var $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0;
 var $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $base_level = 0;
 var $hdr = 0, $i4x4 = 0, $ilevel = 0, $info = 0, $level = 0, $s = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $0;
 $2 = $1 + 2308 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = ($3 | 0) > 0;
 if (!$4) {
  STACKTOP = sp;
  return;
 }
 $5 = $0;
 $6 = $5 + 56 | 0;
 $hdr = $6;
 $s = 0;
 while (1) {
  $7 = $s;
  $8 = ($7 | 0) < 4;
  if (!$8) {
   break;
  }
  $9 = $0;
  $10 = $9 + 104 | 0;
  $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
  $12 = ($11 | 0) != 0;
  if ($12) {
   $13 = $s;
   $14 = $0;
   $15 = $14 + 104 | 0;
   $16 = $15 + 16 | 0;
   $17 = $16 + $13 | 0;
   $18 = SAFE_HEAP_LOAD($17 >> 0 | 0, 1, 0) | 0 | 0;
   $19 = $18 << 24 >> 24;
   $base_level = $19;
   $20 = $0;
   $21 = $20 + 104 | 0;
   $22 = $21 + 8 | 0;
   $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
   $24 = ($23 | 0) != 0;
   if (!$24) {
    $25 = $hdr;
    $26 = $25 + 4 | 0;
    $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
    $28 = $base_level;
    $29 = $28 + $27 | 0;
    $base_level = $29;
   }
  } else {
   $30 = $hdr;
   $31 = $30 + 4 | 0;
   $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
   $base_level = $32;
  }
  $i4x4 = 0;
  while (1) {
   $33 = $i4x4;
   $34 = ($33 | 0) <= 1;
   if (!$34) {
    break;
   }
   $35 = $i4x4;
   $36 = $s;
   $37 = $0;
   $38 = $37 + 2312 | 0;
   $39 = $38 + ($36 << 3) | 0;
   $40 = $39 + ($35 << 2) | 0;
   $info = $40;
   $41 = $base_level;
   $level = $41;
   $42 = $hdr;
   $43 = $42 + 12 | 0;
   $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
   $45 = ($44 | 0) != 0;
   if ($45) {
    $46 = $hdr;
    $47 = $46 + 16 | 0;
    $48 = SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 0;
    $49 = $level;
    $50 = $49 + $48 | 0;
    $level = $50;
    $51 = $i4x4;
    $52 = ($51 | 0) != 0;
    if ($52) {
     $53 = $hdr;
     $54 = $53 + 32 | 0;
     $55 = SAFE_HEAP_LOAD($54 | 0, 4, 0) | 0 | 0;
     $56 = $level;
     $57 = $56 + $55 | 0;
     $level = $57;
    }
   }
   $58 = $level;
   $59 = ($58 | 0) < 0;
   if ($59) {
    $64 = 0;
   } else {
    $60 = $level;
    $61 = ($60 | 0) > 63;
    $62 = $level;
    $63 = $61 ? 63 : $62;
    $64 = $63;
   }
   $level = $64;
   $65 = $level;
   $66 = ($65 | 0) > 0;
   if ($66) {
    $67 = $level;
    $ilevel = $67;
    $68 = $hdr;
    $69 = $68 + 8 | 0;
    $70 = SAFE_HEAP_LOAD($69 | 0, 4, 0) | 0 | 0;
    $71 = ($70 | 0) > 0;
    if ($71) {
     $72 = $hdr;
     $73 = $72 + 8 | 0;
     $74 = SAFE_HEAP_LOAD($73 | 0, 4, 0) | 0 | 0;
     $75 = ($74 | 0) > 4;
     $76 = $ilevel;
     if ($75) {
      $77 = $76 >> 2;
      $ilevel = $77;
     } else {
      $78 = $76 >> 1;
      $ilevel = $78;
     }
     $79 = $ilevel;
     $80 = $hdr;
     $81 = $80 + 8 | 0;
     $82 = SAFE_HEAP_LOAD($81 | 0, 4, 0) | 0 | 0;
     $83 = 9 - $82 | 0;
     $84 = ($79 | 0) > ($83 | 0);
     if ($84) {
      $85 = $hdr;
      $86 = $85 + 8 | 0;
      $87 = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0;
      $88 = 9 - $87 | 0;
      $ilevel = $88;
     }
    }
    $89 = $ilevel;
    $90 = ($89 | 0) < 1;
    if ($90) {
     $ilevel = 1;
    }
    $91 = $ilevel;
    $92 = $91 & 255;
    $93 = $info;
    $94 = $93 + 1 | 0;
    SAFE_HEAP_STORE($94 >> 0 | 0, $92 | 0, 1);
    $95 = $level;
    $96 = $95 << 1;
    $97 = $ilevel;
    $98 = $96 + $97 | 0;
    $99 = $98 & 255;
    $100 = $info;
    SAFE_HEAP_STORE($100 >> 0 | 0, $99 | 0, 1);
    $101 = $level;
    $102 = ($101 | 0) >= 40;
    if ($102) {
     $107 = 2;
    } else {
     $103 = $level;
     $104 = ($103 | 0) >= 15;
     $105 = $104 ? 1 : 0;
     $107 = $105;
    }
    $106 = $107 & 255;
    $108 = $info;
    $109 = $108 + 3 | 0;
    SAFE_HEAP_STORE($109 >> 0 | 0, $106 | 0, 1);
   } else {
    $110 = $info;
    SAFE_HEAP_STORE($110 >> 0 | 0, 0 | 0, 1);
   }
   $111 = $i4x4;
   $112 = $111 & 255;
   $113 = $info;
   $114 = $113 + 2 | 0;
   SAFE_HEAP_STORE($114 >> 0 | 0, $112 | 0, 1);
   $115 = $i4x4;
   $116 = $115 + 1 | 0;
   $i4x4 = $116;
  }
  $117 = $s;
  $118 = $117 + 1 | 0;
  $s = $118;
 }
 STACKTOP = sp;
 return;
}

function _DoGradientFilter($in, $width, $height, $stride, $row, $num_rows, $inverse, $out) {
 $in = $in | 0;
 $width = $width | 0;
 $height = $height | 0;
 $stride = $stride | 0;
 $row = $row | 0;
 $num_rows = $num_rows | 0;
 $inverse = $inverse | 0;
 $out = $out | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $last_row = 0, $or$cond = 0, $pred = 0, $preds = 0, $start_offset = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $in;
 $1 = $width;
 $2 = $height;
 $3 = $stride;
 $4 = $row;
 $5 = $num_rows;
 $6 = $inverse;
 $7 = $out;
 $8 = $4;
 $9 = $3;
 $10 = Math_imul($8, $9) | 0;
 $start_offset = $10;
 $11 = $4;
 $12 = $5;
 $13 = $11 + $12 | 0;
 $last_row = $13;
 $14 = $0;
 $15 = ($14 | 0) != (0 | 0);
 if (!$15) {
  ___assert_fail(12747 | 0, 12758 | 0, 131, 12783 | 0);
 }
 $16 = $7;
 $17 = ($16 | 0) != (0 | 0);
 if (!$17) {
  ___assert_fail(12800 | 0, 12758 | 0, 131, 12783 | 0);
 }
 $18 = $1;
 $19 = ($18 | 0) > 0;
 if (!$19) {
  ___assert_fail(12812 | 0, 12758 | 0, 131, 12783 | 0);
 }
 $20 = $2;
 $21 = ($20 | 0) > 0;
 if (!$21) {
  ___assert_fail(12822 | 0, 12758 | 0, 131, 12783 | 0);
 }
 $22 = $3;
 $23 = $1;
 $24 = ($22 | 0) >= ($23 | 0);
 if (!$24) {
  ___assert_fail(12833 | 0, 12758 | 0, 131, 12783 | 0);
 }
 $25 = $4;
 $26 = ($25 | 0) >= 0;
 $27 = $5;
 $28 = ($27 | 0) > 0;
 $or$cond = $26 & $28;
 if (!$or$cond) {
  ___assert_fail(12849 | 0, 12758 | 0, 131, 12783 | 0);
 }
 $29 = $4;
 $30 = $5;
 $31 = $29 + $30 | 0;
 $32 = $2;
 $33 = ($31 | 0) <= ($32 | 0);
 if (!$33) {
  ___assert_fail(12849 | 0, 12758 | 0, 131, 12783 | 0);
 }
 $34 = $start_offset;
 $35 = $0;
 $36 = $35 + $34 | 0;
 $0 = $36;
 $37 = $start_offset;
 $38 = $7;
 $39 = $38 + $37 | 0;
 $7 = $39;
 $40 = $6;
 $41 = ($40 | 0) != 0;
 $42 = $7;
 $43 = $0;
 $44 = $41 ? $42 : $43;
 $preds = $44;
 $45 = $4;
 $46 = ($45 | 0) == 0;
 if ($46) {
  $47 = $0;
  $48 = SAFE_HEAP_LOAD($47 >> 0 | 0, 1, 0) | 0 | 0;
  $49 = $7;
  SAFE_HEAP_STORE($49 >> 0 | 0, $48 | 0, 1);
  $50 = $0;
  $51 = $50 + 1 | 0;
  $52 = $preds;
  $53 = $7;
  $54 = $53 + 1 | 0;
  $55 = $1;
  $56 = $55 - 1 | 0;
  $57 = $6;
  _PredictLine($51, $52, $54, $56, $57);
  $4 = 1;
  $58 = $3;
  $59 = $preds;
  $60 = $59 + $58 | 0;
  $preds = $60;
  $61 = $3;
  $62 = $0;
  $63 = $62 + $61 | 0;
  $0 = $63;
  $64 = $3;
  $65 = $7;
  $66 = $65 + $64 | 0;
  $7 = $66;
 }
 while (1) {
  $67 = $4;
  $68 = $last_row;
  $69 = ($67 | 0) < ($68 | 0);
  if (!$69) {
   break;
  }
  $70 = $0;
  $71 = $preds;
  $72 = $3;
  $73 = 0 - $72 | 0;
  $74 = $71 + $73 | 0;
  $75 = $7;
  $76 = $6;
  _PredictLine($70, $74, $75, 1, $76);
  $w = 1;
  while (1) {
   $77 = $w;
   $78 = $1;
   $79 = ($77 | 0) < ($78 | 0);
   if (!$79) {
    break;
   }
   $80 = $w;
   $81 = $80 - 1 | 0;
   $82 = $preds;
   $83 = $82 + $81 | 0;
   $84 = SAFE_HEAP_LOAD($83 >> 0 | 0, 1, 0) | 0 | 0;
   $85 = $w;
   $86 = $3;
   $87 = $85 - $86 | 0;
   $88 = $preds;
   $89 = $88 + $87 | 0;
   $90 = SAFE_HEAP_LOAD($89 >> 0 | 0, 1, 0) | 0 | 0;
   $91 = $w;
   $92 = $3;
   $93 = $91 - $92 | 0;
   $94 = $93 - 1 | 0;
   $95 = $preds;
   $96 = $95 + $94 | 0;
   $97 = SAFE_HEAP_LOAD($96 >> 0 | 0, 1, 0) | 0 | 0;
   $98 = _GradientPredictor($84, $90, $97) | 0;
   $pred = $98;
   $99 = $w;
   $100 = $0;
   $101 = $100 + $99 | 0;
   $102 = SAFE_HEAP_LOAD($101 >> 0 | 0, 1, 0) | 0 | 0;
   $103 = $102 & 255;
   $104 = $6;
   $105 = ($104 | 0) != 0;
   $106 = $pred;
   $107 = 0 - $106 | 0;
   $108 = $105 ? $106 : $107;
   $109 = $103 + $108 | 0;
   $110 = $109 & 255;
   $111 = $w;
   $112 = $7;
   $113 = $112 + $111 | 0;
   SAFE_HEAP_STORE($113 >> 0 | 0, $110 | 0, 1);
   $114 = $w;
   $115 = $114 + 1 | 0;
   $w = $115;
  }
  $116 = $4;
  $117 = $116 + 1 | 0;
  $4 = $117;
  $118 = $3;
  $119 = $preds;
  $120 = $119 + $118 | 0;
  $preds = $120;
  $121 = $3;
  $122 = $0;
  $123 = $122 + $121 | 0;
  $0 = $123;
  $124 = $3;
  $125 = $7;
  $126 = $125 + $124 | 0;
  $7 = $126;
 }
 STACKTOP = sp;
 return;
}

function _VL4($dst) {
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $A = 0, $B = 0, $C = 0, $D = 0, $E = 0, $F = 0, $G = 0, $H = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dst;
 $1 = $0;
 $2 = $1 + -32 | 0;
 $3 = SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0;
 $4 = $3 & 255;
 $A = $4;
 $5 = $0;
 $6 = $5 + -31 | 0;
 $7 = SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0;
 $8 = $7 & 255;
 $B = $8;
 $9 = $0;
 $10 = $9 + -30 | 0;
 $11 = SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0 | 0;
 $12 = $11 & 255;
 $C = $12;
 $13 = $0;
 $14 = $13 + -29 | 0;
 $15 = SAFE_HEAP_LOAD($14 >> 0 | 0, 1, 0) | 0 | 0;
 $16 = $15 & 255;
 $D = $16;
 $17 = $0;
 $18 = $17 + -28 | 0;
 $19 = SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0 | 0;
 $20 = $19 & 255;
 $E = $20;
 $21 = $0;
 $22 = $21 + -27 | 0;
 $23 = SAFE_HEAP_LOAD($22 >> 0 | 0, 1, 0) | 0 | 0;
 $24 = $23 & 255;
 $F = $24;
 $25 = $0;
 $26 = $25 + -26 | 0;
 $27 = SAFE_HEAP_LOAD($26 >> 0 | 0, 1, 0) | 0 | 0;
 $28 = $27 & 255;
 $G = $28;
 $29 = $0;
 $30 = $29 + -25 | 0;
 $31 = SAFE_HEAP_LOAD($30 >> 0 | 0, 1, 0) | 0 | 0;
 $32 = $31 & 255;
 $H = $32;
 $33 = $A;
 $34 = $B;
 $35 = $33 + $34 | 0;
 $36 = $35 + 1 | 0;
 $37 = $36 >> 1;
 $38 = $37 & 255;
 $39 = $0;
 SAFE_HEAP_STORE($39 >> 0 | 0, $38 | 0, 1);
 $40 = $B;
 $41 = $C;
 $42 = $40 + $41 | 0;
 $43 = $42 + 1 | 0;
 $44 = $43 >> 1;
 $45 = $44 & 255;
 $46 = $0;
 $47 = $46 + 64 | 0;
 SAFE_HEAP_STORE($47 >> 0 | 0, $45 | 0, 1);
 $48 = $0;
 $49 = $48 + 1 | 0;
 SAFE_HEAP_STORE($49 >> 0 | 0, $45 | 0, 1);
 $50 = $C;
 $51 = $D;
 $52 = $50 + $51 | 0;
 $53 = $52 + 1 | 0;
 $54 = $53 >> 1;
 $55 = $54 & 255;
 $56 = $0;
 $57 = $56 + 65 | 0;
 SAFE_HEAP_STORE($57 >> 0 | 0, $55 | 0, 1);
 $58 = $0;
 $59 = $58 + 2 | 0;
 SAFE_HEAP_STORE($59 >> 0 | 0, $55 | 0, 1);
 $60 = $D;
 $61 = $E;
 $62 = $60 + $61 | 0;
 $63 = $62 + 1 | 0;
 $64 = $63 >> 1;
 $65 = $64 & 255;
 $66 = $0;
 $67 = $66 + 66 | 0;
 SAFE_HEAP_STORE($67 >> 0 | 0, $65 | 0, 1);
 $68 = $0;
 $69 = $68 + 3 | 0;
 SAFE_HEAP_STORE($69 >> 0 | 0, $65 | 0, 1);
 $70 = $A;
 $71 = $B;
 $72 = $71 << 1;
 $73 = $70 + $72 | 0;
 $74 = $C;
 $75 = $73 + $74 | 0;
 $76 = $75 + 2 | 0;
 $77 = $76 >> 2;
 $78 = $77 & 255;
 $79 = $0;
 $80 = $79 + 32 | 0;
 SAFE_HEAP_STORE($80 >> 0 | 0, $78 | 0, 1);
 $81 = $B;
 $82 = $C;
 $83 = $82 << 1;
 $84 = $81 + $83 | 0;
 $85 = $D;
 $86 = $84 + $85 | 0;
 $87 = $86 + 2 | 0;
 $88 = $87 >> 2;
 $89 = $88 & 255;
 $90 = $0;
 $91 = $90 + 96 | 0;
 SAFE_HEAP_STORE($91 >> 0 | 0, $89 | 0, 1);
 $92 = $0;
 $93 = $92 + 33 | 0;
 SAFE_HEAP_STORE($93 >> 0 | 0, $89 | 0, 1);
 $94 = $C;
 $95 = $D;
 $96 = $95 << 1;
 $97 = $94 + $96 | 0;
 $98 = $E;
 $99 = $97 + $98 | 0;
 $100 = $99 + 2 | 0;
 $101 = $100 >> 2;
 $102 = $101 & 255;
 $103 = $0;
 $104 = $103 + 97 | 0;
 SAFE_HEAP_STORE($104 >> 0 | 0, $102 | 0, 1);
 $105 = $0;
 $106 = $105 + 34 | 0;
 SAFE_HEAP_STORE($106 >> 0 | 0, $102 | 0, 1);
 $107 = $D;
 $108 = $E;
 $109 = $108 << 1;
 $110 = $107 + $109 | 0;
 $111 = $F;
 $112 = $110 + $111 | 0;
 $113 = $112 + 2 | 0;
 $114 = $113 >> 2;
 $115 = $114 & 255;
 $116 = $0;
 $117 = $116 + 98 | 0;
 SAFE_HEAP_STORE($117 >> 0 | 0, $115 | 0, 1);
 $118 = $0;
 $119 = $118 + 35 | 0;
 SAFE_HEAP_STORE($119 >> 0 | 0, $115 | 0, 1);
 $120 = $E;
 $121 = $F;
 $122 = $121 << 1;
 $123 = $120 + $122 | 0;
 $124 = $G;
 $125 = $123 + $124 | 0;
 $126 = $125 + 2 | 0;
 $127 = $126 >> 2;
 $128 = $127 & 255;
 $129 = $0;
 $130 = $129 + 67 | 0;
 SAFE_HEAP_STORE($130 >> 0 | 0, $128 | 0, 1);
 $131 = $F;
 $132 = $G;
 $133 = $132 << 1;
 $134 = $131 + $133 | 0;
 $135 = $H;
 $136 = $134 + $135 | 0;
 $137 = $136 + 2 | 0;
 $138 = $137 >> 2;
 $139 = $138 & 255;
 $140 = $0;
 $141 = $140 + 99 | 0;
 SAFE_HEAP_STORE($141 >> 0 | 0, $139 | 0, 1);
 STACKTOP = sp;
 return;
}

function _VR4($dst) {
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $A = 0, $B = 0, $C = 0, $D = 0, $I = 0, $J = 0, $K = 0, $X = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dst;
 $1 = $0;
 $2 = $1 + -1 | 0;
 $3 = SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0;
 $4 = $3 & 255;
 $I = $4;
 $5 = $0;
 $6 = $5 + 31 | 0;
 $7 = SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0;
 $8 = $7 & 255;
 $J = $8;
 $9 = $0;
 $10 = $9 + 63 | 0;
 $11 = SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0 | 0;
 $12 = $11 & 255;
 $K = $12;
 $13 = $0;
 $14 = $13 + -33 | 0;
 $15 = SAFE_HEAP_LOAD($14 >> 0 | 0, 1, 0) | 0 | 0;
 $16 = $15 & 255;
 $X = $16;
 $17 = $0;
 $18 = $17 + -32 | 0;
 $19 = SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0 | 0;
 $20 = $19 & 255;
 $A = $20;
 $21 = $0;
 $22 = $21 + -31 | 0;
 $23 = SAFE_HEAP_LOAD($22 >> 0 | 0, 1, 0) | 0 | 0;
 $24 = $23 & 255;
 $B = $24;
 $25 = $0;
 $26 = $25 + -30 | 0;
 $27 = SAFE_HEAP_LOAD($26 >> 0 | 0, 1, 0) | 0 | 0;
 $28 = $27 & 255;
 $C = $28;
 $29 = $0;
 $30 = $29 + -29 | 0;
 $31 = SAFE_HEAP_LOAD($30 >> 0 | 0, 1, 0) | 0 | 0;
 $32 = $31 & 255;
 $D = $32;
 $33 = $X;
 $34 = $A;
 $35 = $33 + $34 | 0;
 $36 = $35 + 1 | 0;
 $37 = $36 >> 1;
 $38 = $37 & 255;
 $39 = $0;
 $40 = $39 + 65 | 0;
 SAFE_HEAP_STORE($40 >> 0 | 0, $38 | 0, 1);
 $41 = $0;
 SAFE_HEAP_STORE($41 >> 0 | 0, $38 | 0, 1);
 $42 = $A;
 $43 = $B;
 $44 = $42 + $43 | 0;
 $45 = $44 + 1 | 0;
 $46 = $45 >> 1;
 $47 = $46 & 255;
 $48 = $0;
 $49 = $48 + 66 | 0;
 SAFE_HEAP_STORE($49 >> 0 | 0, $47 | 0, 1);
 $50 = $0;
 $51 = $50 + 1 | 0;
 SAFE_HEAP_STORE($51 >> 0 | 0, $47 | 0, 1);
 $52 = $B;
 $53 = $C;
 $54 = $52 + $53 | 0;
 $55 = $54 + 1 | 0;
 $56 = $55 >> 1;
 $57 = $56 & 255;
 $58 = $0;
 $59 = $58 + 67 | 0;
 SAFE_HEAP_STORE($59 >> 0 | 0, $57 | 0, 1);
 $60 = $0;
 $61 = $60 + 2 | 0;
 SAFE_HEAP_STORE($61 >> 0 | 0, $57 | 0, 1);
 $62 = $C;
 $63 = $D;
 $64 = $62 + $63 | 0;
 $65 = $64 + 1 | 0;
 $66 = $65 >> 1;
 $67 = $66 & 255;
 $68 = $0;
 $69 = $68 + 3 | 0;
 SAFE_HEAP_STORE($69 >> 0 | 0, $67 | 0, 1);
 $70 = $K;
 $71 = $J;
 $72 = $71 << 1;
 $73 = $70 + $72 | 0;
 $74 = $I;
 $75 = $73 + $74 | 0;
 $76 = $75 + 2 | 0;
 $77 = $76 >> 2;
 $78 = $77 & 255;
 $79 = $0;
 $80 = $79 + 96 | 0;
 SAFE_HEAP_STORE($80 >> 0 | 0, $78 | 0, 1);
 $81 = $J;
 $82 = $I;
 $83 = $82 << 1;
 $84 = $81 + $83 | 0;
 $85 = $X;
 $86 = $84 + $85 | 0;
 $87 = $86 + 2 | 0;
 $88 = $87 >> 2;
 $89 = $88 & 255;
 $90 = $0;
 $91 = $90 + 64 | 0;
 SAFE_HEAP_STORE($91 >> 0 | 0, $89 | 0, 1);
 $92 = $I;
 $93 = $X;
 $94 = $93 << 1;
 $95 = $92 + $94 | 0;
 $96 = $A;
 $97 = $95 + $96 | 0;
 $98 = $97 + 2 | 0;
 $99 = $98 >> 2;
 $100 = $99 & 255;
 $101 = $0;
 $102 = $101 + 97 | 0;
 SAFE_HEAP_STORE($102 >> 0 | 0, $100 | 0, 1);
 $103 = $0;
 $104 = $103 + 32 | 0;
 SAFE_HEAP_STORE($104 >> 0 | 0, $100 | 0, 1);
 $105 = $X;
 $106 = $A;
 $107 = $106 << 1;
 $108 = $105 + $107 | 0;
 $109 = $B;
 $110 = $108 + $109 | 0;
 $111 = $110 + 2 | 0;
 $112 = $111 >> 2;
 $113 = $112 & 255;
 $114 = $0;
 $115 = $114 + 98 | 0;
 SAFE_HEAP_STORE($115 >> 0 | 0, $113 | 0, 1);
 $116 = $0;
 $117 = $116 + 33 | 0;
 SAFE_HEAP_STORE($117 >> 0 | 0, $113 | 0, 1);
 $118 = $A;
 $119 = $B;
 $120 = $119 << 1;
 $121 = $118 + $120 | 0;
 $122 = $C;
 $123 = $121 + $122 | 0;
 $124 = $123 + 2 | 0;
 $125 = $124 >> 2;
 $126 = $125 & 255;
 $127 = $0;
 $128 = $127 + 99 | 0;
 SAFE_HEAP_STORE($128 >> 0 | 0, $126 | 0, 1);
 $129 = $0;
 $130 = $129 + 34 | 0;
 SAFE_HEAP_STORE($130 >> 0 | 0, $126 | 0, 1);
 $131 = $B;
 $132 = $C;
 $133 = $132 << 1;
 $134 = $131 + $133 | 0;
 $135 = $D;
 $136 = $134 + $135 | 0;
 $137 = $136 + 2 | 0;
 $138 = $137 >> 2;
 $139 = $138 & 255;
 $140 = $0;
 $141 = $140 + 35 | 0;
 SAFE_HEAP_STORE($141 >> 0 | 0, $139 | 0, 1);
 STACKTOP = sp;
 return;
}

function _HD4($dst) {
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $131 = 0, $132 = 0, $133 = 0;
 var $134 = 0, $135 = 0, $136 = 0, $137 = 0, $138 = 0, $139 = 0, $14 = 0, $140 = 0, $141 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $A = 0, $B = 0, $C = 0, $I = 0, $J = 0, $K = 0, $L = 0, $X = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dst;
 $1 = $0;
 $2 = $1 + -1 | 0;
 $3 = SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0;
 $4 = $3 & 255;
 $I = $4;
 $5 = $0;
 $6 = $5 + 31 | 0;
 $7 = SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0;
 $8 = $7 & 255;
 $J = $8;
 $9 = $0;
 $10 = $9 + 63 | 0;
 $11 = SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0 | 0;
 $12 = $11 & 255;
 $K = $12;
 $13 = $0;
 $14 = $13 + 95 | 0;
 $15 = SAFE_HEAP_LOAD($14 >> 0 | 0, 1, 0) | 0 | 0;
 $16 = $15 & 255;
 $L = $16;
 $17 = $0;
 $18 = $17 + -33 | 0;
 $19 = SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0 | 0;
 $20 = $19 & 255;
 $X = $20;
 $21 = $0;
 $22 = $21 + -32 | 0;
 $23 = SAFE_HEAP_LOAD($22 >> 0 | 0, 1, 0) | 0 | 0;
 $24 = $23 & 255;
 $A = $24;
 $25 = $0;
 $26 = $25 + -31 | 0;
 $27 = SAFE_HEAP_LOAD($26 >> 0 | 0, 1, 0) | 0 | 0;
 $28 = $27 & 255;
 $B = $28;
 $29 = $0;
 $30 = $29 + -30 | 0;
 $31 = SAFE_HEAP_LOAD($30 >> 0 | 0, 1, 0) | 0 | 0;
 $32 = $31 & 255;
 $C = $32;
 $33 = $I;
 $34 = $X;
 $35 = $33 + $34 | 0;
 $36 = $35 + 1 | 0;
 $37 = $36 >> 1;
 $38 = $37 & 255;
 $39 = $0;
 $40 = $39 + 34 | 0;
 SAFE_HEAP_STORE($40 >> 0 | 0, $38 | 0, 1);
 $41 = $0;
 SAFE_HEAP_STORE($41 >> 0 | 0, $38 | 0, 1);
 $42 = $J;
 $43 = $I;
 $44 = $42 + $43 | 0;
 $45 = $44 + 1 | 0;
 $46 = $45 >> 1;
 $47 = $46 & 255;
 $48 = $0;
 $49 = $48 + 66 | 0;
 SAFE_HEAP_STORE($49 >> 0 | 0, $47 | 0, 1);
 $50 = $0;
 $51 = $50 + 32 | 0;
 SAFE_HEAP_STORE($51 >> 0 | 0, $47 | 0, 1);
 $52 = $K;
 $53 = $J;
 $54 = $52 + $53 | 0;
 $55 = $54 + 1 | 0;
 $56 = $55 >> 1;
 $57 = $56 & 255;
 $58 = $0;
 $59 = $58 + 98 | 0;
 SAFE_HEAP_STORE($59 >> 0 | 0, $57 | 0, 1);
 $60 = $0;
 $61 = $60 + 64 | 0;
 SAFE_HEAP_STORE($61 >> 0 | 0, $57 | 0, 1);
 $62 = $L;
 $63 = $K;
 $64 = $62 + $63 | 0;
 $65 = $64 + 1 | 0;
 $66 = $65 >> 1;
 $67 = $66 & 255;
 $68 = $0;
 $69 = $68 + 96 | 0;
 SAFE_HEAP_STORE($69 >> 0 | 0, $67 | 0, 1);
 $70 = $A;
 $71 = $B;
 $72 = $71 << 1;
 $73 = $70 + $72 | 0;
 $74 = $C;
 $75 = $73 + $74 | 0;
 $76 = $75 + 2 | 0;
 $77 = $76 >> 2;
 $78 = $77 & 255;
 $79 = $0;
 $80 = $79 + 3 | 0;
 SAFE_HEAP_STORE($80 >> 0 | 0, $78 | 0, 1);
 $81 = $X;
 $82 = $A;
 $83 = $82 << 1;
 $84 = $81 + $83 | 0;
 $85 = $B;
 $86 = $84 + $85 | 0;
 $87 = $86 + 2 | 0;
 $88 = $87 >> 2;
 $89 = $88 & 255;
 $90 = $0;
 $91 = $90 + 2 | 0;
 SAFE_HEAP_STORE($91 >> 0 | 0, $89 | 0, 1);
 $92 = $I;
 $93 = $X;
 $94 = $93 << 1;
 $95 = $92 + $94 | 0;
 $96 = $A;
 $97 = $95 + $96 | 0;
 $98 = $97 + 2 | 0;
 $99 = $98 >> 2;
 $100 = $99 & 255;
 $101 = $0;
 $102 = $101 + 35 | 0;
 SAFE_HEAP_STORE($102 >> 0 | 0, $100 | 0, 1);
 $103 = $0;
 $104 = $103 + 1 | 0;
 SAFE_HEAP_STORE($104 >> 0 | 0, $100 | 0, 1);
 $105 = $J;
 $106 = $I;
 $107 = $106 << 1;
 $108 = $105 + $107 | 0;
 $109 = $X;
 $110 = $108 + $109 | 0;
 $111 = $110 + 2 | 0;
 $112 = $111 >> 2;
 $113 = $112 & 255;
 $114 = $0;
 $115 = $114 + 67 | 0;
 SAFE_HEAP_STORE($115 >> 0 | 0, $113 | 0, 1);
 $116 = $0;
 $117 = $116 + 33 | 0;
 SAFE_HEAP_STORE($117 >> 0 | 0, $113 | 0, 1);
 $118 = $K;
 $119 = $J;
 $120 = $119 << 1;
 $121 = $118 + $120 | 0;
 $122 = $I;
 $123 = $121 + $122 | 0;
 $124 = $123 + 2 | 0;
 $125 = $124 >> 2;
 $126 = $125 & 255;
 $127 = $0;
 $128 = $127 + 99 | 0;
 SAFE_HEAP_STORE($128 >> 0 | 0, $126 | 0, 1);
 $129 = $0;
 $130 = $129 + 65 | 0;
 SAFE_HEAP_STORE($130 >> 0 | 0, $126 | 0, 1);
 $131 = $L;
 $132 = $K;
 $133 = $132 << 1;
 $134 = $131 + $133 | 0;
 $135 = $J;
 $136 = $134 + $135 | 0;
 $137 = $136 + 2 | 0;
 $138 = $137 >> 2;
 $139 = $138 & 255;
 $140 = $0;
 $141 = $140 + 97 | 0;
 SAFE_HEAP_STORE($141 >> 0 | 0, $139 | 0, 1);
 STACKTOP = sp;
 return;
}

function _WebPRescalerExportRowShrinkC($wrk) {
 $wrk = $wrk | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0;
 var $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0;
 var $97 = 0, $98 = 0, $99 = 0, $dst = 0, $frac = 0, $frow = 0, $irow = 0, $or$cond = 0, $or$cond3 = 0, $v = 0, $v1 = 0, $x_out = 0, $x_out_max = 0, $yscale = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $wrk;
 $1 = $0;
 $2 = $1 + 68 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $dst = $3;
 $4 = $0;
 $5 = $4 + 76 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $irow = $6;
 $7 = $0;
 $8 = $7 + 52 | 0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $10 = $0;
 $11 = $10 + 8 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = Math_imul($9, $12) | 0;
 $x_out_max = $13;
 $14 = $0;
 $15 = $14 + 80 | 0;
 $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
 $frow = $16;
 $17 = $0;
 $18 = $17 + 16 | 0;
 $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
 $20 = $0;
 $21 = $20 + 24 | 0;
 $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
 $23 = 0 - $22 | 0;
 $24 = Math_imul($19, $23) | 0;
 $yscale = $24;
 $25 = $0;
 $26 = _WebPRescalerOutputDone334($25) | 0;
 $27 = ($26 | 0) != 0;
 if ($27) {
  ___assert_fail(13271 | 0, 13084 | 0, 133, 13396 | 0);
 }
 $28 = $0;
 $29 = $28 + 24 | 0;
 $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
 $31 = ($30 | 0) <= 0;
 if (!$31) {
  ___assert_fail(13329 | 0, 13084 | 0, 134, 13396 | 0);
 }
 $32 = $0;
 $33 = $32 + 4 | 0;
 $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
 $35 = ($34 | 0) != 0;
 if ($35) {
  ___assert_fail(13425 | 0, 13084 | 0, 135, 13396 | 0);
 }
 $36 = $yscale;
 $37 = ($36 | 0) != 0;
 $x_out = 0;
 if ($37) {
  while (1) {
   $38 = $x_out;
   $39 = $x_out_max;
   $40 = ($38 | 0) < ($39 | 0);
   if (!$40) {
    label = 16;
    break;
   }
   $41 = $x_out;
   $42 = $frow;
   $43 = $42 + ($41 << 2) | 0;
   $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
   $45 = $yscale;
   $46 = ___muldi3($44 | 0, 0, $45 | 0, 0) | 0;
   $47 = tempRet0;
   _i64Add($46 | 0, $47 | 0, -2147483648, 0) | 0;
   $48 = tempRet0;
   $frac = $48;
   $49 = $x_out;
   $50 = $irow;
   $51 = $50 + ($49 << 2) | 0;
   $52 = SAFE_HEAP_LOAD($51 | 0, 4, 0) | 0 | 0;
   $53 = $frac;
   $54 = $52 - $53 | 0;
   $55 = $0;
   $56 = $55 + 20 | 0;
   $57 = SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0;
   $58 = ___muldi3($54 | 0, 0, $57 | 0, 0) | 0;
   $59 = tempRet0;
   _i64Add($58 | 0, $59 | 0, -2147483648, 0) | 0;
   $60 = tempRet0;
   $v = $60;
   $61 = $v;
   $62 = ($61 | 0) >= 0;
   $63 = $v;
   $64 = ($63 | 0) <= 255;
   $or$cond = $62 & $64;
   if (!$or$cond) {
    label = 10;
    break;
   }
   $65 = $v;
   $66 = $65 & 255;
   $67 = $x_out;
   $68 = $dst;
   $69 = $68 + $67 | 0;
   SAFE_HEAP_STORE($69 >> 0 | 0, $66 | 0, 1);
   $70 = $frac;
   $71 = $x_out;
   $72 = $irow;
   $73 = $72 + ($71 << 2) | 0;
   SAFE_HEAP_STORE($73 | 0, $70 | 0, 4);
   $74 = $x_out;
   $75 = $74 + 1 | 0;
   $x_out = $75;
  }
  if ((label | 0) == 10) {
   ___assert_fail(13377 | 0, 13084 | 0, 140, 13396 | 0);
  } else if ((label | 0) == 16) {
   STACKTOP = sp;
   return;
  }
 } else {
  while (1) {
   $76 = $x_out;
   $77 = $x_out_max;
   $78 = ($76 | 0) < ($77 | 0);
   if (!$78) {
    label = 16;
    break;
   }
   $79 = $x_out;
   $80 = $irow;
   $81 = $80 + ($79 << 2) | 0;
   $82 = SAFE_HEAP_LOAD($81 | 0, 4, 0) | 0 | 0;
   $83 = $0;
   $84 = $83 + 20 | 0;
   $85 = SAFE_HEAP_LOAD($84 | 0, 4, 0) | 0 | 0;
   $86 = ___muldi3($82 | 0, 0, $85 | 0, 0) | 0;
   $87 = tempRet0;
   _i64Add($86 | 0, $87 | 0, -2147483648, 0) | 0;
   $88 = tempRet0;
   $v1 = $88;
   $89 = $v1;
   $90 = ($89 | 0) >= 0;
   $91 = $v1;
   $92 = ($91 | 0) <= 255;
   $or$cond3 = $90 & $92;
   if (!$or$cond3) {
    label = 14;
    break;
   }
   $93 = $v1;
   $94 = $93 & 255;
   $95 = $x_out;
   $96 = $dst;
   $97 = $96 + $95 | 0;
   SAFE_HEAP_STORE($97 >> 0 | 0, $94 | 0, 1);
   $98 = $x_out;
   $99 = $irow;
   $100 = $99 + ($98 << 2) | 0;
   SAFE_HEAP_STORE($100 | 0, 0 | 0, 4);
   $101 = $x_out;
   $102 = $101 + 1 | 0;
   $x_out = $102;
  }
  if ((label | 0) == 14) {
   ___assert_fail(13377 | 0, 13084 | 0, 147, 13396 | 0);
  } else if ((label | 0) == 16) {
   STACKTOP = sp;
   return;
  }
 }
}

function _needs_filter2($p, $step, $t, $it) {
 $p = $p | 0;
 $step = $step | 0;
 $t = $t | 0;
 $it = $it | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0;
 var $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0;
 var $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0;
 var $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0;
 var $96 = 0, $97 = 0, $98 = 0, $99 = 0, $p0 = 0, $p1 = 0, $p2 = 0, $p3 = 0, $q0 = 0, $q1 = 0, $q2 = 0, $q3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $p;
 $2 = $step;
 $3 = $t;
 $4 = $it;
 $5 = $2;
 $6 = Math_imul(-4, $5) | 0;
 $7 = $1;
 $8 = $7 + $6 | 0;
 $9 = SAFE_HEAP_LOAD($8 >> 0 | 0, 1, 0) | 0 | 0;
 $10 = $9 & 255;
 $p3 = $10;
 $11 = $2;
 $12 = Math_imul(-3, $11) | 0;
 $13 = $1;
 $14 = $13 + $12 | 0;
 $15 = SAFE_HEAP_LOAD($14 >> 0 | 0, 1, 0) | 0 | 0;
 $16 = $15 & 255;
 $p2 = $16;
 $17 = $2;
 $18 = Math_imul(-2, $17) | 0;
 $19 = $1;
 $20 = $19 + $18 | 0;
 $21 = SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0;
 $22 = $21 & 255;
 $p1 = $22;
 $23 = $2;
 $24 = 0 - $23 | 0;
 $25 = $1;
 $26 = $25 + $24 | 0;
 $27 = SAFE_HEAP_LOAD($26 >> 0 | 0, 1, 0) | 0 | 0;
 $28 = $27 & 255;
 $p0 = $28;
 $29 = $1;
 $30 = SAFE_HEAP_LOAD($29 >> 0 | 0, 1, 0) | 0 | 0;
 $31 = $30 & 255;
 $q0 = $31;
 $32 = $2;
 $33 = $1;
 $34 = $33 + $32 | 0;
 $35 = SAFE_HEAP_LOAD($34 >> 0 | 0, 1, 0) | 0 | 0;
 $36 = $35 & 255;
 $q1 = $36;
 $37 = $2;
 $38 = $37 << 1;
 $39 = $1;
 $40 = $39 + $38 | 0;
 $41 = SAFE_HEAP_LOAD($40 >> 0 | 0, 1, 0) | 0 | 0;
 $42 = $41 & 255;
 $q2 = $42;
 $43 = $2;
 $44 = $43 * 3 | 0;
 $45 = $1;
 $46 = $45 + $44 | 0;
 $47 = SAFE_HEAP_LOAD($46 >> 0 | 0, 1, 0) | 0 | 0;
 $48 = $47 & 255;
 $q3 = $48;
 $49 = $p0;
 $50 = $q0;
 $51 = $49 - $50 | 0;
 $52 = SAFE_HEAP_LOAD(600 | 0, 4, 0) | 0 | 0;
 $53 = $52 + $51 | 0;
 $54 = SAFE_HEAP_LOAD($53 >> 0 | 0, 1, 0) | 0 | 0;
 $55 = $54 & 255;
 $56 = $55 << 2;
 $57 = $p1;
 $58 = $q1;
 $59 = $57 - $58 | 0;
 $60 = SAFE_HEAP_LOAD(600 | 0, 4, 0) | 0 | 0;
 $61 = $60 + $59 | 0;
 $62 = SAFE_HEAP_LOAD($61 >> 0 | 0, 1, 0) | 0 | 0;
 $63 = $62 & 255;
 $64 = $56 + $63 | 0;
 $65 = $3;
 $66 = ($64 | 0) > ($65 | 0);
 if ($66) {
  $0 = 0;
  $123 = $0;
  STACKTOP = sp;
  return $123 | 0;
 }
 $67 = $p3;
 $68 = $p2;
 $69 = $67 - $68 | 0;
 $70 = SAFE_HEAP_LOAD(600 | 0, 4, 0) | 0 | 0;
 $71 = $70 + $69 | 0;
 $72 = SAFE_HEAP_LOAD($71 >> 0 | 0, 1, 0) | 0 | 0;
 $73 = $72 & 255;
 $74 = $4;
 $75 = ($73 | 0) <= ($74 | 0);
 if ($75) {
  $76 = $p2;
  $77 = $p1;
  $78 = $76 - $77 | 0;
  $79 = SAFE_HEAP_LOAD(600 | 0, 4, 0) | 0 | 0;
  $80 = $79 + $78 | 0;
  $81 = SAFE_HEAP_LOAD($80 >> 0 | 0, 1, 0) | 0 | 0;
  $82 = $81 & 255;
  $83 = $4;
  $84 = ($82 | 0) <= ($83 | 0);
  if ($84) {
   $85 = $p1;
   $86 = $p0;
   $87 = $85 - $86 | 0;
   $88 = SAFE_HEAP_LOAD(600 | 0, 4, 0) | 0 | 0;
   $89 = $88 + $87 | 0;
   $90 = SAFE_HEAP_LOAD($89 >> 0 | 0, 1, 0) | 0 | 0;
   $91 = $90 & 255;
   $92 = $4;
   $93 = ($91 | 0) <= ($92 | 0);
   if ($93) {
    $94 = $q3;
    $95 = $q2;
    $96 = $94 - $95 | 0;
    $97 = SAFE_HEAP_LOAD(600 | 0, 4, 0) | 0 | 0;
    $98 = $97 + $96 | 0;
    $99 = SAFE_HEAP_LOAD($98 >> 0 | 0, 1, 0) | 0 | 0;
    $100 = $99 & 255;
    $101 = $4;
    $102 = ($100 | 0) <= ($101 | 0);
    if ($102) {
     $103 = $q2;
     $104 = $q1;
     $105 = $103 - $104 | 0;
     $106 = SAFE_HEAP_LOAD(600 | 0, 4, 0) | 0 | 0;
     $107 = $106 + $105 | 0;
     $108 = SAFE_HEAP_LOAD($107 >> 0 | 0, 1, 0) | 0 | 0;
     $109 = $108 & 255;
     $110 = $4;
     $111 = ($109 | 0) <= ($110 | 0);
     if ($111) {
      $112 = $q1;
      $113 = $q0;
      $114 = $112 - $113 | 0;
      $115 = SAFE_HEAP_LOAD(600 | 0, 4, 0) | 0 | 0;
      $116 = $115 + $114 | 0;
      $117 = SAFE_HEAP_LOAD($116 >> 0 | 0, 1, 0) | 0 | 0;
      $118 = $117 & 255;
      $119 = $4;
      $120 = ($118 | 0) <= ($119 | 0);
      $122 = $120;
     } else {
      $122 = 0;
     }
    } else {
     $122 = 0;
    }
   } else {
    $122 = 0;
   }
  } else {
   $122 = 0;
  }
 } else {
  $122 = 0;
 }
 $121 = $122 & 1;
 $0 = $121;
 $123 = $0;
 STACKTOP = sp;
 return $123 | 0;
}

function _ReadTransform($xsize, $ysize, $dec) {
 $xsize = $xsize | 0;
 $ysize = $ysize | 0;
 $dec = $dec | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $bits = 0, $br = 0, $num_colors = 0, $ok = 0, $transform = 0, $type = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $xsize;
 $2 = $ysize;
 $3 = $dec;
 $ok = 1;
 $4 = $3;
 $5 = $4 + 24 | 0;
 $br = $5;
 $6 = $3;
 $7 = $6 + 176 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $9 = $3;
 $10 = $9 + 180 | 0;
 $11 = $10 + ($8 * 20 | 0) | 0;
 $transform = $11;
 $12 = $br;
 $13 = _VP8LReadBits($12, 2) | 0;
 $type = $13;
 $14 = $3;
 $15 = $14 + 260 | 0;
 $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
 $17 = $type;
 $18 = 1 << $17;
 $19 = $16 & $18;
 $20 = ($19 | 0) != 0;
 if ($20) {
  $0 = 0;
  $105 = $0;
  STACKTOP = sp;
  return $105 | 0;
 }
 $21 = $type;
 $22 = 1 << $21;
 $23 = $3;
 $24 = $23 + 260 | 0;
 $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
 $26 = $25 | $22;
 SAFE_HEAP_STORE($24 | 0, $26 | 0, 4);
 $27 = $type;
 $28 = $transform;
 SAFE_HEAP_STORE($28 | 0, $27 | 0, 4);
 $29 = $1;
 $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
 $31 = $transform;
 $32 = $31 + 8 | 0;
 SAFE_HEAP_STORE($32 | 0, $30 | 0, 4);
 $33 = $2;
 $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
 $35 = $transform;
 $36 = $35 + 12 | 0;
 SAFE_HEAP_STORE($36 | 0, $34 | 0, 4);
 $37 = $transform;
 $38 = $37 + 16 | 0;
 SAFE_HEAP_STORE($38 | 0, 0 | 0, 4);
 $39 = $3;
 $40 = $39 + 176 | 0;
 $41 = SAFE_HEAP_LOAD($40 | 0, 4, 0) | 0 | 0;
 $42 = $41 + 1 | 0;
 SAFE_HEAP_STORE($40 | 0, $42 | 0, 4);
 $43 = $3;
 $44 = $43 + 176 | 0;
 $45 = SAFE_HEAP_LOAD($44 | 0, 4, 0) | 0 | 0;
 $46 = ($45 | 0) <= 4;
 if (!$46) {
  ___assert_fail(8162 | 0, 7124 | 0, 1212, 8201 | 0);
 }
 $47 = $type;
 switch ($47 | 0) {
 case 1:
 case 0:
  {
   $48 = $br;
   $49 = _VP8LReadBits($48, 3) | 0;
   $50 = $49 + 2 | 0;
   $51 = $transform;
   $52 = $51 + 4 | 0;
   SAFE_HEAP_STORE($52 | 0, $50 | 0, 4);
   $53 = $transform;
   $54 = $53 + 8 | 0;
   $55 = SAFE_HEAP_LOAD($54 | 0, 4, 0) | 0 | 0;
   $56 = $transform;
   $57 = $56 + 4 | 0;
   $58 = SAFE_HEAP_LOAD($57 | 0, 4, 0) | 0 | 0;
   $59 = _VP8LSubSampleSize($55, $58) | 0;
   $60 = $transform;
   $61 = $60 + 12 | 0;
   $62 = SAFE_HEAP_LOAD($61 | 0, 4, 0) | 0 | 0;
   $63 = $transform;
   $64 = $63 + 4 | 0;
   $65 = SAFE_HEAP_LOAD($64 | 0, 4, 0) | 0 | 0;
   $66 = _VP8LSubSampleSize($62, $65) | 0;
   $67 = $3;
   $68 = $transform;
   $69 = $68 + 16 | 0;
   $70 = _DecodeImageStream($59, $66, 0, $67, $69) | 0;
   $ok = $70;
   break;
  }
 case 3:
  {
   $71 = $br;
   $72 = _VP8LReadBits($71, 8) | 0;
   $73 = $72 + 1 | 0;
   $num_colors = $73;
   $74 = $num_colors;
   $75 = ($74 | 0) > 16;
   if ($75) {
    $81 = 0;
   } else {
    $76 = $num_colors;
    $77 = ($76 | 0) > 4;
    if ($77) {
     $81 = 1;
    } else {
     $78 = $num_colors;
     $79 = ($78 | 0) > 2;
     $80 = $79 ? 2 : 3;
     $81 = $80;
    }
   }
   $bits = $81;
   $82 = $transform;
   $83 = $82 + 8 | 0;
   $84 = SAFE_HEAP_LOAD($83 | 0, 4, 0) | 0 | 0;
   $85 = $bits;
   $86 = _VP8LSubSampleSize($84, $85) | 0;
   $87 = $1;
   SAFE_HEAP_STORE($87 | 0, $86 | 0, 4);
   $88 = $bits;
   $89 = $transform;
   $90 = $89 + 4 | 0;
   SAFE_HEAP_STORE($90 | 0, $88 | 0, 4);
   $91 = $num_colors;
   $92 = $3;
   $93 = $transform;
   $94 = $93 + 16 | 0;
   $95 = _DecodeImageStream($91, 1, 0, $92, $94) | 0;
   $ok = $95;
   $96 = $ok;
   $97 = ($96 | 0) != 0;
   if ($97) {
    $98 = $num_colors;
    $99 = $transform;
    $100 = _ExpandColorMap($98, $99) | 0;
    $101 = ($100 | 0) != 0;
    $103 = $101;
   } else {
    $103 = 0;
   }
   $102 = $103 & 1;
   $ok = $102;
   break;
  }
 case 2:
  {
   break;
  }
 default:
  {
   ___assert_fail(13034 | 0, 7124 | 0, 1239, 8201 | 0);
  }
 }
 $104 = $ok;
 $0 = $104;
 $105 = $0;
 STACKTOP = sp;
 return $105 | 0;
}

function _RD4($dst) {
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $127 = 0, $128 = 0, $129 = 0, $13 = 0, $130 = 0, $14 = 0, $15 = 0, $16 = 0;
 var $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0;
 var $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0;
 var $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0;
 var $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0;
 var $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $A = 0, $B = 0, $C = 0, $D = 0, $I = 0, $J = 0, $K = 0, $L = 0, $X = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dst;
 $1 = $0;
 $2 = $1 + -1 | 0;
 $3 = SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0;
 $4 = $3 & 255;
 $I = $4;
 $5 = $0;
 $6 = $5 + 31 | 0;
 $7 = SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0;
 $8 = $7 & 255;
 $J = $8;
 $9 = $0;
 $10 = $9 + 63 | 0;
 $11 = SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0 | 0;
 $12 = $11 & 255;
 $K = $12;
 $13 = $0;
 $14 = $13 + 95 | 0;
 $15 = SAFE_HEAP_LOAD($14 >> 0 | 0, 1, 0) | 0 | 0;
 $16 = $15 & 255;
 $L = $16;
 $17 = $0;
 $18 = $17 + -33 | 0;
 $19 = SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0 | 0;
 $20 = $19 & 255;
 $X = $20;
 $21 = $0;
 $22 = $21 + -32 | 0;
 $23 = SAFE_HEAP_LOAD($22 >> 0 | 0, 1, 0) | 0 | 0;
 $24 = $23 & 255;
 $A = $24;
 $25 = $0;
 $26 = $25 + -31 | 0;
 $27 = SAFE_HEAP_LOAD($26 >> 0 | 0, 1, 0) | 0 | 0;
 $28 = $27 & 255;
 $B = $28;
 $29 = $0;
 $30 = $29 + -30 | 0;
 $31 = SAFE_HEAP_LOAD($30 >> 0 | 0, 1, 0) | 0 | 0;
 $32 = $31 & 255;
 $C = $32;
 $33 = $0;
 $34 = $33 + -29 | 0;
 $35 = SAFE_HEAP_LOAD($34 >> 0 | 0, 1, 0) | 0 | 0;
 $36 = $35 & 255;
 $D = $36;
 $37 = $J;
 $38 = $K;
 $39 = $38 << 1;
 $40 = $37 + $39 | 0;
 $41 = $L;
 $42 = $40 + $41 | 0;
 $43 = $42 + 2 | 0;
 $44 = $43 >> 2;
 $45 = $44 & 255;
 $46 = $0;
 $47 = $46 + 96 | 0;
 SAFE_HEAP_STORE($47 >> 0 | 0, $45 | 0, 1);
 $48 = $I;
 $49 = $J;
 $50 = $49 << 1;
 $51 = $48 + $50 | 0;
 $52 = $K;
 $53 = $51 + $52 | 0;
 $54 = $53 + 2 | 0;
 $55 = $54 >> 2;
 $56 = $55 & 255;
 $57 = $0;
 $58 = $57 + 64 | 0;
 SAFE_HEAP_STORE($58 >> 0 | 0, $56 | 0, 1);
 $59 = $0;
 $60 = $59 + 97 | 0;
 SAFE_HEAP_STORE($60 >> 0 | 0, $56 | 0, 1);
 $61 = $X;
 $62 = $I;
 $63 = $62 << 1;
 $64 = $61 + $63 | 0;
 $65 = $J;
 $66 = $64 + $65 | 0;
 $67 = $66 + 2 | 0;
 $68 = $67 >> 2;
 $69 = $68 & 255;
 $70 = $0;
 $71 = $70 + 32 | 0;
 SAFE_HEAP_STORE($71 >> 0 | 0, $69 | 0, 1);
 $72 = $0;
 $73 = $72 + 65 | 0;
 SAFE_HEAP_STORE($73 >> 0 | 0, $69 | 0, 1);
 $74 = $0;
 $75 = $74 + 98 | 0;
 SAFE_HEAP_STORE($75 >> 0 | 0, $69 | 0, 1);
 $76 = $A;
 $77 = $X;
 $78 = $77 << 1;
 $79 = $76 + $78 | 0;
 $80 = $I;
 $81 = $79 + $80 | 0;
 $82 = $81 + 2 | 0;
 $83 = $82 >> 2;
 $84 = $83 & 255;
 $85 = $0;
 SAFE_HEAP_STORE($85 >> 0 | 0, $84 | 0, 1);
 $86 = $0;
 $87 = $86 + 33 | 0;
 SAFE_HEAP_STORE($87 >> 0 | 0, $84 | 0, 1);
 $88 = $0;
 $89 = $88 + 66 | 0;
 SAFE_HEAP_STORE($89 >> 0 | 0, $84 | 0, 1);
 $90 = $0;
 $91 = $90 + 99 | 0;
 SAFE_HEAP_STORE($91 >> 0 | 0, $84 | 0, 1);
 $92 = $B;
 $93 = $A;
 $94 = $93 << 1;
 $95 = $92 + $94 | 0;
 $96 = $X;
 $97 = $95 + $96 | 0;
 $98 = $97 + 2 | 0;
 $99 = $98 >> 2;
 $100 = $99 & 255;
 $101 = $0;
 $102 = $101 + 1 | 0;
 SAFE_HEAP_STORE($102 >> 0 | 0, $100 | 0, 1);
 $103 = $0;
 $104 = $103 + 34 | 0;
 SAFE_HEAP_STORE($104 >> 0 | 0, $100 | 0, 1);
 $105 = $0;
 $106 = $105 + 67 | 0;
 SAFE_HEAP_STORE($106 >> 0 | 0, $100 | 0, 1);
 $107 = $C;
 $108 = $B;
 $109 = $108 << 1;
 $110 = $107 + $109 | 0;
 $111 = $A;
 $112 = $110 + $111 | 0;
 $113 = $112 + 2 | 0;
 $114 = $113 >> 2;
 $115 = $114 & 255;
 $116 = $0;
 $117 = $116 + 2 | 0;
 SAFE_HEAP_STORE($117 >> 0 | 0, $115 | 0, 1);
 $118 = $0;
 $119 = $118 + 35 | 0;
 SAFE_HEAP_STORE($119 >> 0 | 0, $115 | 0, 1);
 $120 = $D;
 $121 = $C;
 $122 = $121 << 1;
 $123 = $120 + $122 | 0;
 $124 = $B;
 $125 = $123 + $124 | 0;
 $126 = $125 + 2 | 0;
 $127 = $126 >> 2;
 $128 = $127 & 255;
 $129 = $0;
 $130 = $129 + 3 | 0;
 SAFE_HEAP_STORE($130 >> 0 | 0, $128 | 0, 1);
 STACKTOP = sp;
 return;
}

function _ReadHuffmanCodeLengths($dec, $code_length_code_lengths, $num_symbols, $code_lengths) {
 $dec = $dec | 0;
 $code_length_code_lengths = $code_length_code_lengths | 0;
 $num_symbols = $num_symbols | 0;
 $code_lengths = $code_lengths | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $br = 0, $code_len = 0, $extra_bits = 0, $length = 0, $length_nbits = 0, $max_symbol = 0, $ok = 0;
 var $p = 0, $prev_code_len = 0, $repeat = 0, $repeat_offset = 0, $slot = 0, $symbol = 0, $table = 0, $use_prev = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 592 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $table = sp + 72 | 0;
 $0 = $dec;
 $1 = $code_length_code_lengths;
 $2 = $num_symbols;
 $3 = $code_lengths;
 $ok = 0;
 $4 = $0;
 $5 = $4 + 24 | 0;
 $br = $5;
 $prev_code_len = 8;
 $6 = $1;
 $7 = _VP8LBuildHuffmanTable($table, 7, $6, 19) | 0;
 $8 = ($7 | 0) != 0;
 L1 : do {
  if ($8) {
   $9 = $br;
   $10 = _VP8LReadBits($9, 1) | 0;
   $11 = ($10 | 0) != 0;
   if ($11) {
    $12 = $br;
    $13 = _VP8LReadBits($12, 3) | 0;
    $14 = $13 << 1;
    $15 = 2 + $14 | 0;
    $length_nbits = $15;
    $16 = $br;
    $17 = $length_nbits;
    $18 = _VP8LReadBits($16, $17) | 0;
    $19 = 2 + $18 | 0;
    $max_symbol = $19;
    $20 = $max_symbol;
    $21 = $2;
    $22 = ($20 | 0) > ($21 | 0);
    if ($22) {
     break;
    }
   } else {
    $23 = $2;
    $max_symbol = $23;
   }
   $symbol = 0;
   L7 : while (1) {
    $24 = $symbol;
    $25 = $2;
    $26 = ($24 | 0) < ($25 | 0);
    if (!$26) {
     break;
    }
    $27 = $max_symbol;
    $28 = $27 + -1 | 0;
    $max_symbol = $28;
    $29 = ($27 | 0) == 0;
    if ($29) {
     break;
    }
    $30 = $br;
    _VP8LFillBitWindow($30);
    $31 = $br;
    $32 = _VP8LPrefetchBits($31) | 0;
    $33 = $32 & 127;
    $34 = $table + ($33 << 2) | 0;
    $p = $34;
    $35 = $br;
    $36 = $br;
    $37 = $36 + 20 | 0;
    $38 = SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0;
    $39 = $p;
    $40 = SAFE_HEAP_LOAD($39 >> 0 | 0, 1, 0) | 0 | 0;
    $41 = $40 & 255;
    $42 = $38 + $41 | 0;
    _VP8LSetBitPos($35, $42);
    $43 = $p;
    $44 = $43 + 2 | 0;
    $45 = SAFE_HEAP_LOAD($44 | 0, 2, 0) | 0 | 0;
    $46 = $45 & 65535;
    $code_len = $46;
    $47 = $code_len;
    $48 = ($47 | 0) < 16;
    $49 = $code_len;
    if ($48) {
     $50 = $symbol;
     $51 = $50 + 1 | 0;
     $symbol = $51;
     $52 = $3;
     $53 = $52 + ($50 << 2) | 0;
     SAFE_HEAP_STORE($53 | 0, $49 | 0, 4);
     $54 = $code_len;
     $55 = ($54 | 0) != 0;
     if (!$55) {
      continue;
     }
     $56 = $code_len;
     $prev_code_len = $56;
     continue;
    }
    $57 = ($49 | 0) == 16;
    $58 = $57 & 1;
    $use_prev = $58;
    $59 = $code_len;
    $60 = $59 - 16 | 0;
    $slot = $60;
    $61 = $slot;
    $62 = 356 + ($61 << 2) | 0;
    $63 = SAFE_HEAP_LOAD($62 | 0, 4, 0) | 0 | 0;
    $extra_bits = $63;
    $64 = $slot;
    $65 = 368 + ($64 << 2) | 0;
    $66 = SAFE_HEAP_LOAD($65 | 0, 4, 0) | 0 | 0;
    $repeat_offset = $66;
    $67 = $br;
    $68 = $extra_bits;
    $69 = _VP8LReadBits($67, $68) | 0;
    $70 = $repeat_offset;
    $71 = $69 + $70 | 0;
    $repeat = $71;
    $72 = $symbol;
    $73 = $repeat;
    $74 = $72 + $73 | 0;
    $75 = $2;
    $76 = ($74 | 0) > ($75 | 0);
    if ($76) {
     break L1;
    }
    $77 = $use_prev;
    $78 = ($77 | 0) != 0;
    $79 = $prev_code_len;
    $80 = $78 ? $79 : 0;
    $length = $80;
    while (1) {
     $81 = $repeat;
     $82 = $81 + -1 | 0;
     $repeat = $82;
     $83 = ($81 | 0) > 0;
     if (!$83) {
      continue L7;
     }
     $84 = $length;
     $85 = $symbol;
     $86 = $85 + 1 | 0;
     $symbol = $86;
     $87 = $3;
     $88 = $87 + ($85 << 2) | 0;
     SAFE_HEAP_STORE($88 | 0, $84 | 0, 4);
    }
   }
   $ok = 1;
  }
 } while (0);
 $89 = $ok;
 $90 = ($89 | 0) != 0;
 if ($90) {
  $92 = $ok;
  STACKTOP = sp;
  return $92 | 0;
 }
 $91 = $0;
 SAFE_HEAP_STORE($91 | 0, 3 | 0, 4);
 $92 = $ok;
 STACKTOP = sp;
 return $92 | 0;
}

function ___stdio_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $$0 = 0, $$phi$trans$insert = 0, $$pre = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cnt$0 = 0, $cnt$1 = 0, $iov$0 = 0, $iov$0$lcssa11 = 0, $iov$1 = 0, $iovcnt$0 = 0;
 var $iovcnt$0$lcssa12 = 0, $iovcnt$1 = 0, $iovs = 0, $rem$0 = 0, $vararg_buffer = 0, $vararg_buffer3 = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr6 = 0, $vararg_ptr7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer3 = sp + 16 | 0;
 $vararg_buffer = sp;
 $iovs = sp + 32 | 0;
 $0 = $f + 28 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($iovs | 0, $1 | 0, 4);
 $2 = $iovs + 4 | 0;
 $3 = $f + 20 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = $4;
 $6 = $5 - $1 | 0;
 SAFE_HEAP_STORE($2 | 0, $6 | 0, 4);
 $7 = $iovs + 8 | 0;
 SAFE_HEAP_STORE($7 | 0, $buf | 0, 4);
 $8 = $iovs + 12 | 0;
 SAFE_HEAP_STORE($8 | 0, $len | 0, 4);
 $9 = $6 + $len | 0;
 $10 = $f + 60 | 0;
 $11 = $f + 44 | 0;
 $iov$0 = $iovs;
 $iovcnt$0 = 2;
 $rem$0 = $9;
 while (1) {
  $12 = SAFE_HEAP_LOAD(1300 | 0, 4, 0) | 0 | 0;
  $13 = ($12 | 0) == (0 | 0);
  if ($13) {
   $17 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
   SAFE_HEAP_STORE($vararg_buffer3 | 0, $17 | 0, 4);
   $vararg_ptr6 = $vararg_buffer3 + 4 | 0;
   SAFE_HEAP_STORE($vararg_ptr6 | 0, $iov$0 | 0, 4);
   $vararg_ptr7 = $vararg_buffer3 + 8 | 0;
   SAFE_HEAP_STORE($vararg_ptr7 | 0, $iovcnt$0 | 0, 4);
   $18 = ___syscall146(146, $vararg_buffer3 | 0) | 0;
   $19 = ___syscall_ret($18) | 0;
   $cnt$0 = $19;
  } else {
   _pthread_cleanup_push(136 | 0, $f | 0);
   $14 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
   SAFE_HEAP_STORE($vararg_buffer | 0, $14 | 0, 4);
   $vararg_ptr1 = $vararg_buffer + 4 | 0;
   SAFE_HEAP_STORE($vararg_ptr1 | 0, $iov$0 | 0, 4);
   $vararg_ptr2 = $vararg_buffer + 8 | 0;
   SAFE_HEAP_STORE($vararg_ptr2 | 0, $iovcnt$0 | 0, 4);
   $15 = ___syscall146(146, $vararg_buffer | 0) | 0;
   $16 = ___syscall_ret($15) | 0;
   _pthread_cleanup_pop(0);
   $cnt$0 = $16;
  }
  $20 = ($rem$0 | 0) == ($cnt$0 | 0);
  if ($20) {
   label = 6;
   break;
  }
  $27 = ($cnt$0 | 0) < 0;
  if ($27) {
   $iov$0$lcssa11 = $iov$0;
   $iovcnt$0$lcssa12 = $iovcnt$0;
   label = 8;
   break;
  }
  $35 = $rem$0 - $cnt$0 | 0;
  $36 = $iov$0 + 4 | 0;
  $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
  $38 = $cnt$0 >>> 0 > $37 >>> 0;
  if ($38) {
   $39 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
   SAFE_HEAP_STORE($0 | 0, $39 | 0, 4);
   SAFE_HEAP_STORE($3 | 0, $39 | 0, 4);
   $40 = $cnt$0 - $37 | 0;
   $41 = $iov$0 + 8 | 0;
   $42 = $iovcnt$0 + -1 | 0;
   $$phi$trans$insert = $iov$0 + 12 | 0;
   $$pre = SAFE_HEAP_LOAD($$phi$trans$insert | 0, 4, 0) | 0 | 0;
   $50 = $$pre;
   $cnt$1 = $40;
   $iov$1 = $41;
   $iovcnt$1 = $42;
  } else {
   $43 = ($iovcnt$0 | 0) == 2;
   if ($43) {
    $44 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
    $45 = $44 + $cnt$0 | 0;
    SAFE_HEAP_STORE($0 | 0, $45 | 0, 4);
    $50 = $37;
    $cnt$1 = $cnt$0;
    $iov$1 = $iov$0;
    $iovcnt$1 = 2;
   } else {
    $50 = $37;
    $cnt$1 = $cnt$0;
    $iov$1 = $iov$0;
    $iovcnt$1 = $iovcnt$0;
   }
  }
  $46 = SAFE_HEAP_LOAD($iov$1 | 0, 4, 0) | 0 | 0;
  $47 = $46 + $cnt$1 | 0;
  SAFE_HEAP_STORE($iov$1 | 0, $47 | 0, 4);
  $48 = $iov$1 + 4 | 0;
  $49 = $50 - $cnt$1 | 0;
  SAFE_HEAP_STORE($48 | 0, $49 | 0, 4);
  $iov$0 = $iov$1;
  $iovcnt$0 = $iovcnt$1;
  $rem$0 = $35;
 }
 if ((label | 0) == 6) {
  $21 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
  $22 = $f + 48 | 0;
  $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
  $24 = $21 + $23 | 0;
  $25 = $f + 16 | 0;
  SAFE_HEAP_STORE($25 | 0, $24 | 0, 4);
  $26 = $21;
  SAFE_HEAP_STORE($0 | 0, $26 | 0, 4);
  SAFE_HEAP_STORE($3 | 0, $26 | 0, 4);
  $$0 = $len;
 } else if ((label | 0) == 8) {
  $28 = $f + 16 | 0;
  SAFE_HEAP_STORE($28 | 0, 0 | 0, 4);
  SAFE_HEAP_STORE($0 | 0, 0 | 0, 4);
  SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
  $29 = SAFE_HEAP_LOAD($f | 0, 4, 0) | 0 | 0;
  $30 = $29 | 32;
  SAFE_HEAP_STORE($f | 0, $30 | 0, 4);
  $31 = ($iovcnt$0$lcssa12 | 0) == 2;
  if ($31) {
   $$0 = 0;
  } else {
   $32 = $iov$0$lcssa11 + 4 | 0;
   $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
   $34 = $len - $33 | 0;
   $$0 = $34;
  }
 }
 STACKTOP = sp;
 return $$0 | 0;
}

function _WebPRescalerImportRowExpandC($wrk, $src) {
 $wrk = $wrk | 0;
 $src = $src | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $accum = 0, $channel = 0, $left = 0, $or$cond = 0, $right = 0, $x_in = 0, $x_out = 0, $x_out_max = 0, $x_stride = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $wrk;
 $1 = $src;
 $2 = $0;
 $3 = $2 + 8 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $x_stride = $4;
 $5 = $0;
 $6 = $5 + 52 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = $0;
 $9 = $8 + 8 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $11 = Math_imul($7, $10) | 0;
 $x_out_max = $11;
 $12 = $0;
 $13 = _WebPRescalerInputDone($12) | 0;
 $14 = ($13 | 0) != 0;
 if ($14) {
  ___assert_fail(13056 | 0, 13084 | 0, 32, 13110 | 0);
 }
 $15 = $0;
 $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
 $17 = ($16 | 0) != 0;
 if (!$17) {
  ___assert_fail(13139 | 0, 13084 | 0, 33, 13110 | 0);
 }
 $channel = 0;
 L7 : while (1) {
  $18 = $channel;
  $19 = $x_stride;
  $20 = ($18 | 0) < ($19 | 0);
  if (!$20) {
   label = 19;
   break;
  }
  $21 = $channel;
  $x_in = $21;
  $22 = $channel;
  $x_out = $22;
  $23 = $0;
  $24 = $23 + 36 | 0;
  $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
  $accum = $25;
  $26 = $x_in;
  $27 = $1;
  $28 = $27 + $26 | 0;
  $29 = SAFE_HEAP_LOAD($28 >> 0 | 0, 1, 0) | 0 | 0;
  $30 = $29 & 255;
  $left = $30;
  $31 = $0;
  $32 = $31 + 44 | 0;
  $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
  $34 = ($33 | 0) > 1;
  if ($34) {
   $35 = $x_in;
   $36 = $x_stride;
   $37 = $35 + $36 | 0;
   $38 = $1;
   $39 = $38 + $37 | 0;
   $40 = SAFE_HEAP_LOAD($39 >> 0 | 0, 1, 0) | 0 | 0;
   $41 = $40 & 255;
   $43 = $41;
  } else {
   $42 = $left;
   $43 = $42;
  }
  $right = $43;
  $44 = $x_stride;
  $45 = $x_in;
  $46 = $45 + $44 | 0;
  $x_in = $46;
  while (1) {
   $47 = $right;
   $48 = $0;
   $49 = $48 + 36 | 0;
   $50 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0;
   $51 = Math_imul($47, $50) | 0;
   $52 = $left;
   $53 = $right;
   $54 = $52 - $53 | 0;
   $55 = $accum;
   $56 = Math_imul($54, $55) | 0;
   $57 = $51 + $56 | 0;
   $58 = $x_out;
   $59 = $0;
   $60 = $59 + 80 | 0;
   $61 = SAFE_HEAP_LOAD($60 | 0, 4, 0) | 0 | 0;
   $62 = $61 + ($58 << 2) | 0;
   SAFE_HEAP_STORE($62 | 0, $57 | 0, 4);
   $63 = $x_stride;
   $64 = $x_out;
   $65 = $64 + $63 | 0;
   $x_out = $65;
   $66 = $x_out;
   $67 = $x_out_max;
   $68 = ($66 | 0) >= ($67 | 0);
   $69 = $0;
   $70 = $69 + 40 | 0;
   $71 = SAFE_HEAP_LOAD($70 | 0, 4, 0) | 0 | 0;
   if ($68) {
    break;
   }
   $72 = $accum;
   $73 = $72 - $71 | 0;
   $accum = $73;
   $74 = $accum;
   $75 = ($74 | 0) < 0;
   if (!$75) {
    continue;
   }
   $76 = $right;
   $left = $76;
   $77 = $x_stride;
   $78 = $x_in;
   $79 = $78 + $77 | 0;
   $x_in = $79;
   $80 = $x_in;
   $81 = $0;
   $82 = $81 + 44 | 0;
   $83 = SAFE_HEAP_LOAD($82 | 0, 4, 0) | 0 | 0;
   $84 = $x_stride;
   $85 = Math_imul($83, $84) | 0;
   $86 = ($80 | 0) < ($85 | 0);
   if (!$86) {
    label = 14;
    break L7;
   }
   $87 = $x_in;
   $88 = $1;
   $89 = $88 + $87 | 0;
   $90 = SAFE_HEAP_LOAD($89 >> 0 | 0, 1, 0) | 0 | 0;
   $91 = $90 & 255;
   $right = $91;
   $92 = $0;
   $93 = $92 + 36 | 0;
   $94 = SAFE_HEAP_LOAD($93 | 0, 4, 0) | 0 | 0;
   $95 = $accum;
   $96 = $95 + $94 | 0;
   $accum = $96;
  }
  $97 = ($71 | 0) == 0;
  $98 = $accum;
  $99 = ($98 | 0) == 0;
  $or$cond = $97 | $99;
  if (!$or$cond) {
   label = 17;
   break;
  }
  $100 = $channel;
  $101 = $100 + 1 | 0;
  $channel = $101;
 }
 if ((label | 0) == 14) {
  ___assert_fail(13153 | 0, 13084 | 0, 50, 13110 | 0);
 } else if ((label | 0) == 17) {
  ___assert_fail(13186 | 0, 13084 | 0, 55, 13110 | 0);
 } else if ((label | 0) == 19) {
  STACKTOP = sp;
  return;
 }
}

function _LD4($dst) {
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $122 = 0, $123 = 0, $124 = 0, $125 = 0, $126 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0;
 var $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0;
 var $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0;
 var $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0;
 var $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0;
 var $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $A = 0, $B = 0, $C = 0, $D = 0, $E = 0, $F = 0, $G = 0, $H = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dst;
 $1 = $0;
 $2 = $1 + -32 | 0;
 $3 = SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0;
 $4 = $3 & 255;
 $A = $4;
 $5 = $0;
 $6 = $5 + -31 | 0;
 $7 = SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0;
 $8 = $7 & 255;
 $B = $8;
 $9 = $0;
 $10 = $9 + -30 | 0;
 $11 = SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0 | 0;
 $12 = $11 & 255;
 $C = $12;
 $13 = $0;
 $14 = $13 + -29 | 0;
 $15 = SAFE_HEAP_LOAD($14 >> 0 | 0, 1, 0) | 0 | 0;
 $16 = $15 & 255;
 $D = $16;
 $17 = $0;
 $18 = $17 + -28 | 0;
 $19 = SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0 | 0;
 $20 = $19 & 255;
 $E = $20;
 $21 = $0;
 $22 = $21 + -27 | 0;
 $23 = SAFE_HEAP_LOAD($22 >> 0 | 0, 1, 0) | 0 | 0;
 $24 = $23 & 255;
 $F = $24;
 $25 = $0;
 $26 = $25 + -26 | 0;
 $27 = SAFE_HEAP_LOAD($26 >> 0 | 0, 1, 0) | 0 | 0;
 $28 = $27 & 255;
 $G = $28;
 $29 = $0;
 $30 = $29 + -25 | 0;
 $31 = SAFE_HEAP_LOAD($30 >> 0 | 0, 1, 0) | 0 | 0;
 $32 = $31 & 255;
 $H = $32;
 $33 = $A;
 $34 = $B;
 $35 = $34 << 1;
 $36 = $33 + $35 | 0;
 $37 = $C;
 $38 = $36 + $37 | 0;
 $39 = $38 + 2 | 0;
 $40 = $39 >> 2;
 $41 = $40 & 255;
 $42 = $0;
 SAFE_HEAP_STORE($42 >> 0 | 0, $41 | 0, 1);
 $43 = $B;
 $44 = $C;
 $45 = $44 << 1;
 $46 = $43 + $45 | 0;
 $47 = $D;
 $48 = $46 + $47 | 0;
 $49 = $48 + 2 | 0;
 $50 = $49 >> 2;
 $51 = $50 & 255;
 $52 = $0;
 $53 = $52 + 32 | 0;
 SAFE_HEAP_STORE($53 >> 0 | 0, $51 | 0, 1);
 $54 = $0;
 $55 = $54 + 1 | 0;
 SAFE_HEAP_STORE($55 >> 0 | 0, $51 | 0, 1);
 $56 = $C;
 $57 = $D;
 $58 = $57 << 1;
 $59 = $56 + $58 | 0;
 $60 = $E;
 $61 = $59 + $60 | 0;
 $62 = $61 + 2 | 0;
 $63 = $62 >> 2;
 $64 = $63 & 255;
 $65 = $0;
 $66 = $65 + 64 | 0;
 SAFE_HEAP_STORE($66 >> 0 | 0, $64 | 0, 1);
 $67 = $0;
 $68 = $67 + 33 | 0;
 SAFE_HEAP_STORE($68 >> 0 | 0, $64 | 0, 1);
 $69 = $0;
 $70 = $69 + 2 | 0;
 SAFE_HEAP_STORE($70 >> 0 | 0, $64 | 0, 1);
 $71 = $D;
 $72 = $E;
 $73 = $72 << 1;
 $74 = $71 + $73 | 0;
 $75 = $F;
 $76 = $74 + $75 | 0;
 $77 = $76 + 2 | 0;
 $78 = $77 >> 2;
 $79 = $78 & 255;
 $80 = $0;
 $81 = $80 + 96 | 0;
 SAFE_HEAP_STORE($81 >> 0 | 0, $79 | 0, 1);
 $82 = $0;
 $83 = $82 + 65 | 0;
 SAFE_HEAP_STORE($83 >> 0 | 0, $79 | 0, 1);
 $84 = $0;
 $85 = $84 + 34 | 0;
 SAFE_HEAP_STORE($85 >> 0 | 0, $79 | 0, 1);
 $86 = $0;
 $87 = $86 + 3 | 0;
 SAFE_HEAP_STORE($87 >> 0 | 0, $79 | 0, 1);
 $88 = $E;
 $89 = $F;
 $90 = $89 << 1;
 $91 = $88 + $90 | 0;
 $92 = $G;
 $93 = $91 + $92 | 0;
 $94 = $93 + 2 | 0;
 $95 = $94 >> 2;
 $96 = $95 & 255;
 $97 = $0;
 $98 = $97 + 97 | 0;
 SAFE_HEAP_STORE($98 >> 0 | 0, $96 | 0, 1);
 $99 = $0;
 $100 = $99 + 66 | 0;
 SAFE_HEAP_STORE($100 >> 0 | 0, $96 | 0, 1);
 $101 = $0;
 $102 = $101 + 35 | 0;
 SAFE_HEAP_STORE($102 >> 0 | 0, $96 | 0, 1);
 $103 = $F;
 $104 = $G;
 $105 = $104 << 1;
 $106 = $103 + $105 | 0;
 $107 = $H;
 $108 = $106 + $107 | 0;
 $109 = $108 + 2 | 0;
 $110 = $109 >> 2;
 $111 = $110 & 255;
 $112 = $0;
 $113 = $112 + 98 | 0;
 SAFE_HEAP_STORE($113 >> 0 | 0, $111 | 0, 1);
 $114 = $0;
 $115 = $114 + 67 | 0;
 SAFE_HEAP_STORE($115 >> 0 | 0, $111 | 0, 1);
 $116 = $G;
 $117 = $H;
 $118 = $117 << 1;
 $119 = $116 + $118 | 0;
 $120 = $H;
 $121 = $119 + $120 | 0;
 $122 = $121 + 2 | 0;
 $123 = $122 >> 2;
 $124 = $123 & 255;
 $125 = $0;
 $126 = $125 + 99 | 0;
 SAFE_HEAP_STORE($126 >> 0 | 0, $124 | 0, 1);
 STACKTOP = sp;
 return;
}

function _EmitYUV($io, $p) {
 $io = $io | 0;
 $p = $p | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0;
 var $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0;
 var $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0;
 var $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0;
 var $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $buf = 0, $j = 0, $mb_h = 0, $mb_w = 0;
 var $output = 0, $u_dst = 0, $uv_h = 0, $uv_w = 0, $v_dst = 0, $y_dst = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $io;
 $1 = $p;
 $2 = $1;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $output = $3;
 $4 = $output;
 $5 = $4 + 16 | 0;
 $buf = $5;
 $6 = $buf;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = $0;
 $9 = $8 + 8 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $11 = $buf;
 $12 = $11 + 16 | 0;
 $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
 $14 = Math_imul($10, $13) | 0;
 $15 = $7 + $14 | 0;
 $y_dst = $15;
 $16 = $buf;
 $17 = $16 + 4 | 0;
 $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
 $19 = $0;
 $20 = $19 + 8 | 0;
 $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
 $22 = $21 >> 1;
 $23 = $buf;
 $24 = $23 + 20 | 0;
 $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
 $26 = Math_imul($22, $25) | 0;
 $27 = $18 + $26 | 0;
 $u_dst = $27;
 $28 = $buf;
 $29 = $28 + 8 | 0;
 $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
 $31 = $0;
 $32 = $31 + 8 | 0;
 $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
 $34 = $33 >> 1;
 $35 = $buf;
 $36 = $35 + 24 | 0;
 $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
 $38 = Math_imul($34, $37) | 0;
 $39 = $30 + $38 | 0;
 $v_dst = $39;
 $40 = $0;
 $41 = $40 + 12 | 0;
 $42 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
 $mb_w = $42;
 $43 = $0;
 $44 = $43 + 16 | 0;
 $45 = SAFE_HEAP_LOAD($44 | 0, 4, 0) | 0 | 0;
 $mb_h = $45;
 $46 = $mb_w;
 $47 = $46 + 1 | 0;
 $48 = ($47 | 0) / 2 & -1;
 $uv_w = $48;
 $49 = $mb_h;
 $50 = $49 + 1 | 0;
 $51 = ($50 | 0) / 2 & -1;
 $uv_h = $51;
 $j = 0;
 while (1) {
  $52 = $j;
  $53 = $mb_h;
  $54 = ($52 | 0) < ($53 | 0);
  if (!$54) {
   break;
  }
  $55 = $y_dst;
  $56 = $j;
  $57 = $buf;
  $58 = $57 + 16 | 0;
  $59 = SAFE_HEAP_LOAD($58 | 0, 4, 0) | 0 | 0;
  $60 = Math_imul($56, $59) | 0;
  $61 = $55 + $60 | 0;
  $62 = $0;
  $63 = $62 + 20 | 0;
  $64 = SAFE_HEAP_LOAD($63 | 0, 4, 0) | 0 | 0;
  $65 = $j;
  $66 = $0;
  $67 = $66 + 32 | 0;
  $68 = SAFE_HEAP_LOAD($67 | 0, 4, 0) | 0 | 0;
  $69 = Math_imul($65, $68) | 0;
  $70 = $64 + $69 | 0;
  $71 = $mb_w;
  _memcpy($61 | 0, $70 | 0, $71 | 0) | 0;
  $72 = $j;
  $73 = $72 + 1 | 0;
  $j = $73;
 }
 $j = 0;
 while (1) {
  $74 = $j;
  $75 = $uv_h;
  $76 = ($74 | 0) < ($75 | 0);
  if (!$76) {
   break;
  }
  $77 = $u_dst;
  $78 = $j;
  $79 = $buf;
  $80 = $79 + 20 | 0;
  $81 = SAFE_HEAP_LOAD($80 | 0, 4, 0) | 0 | 0;
  $82 = Math_imul($78, $81) | 0;
  $83 = $77 + $82 | 0;
  $84 = $0;
  $85 = $84 + 24 | 0;
  $86 = SAFE_HEAP_LOAD($85 | 0, 4, 0) | 0 | 0;
  $87 = $j;
  $88 = $0;
  $89 = $88 + 36 | 0;
  $90 = SAFE_HEAP_LOAD($89 | 0, 4, 0) | 0 | 0;
  $91 = Math_imul($87, $90) | 0;
  $92 = $86 + $91 | 0;
  $93 = $uv_w;
  _memcpy($83 | 0, $92 | 0, $93 | 0) | 0;
  $94 = $v_dst;
  $95 = $j;
  $96 = $buf;
  $97 = $96 + 24 | 0;
  $98 = SAFE_HEAP_LOAD($97 | 0, 4, 0) | 0 | 0;
  $99 = Math_imul($95, $98) | 0;
  $100 = $94 + $99 | 0;
  $101 = $0;
  $102 = $101 + 28 | 0;
  $103 = SAFE_HEAP_LOAD($102 | 0, 4, 0) | 0 | 0;
  $104 = $j;
  $105 = $0;
  $106 = $105 + 36 | 0;
  $107 = SAFE_HEAP_LOAD($106 | 0, 4, 0) | 0 | 0;
  $108 = Math_imul($104, $107) | 0;
  $109 = $103 + $108 | 0;
  $110 = $uv_w;
  _memcpy($100 | 0, $109 | 0, $110 | 0) | 0;
  $111 = $j;
  $112 = $111 + 1 | 0;
  $j = $112;
 }
 $113 = $0;
 $114 = $113 + 16 | 0;
 $115 = SAFE_HEAP_LOAD($114 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $115 | 0;
}

function _do_filter6($p, $step) {
 $p = $p | 0;
 $step = $step | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0;
 var $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $a = 0, $a1 = 0;
 var $a2 = 0, $a3 = 0, $p0 = 0, $p1 = 0, $p2 = 0, $q0 = 0, $q1 = 0, $q2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $p;
 $1 = $step;
 $2 = $1;
 $3 = Math_imul(-3, $2) | 0;
 $4 = $0;
 $5 = $4 + $3 | 0;
 $6 = SAFE_HEAP_LOAD($5 >> 0 | 0, 1, 0) | 0 | 0;
 $7 = $6 & 255;
 $p2 = $7;
 $8 = $1;
 $9 = Math_imul(-2, $8) | 0;
 $10 = $0;
 $11 = $10 + $9 | 0;
 $12 = SAFE_HEAP_LOAD($11 >> 0 | 0, 1, 0) | 0 | 0;
 $13 = $12 & 255;
 $p1 = $13;
 $14 = $1;
 $15 = 0 - $14 | 0;
 $16 = $0;
 $17 = $16 + $15 | 0;
 $18 = SAFE_HEAP_LOAD($17 >> 0 | 0, 1, 0) | 0 | 0;
 $19 = $18 & 255;
 $p0 = $19;
 $20 = $0;
 $21 = SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0;
 $22 = $21 & 255;
 $q0 = $22;
 $23 = $1;
 $24 = $0;
 $25 = $24 + $23 | 0;
 $26 = SAFE_HEAP_LOAD($25 >> 0 | 0, 1, 0) | 0 | 0;
 $27 = $26 & 255;
 $q1 = $27;
 $28 = $1;
 $29 = $28 << 1;
 $30 = $0;
 $31 = $30 + $29 | 0;
 $32 = SAFE_HEAP_LOAD($31 >> 0 | 0, 1, 0) | 0 | 0;
 $33 = $32 & 255;
 $q2 = $33;
 $34 = $q0;
 $35 = $p0;
 $36 = $34 - $35 | 0;
 $37 = $36 * 3 | 0;
 $38 = $p1;
 $39 = $q1;
 $40 = $38 - $39 | 0;
 $41 = SAFE_HEAP_LOAD(588 | 0, 4, 0) | 0 | 0;
 $42 = $41 + $40 | 0;
 $43 = SAFE_HEAP_LOAD($42 >> 0 | 0, 1, 0) | 0 | 0;
 $44 = $43 << 24 >> 24;
 $45 = $37 + $44 | 0;
 $46 = SAFE_HEAP_LOAD(588 | 0, 4, 0) | 0 | 0;
 $47 = $46 + $45 | 0;
 $48 = SAFE_HEAP_LOAD($47 >> 0 | 0, 1, 0) | 0 | 0;
 $49 = $48 << 24 >> 24;
 $a = $49;
 $50 = $a;
 $51 = $50 * 27 | 0;
 $52 = $51 + 63 | 0;
 $53 = $52 >> 7;
 $a1 = $53;
 $54 = $a;
 $55 = $54 * 18 | 0;
 $56 = $55 + 63 | 0;
 $57 = $56 >> 7;
 $a2 = $57;
 $58 = $a;
 $59 = $58 * 9 | 0;
 $60 = $59 + 63 | 0;
 $61 = $60 >> 7;
 $a3 = $61;
 $62 = $p2;
 $63 = $a3;
 $64 = $62 + $63 | 0;
 $65 = SAFE_HEAP_LOAD(596 | 0, 4, 0) | 0 | 0;
 $66 = $65 + $64 | 0;
 $67 = SAFE_HEAP_LOAD($66 >> 0 | 0, 1, 0) | 0 | 0;
 $68 = $1;
 $69 = Math_imul(-3, $68) | 0;
 $70 = $0;
 $71 = $70 + $69 | 0;
 SAFE_HEAP_STORE($71 >> 0 | 0, $67 | 0, 1);
 $72 = $p1;
 $73 = $a2;
 $74 = $72 + $73 | 0;
 $75 = SAFE_HEAP_LOAD(596 | 0, 4, 0) | 0 | 0;
 $76 = $75 + $74 | 0;
 $77 = SAFE_HEAP_LOAD($76 >> 0 | 0, 1, 0) | 0 | 0;
 $78 = $1;
 $79 = Math_imul(-2, $78) | 0;
 $80 = $0;
 $81 = $80 + $79 | 0;
 SAFE_HEAP_STORE($81 >> 0 | 0, $77 | 0, 1);
 $82 = $p0;
 $83 = $a1;
 $84 = $82 + $83 | 0;
 $85 = SAFE_HEAP_LOAD(596 | 0, 4, 0) | 0 | 0;
 $86 = $85 + $84 | 0;
 $87 = SAFE_HEAP_LOAD($86 >> 0 | 0, 1, 0) | 0 | 0;
 $88 = $1;
 $89 = 0 - $88 | 0;
 $90 = $0;
 $91 = $90 + $89 | 0;
 SAFE_HEAP_STORE($91 >> 0 | 0, $87 | 0, 1);
 $92 = $q0;
 $93 = $a1;
 $94 = $92 - $93 | 0;
 $95 = SAFE_HEAP_LOAD(596 | 0, 4, 0) | 0 | 0;
 $96 = $95 + $94 | 0;
 $97 = SAFE_HEAP_LOAD($96 >> 0 | 0, 1, 0) | 0 | 0;
 $98 = $0;
 SAFE_HEAP_STORE($98 >> 0 | 0, $97 | 0, 1);
 $99 = $q1;
 $100 = $a2;
 $101 = $99 - $100 | 0;
 $102 = SAFE_HEAP_LOAD(596 | 0, 4, 0) | 0 | 0;
 $103 = $102 + $101 | 0;
 $104 = SAFE_HEAP_LOAD($103 >> 0 | 0, 1, 0) | 0 | 0;
 $105 = $1;
 $106 = $0;
 $107 = $106 + $105 | 0;
 SAFE_HEAP_STORE($107 >> 0 | 0, $104 | 0, 1);
 $108 = $q2;
 $109 = $a3;
 $110 = $108 - $109 | 0;
 $111 = SAFE_HEAP_LOAD(596 | 0, 4, 0) | 0 | 0;
 $112 = $111 + $110 | 0;
 $113 = SAFE_HEAP_LOAD($112 >> 0 | 0, 1, 0) | 0 | 0;
 $114 = $1;
 $115 = $114 << 1;
 $116 = $0;
 $117 = $116 + $115 | 0;
 SAFE_HEAP_STORE($117 >> 0 | 0, $113 | 0, 1);
 STACKTOP = sp;
 return;
}

function _VP8EnterCritical($dec, $io) {
 $dec = $dec | 0;
 $io = $io | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0;
 var $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0;
 var $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0;
 var $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0;
 var $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0;
 var $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $extra_pixels = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $dec;
 $2 = $io;
 $3 = $2;
 $4 = $3 + 48 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = ($5 | 0) != (0 | 0);
 if ($6) {
  $7 = $2;
  $8 = $7 + 48 | 0;
  $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
  $10 = $2;
  $11 = FUNCTION_TABLE_ii[(SAFE_FT_MASK($9 | 0, 15 | 0) | 0) & 15]($10) | 0;
  $12 = ($11 | 0) != 0;
  if (!$12) {
   $13 = $1;
   _VP8SetError($13, 6, 2611) | 0;
   $14 = $1;
   $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
   $0 = $15;
   $107 = $0;
   STACKTOP = sp;
   return $107 | 0;
  }
 }
 $16 = $2;
 $17 = $16 + 68 | 0;
 $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
 $19 = ($18 | 0) != 0;
 if ($19) {
  $20 = $1;
  $21 = $20 + 2308 | 0;
  SAFE_HEAP_STORE($21 | 0, 0 | 0, 4);
 }
 $22 = $1;
 $23 = $22 + 2308 | 0;
 $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
 $25 = 2630 + $24 | 0;
 $26 = SAFE_HEAP_LOAD($25 >> 0 | 0, 1, 0) | 0 | 0;
 $27 = $26 & 255;
 $extra_pixels = $27;
 $28 = $1;
 $29 = $28 + 2308 | 0;
 $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
 $31 = ($30 | 0) == 2;
 if ($31) {
  $32 = $1;
  $33 = $32 + 296 | 0;
  SAFE_HEAP_STORE($33 | 0, 0 | 0, 4);
  $34 = $1;
  $35 = $34 + 300 | 0;
  SAFE_HEAP_STORE($35 | 0, 0 | 0, 4);
 } else {
  $36 = $2;
  $37 = $36 + 76 | 0;
  $38 = SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0;
  $39 = $extra_pixels;
  $40 = $38 - $39 | 0;
  $41 = $40 >> 4;
  $42 = $1;
  $43 = $42 + 296 | 0;
  SAFE_HEAP_STORE($43 | 0, $41 | 0, 4);
  $44 = $2;
  $45 = $44 + 84 | 0;
  $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
  $47 = $extra_pixels;
  $48 = $46 - $47 | 0;
  $49 = $48 >> 4;
  $50 = $1;
  $51 = $50 + 300 | 0;
  SAFE_HEAP_STORE($51 | 0, $49 | 0, 4);
  $52 = $1;
  $53 = $52 + 296 | 0;
  $54 = SAFE_HEAP_LOAD($53 | 0, 4, 0) | 0 | 0;
  $55 = ($54 | 0) < 0;
  if ($55) {
   $56 = $1;
   $57 = $56 + 296 | 0;
   SAFE_HEAP_STORE($57 | 0, 0 | 0, 4);
  }
  $58 = $1;
  $59 = $58 + 300 | 0;
  $60 = SAFE_HEAP_LOAD($59 | 0, 4, 0) | 0 | 0;
  $61 = ($60 | 0) < 0;
  if ($61) {
   $62 = $1;
   $63 = $62 + 300 | 0;
   SAFE_HEAP_STORE($63 | 0, 0 | 0, 4);
  }
 }
 $64 = $2;
 $65 = $64 + 88 | 0;
 $66 = SAFE_HEAP_LOAD($65 | 0, 4, 0) | 0 | 0;
 $67 = $66 + 15 | 0;
 $68 = $extra_pixels;
 $69 = $67 + $68 | 0;
 $70 = $69 >> 4;
 $71 = $1;
 $72 = $71 + 308 | 0;
 SAFE_HEAP_STORE($72 | 0, $70 | 0, 4);
 $73 = $2;
 $74 = $73 + 80 | 0;
 $75 = SAFE_HEAP_LOAD($74 | 0, 4, 0) | 0 | 0;
 $76 = $75 + 15 | 0;
 $77 = $extra_pixels;
 $78 = $76 + $77 | 0;
 $79 = $78 >> 4;
 $80 = $1;
 $81 = $80 + 304 | 0;
 SAFE_HEAP_STORE($81 | 0, $79 | 0, 4);
 $82 = $1;
 $83 = $82 + 304 | 0;
 $84 = SAFE_HEAP_LOAD($83 | 0, 4, 0) | 0 | 0;
 $85 = $1;
 $86 = $85 + 288 | 0;
 $87 = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0;
 $88 = ($84 | 0) > ($87 | 0);
 if ($88) {
  $89 = $1;
  $90 = $89 + 288 | 0;
  $91 = SAFE_HEAP_LOAD($90 | 0, 4, 0) | 0 | 0;
  $92 = $1;
  $93 = $92 + 304 | 0;
  SAFE_HEAP_STORE($93 | 0, $91 | 0, 4);
 }
 $94 = $1;
 $95 = $94 + 308 | 0;
 $96 = SAFE_HEAP_LOAD($95 | 0, 4, 0) | 0 | 0;
 $97 = $1;
 $98 = $97 + 292 | 0;
 $99 = SAFE_HEAP_LOAD($98 | 0, 4, 0) | 0 | 0;
 $100 = ($96 | 0) > ($99 | 0);
 if ($100) {
  $101 = $1;
  $102 = $101 + 292 | 0;
  $103 = SAFE_HEAP_LOAD($102 | 0, 4, 0) | 0 | 0;
  $104 = $1;
  $105 = $104 + 308 | 0;
  SAFE_HEAP_STORE($105 | 0, $103 | 0, 4);
 }
 $106 = $1;
 _PrecomputeFilterStrengths($106);
 $0 = 0;
 $107 = $0;
 STACKTOP = sp;
 return $107 | 0;
}

function _HFilter($p) {
 $p = $p | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $106 = 0, $107 = 0, $108 = 0, $109 = 0, $11 = 0, $110 = 0, $111 = 0, $112 = 0, $113 = 0, $114 = 0, $115 = 0;
 var $116 = 0, $117 = 0, $118 = 0, $119 = 0, $12 = 0, $120 = 0, $121 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0;
 var $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0;
 var $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0;
 var $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0;
 var $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0;
 var $98 = 0, $99 = 0, $delta = 0, $delta1 = 0, $delta2 = 0, $in = 0, $out = 0, $r = 0, $scale = 0, $w = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = $1 + 40 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $in = $3;
 $4 = $0;
 $5 = $4 + 48 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $out = $6;
 $7 = $0;
 $8 = $7 + 24 | 0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $scale = $9;
 $10 = $0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $w = $11;
 $12 = $0;
 $13 = $12 + 20 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $r = $14;
 $x = 0;
 while (1) {
  $15 = $x;
  $16 = $r;
  $17 = ($15 | 0) <= ($16 | 0);
  if (!$17) {
   break;
  }
  $18 = $x;
  $19 = $r;
  $20 = $18 + $19 | 0;
  $21 = $20 - 1 | 0;
  $22 = $in;
  $23 = $22 + ($21 << 1) | 0;
  $24 = SAFE_HEAP_LOAD($23 | 0, 2, 0) | 0 | 0;
  $25 = $24 & 65535;
  $26 = $r;
  $27 = $x;
  $28 = $26 - $27 | 0;
  $29 = $in;
  $30 = $29 + ($28 << 1) | 0;
  $31 = SAFE_HEAP_LOAD($30 | 0, 2, 0) | 0 | 0;
  $32 = $31 & 65535;
  $33 = $25 + $32 | 0;
  $34 = $33 & 65535;
  $delta = $34;
  $35 = $delta;
  $36 = $35 & 65535;
  $37 = $scale;
  $38 = Math_imul($36, $37) | 0;
  $39 = $38 >>> 16;
  $40 = $39 & 65535;
  $41 = $x;
  $42 = $out;
  $43 = $42 + ($41 << 1) | 0;
  SAFE_HEAP_STORE($43 | 0, $40 | 0, 2);
  $44 = $x;
  $45 = $44 + 1 | 0;
  $x = $45;
 }
 while (1) {
  $46 = $x;
  $47 = $w;
  $48 = $r;
  $49 = $47 - $48 | 0;
  $50 = ($46 | 0) < ($49 | 0);
  if (!$50) {
   break;
  }
  $51 = $x;
  $52 = $r;
  $53 = $51 + $52 | 0;
  $54 = $in;
  $55 = $54 + ($53 << 1) | 0;
  $56 = SAFE_HEAP_LOAD($55 | 0, 2, 0) | 0 | 0;
  $57 = $56 & 65535;
  $58 = $x;
  $59 = $r;
  $60 = $58 - $59 | 0;
  $61 = $60 - 1 | 0;
  $62 = $in;
  $63 = $62 + ($61 << 1) | 0;
  $64 = SAFE_HEAP_LOAD($63 | 0, 2, 0) | 0 | 0;
  $65 = $64 & 65535;
  $66 = $57 - $65 | 0;
  $67 = $66 & 65535;
  $delta1 = $67;
  $68 = $delta1;
  $69 = $68 & 65535;
  $70 = $scale;
  $71 = Math_imul($69, $70) | 0;
  $72 = $71 >>> 16;
  $73 = $72 & 65535;
  $74 = $x;
  $75 = $out;
  $76 = $75 + ($74 << 1) | 0;
  SAFE_HEAP_STORE($76 | 0, $73 | 0, 2);
  $77 = $x;
  $78 = $77 + 1 | 0;
  $x = $78;
 }
 while (1) {
  $79 = $x;
  $80 = $w;
  $81 = ($79 | 0) < ($80 | 0);
  if (!$81) {
   break;
  }
  $82 = $w;
  $83 = $82 - 1 | 0;
  $84 = $in;
  $85 = $84 + ($83 << 1) | 0;
  $86 = SAFE_HEAP_LOAD($85 | 0, 2, 0) | 0 | 0;
  $87 = $86 & 65535;
  $88 = $87 << 1;
  $89 = $w;
  $90 = $89 << 1;
  $91 = $90 - 2 | 0;
  $92 = $r;
  $93 = $91 - $92 | 0;
  $94 = $x;
  $95 = $93 - $94 | 0;
  $96 = $in;
  $97 = $96 + ($95 << 1) | 0;
  $98 = SAFE_HEAP_LOAD($97 | 0, 2, 0) | 0 | 0;
  $99 = $98 & 65535;
  $100 = $88 - $99 | 0;
  $101 = $x;
  $102 = $r;
  $103 = $101 - $102 | 0;
  $104 = $103 - 1 | 0;
  $105 = $in;
  $106 = $105 + ($104 << 1) | 0;
  $107 = SAFE_HEAP_LOAD($106 | 0, 2, 0) | 0 | 0;
  $108 = $107 & 65535;
  $109 = $100 - $108 | 0;
  $110 = $109 & 65535;
  $delta2 = $110;
  $111 = $delta2;
  $112 = $111 & 65535;
  $113 = $scale;
  $114 = Math_imul($112, $113) | 0;
  $115 = $114 >>> 16;
  $116 = $115 & 65535;
  $117 = $x;
  $118 = $out;
  $119 = $118 + ($117 << 1) | 0;
  SAFE_HEAP_STORE($119 | 0, $116 | 0, 2);
  $120 = $x;
  $121 = $120 + 1 | 0;
  $x = $121;
 }
 STACKTOP = sp;
 return;
}

function _ALPHInit($dec, $data, $data_size, $width, $height, $output) {
 $dec = $dec | 0;
 $data = $data | 0;
 $data_size = $data_size | 0;
 $width = $width | 0;
 $height = $height | 0;
 $output = $output | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $alpha_data = 0, $alpha_data_size = 0, $alpha_decoded_size = 0, $ok = 0, $or$cond = 0, $or$cond3 = 0;
 var $or$cond5 = 0, $rsrv = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $dec;
 $2 = $data;
 $3 = $data_size;
 $4 = $width;
 $5 = $height;
 $6 = $output;
 $ok = 0;
 $7 = $2;
 $8 = $7 + 1 | 0;
 $alpha_data = $8;
 $9 = $3;
 $10 = $9 - 1 | 0;
 $alpha_data_size = $10;
 $11 = $4;
 $12 = ($11 | 0) > 0;
 $13 = $5;
 $14 = ($13 | 0) > 0;
 $or$cond = $12 & $14;
 if (!$or$cond) {
  ___assert_fail(2428 | 0, 2256 | 0, 53, 2452 | 0);
 }
 $15 = $2;
 $16 = ($15 | 0) != (0 | 0);
 $17 = $6;
 $18 = ($17 | 0) != (0 | 0);
 $or$cond3 = $16 & $18;
 if (!$or$cond3) {
  ___assert_fail(2461 | 0, 2256 | 0, 54, 2452 | 0);
 }
 $19 = $4;
 $20 = $1;
 SAFE_HEAP_STORE($20 | 0, $19 | 0, 4);
 $21 = $5;
 $22 = $1;
 $23 = $22 + 4 | 0;
 SAFE_HEAP_STORE($23 | 0, $21 | 0, 4);
 $24 = $3;
 $25 = $24 >>> 0 <= 1;
 if ($25) {
  $0 = 0;
  $93 = $0;
  STACKTOP = sp;
  return $93 | 0;
 }
 $26 = $2;
 $27 = SAFE_HEAP_LOAD($26 >> 0 | 0, 1, 0) | 0 | 0;
 $28 = $27 & 255;
 $29 = $28 >> 0;
 $30 = $29 & 3;
 $31 = $1;
 $32 = $31 + 8 | 0;
 SAFE_HEAP_STORE($32 | 0, $30 | 0, 4);
 $33 = $2;
 $34 = SAFE_HEAP_LOAD($33 >> 0 | 0, 1, 0) | 0 | 0;
 $35 = $34 & 255;
 $36 = $35 >> 2;
 $37 = $36 & 3;
 $38 = $1;
 $39 = $38 + 12 | 0;
 SAFE_HEAP_STORE($39 | 0, $37 | 0, 4);
 $40 = $2;
 $41 = SAFE_HEAP_LOAD($40 >> 0 | 0, 1, 0) | 0 | 0;
 $42 = $41 & 255;
 $43 = $42 >> 4;
 $44 = $43 & 3;
 $45 = $1;
 $46 = $45 + 16 | 0;
 SAFE_HEAP_STORE($46 | 0, $44 | 0, 4);
 $47 = $2;
 $48 = SAFE_HEAP_LOAD($47 >> 0 | 0, 1, 0) | 0 | 0;
 $49 = $48 & 255;
 $50 = $49 >> 6;
 $51 = $50 & 3;
 $rsrv = $51;
 $52 = $1;
 $53 = $52 + 8 | 0;
 $54 = SAFE_HEAP_LOAD($53 | 0, 4, 0) | 0 | 0;
 $55 = ($54 | 0) < 0;
 if (!$55) {
  $56 = $1;
  $57 = $56 + 8 | 0;
  $58 = SAFE_HEAP_LOAD($57 | 0, 4, 0) | 0 | 0;
  $59 = ($58 | 0) > 1;
  if (!$59) {
   $60 = $1;
   $61 = $60 + 12 | 0;
   $62 = SAFE_HEAP_LOAD($61 | 0, 4, 0) | 0 | 0;
   $63 = $62 >>> 0 >= 4;
   if (!$63) {
    $64 = $1;
    $65 = $64 + 16 | 0;
    $66 = SAFE_HEAP_LOAD($65 | 0, 4, 0) | 0 | 0;
    $67 = ($66 | 0) > 1;
    $68 = $rsrv;
    $69 = ($68 | 0) != 0;
    $or$cond5 = $67 | $69;
    if (!$or$cond5) {
     $70 = $1;
     $71 = $70 + 8 | 0;
     $72 = SAFE_HEAP_LOAD($71 | 0, 4, 0) | 0 | 0;
     $73 = ($72 | 0) == 0;
     $74 = $1;
     do {
      if ($73) {
       $75 = SAFE_HEAP_LOAD($74 | 0, 4, 0) | 0 | 0;
       $76 = $1;
       $77 = $76 + 4 | 0;
       $78 = SAFE_HEAP_LOAD($77 | 0, 4, 0) | 0 | 0;
       $79 = Math_imul($75, $78) | 0;
       $alpha_decoded_size = $79;
       $80 = $alpha_data_size;
       $81 = $alpha_decoded_size;
       $82 = $80 >>> 0 >= $81 >>> 0;
       $83 = $82 & 1;
       $ok = $83;
      } else {
       $84 = $74 + 8 | 0;
       $85 = SAFE_HEAP_LOAD($84 | 0, 4, 0) | 0 | 0;
       $86 = ($85 | 0) == 1;
       if ($86) {
        $87 = $1;
        $88 = $alpha_data;
        $89 = $alpha_data_size;
        $90 = $6;
        $91 = _VP8LDecodeAlphaHeader($87, $88, $89, $90) | 0;
        $ok = $91;
        break;
       } else {
        ___assert_fail(2492 | 0, 2256 | 0, 79, 2452 | 0);
       }
      }
     } while (0);
     _VP8FiltersInit();
     $92 = $ok;
     $0 = $92;
     $93 = $0;
     STACKTOP = sp;
     return $93 | 0;
    }
   }
  }
 }
 $0 = 0;
 $93 = $0;
 STACKTOP = sp;
 return $93 | 0;
}

function _AllocateInternalBuffers32b($dec, $final_width) {
 $dec = $dec | 0;
 $final_width = $final_width | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0;
 var $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0;
 var $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0;
 var $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0;
 var $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0;
 var $99 = 0, $cache_pixels = 0, $cache_top_pixels = 0, $num_pixels = 0, $total_num_pixels = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $num_pixels = sp + 24 | 0;
 $cache_top_pixels = sp + 16 | 0;
 $cache_pixels = sp + 8 | 0;
 $total_num_pixels = sp;
 $1 = $dec;
 $2 = $final_width;
 $3 = $1;
 $4 = $3 + 100 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = ($5 | 0) < 0;
 $7 = $6 << 31 >> 31;
 $8 = $1;
 $9 = $8 + 104 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $11 = ($10 | 0) < 0;
 $12 = $11 << 31 >> 31;
 $13 = ___muldi3($5 | 0, $7 | 0, $10 | 0, $12 | 0) | 0;
 $14 = tempRet0;
 $15 = $num_pixels;
 $16 = $15;
 SAFE_HEAP_STORE($16 | 0, $13 | 0, 4);
 $17 = $15 + 4 | 0;
 $18 = $17;
 SAFE_HEAP_STORE($18 | 0, $14 | 0, 4);
 $19 = $2;
 $20 = $19 & 65535;
 $21 = $20 & 65535;
 $22 = $cache_top_pixels;
 $23 = $22;
 SAFE_HEAP_STORE($23 | 0, $21 | 0, 4);
 $24 = $22 + 4 | 0;
 $25 = $24;
 SAFE_HEAP_STORE($25 | 0, 0 | 0, 4);
 $26 = $2;
 $27 = ($26 | 0) < 0;
 $28 = $27 << 31 >> 31;
 $29 = ___muldi3($26 | 0, $28 | 0, 16, 0) | 0;
 $30 = tempRet0;
 $31 = $cache_pixels;
 $32 = $31;
 SAFE_HEAP_STORE($32 | 0, $29 | 0, 4);
 $33 = $31 + 4 | 0;
 $34 = $33;
 SAFE_HEAP_STORE($34 | 0, $30 | 0, 4);
 $35 = $num_pixels;
 $36 = $35;
 $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
 $38 = $35 + 4 | 0;
 $39 = $38;
 $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
 $41 = $cache_top_pixels;
 $42 = $41;
 $43 = SAFE_HEAP_LOAD($42 | 0, 4, 0) | 0 | 0;
 $44 = $41 + 4 | 0;
 $45 = $44;
 $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
 $47 = _i64Add($37 | 0, $40 | 0, $43 | 0, $46 | 0) | 0;
 $48 = tempRet0;
 $49 = $cache_pixels;
 $50 = $49;
 $51 = SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0;
 $52 = $49 + 4 | 0;
 $53 = $52;
 $54 = SAFE_HEAP_LOAD($53 | 0, 4, 0) | 0 | 0;
 $55 = _i64Add($47 | 0, $48 | 0, $51 | 0, $54 | 0) | 0;
 $56 = tempRet0;
 $57 = $total_num_pixels;
 $58 = $57;
 SAFE_HEAP_STORE($58 | 0, $55 | 0, 4);
 $59 = $57 + 4 | 0;
 $60 = $59;
 SAFE_HEAP_STORE($60 | 0, $56 | 0, 4);
 $61 = $1;
 $62 = $61 + 100 | 0;
 $63 = SAFE_HEAP_LOAD($62 | 0, 4, 0) | 0 | 0;
 $64 = $2;
 $65 = ($63 | 0) <= ($64 | 0);
 if (!$65) {
  ___assert_fail(8578 | 0, 7124 | 0, 1416, 8605 | 0);
 }
 $66 = $total_num_pixels;
 $67 = $66;
 $68 = SAFE_HEAP_LOAD($67 | 0, 4, 0) | 0 | 0;
 $69 = $66 + 4 | 0;
 $70 = $69;
 $71 = SAFE_HEAP_LOAD($70 | 0, 4, 0) | 0 | 0;
 $72 = _WebPSafeMalloc($68, $71, 4) | 0;
 $73 = $1;
 $74 = $73 + 16 | 0;
 SAFE_HEAP_STORE($74 | 0, $72 | 0, 4);
 $75 = $1;
 $76 = $75 + 16 | 0;
 $77 = SAFE_HEAP_LOAD($76 | 0, 4, 0) | 0 | 0;
 $78 = ($77 | 0) == (0 | 0);
 $79 = $1;
 if ($78) {
  $80 = $79 + 20 | 0;
  SAFE_HEAP_STORE($80 | 0, 0 | 0, 4);
  $81 = $1;
  SAFE_HEAP_STORE($81 | 0, 1 | 0, 4);
  $0 = 0;
  $100 = $0;
  STACKTOP = sp;
  return $100 | 0;
 } else {
  $82 = $79 + 16 | 0;
  $83 = SAFE_HEAP_LOAD($82 | 0, 4, 0) | 0 | 0;
  $84 = $num_pixels;
  $85 = $84;
  $86 = SAFE_HEAP_LOAD($85 | 0, 4, 0) | 0 | 0;
  $87 = $84 + 4 | 0;
  $88 = $87;
  $89 = SAFE_HEAP_LOAD($88 | 0, 4, 0) | 0 | 0;
  $90 = $83 + ($86 << 2) | 0;
  $91 = $cache_top_pixels;
  $92 = $91;
  $93 = SAFE_HEAP_LOAD($92 | 0, 4, 0) | 0 | 0;
  $94 = $91 + 4 | 0;
  $95 = $94;
  $96 = SAFE_HEAP_LOAD($95 | 0, 4, 0) | 0 | 0;
  $97 = $90 + ($93 << 2) | 0;
  $98 = $1;
  $99 = $98 + 20 | 0;
  SAFE_HEAP_STORE($99 | 0, $97 | 0, 4);
  $0 = 1;
  $100 = $0;
  STACKTOP = sp;
  return $100 | 0;
 }
 return 0 | 0;
}

function _WebPAllocateDecBuffer($w, $h, $options, $out) {
 $w = $w | 0;
 $h = $h | 0;
 $options = $options | 0;
 $out = $out | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $9 = 0, $ch = 0, $cw = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0, $or$cond9 = 0, $scaled_height = 0, $scaled_width = 0, $status = 0, $x = 0, $y = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $scaled_width = sp + 4 | 0;
 $scaled_height = sp;
 $1 = $w;
 $2 = $h;
 $3 = $options;
 $4 = $out;
 $5 = $4;
 $6 = ($5 | 0) == (0 | 0);
 $7 = $1;
 $8 = ($7 | 0) <= 0;
 $or$cond = $6 | $8;
 $9 = $2;
 $10 = ($9 | 0) <= 0;
 $or$cond3 = $or$cond | $10;
 if ($or$cond3) {
  $0 = 2;
  $87 = $0;
  STACKTOP = sp;
  return $87 | 0;
 }
 $11 = $3;
 $12 = ($11 | 0) != (0 | 0);
 do {
  if ($12) {
   $13 = $3;
   $14 = $13 + 8 | 0;
   $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
   $16 = ($15 | 0) != 0;
   do {
    if ($16) {
     $17 = $3;
     $18 = $17 + 20 | 0;
     $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
     $cw = $19;
     $20 = $3;
     $21 = $20 + 24 | 0;
     $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
     $ch = $22;
     $23 = $3;
     $24 = $23 + 12 | 0;
     $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
     $26 = $25 & -2;
     $x = $26;
     $27 = $3;
     $28 = $27 + 16 | 0;
     $29 = SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0;
     $30 = $29 & -2;
     $y = $30;
     $31 = $x;
     $32 = ($31 | 0) < 0;
     $33 = $y;
     $34 = ($33 | 0) < 0;
     $or$cond5 = $32 | $34;
     $35 = $cw;
     $36 = ($35 | 0) <= 0;
     $or$cond7 = $or$cond5 | $36;
     $37 = $ch;
     $38 = ($37 | 0) <= 0;
     $or$cond9 = $or$cond7 | $38;
     if (!$or$cond9) {
      $39 = $x;
      $40 = $cw;
      $41 = $39 + $40 | 0;
      $42 = $1;
      $43 = ($41 | 0) > ($42 | 0);
      if (!$43) {
       $44 = $y;
       $45 = $ch;
       $46 = $44 + $45 | 0;
       $47 = $2;
       $48 = ($46 | 0) > ($47 | 0);
       if (!$48) {
        $49 = $cw;
        $1 = $49;
        $50 = $ch;
        $2 = $50;
        break;
       }
      }
     }
     $0 = 2;
     $87 = $0;
     STACKTOP = sp;
     return $87 | 0;
    }
   } while (0);
   $51 = $3;
   $52 = $51 + 28 | 0;
   $53 = SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0;
   $54 = ($53 | 0) != 0;
   if ($54) {
    $55 = $3;
    $56 = $55 + 32 | 0;
    $57 = SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0;
    SAFE_HEAP_STORE($scaled_width | 0, $57 | 0, 4);
    $58 = $3;
    $59 = $58 + 36 | 0;
    $60 = SAFE_HEAP_LOAD($59 | 0, 4, 0) | 0 | 0;
    SAFE_HEAP_STORE($scaled_height | 0, $60 | 0, 4);
    $61 = $1;
    $62 = $2;
    $63 = _WebPRescalerGetScaledDimensions($61, $62, $scaled_width, $scaled_height) | 0;
    $64 = ($63 | 0) != 0;
    if ($64) {
     $65 = SAFE_HEAP_LOAD($scaled_width | 0, 4, 0) | 0 | 0;
     $1 = $65;
     $66 = SAFE_HEAP_LOAD($scaled_height | 0, 4, 0) | 0 | 0;
     $2 = $66;
     break;
    }
    $0 = 2;
    $87 = $0;
    STACKTOP = sp;
    return $87 | 0;
   }
  }
 } while (0);
 $67 = $1;
 $68 = $4;
 $69 = $68 + 4 | 0;
 SAFE_HEAP_STORE($69 | 0, $67 | 0, 4);
 $70 = $2;
 $71 = $4;
 $72 = $71 + 8 | 0;
 SAFE_HEAP_STORE($72 | 0, $70 | 0, 4);
 $73 = $4;
 $74 = _AllocateBuffer($73) | 0;
 $status = $74;
 $75 = $status;
 $76 = ($75 | 0) != 0;
 if ($76) {
  $77 = $status;
  $0 = $77;
  $87 = $0;
  STACKTOP = sp;
  return $87 | 0;
 }
 $78 = $3;
 $79 = ($78 | 0) != (0 | 0);
 if ($79) {
  $80 = $3;
  $81 = $80 + 48 | 0;
  $82 = SAFE_HEAP_LOAD($81 | 0, 4, 0) | 0 | 0;
  $83 = ($82 | 0) != 0;
  if ($83) {
   $84 = $4;
   $85 = _WebPFlipBuffer($84) | 0;
   $status = $85;
  }
 }
 $86 = $status;
 $0 = $86;
 $87 = $0;
 STACKTOP = sp;
 return $87 | 0;
}

function _AllocateAndInitRescaler($dec, $io) {
 $dec = $dec | 0;
 $io = $io | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $in_height = 0, $in_width = 0;
 var $memory = 0, $memory_size = 0, $num_channels = 0, $out_height = 0, $out_width = 0, $scaled_data = 0, $scaled_data_size = 0, $work = 0, $work_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $work_size = sp + 16 | 0;
 $scaled_data_size = sp + 8 | 0;
 $memory_size = sp;
 $1 = $dec;
 $2 = $io;
 $num_channels = 4;
 $3 = $2;
 $4 = $3 + 12 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $in_width = $5;
 $6 = $2;
 $7 = $6 + 96 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $out_width = $8;
 $9 = $2;
 $10 = $9 + 16 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $in_height = $11;
 $12 = $2;
 $13 = $12 + 100 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $out_height = $14;
 $15 = $out_width;
 $16 = ($15 | 0) < 0;
 $17 = $16 << 31 >> 31;
 $18 = ___muldi3(8, 0, $15 | 0, $17 | 0) | 0;
 $19 = tempRet0;
 $20 = $work_size;
 $21 = $20;
 SAFE_HEAP_STORE($21 | 0, $18 | 0, 4);
 $22 = $20 + 4 | 0;
 $23 = $22;
 SAFE_HEAP_STORE($23 | 0, $19 | 0, 4);
 $24 = $out_width;
 $25 = ($24 | 0) < 0;
 $26 = $25 << 31 >> 31;
 $27 = $scaled_data_size;
 $28 = $27;
 SAFE_HEAP_STORE($28 | 0, $24 | 0, 4);
 $29 = $27 + 4 | 0;
 $30 = $29;
 SAFE_HEAP_STORE($30 | 0, $26 | 0, 4);
 $31 = $work_size;
 $32 = $31;
 $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
 $34 = $31 + 4 | 0;
 $35 = $34;
 $36 = SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0;
 $37 = ___muldi3($33 | 0, $36 | 0, 4, 0) | 0;
 $38 = tempRet0;
 $39 = _i64Add(84, 0, $37 | 0, $38 | 0) | 0;
 $40 = tempRet0;
 $41 = $scaled_data_size;
 $42 = $41;
 $43 = SAFE_HEAP_LOAD($42 | 0, 4, 0) | 0 | 0;
 $44 = $41 + 4 | 0;
 $45 = $44;
 $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
 $47 = ___muldi3($43 | 0, $46 | 0, 4, 0) | 0;
 $48 = tempRet0;
 $49 = _i64Add($39 | 0, $40 | 0, $47 | 0, $48 | 0) | 0;
 $50 = tempRet0;
 $51 = $memory_size;
 $52 = $51;
 SAFE_HEAP_STORE($52 | 0, $49 | 0, 4);
 $53 = $51 + 4 | 0;
 $54 = $53;
 SAFE_HEAP_STORE($54 | 0, $50 | 0, 4);
 $55 = $memory_size;
 $56 = $55;
 $57 = SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0;
 $58 = $55 + 4 | 0;
 $59 = $58;
 $60 = SAFE_HEAP_LOAD($59 | 0, 4, 0) | 0 | 0;
 $61 = _WebPSafeMalloc($57, $60, 1) | 0;
 $memory = $61;
 $62 = $memory;
 $63 = ($62 | 0) == (0 | 0);
 $64 = $1;
 if ($63) {
  SAFE_HEAP_STORE($64 | 0, 1 | 0, 4);
  $0 = 0;
  $97 = $0;
  STACKTOP = sp;
  return $97 | 0;
 }
 $65 = $64 + 264 | 0;
 $66 = SAFE_HEAP_LOAD($65 | 0, 4, 0) | 0 | 0;
 $67 = ($66 | 0) == (0 | 0);
 if (!$67) {
  ___assert_fail(8320 | 0, 7124 | 0, 505, 8349 | 0);
 }
 $68 = $memory;
 $69 = $1;
 $70 = $69 + 264 | 0;
 SAFE_HEAP_STORE($70 | 0, $68 | 0, 4);
 $71 = $memory;
 $72 = $1;
 $73 = $72 + 268 | 0;
 SAFE_HEAP_STORE($73 | 0, $71 | 0, 4);
 $74 = $memory;
 $75 = $74 + 84 | 0;
 $memory = $75;
 $76 = $memory;
 $work = $76;
 $77 = $work_size;
 $78 = $77;
 $79 = SAFE_HEAP_LOAD($78 | 0, 4, 0) | 0 | 0;
 $80 = $77 + 4 | 0;
 $81 = $80;
 $82 = SAFE_HEAP_LOAD($81 | 0, 4, 0) | 0 | 0;
 $83 = ___muldi3($79 | 0, $82 | 0, 4, 0) | 0;
 $84 = tempRet0;
 $85 = $memory;
 $86 = $85 + $83 | 0;
 $memory = $86;
 $87 = $memory;
 $scaled_data = $87;
 $88 = $1;
 $89 = $88 + 268 | 0;
 $90 = SAFE_HEAP_LOAD($89 | 0, 4, 0) | 0 | 0;
 $91 = $in_width;
 $92 = $in_height;
 $93 = $scaled_data;
 $94 = $out_width;
 $95 = $out_height;
 $96 = $work;
 _WebPRescalerInit($90, $91, $92, $93, $94, $95, 0, 4, $96);
 $0 = 1;
 $97 = $0;
 STACKTOP = sp;
 return $97 | 0;
}

function _VP8DecodeMB($dec, $token_br) {
 $dec = $dec | 0;
 $token_br = $token_br | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $block = 0, $finfo = 0, $left = 0, $mb = 0, $skip = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $token_br;
 $2 = $0;
 $3 = $2 + 2256 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = $4 + -2 | 0;
 $left = $5;
 $6 = $0;
 $7 = $6 + 2256 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $9 = $0;
 $10 = $9 + 2296 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = $8 + ($11 << 1) | 0;
 $mb = $12;
 $13 = $0;
 $14 = $13 + 2304 | 0;
 $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
 $16 = $0;
 $17 = $16 + 2296 | 0;
 $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
 $19 = $15 + ($18 * 800 | 0) | 0;
 $block = $19;
 $20 = $0;
 $21 = $20 + 2236 | 0;
 $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
 $23 = ($22 | 0) != 0;
 if ($23) {
  $24 = $block;
  $25 = $24 + 797 | 0;
  $26 = SAFE_HEAP_LOAD($25 >> 0 | 0, 1, 0) | 0 | 0;
  $27 = $26 & 255;
  $28 = $27;
 } else {
  $28 = 0;
 }
 $skip = $28;
 $29 = $skip;
 $30 = ($29 | 0) != 0;
 if ($30) {
  $35 = $mb;
  SAFE_HEAP_STORE($35 >> 0 | 0, 0 | 0, 1);
  $36 = $left;
  SAFE_HEAP_STORE($36 >> 0 | 0, 0 | 0, 1);
  $37 = $block;
  $38 = $37 + 768 | 0;
  $39 = SAFE_HEAP_LOAD($38 >> 0 | 0, 1, 0) | 0 | 0;
  $40 = $39 << 24 >> 24 != 0;
  if (!$40) {
   $41 = $mb;
   $42 = $41 + 1 | 0;
   SAFE_HEAP_STORE($42 >> 0 | 0, 0 | 0, 1);
   $43 = $left;
   $44 = $43 + 1 | 0;
   SAFE_HEAP_STORE($44 >> 0 | 0, 0 | 0, 1);
  }
  $45 = $block;
  $46 = $45 + 788 | 0;
  SAFE_HEAP_STORE($46 | 0, 0 | 0, 4);
  $47 = $block;
  $48 = $47 + 792 | 0;
  SAFE_HEAP_STORE($48 | 0, 0 | 0, 4);
  $49 = $block;
  $50 = $49 + 796 | 0;
  SAFE_HEAP_STORE($50 >> 0 | 0, 0 | 0, 1);
 } else {
  $31 = $0;
  $32 = $mb;
  $33 = $1;
  $34 = _ParseResiduals($31, $32, $33) | 0;
  $skip = $34;
 }
 $51 = $0;
 $52 = $51 + 2308 | 0;
 $53 = SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0;
 $54 = ($53 | 0) > 0;
 if (!$54) {
  $85 = $1;
  $86 = $85 + 24 | 0;
  $87 = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0;
  $88 = ($87 | 0) != 0;
  $89 = $88 ^ 1;
  $90 = $89 & 1;
  STACKTOP = sp;
  return $90 | 0;
 }
 $55 = $0;
 $56 = $55 + 2260 | 0;
 $57 = SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0;
 $58 = $0;
 $59 = $58 + 2296 | 0;
 $60 = SAFE_HEAP_LOAD($59 | 0, 4, 0) | 0 | 0;
 $61 = $57 + ($60 << 2) | 0;
 $finfo = $61;
 $62 = $finfo;
 $63 = $block;
 $64 = $63 + 768 | 0;
 $65 = SAFE_HEAP_LOAD($64 >> 0 | 0, 1, 0) | 0 | 0;
 $66 = $65 & 255;
 $67 = $block;
 $68 = $67 + 798 | 0;
 $69 = SAFE_HEAP_LOAD($68 >> 0 | 0, 1, 0) | 0 | 0;
 $70 = $69 & 255;
 $71 = $0;
 $72 = $71 + 2312 | 0;
 $73 = $72 + ($70 << 3) | 0;
 $74 = $73 + ($66 << 2) | 0;
 {}
 SAFE_HEAP_STORE($62 >> 0 | 0, SAFE_HEAP_LOAD($74 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 SAFE_HEAP_STORE($62 + 1 >> 0 | 0, SAFE_HEAP_LOAD($74 + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 SAFE_HEAP_STORE($62 + 2 >> 0 | 0, SAFE_HEAP_LOAD($74 + 2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 SAFE_HEAP_STORE($62 + 3 >> 0 | 0, SAFE_HEAP_LOAD($74 + 3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 $75 = $skip;
 $76 = ($75 | 0) != 0;
 $77 = $76 ^ 1;
 $78 = $77 & 1;
 $79 = $finfo;
 $80 = $79 + 2 | 0;
 $81 = SAFE_HEAP_LOAD($80 >> 0 | 0, 1, 0) | 0 | 0;
 $82 = $81 & 255;
 $83 = $82 | $78;
 $84 = $83 & 255;
 SAFE_HEAP_STORE($80 >> 0 | 0, $84 | 0, 1);
 $85 = $1;
 $86 = $85 + 24 | 0;
 $87 = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0;
 $88 = ($87 | 0) != 0;
 $89 = $88 ^ 1;
 $90 = $89 & 1;
 STACKTOP = sp;
 return $90 | 0;
}

function _ExportAlphaRGBA4444($p, $y_pos, $max_lines_out) {
 $p = $p | 0;
 $y_pos = $y_pos | 0;
 $max_lines_out = $max_lines_out | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $alpha_dst = 0, $alpha_mask = 0, $alpha_value = 0, $base_rgba = 0, $buf = 0, $colorspace = 0, $i = 0, $is_premult_alpha = 0;
 var $num_lines_out = 0, $or$cond = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $p;
 $1 = $y_pos;
 $2 = $max_lines_out;
 $3 = $0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = $4 + 16 | 0;
 $buf = $5;
 $6 = $buf;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = $1;
 $9 = $buf;
 $10 = $9 + 4 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = Math_imul($8, $11) | 0;
 $13 = $7 + $12 | 0;
 $base_rgba = $13;
 $14 = $base_rgba;
 $15 = $14 + 1 | 0;
 $alpha_dst = $15;
 $num_lines_out = 0;
 $16 = $0;
 $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
 $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
 $colorspace = $18;
 $19 = $0;
 $20 = $19 + 276 | 0;
 $21 = $20 + 52 | 0;
 $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
 $width = $22;
 $23 = $colorspace;
 $24 = _WebPIsPremultipliedMode($23) | 0;
 $is_premult_alpha = $24;
 $alpha_mask = 15;
 while (1) {
  $25 = $0;
  $26 = $25 + 276 | 0;
  $27 = _WebPRescalerHasPendingOutput($26) | 0;
  $28 = ($27 | 0) != 0;
  if (!$28) {
   break;
  }
  $29 = $num_lines_out;
  $30 = $2;
  $31 = ($29 | 0) < ($30 | 0);
  if (!$31) {
   break;
  }
  $32 = $1;
  $33 = $num_lines_out;
  $34 = $32 + $33 | 0;
  $35 = $0;
  $36 = SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0;
  $37 = $36 + 8 | 0;
  $38 = SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0;
  $39 = ($34 | 0) < ($38 | 0);
  if (!$39) {
   label = 5;
   break;
  }
  $40 = $0;
  $41 = $40 + 276 | 0;
  _WebPRescalerExportRow($41);
  $i = 0;
  while (1) {
   $42 = $i;
   $43 = $width;
   $44 = ($42 | 0) < ($43 | 0);
   if (!$44) {
    break;
   }
   $45 = $i;
   $46 = $0;
   $47 = $46 + 276 | 0;
   $48 = $47 + 68 | 0;
   $49 = SAFE_HEAP_LOAD($48 | 0, 4, 0) | 0 | 0;
   $50 = $49 + $45 | 0;
   $51 = SAFE_HEAP_LOAD($50 >> 0 | 0, 1, 0) | 0 | 0;
   $52 = $51 & 255;
   $53 = $52 >> 4;
   $alpha_value = $53;
   $54 = $i;
   $55 = $54 << 1;
   $56 = $alpha_dst;
   $57 = $56 + $55 | 0;
   $58 = SAFE_HEAP_LOAD($57 >> 0 | 0, 1, 0) | 0 | 0;
   $59 = $58 & 255;
   $60 = $59 & 240;
   $61 = $alpha_value;
   $62 = $60 | $61;
   $63 = $62 & 255;
   $64 = $i;
   $65 = $64 << 1;
   $66 = $alpha_dst;
   $67 = $66 + $65 | 0;
   SAFE_HEAP_STORE($67 >> 0 | 0, $63 | 0, 1);
   $68 = $alpha_value;
   $69 = $alpha_mask;
   $70 = $69 & $68;
   $alpha_mask = $70;
   $71 = $i;
   $72 = $71 + 1 | 0;
   $i = $72;
  }
  $73 = $buf;
  $74 = $73 + 4 | 0;
  $75 = SAFE_HEAP_LOAD($74 | 0, 4, 0) | 0 | 0;
  $76 = $alpha_dst;
  $77 = $76 + $75 | 0;
  $alpha_dst = $77;
  $78 = $num_lines_out;
  $79 = $78 + 1 | 0;
  $num_lines_out = $79;
 }
 if ((label | 0) == 5) {
  ___assert_fail(3231 | 0, 3071 | 0, 428, 3285 | 0);
 }
 $80 = $is_premult_alpha;
 $81 = ($80 | 0) != 0;
 $82 = $alpha_mask;
 $83 = ($82 | 0) != 15;
 $or$cond = $81 & $83;
 if (!$or$cond) {
  $91 = $num_lines_out;
  STACKTOP = sp;
  return $91 | 0;
 }
 $84 = SAFE_HEAP_LOAD(392 | 0, 4, 0) | 0 | 0;
 $85 = $base_rgba;
 $86 = $width;
 $87 = $num_lines_out;
 $88 = $buf;
 $89 = $88 + 4 | 0;
 $90 = SAFE_HEAP_LOAD($89 | 0, 4, 0) | 0 | 0;
 FUNCTION_TABLE_viiii[(SAFE_FT_MASK($84 | 0, 255 | 0) | 0) & 255]($85, $86, $87, $90);
 $91 = $num_lines_out;
 STACKTOP = sp;
 return $91 | 0;
}

function _VP8LInverseTransform($transform, $row_start, $row_end, $in, $out) {
 $transform = $transform | 0;
 $row_start = $row_start | 0;
 $row_end = $row_end | 0;
 $in = $in | 0;
 $out = $out | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $in_stride = 0, $out_stride = 0, $src = 0, $width = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $transform;
 $1 = $row_start;
 $2 = $row_end;
 $3 = $in;
 $4 = $out;
 $5 = $0;
 $6 = $5 + 8 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $width = $7;
 $8 = $1;
 $9 = $2;
 $10 = ($8 | 0) < ($9 | 0);
 if (!$10) {
  ___assert_fail(12938 | 0, 12958 | 0, 367, 12984 | 0);
 }
 $11 = $2;
 $12 = $0;
 $13 = $12 + 12 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $15 = ($11 | 0) <= ($14 | 0);
 if (!$15) {
  ___assert_fail(13005 | 0, 12958 | 0, 368, 12984 | 0);
 }
 $16 = $0;
 $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
 switch ($17 | 0) {
 case 2:
  {
   $18 = SAFE_HEAP_LOAD(644 | 0, 4, 0) | 0 | 0;
   $19 = $4;
   $20 = $2;
   $21 = $1;
   $22 = $20 - $21 | 0;
   $23 = $width;
   $24 = Math_imul($22, $23) | 0;
   FUNCTION_TABLE_vii[(SAFE_FT_MASK($18 | 0, 127 | 0) | 0) & 127]($19, $24);
   STACKTOP = sp;
   return;
   break;
  }
 case 0:
  {
   $25 = $0;
   $26 = $1;
   $27 = $2;
   $28 = $4;
   _PredictorInverseTransform($25, $26, $27, $28);
   $29 = $2;
   $30 = $0;
   $31 = $30 + 12 | 0;
   $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
   $33 = ($29 | 0) != ($32 | 0);
   if (!$33) {
    STACKTOP = sp;
    return;
   }
   $34 = $4;
   $35 = $width;
   $36 = 0 - $35 | 0;
   $37 = $34 + ($36 << 2) | 0;
   $38 = $4;
   $39 = $2;
   $40 = $1;
   $41 = $39 - $40 | 0;
   $42 = $41 - 1 | 0;
   $43 = $width;
   $44 = Math_imul($42, $43) | 0;
   $45 = $38 + ($44 << 2) | 0;
   $46 = $width;
   $47 = $46 << 2;
   _memcpy($37 | 0, $45 | 0, $47 | 0) | 0;
   STACKTOP = sp;
   return;
   break;
  }
 case 1:
  {
   $48 = $0;
   $49 = $1;
   $50 = $2;
   $51 = $4;
   _ColorSpaceInverseTransform($48, $49, $50, $51);
   STACKTOP = sp;
   return;
   break;
  }
 case 3:
  {
   $52 = $3;
   $53 = $4;
   $54 = ($52 | 0) == ($53 | 0);
   if ($54) {
    $55 = $0;
    $56 = $55 + 4 | 0;
    $57 = SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0;
    $58 = ($57 | 0) > 0;
    if ($58) {
     $59 = $2;
     $60 = $1;
     $61 = $59 - $60 | 0;
     $62 = $width;
     $63 = Math_imul($61, $62) | 0;
     $out_stride = $63;
     $64 = $2;
     $65 = $1;
     $66 = $64 - $65 | 0;
     $67 = $0;
     $68 = $67 + 8 | 0;
     $69 = SAFE_HEAP_LOAD($68 | 0, 4, 0) | 0 | 0;
     $70 = $0;
     $71 = $70 + 4 | 0;
     $72 = SAFE_HEAP_LOAD($71 | 0, 4, 0) | 0 | 0;
     $73 = _VP8LSubSampleSize315($69, $72) | 0;
     $74 = Math_imul($66, $73) | 0;
     $in_stride = $74;
     $75 = $4;
     $76 = $out_stride;
     $77 = $75 + ($76 << 2) | 0;
     $78 = $in_stride;
     $79 = 0 - $78 | 0;
     $80 = $77 + ($79 << 2) | 0;
     $src = $80;
     $81 = $src;
     $82 = $4;
     $83 = $in_stride;
     $84 = $83 << 2;
     _memmove($81 | 0, $82 | 0, $84 | 0) | 0;
     $85 = $0;
     $86 = $1;
     $87 = $2;
     $88 = $src;
     $89 = $4;
     _ColorIndexInverseTransform($85, $86, $87, $88, $89);
     STACKTOP = sp;
     return;
    }
   }
   $90 = $0;
   $91 = $1;
   $92 = $2;
   $93 = $3;
   $94 = $4;
   _ColorIndexInverseTransform($90, $91, $92, $93, $94);
   STACKTOP = sp;
   return;
   break;
  }
 default:
  {
   STACKTOP = sp;
   return;
  }
 }
}

function _InitParams($data, $width, $height, $radius, $p) {
 $data = $data | 0;
 $width = $width | 0;
 $height = $height | 0;
 $radius = $radius | 0;
 $p = $p | 0;
 var $0 = 0, $1 = 0, $10 = 0, $100 = 0, $101 = 0, $102 = 0, $103 = 0, $104 = 0, $105 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0;
 var $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0;
 var $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0;
 var $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0;
 var $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0, $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0;
 var $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0, $R = 0, $mem = 0, $size_lut = 0, $size_m = 0, $size_scratch_m = 0, $total_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $data;
 $2 = $width;
 $3 = $height;
 $4 = $radius;
 $5 = $p;
 $6 = $4;
 $7 = $6 << 1;
 $8 = $7 + 1 | 0;
 $R = $8;
 $9 = $R;
 $10 = $9 + 1 | 0;
 $11 = $2;
 $12 = Math_imul($10, $11) | 0;
 $13 = $12 << 1;
 $size_scratch_m = $13;
 $14 = $2;
 $15 = $14 << 1;
 $size_m = $15;
 $size_lut = 4094;
 $16 = $size_scratch_m;
 $17 = $size_m;
 $18 = $16 + $17 | 0;
 $19 = $18 + 4094 | 0;
 $total_size = $19;
 $20 = $total_size;
 $21 = _WebPSafeMalloc(1, 0, $20) | 0;
 $mem = $21;
 $22 = $mem;
 $23 = ($22 | 0) == (0 | 0);
 if ($23) {
  $0 = 0;
  $105 = $0;
  STACKTOP = sp;
  return $105 | 0;
 } else {
  $24 = $mem;
  $25 = $5;
  $26 = $25 + 28 | 0;
  SAFE_HEAP_STORE($26 | 0, $24 | 0, 4);
  $27 = $mem;
  $28 = $5;
  $29 = $28 + 32 | 0;
  SAFE_HEAP_STORE($29 | 0, $27 | 0, 4);
  $30 = $5;
  $31 = $30 + 32 | 0;
  $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
  $33 = $5;
  $34 = $33 + 36 | 0;
  SAFE_HEAP_STORE($34 | 0, $32 | 0, 4);
  $35 = $5;
  $36 = $35 + 32 | 0;
  $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
  $38 = $R;
  $39 = $2;
  $40 = Math_imul($38, $39) | 0;
  $41 = $37 + ($40 << 1) | 0;
  $42 = $5;
  $43 = $42 + 40 | 0;
  SAFE_HEAP_STORE($43 | 0, $41 | 0, 4);
  $44 = $5;
  $45 = $44 + 40 | 0;
  $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
  $47 = $2;
  $48 = 0 - $47 | 0;
  $49 = $46 + ($48 << 1) | 0;
  $50 = $5;
  $51 = $50 + 44 | 0;
  SAFE_HEAP_STORE($51 | 0, $49 | 0, 4);
  $52 = $5;
  $53 = $52 + 44 | 0;
  $54 = SAFE_HEAP_LOAD($53 | 0, 4, 0) | 0 | 0;
  $55 = $2;
  $56 = $55 << 1;
  _memset($54 | 0, 0, $56 | 0) | 0;
  $57 = $size_scratch_m;
  $58 = $mem;
  $59 = $58 + $57 | 0;
  $mem = $59;
  $60 = $mem;
  $61 = $5;
  $62 = $61 + 48 | 0;
  SAFE_HEAP_STORE($62 | 0, $60 | 0, 4);
  $63 = $size_m;
  $64 = $mem;
  $65 = $64 + $63 | 0;
  $mem = $65;
  $66 = $2;
  $67 = $5;
  SAFE_HEAP_STORE($67 | 0, $66 | 0, 4);
  $68 = $3;
  $69 = $5;
  $70 = $69 + 4 | 0;
  SAFE_HEAP_STORE($70 | 0, $68 | 0, 4);
  $71 = $1;
  $72 = $5;
  $73 = $72 + 12 | 0;
  SAFE_HEAP_STORE($73 | 0, $71 | 0, 4);
  $74 = $1;
  $75 = $5;
  $76 = $75 + 16 | 0;
  SAFE_HEAP_STORE($76 | 0, $74 | 0, 4);
  $77 = $4;
  $78 = $5;
  $79 = $78 + 20 | 0;
  SAFE_HEAP_STORE($79 | 0, $77 | 0, 4);
  $80 = $R;
  $81 = $R;
  $82 = Math_imul($80, $81) | 0;
  $83 = 262144 / ($82 | 0) & -1;
  $84 = $5;
  $85 = $84 + 24 | 0;
  SAFE_HEAP_STORE($85 | 0, $83 | 0, 4);
  $86 = $4;
  $87 = 0 - $86 | 0;
  $88 = $5;
  $89 = $88 + 8 | 0;
  SAFE_HEAP_STORE($89 | 0, $87 | 0, 4);
  $90 = $1;
  $91 = $2;
  $92 = $3;
  $93 = Math_imul($91, $92) | 0;
  $94 = $5;
  _CountLevels($90, $93, $94);
  $95 = $mem;
  $96 = $95 + 2046 | 0;
  $97 = $5;
  $98 = $97 + 68 | 0;
  SAFE_HEAP_STORE($98 | 0, $96 | 0, 4);
  $99 = $5;
  $100 = $99 + 68 | 0;
  $101 = SAFE_HEAP_LOAD($100 | 0, 4, 0) | 0 | 0;
  $102 = $5;
  $103 = $102 + 64 | 0;
  $104 = SAFE_HEAP_LOAD($103 | 0, 4, 0) | 0 | 0;
  _InitCorrectionLUT($101, $104);
  $0 = 1;
  $105 = $0;
  STACKTOP = sp;
  return $105 | 0;
 }
 return 0 | 0;
}

function _EmitAlphaRGBA4444($io, $p, $expected_num_lines_out) {
 $io = $io | 0;
 $p = $p | 0;
 $expected_num_lines_out = $expected_num_lines_out | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $alpha = 0, $alpha_dst = 0, $alpha_mask = 0, $alpha_value = 0, $base_rgba = 0, $buf = 0, $colorspace = 0, $i = 0, $j = 0, $mb_w = 0, $num_rows = 0, $start_y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $alpha = sp + 44 | 0;
 $num_rows = sp + 28 | 0;
 $0 = $io;
 $1 = $p;
 $2 = $expected_num_lines_out;
 $3 = $0;
 $4 = $3 + 104 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($alpha | 0, $5 | 0, 4);
 $6 = SAFE_HEAP_LOAD($alpha | 0, 4, 0) | 0 | 0;
 $7 = ($6 | 0) != (0 | 0);
 if (!$7) {
  STACKTOP = sp;
  return 0;
 }
 $8 = $0;
 $9 = $8 + 12 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $mb_w = $10;
 $11 = $1;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
 $colorspace = $13;
 $14 = $1;
 $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
 $16 = $15 + 16 | 0;
 $buf = $16;
 $17 = $0;
 $18 = _GetAlphaSourceRow($17, $alpha, $num_rows) | 0;
 $start_y = $18;
 $19 = $buf;
 $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
 $21 = $start_y;
 $22 = $buf;
 $23 = $22 + 4 | 0;
 $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
 $25 = Math_imul($21, $24) | 0;
 $26 = $20 + $25 | 0;
 $base_rgba = $26;
 $27 = $base_rgba;
 $28 = $27 + 1 | 0;
 $alpha_dst = $28;
 $alpha_mask = 15;
 $j = 0;
 while (1) {
  $29 = $j;
  $30 = SAFE_HEAP_LOAD($num_rows | 0, 4, 0) | 0 | 0;
  $31 = ($29 | 0) < ($30 | 0);
  if (!$31) {
   break;
  }
  $i = 0;
  while (1) {
   $32 = $i;
   $33 = $mb_w;
   $34 = ($32 | 0) < ($33 | 0);
   if (!$34) {
    break;
   }
   $35 = $i;
   $36 = SAFE_HEAP_LOAD($alpha | 0, 4, 0) | 0 | 0;
   $37 = $36 + $35 | 0;
   $38 = SAFE_HEAP_LOAD($37 >> 0 | 0, 1, 0) | 0 | 0;
   $39 = $38 & 255;
   $40 = $39 >> 4;
   $alpha_value = $40;
   $41 = $i;
   $42 = $41 << 1;
   $43 = $alpha_dst;
   $44 = $43 + $42 | 0;
   $45 = SAFE_HEAP_LOAD($44 >> 0 | 0, 1, 0) | 0 | 0;
   $46 = $45 & 255;
   $47 = $46 & 240;
   $48 = $alpha_value;
   $49 = $47 | $48;
   $50 = $49 & 255;
   $51 = $i;
   $52 = $51 << 1;
   $53 = $alpha_dst;
   $54 = $53 + $52 | 0;
   SAFE_HEAP_STORE($54 >> 0 | 0, $50 | 0, 1);
   $55 = $alpha_value;
   $56 = $alpha_mask;
   $57 = $56 & $55;
   $alpha_mask = $57;
   $58 = $i;
   $59 = $58 + 1 | 0;
   $i = $59;
  }
  $60 = $0;
  $61 = SAFE_HEAP_LOAD($60 | 0, 4, 0) | 0 | 0;
  $62 = SAFE_HEAP_LOAD($alpha | 0, 4, 0) | 0 | 0;
  $63 = $62 + $61 | 0;
  SAFE_HEAP_STORE($alpha | 0, $63 | 0, 4);
  $64 = $buf;
  $65 = $64 + 4 | 0;
  $66 = SAFE_HEAP_LOAD($65 | 0, 4, 0) | 0 | 0;
  $67 = $alpha_dst;
  $68 = $67 + $66 | 0;
  $alpha_dst = $68;
  $69 = $j;
  $70 = $69 + 1 | 0;
  $j = $70;
 }
 $71 = $2;
 $72 = SAFE_HEAP_LOAD($num_rows | 0, 4, 0) | 0 | 0;
 $73 = ($71 | 0) == ($72 | 0);
 if (!$73) {
  ___assert_fail(3104 | 0, 3071 | 0, 228, 3152 | 0);
 }
 $74 = $alpha_mask;
 $75 = ($74 | 0) != 15;
 if (!$75) {
  STACKTOP = sp;
  return 0;
 }
 $76 = $colorspace;
 $77 = _WebPIsPremultipliedMode($76) | 0;
 $78 = ($77 | 0) != 0;
 if (!$78) {
  STACKTOP = sp;
  return 0;
 }
 $79 = SAFE_HEAP_LOAD(392 | 0, 4, 0) | 0 | 0;
 $80 = $base_rgba;
 $81 = $mb_w;
 $82 = SAFE_HEAP_LOAD($num_rows | 0, 4, 0) | 0 | 0;
 $83 = $buf;
 $84 = $83 + 4 | 0;
 $85 = SAFE_HEAP_LOAD($84 | 0, 4, 0) | 0 | 0;
 FUNCTION_TABLE_viiii[(SAFE_FT_MASK($79 | 0, 255 | 0) | 0) & 255]($80, $81, $82, $85);
 STACKTOP = sp;
 return 0;
}

function _WebPFlipBuffer($buffer) {
 $buffer = $buffer | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $96 = 0, $97 = 0, $98 = 0, $99 = 0;
 var $H = 0, $buf = 0, $buf1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $buffer;
 $2 = $1;
 $3 = ($2 | 0) == (0 | 0);
 if ($3) {
  $0 = 2;
  $99 = $0;
  STACKTOP = sp;
  return $99 | 0;
 }
 $4 = $1;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = _WebPIsRGBMode($5) | 0;
 $7 = ($6 | 0) != 0;
 $8 = $1;
 $9 = $8 + 16 | 0;
 if ($7) {
  $buf = $9;
  $10 = $1;
  $11 = $10 + 8 | 0;
  $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
  $13 = $12 - 1 | 0;
  $14 = $buf;
  $15 = $14 + 4 | 0;
  $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
  $17 = Math_imul($13, $16) | 0;
  $18 = $buf;
  $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
  $20 = $19 + $17 | 0;
  SAFE_HEAP_STORE($18 | 0, $20 | 0, 4);
  $21 = $buf;
  $22 = $21 + 4 | 0;
  $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
  $24 = 0 - $23 | 0;
  $25 = $buf;
  $26 = $25 + 4 | 0;
  SAFE_HEAP_STORE($26 | 0, $24 | 0, 4);
 } else {
  $buf1 = $9;
  $27 = $1;
  $28 = $27 + 8 | 0;
  $29 = SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0;
  $H = $29;
  $30 = $H;
  $31 = $30 - 1 | 0;
  $32 = $buf1;
  $33 = $32 + 16 | 0;
  $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
  $35 = Math_imul($31, $34) | 0;
  $36 = $buf1;
  $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
  $38 = $37 + $35 | 0;
  SAFE_HEAP_STORE($36 | 0, $38 | 0, 4);
  $39 = $buf1;
  $40 = $39 + 16 | 0;
  $41 = SAFE_HEAP_LOAD($40 | 0, 4, 0) | 0 | 0;
  $42 = 0 - $41 | 0;
  $43 = $buf1;
  $44 = $43 + 16 | 0;
  SAFE_HEAP_STORE($44 | 0, $42 | 0, 4);
  $45 = $H;
  $46 = $45 - 1 | 0;
  $47 = $46 >> 1;
  $48 = $buf1;
  $49 = $48 + 20 | 0;
  $50 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0;
  $51 = Math_imul($47, $50) | 0;
  $52 = $buf1;
  $53 = $52 + 4 | 0;
  $54 = SAFE_HEAP_LOAD($53 | 0, 4, 0) | 0 | 0;
  $55 = $54 + $51 | 0;
  SAFE_HEAP_STORE($53 | 0, $55 | 0, 4);
  $56 = $buf1;
  $57 = $56 + 20 | 0;
  $58 = SAFE_HEAP_LOAD($57 | 0, 4, 0) | 0 | 0;
  $59 = 0 - $58 | 0;
  $60 = $buf1;
  $61 = $60 + 20 | 0;
  SAFE_HEAP_STORE($61 | 0, $59 | 0, 4);
  $62 = $H;
  $63 = $62 - 1 | 0;
  $64 = $63 >> 1;
  $65 = $buf1;
  $66 = $65 + 24 | 0;
  $67 = SAFE_HEAP_LOAD($66 | 0, 4, 0) | 0 | 0;
  $68 = Math_imul($64, $67) | 0;
  $69 = $buf1;
  $70 = $69 + 8 | 0;
  $71 = SAFE_HEAP_LOAD($70 | 0, 4, 0) | 0 | 0;
  $72 = $71 + $68 | 0;
  SAFE_HEAP_STORE($70 | 0, $72 | 0, 4);
  $73 = $buf1;
  $74 = $73 + 24 | 0;
  $75 = SAFE_HEAP_LOAD($74 | 0, 4, 0) | 0 | 0;
  $76 = 0 - $75 | 0;
  $77 = $buf1;
  $78 = $77 + 24 | 0;
  SAFE_HEAP_STORE($78 | 0, $76 | 0, 4);
  $79 = $buf1;
  $80 = $79 + 12 | 0;
  $81 = SAFE_HEAP_LOAD($80 | 0, 4, 0) | 0 | 0;
  $82 = ($81 | 0) != (0 | 0);
  if ($82) {
   $83 = $H;
   $84 = $83 - 1 | 0;
   $85 = $buf1;
   $86 = $85 + 28 | 0;
   $87 = SAFE_HEAP_LOAD($86 | 0, 4, 0) | 0 | 0;
   $88 = Math_imul($84, $87) | 0;
   $89 = $buf1;
   $90 = $89 + 12 | 0;
   $91 = SAFE_HEAP_LOAD($90 | 0, 4, 0) | 0 | 0;
   $92 = $91 + $88 | 0;
   SAFE_HEAP_STORE($90 | 0, $92 | 0, 4);
   $93 = $buf1;
   $94 = $93 + 28 | 0;
   $95 = SAFE_HEAP_LOAD($94 | 0, 4, 0) | 0 | 0;
   $96 = 0 - $95 | 0;
   $97 = $buf1;
   $98 = $97 + 28 | 0;
   SAFE_HEAP_STORE($98 | 0, $96 | 0, 4);
  }
 }
 $0 = 0;
 $99 = $0;
 STACKTOP = sp;
 return $99 | 0;
}

function _WebPRescalerImportRowShrinkC($wrk, $src) {
 $wrk = $wrk | 0;
 $src = $src | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $9 = 0, $accum = 0, $base = 0, $channel = 0, $frac = 0, $sum = 0, $x_in = 0, $x_out = 0, $x_out_max = 0, $x_stride = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $wrk;
 $1 = $src;
 $2 = $0;
 $3 = $2 + 8 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $x_stride = $4;
 $5 = $0;
 $6 = $5 + 52 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = $0;
 $9 = $8 + 8 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $11 = Math_imul($7, $10) | 0;
 $x_out_max = $11;
 $12 = $0;
 $13 = _WebPRescalerInputDone($12) | 0;
 $14 = ($13 | 0) != 0;
 if ($14) {
  ___assert_fail(13056 | 0, 13084 | 0, 63, 13216 | 0);
 }
 $15 = $0;
 $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
 $17 = ($16 | 0) != 0;
 if ($17) {
  ___assert_fail(13245 | 0, 13084 | 0, 64, 13216 | 0);
 }
 $channel = 0;
 L7 : while (1) {
  $18 = $channel;
  $19 = $x_stride;
  $20 = ($18 | 0) < ($19 | 0);
  if (!$20) {
   label = 18;
   break;
  }
  $21 = $channel;
  $x_in = $21;
  $22 = $channel;
  $x_out = $22;
  $sum = 0;
  $accum = 0;
  while (1) {
   $23 = $x_out;
   $24 = $x_out_max;
   $25 = ($23 | 0) < ($24 | 0);
   if (!$25) {
    break;
   }
   $base = 0;
   $26 = $0;
   $27 = $26 + 36 | 0;
   $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
   $29 = $accum;
   $30 = $29 + $28 | 0;
   $accum = $30;
   while (1) {
    $31 = $accum;
    $32 = ($31 | 0) > 0;
    if (!$32) {
     break;
    }
    $33 = $0;
    $34 = $33 + 40 | 0;
    $35 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
    $36 = $accum;
    $37 = $36 - $35 | 0;
    $accum = $37;
    $38 = $x_in;
    $39 = $0;
    $40 = $39 + 44 | 0;
    $41 = SAFE_HEAP_LOAD($40 | 0, 4, 0) | 0 | 0;
    $42 = $x_stride;
    $43 = Math_imul($41, $42) | 0;
    $44 = ($38 | 0) < ($43 | 0);
    if (!$44) {
     label = 12;
     break L7;
    }
    $45 = $x_in;
    $46 = $1;
    $47 = $46 + $45 | 0;
    $48 = SAFE_HEAP_LOAD($47 >> 0 | 0, 1, 0) | 0 | 0;
    $49 = $48 & 255;
    $base = $49;
    $50 = $base;
    $51 = $sum;
    $52 = $51 + $50 | 0;
    $sum = $52;
    $53 = $x_stride;
    $54 = $x_in;
    $55 = $54 + $53 | 0;
    $x_in = $55;
   }
   $56 = $base;
   $57 = $accum;
   $58 = 0 - $57 | 0;
   $59 = Math_imul($56, $58) | 0;
   $frac = $59;
   $60 = $sum;
   $61 = $0;
   $62 = $61 + 40 | 0;
   $63 = SAFE_HEAP_LOAD($62 | 0, 4, 0) | 0 | 0;
   $64 = Math_imul($60, $63) | 0;
   $65 = $frac;
   $66 = $64 - $65 | 0;
   $67 = $x_out;
   $68 = $0;
   $69 = $68 + 80 | 0;
   $70 = SAFE_HEAP_LOAD($69 | 0, 4, 0) | 0 | 0;
   $71 = $70 + ($67 << 2) | 0;
   SAFE_HEAP_STORE($71 | 0, $66 | 0, 4);
   $72 = $frac;
   $73 = $0;
   $74 = $73 + 12 | 0;
   $75 = SAFE_HEAP_LOAD($74 | 0, 4, 0) | 0 | 0;
   $76 = ___muldi3($72 | 0, 0, $75 | 0, 0) | 0;
   $77 = tempRet0;
   _i64Add($76 | 0, $77 | 0, -2147483648, 0) | 0;
   $78 = tempRet0;
   $sum = $78;
   $79 = $x_stride;
   $80 = $x_out;
   $81 = $80 + $79 | 0;
   $x_out = $81;
  }
  $82 = $accum;
  $83 = ($82 | 0) == 0;
  if (!$83) {
   label = 16;
   break;
  }
  $84 = $channel;
  $85 = $84 + 1 | 0;
  $channel = $85;
 }
 if ((label | 0) == 12) {
  ___assert_fail(13153 | 0, 13084 | 0, 75, 13216 | 0);
 } else if ((label | 0) == 16) {
  ___assert_fail(13260 | 0, 13084 | 0, 88, 13216 | 0);
 } else if ((label | 0) == 18) {
  STACKTOP = sp;
  return;
 }
}

function _VP8LDecodeAlphaHeader($alph_dec, $data, $data_size, $output) {
 $alph_dec = $alph_dec | 0;
 $data = $data | 0;
 $data_size = $data_size | 0;
 $output = $output | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $dec = 0, $io = 0, $ok = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $alph_dec;
 $2 = $data;
 $3 = $data_size;
 $4 = $output;
 $ok = 0;
 $5 = $1;
 $6 = ($5 | 0) != (0 | 0);
 if (!$6) {
  ___assert_fail(7107 | 0, 7124 | 0, 1466, 7146 | 0);
 }
 $7 = _VP8LNew() | 0;
 $8 = $1;
 $9 = $8 + 20 | 0;
 SAFE_HEAP_STORE($9 | 0, $7 | 0, 4);
 $10 = $1;
 $11 = $10 + 20 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = ($12 | 0) == (0 | 0);
 if ($13) {
  $0 = 0;
  $88 = $0;
  STACKTOP = sp;
  return $88 | 0;
 }
 $14 = $1;
 $15 = $14 + 20 | 0;
 $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
 $dec = $16;
 $17 = $1;
 $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
 $19 = $dec;
 $20 = $19 + 100 | 0;
 SAFE_HEAP_STORE($20 | 0, $18 | 0, 4);
 $21 = $1;
 $22 = $21 + 4 | 0;
 $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
 $24 = $dec;
 $25 = $24 + 104 | 0;
 SAFE_HEAP_STORE($25 | 0, $23 | 0, 4);
 $26 = $1;
 $27 = $26 + 24 | 0;
 $28 = $dec;
 $29 = $28 + 8 | 0;
 SAFE_HEAP_STORE($29 | 0, $27 | 0, 4);
 $30 = $dec;
 $31 = $30 + 8 | 0;
 $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
 $io = $32;
 $33 = $io;
 _VP8InitIo104($33) | 0;
 $34 = $io;
 _WebPInitCustomIo(0, $34);
 $35 = $4;
 $36 = $io;
 $37 = $36 + 40 | 0;
 SAFE_HEAP_STORE($37 | 0, $35 | 0, 4);
 $38 = $1;
 $39 = SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0;
 $40 = $io;
 SAFE_HEAP_STORE($40 | 0, $39 | 0, 4);
 $41 = $1;
 $42 = $41 + 4 | 0;
 $43 = SAFE_HEAP_LOAD($42 | 0, 4, 0) | 0 | 0;
 $44 = $io;
 $45 = $44 + 4 | 0;
 SAFE_HEAP_STORE($45 | 0, $43 | 0, 4);
 $46 = $dec;
 SAFE_HEAP_STORE($46 | 0, 0 | 0, 4);
 $47 = $dec;
 $48 = $47 + 24 | 0;
 $49 = $2;
 $50 = $3;
 _VP8LInitBitReader($48, $49, $50);
 $51 = $1;
 $52 = SAFE_HEAP_LOAD($51 | 0, 4, 0) | 0 | 0;
 $53 = $1;
 $54 = $53 + 4 | 0;
 $55 = SAFE_HEAP_LOAD($54 | 0, 4, 0) | 0 | 0;
 $56 = $dec;
 $57 = _DecodeImageStream($52, $55, 1, $56, 0) | 0;
 $58 = ($57 | 0) != 0;
 if ($58) {
  $59 = $dec;
  $60 = $59 + 176 | 0;
  $61 = SAFE_HEAP_LOAD($60 | 0, 4, 0) | 0 | 0;
  $62 = ($61 | 0) == 1;
  if ($62) {
   $63 = $dec;
   $64 = $63 + 180 | 0;
   $65 = SAFE_HEAP_LOAD($64 | 0, 4, 0) | 0 | 0;
   $66 = ($65 | 0) == 3;
   if ($66) {
    $67 = $dec;
    $68 = $67 + 120 | 0;
    $69 = _Is8bOptimizable($68) | 0;
    $70 = ($69 | 0) != 0;
    if ($70) {
     $71 = $1;
     $72 = $71 + 132 | 0;
     SAFE_HEAP_STORE($72 | 0, 1 | 0, 4);
     $73 = $dec;
     $74 = _AllocateInternalBuffers8b($73) | 0;
     $ok = $74;
    } else {
     label = 10;
    }
   } else {
    label = 10;
   }
  } else {
   label = 10;
  }
  if ((label | 0) == 10) {
   $75 = $1;
   $76 = $75 + 132 | 0;
   SAFE_HEAP_STORE($76 | 0, 0 | 0, 4);
   $77 = $dec;
   $78 = $1;
   $79 = SAFE_HEAP_LOAD($78 | 0, 4, 0) | 0 | 0;
   $80 = _AllocateInternalBuffers32b($77, $79) | 0;
   $ok = $80;
  }
  $81 = $ok;
  $82 = ($81 | 0) != 0;
  if ($82) {
   $0 = 1;
   $88 = $0;
   STACKTOP = sp;
   return $88 | 0;
  }
 }
 $83 = $1;
 $84 = $83 + 20 | 0;
 $85 = SAFE_HEAP_LOAD($84 | 0, 4, 0) | 0 | 0;
 _VP8LDelete($85);
 $86 = $1;
 $87 = $86 + 20 | 0;
 SAFE_HEAP_STORE($87 | 0, 0 | 0, 4);
 $0 = 0;
 $88 = $0;
 STACKTOP = sp;
 return $88 | 0;
}

function _WebPRescalerExportRow($wrk) {
 $wrk = $wrk | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $wrk;
 $1 = $0;
 $2 = $1 + 24 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = ($3 | 0) <= 0;
 if (!$4) {
  STACKTOP = sp;
  return;
 }
 $5 = $0;
 $6 = _WebPRescalerOutputDone334($5) | 0;
 $7 = ($6 | 0) != 0;
 if ($7) {
  ___assert_fail(13271 | 0, 13084 | 0, 171, 13462 | 0);
 }
 $8 = $0;
 $9 = $8 + 4 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $11 = ($10 | 0) != 0;
 L7 : do {
  if ($11) {
   $12 = SAFE_HEAP_LOAD(752 | 0, 4, 0) | 0 | 0;
   $13 = $0;
   FUNCTION_TABLE_vi[(SAFE_FT_MASK($12 | 0, 255 | 0) | 0) & 255]($13);
  } else {
   $14 = $0;
   $15 = $14 + 20 | 0;
   $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
   $17 = ($16 | 0) != 0;
   if ($17) {
    $18 = SAFE_HEAP_LOAD(756 | 0, 4, 0) | 0 | 0;
    $19 = $0;
    FUNCTION_TABLE_vi[(SAFE_FT_MASK($18 | 0, 255 | 0) | 0) & 255]($19);
    break;
   }
   $20 = $0;
   $21 = $20 + 44 | 0;
   $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
   $23 = ($22 | 0) == 1;
   if (!$23) {
    ___assert_fail(13484 | 0, 13084 | 0, 178, 13462 | 0);
   }
   $24 = $0;
   $25 = $24 + 52 | 0;
   $26 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
   $27 = ($26 | 0) <= 2;
   if (!$27) {
    ___assert_fail(13484 | 0, 13084 | 0, 178, 13462 | 0);
   }
   $28 = $0;
   $29 = $28 + 48 | 0;
   $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
   $31 = ($30 | 0) == 1;
   if (!$31) {
    ___assert_fail(13527 | 0, 13084 | 0, 179, 13462 | 0);
   }
   $32 = $0;
   $33 = $32 + 56 | 0;
   $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
   $35 = ($34 | 0) == 1;
   if (!$35) {
    ___assert_fail(13527 | 0, 13084 | 0, 179, 13462 | 0);
   }
   $i = 0;
   while (1) {
    $36 = $i;
    $37 = $0;
    $38 = $37 + 8 | 0;
    $39 = SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0;
    $40 = $0;
    $41 = $40 + 52 | 0;
    $42 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
    $43 = Math_imul($39, $42) | 0;
    $44 = ($36 | 0) < ($43 | 0);
    if (!$44) {
     break L7;
    }
    $45 = $i;
    $46 = $0;
    $47 = $46 + 76 | 0;
    $48 = SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 0;
    $49 = $48 + ($45 << 2) | 0;
    $50 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0;
    $51 = $50 & 255;
    $52 = $i;
    $53 = $0;
    $54 = $53 + 68 | 0;
    $55 = SAFE_HEAP_LOAD($54 | 0, 4, 0) | 0 | 0;
    $56 = $55 + $52 | 0;
    SAFE_HEAP_STORE($56 >> 0 | 0, $51 | 0, 1);
    $57 = $i;
    $58 = $0;
    $59 = $58 + 76 | 0;
    $60 = SAFE_HEAP_LOAD($59 | 0, 4, 0) | 0 | 0;
    $61 = $60 + ($57 << 2) | 0;
    SAFE_HEAP_STORE($61 | 0, 0 | 0, 4);
    $62 = $i;
    $63 = $62 + 1 | 0;
    $i = $63;
   }
  }
 } while (0);
 $64 = $0;
 $65 = $64 + 28 | 0;
 $66 = SAFE_HEAP_LOAD($65 | 0, 4, 0) | 0 | 0;
 $67 = $0;
 $68 = $67 + 24 | 0;
 $69 = SAFE_HEAP_LOAD($68 | 0, 4, 0) | 0 | 0;
 $70 = $69 + $66 | 0;
 SAFE_HEAP_STORE($68 | 0, $70 | 0, 4);
 $71 = $0;
 $72 = $71 + 72 | 0;
 $73 = SAFE_HEAP_LOAD($72 | 0, 4, 0) | 0 | 0;
 $74 = $0;
 $75 = $74 + 68 | 0;
 $76 = SAFE_HEAP_LOAD($75 | 0, 4, 0) | 0 | 0;
 $77 = $76 + $73 | 0;
 SAFE_HEAP_STORE($75 | 0, $77 | 0, 4);
 $78 = $0;
 $79 = $78 + 64 | 0;
 $80 = SAFE_HEAP_LOAD($79 | 0, 4, 0) | 0 | 0;
 $81 = $80 + 1 | 0;
 SAFE_HEAP_STORE($79 | 0, $81 | 0, 4);
 STACKTOP = sp;
 return;
}

function _ReadHuffmanCode($alphabet_size, $dec, $code_lengths, $table) {
 $alphabet_size = $alphabet_size | 0;
 $dec = $dec | 0;
 $code_lengths = $code_lengths | 0;
 $table = $table | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $8 = 0, $9 = 0, $br = 0, $code_length_code_lengths = 0;
 var $first_symbol_len_code = 0, $i = 0, $num_codes = 0, $num_symbols = 0, $ok = 0, $or$cond = 0, $simple_code = 0, $size = 0, $symbol = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 144 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $code_length_code_lengths = sp + 4 | 0;
 $1 = $alphabet_size;
 $2 = $dec;
 $3 = $code_lengths;
 $4 = $table;
 $ok = 0;
 $size = 0;
 $5 = $2;
 $6 = $5 + 24 | 0;
 $br = $6;
 $7 = $br;
 $8 = _VP8LReadBits($7, 1) | 0;
 $simple_code = $8;
 $9 = $3;
 $10 = $1;
 $11 = $10 << 2;
 _memset($9 | 0, 0, $11 | 0) | 0;
 $12 = $simple_code;
 $13 = ($12 | 0) != 0;
 if ($13) {
  $14 = $br;
  $15 = _VP8LReadBits($14, 1) | 0;
  $16 = $15 + 1 | 0;
  $num_symbols = $16;
  $17 = $br;
  $18 = _VP8LReadBits($17, 1) | 0;
  $first_symbol_len_code = $18;
  $19 = $br;
  $20 = $first_symbol_len_code;
  $21 = ($20 | 0) == 0;
  $22 = $21 ? 1 : 8;
  $23 = _VP8LReadBits($19, $22) | 0;
  $symbol = $23;
  $24 = $symbol;
  $25 = $3;
  $26 = $25 + ($24 << 2) | 0;
  SAFE_HEAP_STORE($26 | 0, 1 | 0, 4);
  $27 = $num_symbols;
  $28 = ($27 | 0) == 2;
  if ($28) {
   $29 = $br;
   $30 = _VP8LReadBits($29, 8) | 0;
   $symbol = $30;
   $31 = $symbol;
   $32 = $3;
   $33 = $32 + ($31 << 2) | 0;
   SAFE_HEAP_STORE($33 | 0, 1 | 0, 4);
  }
  $ok = 1;
 } else {
  dest = $code_length_code_lengths;
  stop = dest + 76 | 0;
  do {
   SAFE_HEAP_STORE(dest | 0, 0 | 0 | 0, 4);
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $34 = $br;
  $35 = _VP8LReadBits($34, 4) | 0;
  $36 = $35 + 4 | 0;
  $num_codes = $36;
  $37 = $num_codes;
  $38 = ($37 | 0) > 19;
  if ($38) {
   $39 = $2;
   SAFE_HEAP_STORE($39 | 0, 3 | 0, 4);
   $0 = 0;
   $77 = $0;
   STACKTOP = sp;
   return $77 | 0;
  }
  $i = 0;
  while (1) {
   $40 = $i;
   $41 = $num_codes;
   $42 = ($40 | 0) < ($41 | 0);
   if (!$42) {
    break;
   }
   $43 = $br;
   $44 = _VP8LReadBits($43, 3) | 0;
   $45 = $i;
   $46 = 7425 + $45 | 0;
   $47 = SAFE_HEAP_LOAD($46 >> 0 | 0, 1, 0) | 0 | 0;
   $48 = $47 & 255;
   $49 = $code_length_code_lengths + ($48 << 2) | 0;
   SAFE_HEAP_STORE($49 | 0, $44 | 0, 4);
   $50 = $i;
   $51 = $50 + 1 | 0;
   $i = $51;
  }
  $52 = $2;
  $53 = $1;
  $54 = $3;
  $55 = _ReadHuffmanCodeLengths($52, $code_length_code_lengths, $53, $54) | 0;
  $ok = $55;
 }
 $56 = $ok;
 $57 = ($56 | 0) != 0;
 if ($57) {
  $58 = $br;
  $59 = $58 + 24 | 0;
  $60 = SAFE_HEAP_LOAD($59 | 0, 4, 0) | 0 | 0;
  $61 = ($60 | 0) != 0;
  $62 = $61 ^ 1;
  $64 = $62;
 } else {
  $64 = 0;
 }
 $63 = $64 & 1;
 $ok = $63;
 $65 = $ok;
 $66 = ($65 | 0) != 0;
 if ($66) {
  $67 = $4;
  $68 = $3;
  $69 = $1;
  $70 = _VP8LBuildHuffmanTable($67, 8, $68, $69) | 0;
  $size = $70;
 }
 $71 = $ok;
 $72 = ($71 | 0) == 0;
 $73 = $size;
 $74 = ($73 | 0) == 0;
 $or$cond = $72 | $74;
 if ($or$cond) {
  $75 = $2;
  SAFE_HEAP_STORE($75 | 0, 3 | 0, 4);
  $0 = 0;
  $77 = $0;
  STACKTOP = sp;
  return $77 | 0;
 } else {
  $76 = $size;
  $0 = $76;
  $77 = $0;
  STACKTOP = sp;
  return $77 | 0;
 }
 return 0 | 0;
}

function _VP8LConvertFromBGRA($in_data, $num_pixels, $out_colorspace, $rgba) {
 $in_data = $in_data | 0;
 $num_pixels = $num_pixels | 0;
 $out_colorspace = $out_colorspace | 0;
 $rgba = $rgba | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $in_data;
 $1 = $num_pixels;
 $2 = $out_colorspace;
 $3 = $rgba;
 $4 = $2;
 do {
  switch ($4 | 0) {
  case 0:
   {
    $5 = SAFE_HEAP_LOAD(648 | 0, 4, 0) | 0 | 0;
    $6 = $0;
    $7 = $1;
    $8 = $3;
    FUNCTION_TABLE_viii[(SAFE_FT_MASK($5 | 0, 255 | 0) | 0) & 255]($6, $7, $8);
    STACKTOP = sp;
    return;
    break;
   }
  case 1:
   {
    $9 = SAFE_HEAP_LOAD(652 | 0, 4, 0) | 0 | 0;
    $10 = $0;
    $11 = $1;
    $12 = $3;
    FUNCTION_TABLE_viii[(SAFE_FT_MASK($9 | 0, 255 | 0) | 0) & 255]($10, $11, $12);
    STACKTOP = sp;
    return;
    break;
   }
  case 7:
   {
    $13 = SAFE_HEAP_LOAD(652 | 0, 4, 0) | 0 | 0;
    $14 = $0;
    $15 = $1;
    $16 = $3;
    FUNCTION_TABLE_viii[(SAFE_FT_MASK($13 | 0, 255 | 0) | 0) & 255]($14, $15, $16);
    $17 = SAFE_HEAP_LOAD(388 | 0, 4, 0) | 0 | 0;
    $18 = $3;
    $19 = $1;
    FUNCTION_TABLE_viiiii[(SAFE_FT_MASK($17 | 0, 255 | 0) | 0) & 255]($18, 0, $19, 1, 0);
    STACKTOP = sp;
    return;
    break;
   }
  case 2:
   {
    $20 = SAFE_HEAP_LOAD(656 | 0, 4, 0) | 0 | 0;
    $21 = $0;
    $22 = $1;
    $23 = $3;
    FUNCTION_TABLE_viii[(SAFE_FT_MASK($20 | 0, 255 | 0) | 0) & 255]($21, $22, $23);
    STACKTOP = sp;
    return;
    break;
   }
  case 3:
   {
    $24 = $0;
    $25 = $1;
    $26 = $3;
    _CopyOrSwap($24, $25, $26, 1);
    STACKTOP = sp;
    return;
    break;
   }
  case 8:
   {
    $27 = $0;
    $28 = $1;
    $29 = $3;
    _CopyOrSwap($27, $28, $29, 1);
    $30 = SAFE_HEAP_LOAD(388 | 0, 4, 0) | 0 | 0;
    $31 = $3;
    $32 = $1;
    FUNCTION_TABLE_viiiii[(SAFE_FT_MASK($30 | 0, 255 | 0) | 0) & 255]($31, 0, $32, 1, 0);
    STACKTOP = sp;
    return;
    break;
   }
  case 4:
   {
    $33 = $0;
    $34 = $1;
    $35 = $3;
    _CopyOrSwap($33, $34, $35, 0);
    STACKTOP = sp;
    return;
    break;
   }
  case 9:
   {
    $36 = $0;
    $37 = $1;
    $38 = $3;
    _CopyOrSwap($36, $37, $38, 0);
    $39 = SAFE_HEAP_LOAD(388 | 0, 4, 0) | 0 | 0;
    $40 = $3;
    $41 = $1;
    FUNCTION_TABLE_viiiii[(SAFE_FT_MASK($39 | 0, 255 | 0) | 0) & 255]($40, 1, $41, 1, 0);
    STACKTOP = sp;
    return;
    break;
   }
  case 5:
   {
    $42 = SAFE_HEAP_LOAD(660 | 0, 4, 0) | 0 | 0;
    $43 = $0;
    $44 = $1;
    $45 = $3;
    FUNCTION_TABLE_viii[(SAFE_FT_MASK($42 | 0, 255 | 0) | 0) & 255]($43, $44, $45);
    STACKTOP = sp;
    return;
    break;
   }
  case 10:
   {
    $46 = SAFE_HEAP_LOAD(660 | 0, 4, 0) | 0 | 0;
    $47 = $0;
    $48 = $1;
    $49 = $3;
    FUNCTION_TABLE_viii[(SAFE_FT_MASK($46 | 0, 255 | 0) | 0) & 255]($47, $48, $49);
    $50 = SAFE_HEAP_LOAD(392 | 0, 4, 0) | 0 | 0;
    $51 = $3;
    $52 = $1;
    FUNCTION_TABLE_viiii[(SAFE_FT_MASK($50 | 0, 255 | 0) | 0) & 255]($51, $52, 1, 0);
    STACKTOP = sp;
    return;
    break;
   }
  case 6:
   {
    $53 = SAFE_HEAP_LOAD(664 | 0, 4, 0) | 0 | 0;
    $54 = $0;
    $55 = $1;
    $56 = $3;
    FUNCTION_TABLE_viii[(SAFE_FT_MASK($53 | 0, 255 | 0) | 0) & 255]($54, $55, $56);
    STACKTOP = sp;
    return;
    break;
   }
  default:
   {
    ___assert_fail(13034 | 0, 12958 | 0, 554, 13036 | 0);
   }
  }
 } while (0);
}

function _DoHorizontalFilter($in, $width, $height, $stride, $row, $num_rows, $inverse, $out) {
 $in = $in | 0;
 $width = $width | 0;
 $height = $height | 0;
 $stride = $stride | 0;
 $row = $row | 0;
 $num_rows = $num_rows | 0;
 $inverse = $inverse | 0;
 $out = $out | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $95 = 0, $last_row = 0, $or$cond = 0, $preds = 0, $start_offset = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $in;
 $1 = $width;
 $2 = $height;
 $3 = $stride;
 $4 = $row;
 $5 = $num_rows;
 $6 = $inverse;
 $7 = $out;
 $8 = $4;
 $9 = $3;
 $10 = Math_imul($8, $9) | 0;
 $start_offset = $10;
 $11 = $4;
 $12 = $5;
 $13 = $11 + $12 | 0;
 $last_row = $13;
 $14 = $0;
 $15 = ($14 | 0) != (0 | 0);
 if (!$15) {
  ___assert_fail(12747 | 0, 12758 | 0, 51, 12919 | 0);
 }
 $16 = $7;
 $17 = ($16 | 0) != (0 | 0);
 if (!$17) {
  ___assert_fail(12800 | 0, 12758 | 0, 51, 12919 | 0);
 }
 $18 = $1;
 $19 = ($18 | 0) > 0;
 if (!$19) {
  ___assert_fail(12812 | 0, 12758 | 0, 51, 12919 | 0);
 }
 $20 = $2;
 $21 = ($20 | 0) > 0;
 if (!$21) {
  ___assert_fail(12822 | 0, 12758 | 0, 51, 12919 | 0);
 }
 $22 = $3;
 $23 = $1;
 $24 = ($22 | 0) >= ($23 | 0);
 if (!$24) {
  ___assert_fail(12833 | 0, 12758 | 0, 51, 12919 | 0);
 }
 $25 = $4;
 $26 = ($25 | 0) >= 0;
 $27 = $5;
 $28 = ($27 | 0) > 0;
 $or$cond = $26 & $28;
 if (!$or$cond) {
  ___assert_fail(12849 | 0, 12758 | 0, 51, 12919 | 0);
 }
 $29 = $4;
 $30 = $5;
 $31 = $29 + $30 | 0;
 $32 = $2;
 $33 = ($31 | 0) <= ($32 | 0);
 if (!$33) {
  ___assert_fail(12849 | 0, 12758 | 0, 51, 12919 | 0);
 }
 $34 = $start_offset;
 $35 = $0;
 $36 = $35 + $34 | 0;
 $0 = $36;
 $37 = $start_offset;
 $38 = $7;
 $39 = $38 + $37 | 0;
 $7 = $39;
 $40 = $6;
 $41 = ($40 | 0) != 0;
 $42 = $7;
 $43 = $0;
 $44 = $41 ? $42 : $43;
 $preds = $44;
 $45 = $4;
 $46 = ($45 | 0) == 0;
 if ($46) {
  $47 = $0;
  $48 = SAFE_HEAP_LOAD($47 >> 0 | 0, 1, 0) | 0 | 0;
  $49 = $7;
  SAFE_HEAP_STORE($49 >> 0 | 0, $48 | 0, 1);
  $50 = $0;
  $51 = $50 + 1 | 0;
  $52 = $preds;
  $53 = $7;
  $54 = $53 + 1 | 0;
  $55 = $1;
  $56 = $55 - 1 | 0;
  $57 = $6;
  _PredictLine($51, $52, $54, $56, $57);
  $4 = 1;
  $58 = $3;
  $59 = $preds;
  $60 = $59 + $58 | 0;
  $preds = $60;
  $61 = $3;
  $62 = $0;
  $63 = $62 + $61 | 0;
  $0 = $63;
  $64 = $3;
  $65 = $7;
  $66 = $65 + $64 | 0;
  $7 = $66;
 }
 while (1) {
  $67 = $4;
  $68 = $last_row;
  $69 = ($67 | 0) < ($68 | 0);
  if (!$69) {
   break;
  }
  $70 = $0;
  $71 = $preds;
  $72 = $3;
  $73 = 0 - $72 | 0;
  $74 = $71 + $73 | 0;
  $75 = $7;
  $76 = $6;
  _PredictLine($70, $74, $75, 1, $76);
  $77 = $0;
  $78 = $77 + 1 | 0;
  $79 = $preds;
  $80 = $7;
  $81 = $80 + 1 | 0;
  $82 = $1;
  $83 = $82 - 1 | 0;
  $84 = $6;
  _PredictLine($78, $79, $81, $83, $84);
  $85 = $4;
  $86 = $85 + 1 | 0;
  $4 = $86;
  $87 = $3;
  $88 = $preds;
  $89 = $88 + $87 | 0;
  $preds = $89;
  $90 = $3;
  $91 = $0;
  $92 = $91 + $90 | 0;
  $0 = $92;
  $93 = $3;
  $94 = $7;
  $95 = $94 + $93 | 0;
  $7 = $95;
 }
 STACKTOP = sp;
 return;
}

function _ParseVP8X($data, $data_size, $found_vp8x, $width_ptr, $height_ptr, $flags_ptr) {
 $data = $data | 0;
 $data_size = $data_size | 0;
 $found_vp8x = $found_vp8x | 0;
 $width_ptr = $width_ptr | 0;
 $height_ptr = $height_ptr | 0;
 $flags_ptr = $flags_ptr | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $8 = 0, $9 = 0, $chunk_size = 0, $flags = 0, $height = 0;
 var $vp8x_size = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $data;
 $2 = $data_size;
 $3 = $found_vp8x;
 $4 = $width_ptr;
 $5 = $height_ptr;
 $6 = $flags_ptr;
 $vp8x_size = 18;
 $7 = $1;
 $8 = ($7 | 0) != (0 | 0);
 if (!$8) {
  ___assert_fail(8752 | 0, 8703 | 0, 99, 8900 | 0);
 }
 $9 = $2;
 $10 = ($9 | 0) != (0 | 0);
 if (!$10) {
  ___assert_fail(8780 | 0, 8703 | 0, 100, 8900 | 0);
 }
 $11 = $3;
 $12 = ($11 | 0) != (0 | 0);
 if (!$12) {
  ___assert_fail(8910 | 0, 8703 | 0, 101, 8900 | 0);
 }
 $13 = $3;
 SAFE_HEAP_STORE($13 | 0, 0 | 0, 4);
 $14 = $2;
 $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
 $16 = $15 >>> 0 < 8;
 if ($16) {
  $0 = 7;
  $76 = $0;
  STACKTOP = sp;
  return $76 | 0;
 }
 $17 = $1;
 $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
 $19 = _memcmp($18, 8929, 4) | 0;
 $20 = ($19 | 0) != 0;
 if (!$20) {
  $21 = $1;
  $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
  $23 = $22 + 4 | 0;
  $24 = _GetLE32($23) | 0;
  $chunk_size = $24;
  $25 = $chunk_size;
  $26 = ($25 | 0) != 10;
  if ($26) {
   $0 = 3;
   $76 = $0;
   STACKTOP = sp;
   return $76 | 0;
  }
  $27 = $2;
  $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
  $29 = $28 >>> 0 < 18;
  if ($29) {
   $0 = 7;
   $76 = $0;
   STACKTOP = sp;
   return $76 | 0;
  }
  $30 = $1;
  $31 = SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0;
  $32 = $31 + 8 | 0;
  $33 = _GetLE32($32) | 0;
  $flags = $33;
  $34 = $1;
  $35 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
  $36 = $35 + 12 | 0;
  $37 = _GetLE24($36) | 0;
  $38 = 1 + $37 | 0;
  $width = $38;
  $39 = $1;
  $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
  $41 = $40 + 15 | 0;
  $42 = _GetLE24($41) | 0;
  $43 = 1 + $42 | 0;
  $height = $43;
  $44 = $width;
  $45 = ($44 | 0) < 0;
  $46 = $45 << 31 >> 31;
  $47 = $height;
  $48 = ($47 | 0) < 0;
  $49 = $48 << 31 >> 31;
  $50 = ___muldi3($44 | 0, $46 | 0, $47 | 0, $49 | 0) | 0;
  $51 = tempRet0;
  $52 = $51 >>> 0 > 1;
  $53 = $50 >>> 0 >= 0;
  $54 = ($51 | 0) == 1;
  $55 = $54 & $53;
  $56 = $52 | $55;
  if ($56) {
   $0 = 3;
   $76 = $0;
   STACKTOP = sp;
   return $76 | 0;
  }
  $57 = $6;
  $58 = ($57 | 0) != (0 | 0);
  if ($58) {
   $59 = $flags;
   $60 = $6;
   SAFE_HEAP_STORE($60 | 0, $59 | 0, 4);
  }
  $61 = $4;
  $62 = ($61 | 0) != (0 | 0);
  if ($62) {
   $63 = $width;
   $64 = $4;
   SAFE_HEAP_STORE($64 | 0, $63 | 0, 4);
  }
  $65 = $5;
  $66 = ($65 | 0) != (0 | 0);
  if ($66) {
   $67 = $height;
   $68 = $5;
   SAFE_HEAP_STORE($68 | 0, $67 | 0, 4);
  }
  $69 = $1;
  $70 = SAFE_HEAP_LOAD($69 | 0, 4, 0) | 0 | 0;
  $71 = $70 + 18 | 0;
  SAFE_HEAP_STORE($69 | 0, $71 | 0, 4);
  $72 = $2;
  $73 = SAFE_HEAP_LOAD($72 | 0, 4, 0) | 0 | 0;
  $74 = $73 - 18 | 0;
  SAFE_HEAP_STORE($72 | 0, $74 | 0, 4);
  $75 = $3;
  SAFE_HEAP_STORE($75 | 0, 1 | 0, 4);
 }
 $0 = 0;
 $76 = $0;
 STACKTOP = sp;
 return $76 | 0;
}

function _ExportAlpha($p, $y_pos, $max_lines_out) {
 $p = $p | 0;
 $y_pos = $y_pos | 0;
 $max_lines_out = $max_lines_out | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $alpha_first = 0, $base_rgba = 0, $buf = 0, $colorspace = 0, $dst = 0, $is_premult_alpha = 0, $non_opaque = 0, $num_lines_out = 0, $or$cond = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $p;
 $1 = $y_pos;
 $2 = $max_lines_out;
 $3 = $0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = $4 + 16 | 0;
 $buf = $5;
 $6 = $buf;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = $1;
 $9 = $buf;
 $10 = $9 + 4 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = Math_imul($8, $11) | 0;
 $13 = $7 + $12 | 0;
 $base_rgba = $13;
 $14 = $0;
 $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
 $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
 $colorspace = $16;
 $17 = $colorspace;
 $18 = ($17 | 0) == 4;
 $19 = $colorspace;
 $20 = ($19 | 0) == 9;
 $21 = $18 ? 1 : $20;
 $22 = $21 & 1;
 $alpha_first = $22;
 $23 = $base_rgba;
 $24 = $alpha_first;
 $25 = ($24 | 0) != 0;
 $26 = $25 ? 0 : 3;
 $27 = $23 + $26 | 0;
 $dst = $27;
 $num_lines_out = 0;
 $28 = $colorspace;
 $29 = _WebPIsPremultipliedMode($28) | 0;
 $is_premult_alpha = $29;
 $non_opaque = 0;
 $30 = $0;
 $31 = $30 + 276 | 0;
 $32 = $31 + 52 | 0;
 $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
 $width = $33;
 while (1) {
  $34 = $0;
  $35 = $34 + 276 | 0;
  $36 = _WebPRescalerHasPendingOutput($35) | 0;
  $37 = ($36 | 0) != 0;
  if (!$37) {
   break;
  }
  $38 = $num_lines_out;
  $39 = $2;
  $40 = ($38 | 0) < ($39 | 0);
  if (!$40) {
   break;
  }
  $41 = $1;
  $42 = $num_lines_out;
  $43 = $41 + $42 | 0;
  $44 = $0;
  $45 = SAFE_HEAP_LOAD($44 | 0, 4, 0) | 0 | 0;
  $46 = $45 + 8 | 0;
  $47 = SAFE_HEAP_LOAD($46 | 0, 4, 0) | 0 | 0;
  $48 = ($43 | 0) < ($47 | 0);
  if (!$48) {
   label = 5;
   break;
  }
  $49 = $0;
  $50 = $49 + 276 | 0;
  _WebPRescalerExportRow($50);
  $51 = SAFE_HEAP_LOAD(396 | 0, 4, 0) | 0 | 0;
  $52 = $0;
  $53 = $52 + 276 | 0;
  $54 = $53 + 68 | 0;
  $55 = SAFE_HEAP_LOAD($54 | 0, 4, 0) | 0 | 0;
  $56 = $width;
  $57 = $dst;
  $58 = FUNCTION_TABLE_iiiiiii[(SAFE_FT_MASK($51 | 0, 63 | 0) | 0) & 63]($55, 0, $56, 1, $57, 0) | 0;
  $59 = $non_opaque;
  $60 = $59 | $58;
  $non_opaque = $60;
  $61 = $buf;
  $62 = $61 + 4 | 0;
  $63 = SAFE_HEAP_LOAD($62 | 0, 4, 0) | 0 | 0;
  $64 = $dst;
  $65 = $64 + $63 | 0;
  $dst = $65;
  $66 = $num_lines_out;
  $67 = $66 + 1 | 0;
  $num_lines_out = $67;
 }
 if ((label | 0) == 5) {
  ___assert_fail(3231 | 0, 3071 | 0, 397, 3273 | 0);
 }
 $68 = $is_premult_alpha;
 $69 = ($68 | 0) != 0;
 $70 = $non_opaque;
 $71 = ($70 | 0) != 0;
 $or$cond = $69 & $71;
 if (!$or$cond) {
  $80 = $num_lines_out;
  STACKTOP = sp;
  return $80 | 0;
 }
 $72 = SAFE_HEAP_LOAD(388 | 0, 4, 0) | 0 | 0;
 $73 = $base_rgba;
 $74 = $alpha_first;
 $75 = $width;
 $76 = $num_lines_out;
 $77 = $buf;
 $78 = $77 + 4 | 0;
 $79 = SAFE_HEAP_LOAD($78 | 0, 4, 0) | 0 | 0;
 FUNCTION_TABLE_viiiii[(SAFE_FT_MASK($72 | 0, 255 | 0) | 0) & 255]($73, $74, $75, $76, $79);
 $80 = $num_lines_out;
 STACKTOP = sp;
 return $80 | 0;
}

function _ColorSpaceInverseTransform($transform, $y_start, $y_end, $data) {
 $transform = $transform | 0;
 $y_start = $y_start | 0;
 $y_end = $y_end | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $data_end = 0, $data_safe_end = 0, $m = 0, $mask = 0, $pred = 0, $pred_row = 0, $remaining_width = 0, $safe_width = 0, $tile_width = 0, $tiles_per_row = 0, $width = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $m = sp + 60 | 0;
 $0 = $transform;
 $1 = $y_start;
 $2 = $y_end;
 $3 = $data;
 $4 = $0;
 $5 = $4 + 8 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $width = $6;
 $7 = $0;
 $8 = $7 + 4 | 0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $10 = 1 << $9;
 $tile_width = $10;
 $11 = $tile_width;
 $12 = $11 - 1 | 0;
 $mask = $12;
 $13 = $width;
 $14 = $mask;
 $15 = $14 ^ -1;
 $16 = $13 & $15;
 $safe_width = $16;
 $17 = $width;
 $18 = $safe_width;
 $19 = $17 - $18 | 0;
 $remaining_width = $19;
 $20 = $width;
 $21 = $0;
 $22 = $21 + 4 | 0;
 $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
 $24 = _VP8LSubSampleSize315($20, $23) | 0;
 $tiles_per_row = $24;
 $25 = $1;
 $y = $25;
 $26 = $0;
 $27 = $26 + 16 | 0;
 $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
 $29 = $y;
 $30 = $0;
 $31 = $30 + 4 | 0;
 $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
 $33 = $29 >> $32;
 $34 = $tiles_per_row;
 $35 = Math_imul($33, $34) | 0;
 $36 = $28 + ($35 << 2) | 0;
 $pred_row = $36;
 while (1) {
  $37 = $y;
  $38 = $2;
  $39 = ($37 | 0) < ($38 | 0);
  if (!$39) {
   break;
  }
  $40 = $pred_row;
  $pred = $40;
  {}
  SAFE_HEAP_STORE($m >> 0 | 0, 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($m + 1 >> 0 | 0, 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($m + 2 >> 0 | 0, 0 | 0 | 0, 1);
  $41 = $3;
  $42 = $safe_width;
  $43 = $41 + ($42 << 2) | 0;
  $data_safe_end = $43;
  $44 = $3;
  $45 = $width;
  $46 = $44 + ($45 << 2) | 0;
  $data_end = $46;
  while (1) {
   $47 = $3;
   $48 = $data_safe_end;
   $49 = $47 >>> 0 < $48 >>> 0;
   if (!$49) {
    break;
   }
   $50 = $pred;
   $51 = $50 + 4 | 0;
   $pred = $51;
   $52 = SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0;
   _ColorCodeToMultipliers($52, $m);
   $53 = SAFE_HEAP_LOAD(732 | 0, 4, 0) | 0 | 0;
   $54 = $3;
   $55 = $tile_width;
   FUNCTION_TABLE_viii[(SAFE_FT_MASK($53 | 0, 255 | 0) | 0) & 255]($m, $54, $55);
   $56 = $tile_width;
   $57 = $3;
   $58 = $57 + ($56 << 2) | 0;
   $3 = $58;
  }
  $59 = $3;
  $60 = $data_end;
  $61 = $59 >>> 0 < $60 >>> 0;
  if ($61) {
   $62 = $pred;
   $63 = $62 + 4 | 0;
   $pred = $63;
   $64 = SAFE_HEAP_LOAD($62 | 0, 4, 0) | 0 | 0;
   _ColorCodeToMultipliers($64, $m);
   $65 = SAFE_HEAP_LOAD(732 | 0, 4, 0) | 0 | 0;
   $66 = $3;
   $67 = $remaining_width;
   FUNCTION_TABLE_viii[(SAFE_FT_MASK($65 | 0, 255 | 0) | 0) & 255]($m, $66, $67);
   $68 = $remaining_width;
   $69 = $3;
   $70 = $69 + ($68 << 2) | 0;
   $3 = $70;
  }
  $71 = $y;
  $72 = $71 + 1 | 0;
  $y = $72;
  $73 = $y;
  $74 = $mask;
  $75 = $73 & $74;
  $76 = ($75 | 0) == 0;
  if (!$76) {
   continue;
  }
  $77 = $tiles_per_row;
  $78 = $pred_row;
  $79 = $78 + ($77 << 2) | 0;
  $pred_row = $79;
 }
 STACKTOP = sp;
 return;
}

function _BuildPackedTable($htree_group) {
 $htree_group = $htree_group | 0;
 var $$byval_copy = 0, $$byval_copy1 = 0, $$byval_copy2 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0;
 var $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0;
 var $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0;
 var $60 = 0, $7 = 0, $8 = 0, $9 = 0, $bits = 0, $code = 0, $hcode = 0, $hcode$byval_copy = 0, $huff = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $$byval_copy2 = sp + 32 | 0;
 $$byval_copy1 = sp + 28 | 0;
 $$byval_copy = sp + 24 | 0;
 $hcode$byval_copy = sp + 20 | 0;
 $hcode = sp + 16 | 0;
 $0 = $htree_group;
 $code = 0;
 while (1) {
  $1 = $code;
  $2 = $1 >>> 0 < 64;
  if (!$2) {
   break;
  }
  $3 = $code;
  $bits = $3;
  $4 = $bits;
  $5 = $0;
  $6 = $5 + 36 | 0;
  $7 = $6 + ($4 << 3) | 0;
  $huff = $7;
  $8 = $bits;
  $9 = $0;
  $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
  $11 = $10 + ($8 << 2) | 0;
  {}
  SAFE_HEAP_STORE($hcode | 0, SAFE_HEAP_LOAD($11 | 0, 2, 0) | 0 | 0 | 0, 2);
  SAFE_HEAP_STORE($hcode + 2 | 0, SAFE_HEAP_LOAD($11 + 2 | 0, 2, 0) | 0 | 0 | 0, 2);
  $12 = $hcode + 2 | 0;
  $13 = SAFE_HEAP_LOAD($12 | 0, 2, 0) | 0 | 0;
  $14 = $13 & 65535;
  $15 = ($14 | 0) >= 256;
  if ($15) {
   $16 = SAFE_HEAP_LOAD($hcode >> 0 | 0, 1, 0) | 0 | 0;
   $17 = $16 & 255;
   $18 = $17 + 256 | 0;
   $19 = $huff;
   SAFE_HEAP_STORE($19 | 0, $18 | 0, 4);
   $20 = $hcode + 2 | 0;
   $21 = SAFE_HEAP_LOAD($20 | 0, 2, 0) | 0 | 0;
   $22 = $21 & 65535;
   $23 = $huff;
   $24 = $23 + 4 | 0;
   SAFE_HEAP_STORE($24 | 0, $22 | 0, 4);
  } else {
   $25 = $huff;
   SAFE_HEAP_STORE($25 | 0, 0 | 0, 4);
   $26 = $huff;
   $27 = $26 + 4 | 0;
   SAFE_HEAP_STORE($27 | 0, 0 | 0, 4);
   $28 = $huff;
   {}
   SAFE_HEAP_STORE($hcode$byval_copy | 0, SAFE_HEAP_LOAD($hcode | 0, 2, 0) | 0 | 0 | 0, 2);
   SAFE_HEAP_STORE($hcode$byval_copy + 2 | 0, SAFE_HEAP_LOAD($hcode + 2 | 0, 2, 0) | 0 | 0 | 0, 2);
   $29 = _AccumulateHCode($hcode$byval_copy, 8, $28) | 0;
   $30 = $bits;
   $31 = $30 >>> $29;
   $bits = $31;
   $32 = $bits;
   $33 = $0;
   $34 = $33 + 4 | 0;
   $35 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
   $36 = $35 + ($32 << 2) | 0;
   $37 = $huff;
   {}
   SAFE_HEAP_STORE($$byval_copy | 0, SAFE_HEAP_LOAD($36 | 0, 2, 0) | 0 | 0 | 0, 2);
   SAFE_HEAP_STORE($$byval_copy + 2 | 0, SAFE_HEAP_LOAD($36 + 2 | 0, 2, 0) | 0 | 0 | 0, 2);
   $38 = _AccumulateHCode($$byval_copy, 16, $37) | 0;
   $39 = $bits;
   $40 = $39 >>> $38;
   $bits = $40;
   $41 = $bits;
   $42 = $0;
   $43 = $42 + 8 | 0;
   $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
   $45 = $44 + ($41 << 2) | 0;
   $46 = $huff;
   {}
   SAFE_HEAP_STORE($$byval_copy1 | 0, SAFE_HEAP_LOAD($45 | 0, 2, 0) | 0 | 0 | 0, 2);
   SAFE_HEAP_STORE($$byval_copy1 + 2 | 0, SAFE_HEAP_LOAD($45 + 2 | 0, 2, 0) | 0 | 0 | 0, 2);
   $47 = _AccumulateHCode($$byval_copy1, 0, $46) | 0;
   $48 = $bits;
   $49 = $48 >>> $47;
   $bits = $49;
   $50 = $bits;
   $51 = $0;
   $52 = $51 + 12 | 0;
   $53 = SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0;
   $54 = $53 + ($50 << 2) | 0;
   $55 = $huff;
   {}
   SAFE_HEAP_STORE($$byval_copy2 | 0, SAFE_HEAP_LOAD($54 | 0, 2, 0) | 0 | 0 | 0, 2);
   SAFE_HEAP_STORE($$byval_copy2 + 2 | 0, SAFE_HEAP_LOAD($54 + 2 | 0, 2, 0) | 0 | 0 | 0, 2);
   $56 = _AccumulateHCode($$byval_copy2, 24, $55) | 0;
   $57 = $bits;
   $58 = $57 >>> $56;
   $bits = $58;
  }
  $59 = $code;
  $60 = $59 + 1 | 0;
  $code = $60;
 }
 STACKTOP = sp;
 return;
}

function _ParseSegmentHeader($br, $hdr, $proba) {
 $br = $br | 0;
 $hdr = $hdr | 0;
 $proba = $proba | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $9 = 0;
 var $s = 0, $s1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $br;
 $1 = $hdr;
 $2 = $proba;
 $3 = $0;
 $4 = ($3 | 0) != (0 | 0);
 if (!$4) {
  ___assert_fail(14021 | 0, 6903 | 0, 151, 7069 | 0);
 }
 $5 = $1;
 $6 = ($5 | 0) != (0 | 0);
 if (!$6) {
  ___assert_fail(8215 | 0, 6903 | 0, 152, 7069 | 0);
 }
 $7 = $0;
 $8 = _VP8Get74($7) | 0;
 $9 = $1;
 SAFE_HEAP_STORE($9 | 0, $8 | 0, 4);
 $10 = $1;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = ($11 | 0) != 0;
 if (!$12) {
  $72 = $1;
  $73 = $72 + 4 | 0;
  SAFE_HEAP_STORE($73 | 0, 0 | 0, 4);
  $74 = $0;
  $75 = $74 + 24 | 0;
  $76 = SAFE_HEAP_LOAD($75 | 0, 4, 0) | 0 | 0;
  $77 = ($76 | 0) != 0;
  $78 = $77 ^ 1;
  $79 = $78 & 1;
  STACKTOP = sp;
  return $79 | 0;
 }
 $13 = $0;
 $14 = _VP8Get74($13) | 0;
 $15 = $1;
 $16 = $15 + 4 | 0;
 SAFE_HEAP_STORE($16 | 0, $14 | 0, 4);
 $17 = $0;
 $18 = _VP8Get74($17) | 0;
 $19 = ($18 | 0) != 0;
 L11 : do {
  if ($19) {
   $20 = $0;
   $21 = _VP8Get74($20) | 0;
   $22 = $1;
   $23 = $22 + 8 | 0;
   SAFE_HEAP_STORE($23 | 0, $21 | 0, 4);
   $s = 0;
   while (1) {
    $24 = $s;
    $25 = ($24 | 0) < 4;
    if (!$25) {
     break;
    }
    $26 = $0;
    $27 = _VP8Get74($26) | 0;
    $28 = ($27 | 0) != 0;
    if ($28) {
     $29 = $0;
     $30 = _VP8GetSignedValue($29, 7) | 0;
     $32 = $30;
    } else {
     $32 = 0;
    }
    $31 = $32 & 255;
    $33 = $s;
    $34 = $1;
    $35 = $34 + 12 | 0;
    $36 = $35 + $33 | 0;
    SAFE_HEAP_STORE($36 >> 0 | 0, $31 | 0, 1);
    $37 = $s;
    $38 = $37 + 1 | 0;
    $s = $38;
   }
   $s = 0;
   while (1) {
    $39 = $s;
    $40 = ($39 | 0) < 4;
    if (!$40) {
     break L11;
    }
    $41 = $0;
    $42 = _VP8Get74($41) | 0;
    $43 = ($42 | 0) != 0;
    if ($43) {
     $44 = $0;
     $45 = _VP8GetSignedValue($44, 6) | 0;
     $47 = $45;
    } else {
     $47 = 0;
    }
    $46 = $47 & 255;
    $48 = $s;
    $49 = $1;
    $50 = $49 + 16 | 0;
    $51 = $50 + $48 | 0;
    SAFE_HEAP_STORE($51 >> 0 | 0, $46 | 0, 1);
    $52 = $s;
    $53 = $52 + 1 | 0;
    $s = $53;
   }
  }
 } while (0);
 $54 = $1;
 $55 = $54 + 4 | 0;
 $56 = SAFE_HEAP_LOAD($55 | 0, 4, 0) | 0 | 0;
 $57 = ($56 | 0) != 0;
 if (!$57) {
  $74 = $0;
  $75 = $74 + 24 | 0;
  $76 = SAFE_HEAP_LOAD($75 | 0, 4, 0) | 0 | 0;
  $77 = ($76 | 0) != 0;
  $78 = $77 ^ 1;
  $79 = $78 & 1;
  STACKTOP = sp;
  return $79 | 0;
 }
 $s1 = 0;
 while (1) {
  $58 = $s1;
  $59 = ($58 | 0) < 3;
  if (!$59) {
   break;
  }
  $60 = $0;
  $61 = _VP8Get74($60) | 0;
  $62 = ($61 | 0) != 0;
  if ($62) {
   $63 = $0;
   $64 = _VP8GetValue($63, 8) | 0;
   $66 = $64;
  } else {
   $66 = 255;
  }
  $65 = $66 & 255;
  $67 = $s1;
  $68 = $2;
  $69 = $68 + $67 | 0;
  SAFE_HEAP_STORE($69 >> 0 | 0, $65 | 0, 1);
  $70 = $s1;
  $71 = $70 + 1 | 0;
  $s1 = $71;
 }
 $74 = $0;
 $75 = $74 + 24 | 0;
 $76 = SAFE_HEAP_LOAD($75 | 0, 4, 0) | 0 | 0;
 $77 = ($76 | 0) != 0;
 $78 = $77 ^ 1;
 $79 = $78 & 1;
 STACKTOP = sp;
 return $79 | 0;
}

function _ParseOptionalChunks($data, $data_size, $riff_size, $alpha_data, $alpha_size) {
 $data = $data | 0;
 $data_size = $data_size | 0;
 $riff_size = $riff_size | 0;
 $alpha_data = $alpha_data | 0;
 $alpha_size = $alpha_size | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $buf_size = 0, $chunk_size = 0, $disk_chunk_size = 0, $total_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $data;
 $2 = $data_size;
 $3 = $riff_size;
 $4 = $alpha_data;
 $5 = $alpha_size;
 $total_size = 22;
 $6 = $1;
 $7 = ($6 | 0) != (0 | 0);
 if (!$7) {
  ___assert_fail(8752 | 0, 8703 | 0, 156, 8837 | 0);
 }
 $8 = $2;
 $9 = ($8 | 0) != (0 | 0);
 if (!$9) {
  ___assert_fail(8780 | 0, 8703 | 0, 157, 8837 | 0);
 }
 $10 = $1;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $buf = $11;
 $12 = $2;
 $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
 $buf_size = $13;
 $14 = $4;
 $15 = ($14 | 0) != (0 | 0);
 if (!$15) {
  ___assert_fail(8857 | 0, 8703 | 0, 161, 8837 | 0);
 }
 $16 = $5;
 $17 = ($16 | 0) != (0 | 0);
 if (!$17) {
  ___assert_fail(8876 | 0, 8703 | 0, 162, 8837 | 0);
 }
 $18 = $4;
 SAFE_HEAP_STORE($18 | 0, 0 | 0, 4);
 $19 = $5;
 SAFE_HEAP_STORE($19 | 0, 0 | 0, 4);
 while (1) {
  $20 = $buf;
  $21 = $1;
  SAFE_HEAP_STORE($21 | 0, $20 | 0, 4);
  $22 = $buf_size;
  $23 = $2;
  SAFE_HEAP_STORE($23 | 0, $22 | 0, 4);
  $24 = $buf_size;
  $25 = $24 >>> 0 < 8;
  if ($25) {
   label = 11;
   break;
  }
  $26 = $buf;
  $27 = $26 + 4 | 0;
  $28 = _GetLE32($27) | 0;
  $chunk_size = $28;
  $29 = $chunk_size;
  $30 = $29 >>> 0 > 4294967286;
  if ($30) {
   label = 13;
   break;
  }
  $31 = $chunk_size;
  $32 = 8 + $31 | 0;
  $33 = $32 + 1 | 0;
  $34 = $33 & -2;
  $disk_chunk_size = $34;
  $35 = $disk_chunk_size;
  $36 = $total_size;
  $37 = $36 + $35 | 0;
  $total_size = $37;
  $38 = $3;
  $39 = $38 >>> 0 > 0;
  if ($39) {
   $40 = $total_size;
   $41 = $3;
   $42 = $40 >>> 0 > $41 >>> 0;
   if ($42) {
    label = 16;
    break;
   }
  }
  $43 = $buf;
  $44 = _memcmp($43, 8742, 4) | 0;
  $45 = ($44 | 0) != 0;
  if (!$45) {
   label = 19;
   break;
  }
  $46 = $buf;
  $47 = _memcmp($46, 8747, 4) | 0;
  $48 = ($47 | 0) != 0;
  if (!$48) {
   label = 19;
   break;
  }
  $49 = $buf_size;
  $50 = $disk_chunk_size;
  $51 = $49 >>> 0 < $50 >>> 0;
  if ($51) {
   label = 21;
   break;
  }
  $52 = $buf;
  $53 = _memcmp($52, 8895, 4) | 0;
  $54 = ($53 | 0) != 0;
  if (!$54) {
   $55 = $buf;
   $56 = $55 + 8 | 0;
   $57 = $4;
   SAFE_HEAP_STORE($57 | 0, $56 | 0, 4);
   $58 = $chunk_size;
   $59 = $5;
   SAFE_HEAP_STORE($59 | 0, $58 | 0, 4);
  }
  $60 = $disk_chunk_size;
  $61 = $buf;
  $62 = $61 + $60 | 0;
  $buf = $62;
  $63 = $disk_chunk_size;
  $64 = $buf_size;
  $65 = $64 - $63 | 0;
  $buf_size = $65;
 }
 if ((label | 0) == 11) {
  $0 = 7;
  $66 = $0;
  STACKTOP = sp;
  return $66 | 0;
 } else if ((label | 0) == 13) {
  $0 = 3;
  $66 = $0;
  STACKTOP = sp;
  return $66 | 0;
 } else if ((label | 0) == 16) {
  $0 = 3;
  $66 = $0;
  STACKTOP = sp;
  return $66 | 0;
 } else if ((label | 0) == 19) {
  $0 = 0;
  $66 = $0;
  STACKTOP = sp;
  return $66 | 0;
 } else if ((label | 0) == 21) {
  $0 = 7;
  $66 = $0;
  STACKTOP = sp;
  return $66 | 0;
 }
 return 0 | 0;
}

function _VFilter($p) {
 $p = $p | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $cur = 0, $new_value = 0, $out = 0, $src = 0, $sum = 0, $top = 0;
 var $w = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = $1 + 12 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $src = $3;
 $4 = $0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $w = $5;
 $6 = $0;
 $7 = $6 + 36 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $cur = $8;
 $9 = $0;
 $10 = $9 + 44 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $top = $11;
 $12 = $0;
 $13 = $12 + 40 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $out = $14;
 $sum = 0;
 $x = 0;
 while (1) {
  $15 = $x;
  $16 = $w;
  $17 = ($15 | 0) < ($16 | 0);
  if (!$17) {
   break;
  }
  $18 = $x;
  $19 = $src;
  $20 = $19 + $18 | 0;
  $21 = SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0;
  $22 = $21 & 255;
  $23 = $sum;
  $24 = $23 & 65535;
  $25 = $24 + $22 | 0;
  $26 = $25 & 65535;
  $sum = $26;
  $27 = $x;
  $28 = $top;
  $29 = $28 + ($27 << 1) | 0;
  $30 = SAFE_HEAP_LOAD($29 | 0, 2, 0) | 0 | 0;
  $31 = $30 & 65535;
  $32 = $sum;
  $33 = $32 & 65535;
  $34 = $31 + $33 | 0;
  $35 = $34 & 65535;
  $new_value = $35;
  $36 = $new_value;
  $37 = $36 & 65535;
  $38 = $x;
  $39 = $cur;
  $40 = $39 + ($38 << 1) | 0;
  $41 = SAFE_HEAP_LOAD($40 | 0, 2, 0) | 0 | 0;
  $42 = $41 & 65535;
  $43 = $37 - $42 | 0;
  $44 = $43 & 65535;
  $45 = $x;
  $46 = $out;
  $47 = $46 + ($45 << 1) | 0;
  SAFE_HEAP_STORE($47 | 0, $44 | 0, 2);
  $48 = $new_value;
  $49 = $x;
  $50 = $cur;
  $51 = $50 + ($49 << 1) | 0;
  SAFE_HEAP_STORE($51 | 0, $48 | 0, 2);
  $52 = $x;
  $53 = $52 + 1 | 0;
  $x = $53;
 }
 $54 = $0;
 $55 = $54 + 36 | 0;
 $56 = SAFE_HEAP_LOAD($55 | 0, 4, 0) | 0 | 0;
 $57 = $0;
 $58 = $57 + 44 | 0;
 SAFE_HEAP_STORE($58 | 0, $56 | 0, 4);
 $59 = $w;
 $60 = $0;
 $61 = $60 + 36 | 0;
 $62 = SAFE_HEAP_LOAD($61 | 0, 4, 0) | 0 | 0;
 $63 = $62 + ($59 << 1) | 0;
 SAFE_HEAP_STORE($61 | 0, $63 | 0, 4);
 $64 = $0;
 $65 = $64 + 36 | 0;
 $66 = SAFE_HEAP_LOAD($65 | 0, 4, 0) | 0 | 0;
 $67 = $0;
 $68 = $67 + 40 | 0;
 $69 = SAFE_HEAP_LOAD($68 | 0, 4, 0) | 0 | 0;
 $70 = ($66 | 0) == ($69 | 0);
 if ($70) {
  $71 = $0;
  $72 = $71 + 32 | 0;
  $73 = SAFE_HEAP_LOAD($72 | 0, 4, 0) | 0 | 0;
  $74 = $0;
  $75 = $74 + 36 | 0;
  SAFE_HEAP_STORE($75 | 0, $73 | 0, 4);
 }
 $76 = $0;
 $77 = $76 + 8 | 0;
 $78 = SAFE_HEAP_LOAD($77 | 0, 4, 0) | 0 | 0;
 $79 = ($78 | 0) >= 0;
 if (!$79) {
  STACKTOP = sp;
  return;
 }
 $80 = $0;
 $81 = $80 + 8 | 0;
 $82 = SAFE_HEAP_LOAD($81 | 0, 4, 0) | 0 | 0;
 $83 = $0;
 $84 = $83 + 4 | 0;
 $85 = SAFE_HEAP_LOAD($84 | 0, 4, 0) | 0 | 0;
 $86 = $85 - 1 | 0;
 $87 = ($82 | 0) < ($86 | 0);
 if (!$87) {
  STACKTOP = sp;
  return;
 }
 $88 = $0;
 $89 = SAFE_HEAP_LOAD($88 | 0, 4, 0) | 0 | 0;
 $90 = $0;
 $91 = $90 + 12 | 0;
 $92 = SAFE_HEAP_LOAD($91 | 0, 4, 0) | 0 | 0;
 $93 = $92 + $89 | 0;
 SAFE_HEAP_STORE($91 | 0, $93 | 0, 4);
 STACKTOP = sp;
 return;
}

function _EmitRescaledRGB($io, $p) {
 $io = $io | 0;
 $p = $p | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $j = 0, $mb_h = 0, $num_lines_out = 0, $u_lines_in = 0, $uv_j = 0, $uv_mb_h = 0, $v_lines_in = 0, $y_lines_in = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $io;
 $1 = $p;
 $2 = $0;
 $3 = $2 + 16 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $mb_h = $4;
 $5 = $mb_h;
 $6 = $5 + 1 | 0;
 $7 = $6 >> 1;
 $uv_mb_h = $7;
 $j = 0;
 $uv_j = 0;
 $num_lines_out = 0;
 while (1) {
  $8 = $j;
  $9 = $mb_h;
  $10 = ($8 | 0) < ($9 | 0);
  if (!$10) {
   label = 8;
   break;
  }
  $11 = $1;
  $12 = $11 + 24 | 0;
  $13 = $mb_h;
  $14 = $j;
  $15 = $13 - $14 | 0;
  $16 = $0;
  $17 = $16 + 20 | 0;
  $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
  $19 = $j;
  $20 = $0;
  $21 = $20 + 32 | 0;
  $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
  $23 = Math_imul($19, $22) | 0;
  $24 = $18 + $23 | 0;
  $25 = $0;
  $26 = $25 + 32 | 0;
  $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
  $28 = _WebPRescalerImport($12, $15, $24, $27) | 0;
  $y_lines_in = $28;
  $29 = $y_lines_in;
  $30 = $j;
  $31 = $30 + $29 | 0;
  $j = $31;
  $32 = $1;
  $33 = $32 + 108 | 0;
  $34 = $uv_mb_h;
  $35 = $uv_j;
  $36 = $34 - $35 | 0;
  $37 = _WebPRescaleNeededLines($33, $36) | 0;
  $38 = ($37 | 0) != 0;
  if ($38) {
   $39 = $1;
   $40 = $39 + 108 | 0;
   $41 = $uv_mb_h;
   $42 = $uv_j;
   $43 = $41 - $42 | 0;
   $44 = $0;
   $45 = $44 + 24 | 0;
   $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
   $47 = $uv_j;
   $48 = $0;
   $49 = $48 + 36 | 0;
   $50 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0;
   $51 = Math_imul($47, $50) | 0;
   $52 = $46 + $51 | 0;
   $53 = $0;
   $54 = $53 + 36 | 0;
   $55 = SAFE_HEAP_LOAD($54 | 0, 4, 0) | 0 | 0;
   $56 = _WebPRescalerImport($40, $43, $52, $55) | 0;
   $u_lines_in = $56;
   $57 = $1;
   $58 = $57 + 192 | 0;
   $59 = $uv_mb_h;
   $60 = $uv_j;
   $61 = $59 - $60 | 0;
   $62 = $0;
   $63 = $62 + 28 | 0;
   $64 = SAFE_HEAP_LOAD($63 | 0, 4, 0) | 0 | 0;
   $65 = $uv_j;
   $66 = $0;
   $67 = $66 + 36 | 0;
   $68 = SAFE_HEAP_LOAD($67 | 0, 4, 0) | 0 | 0;
   $69 = Math_imul($65, $68) | 0;
   $70 = $64 + $69 | 0;
   $71 = $0;
   $72 = $71 + 36 | 0;
   $73 = SAFE_HEAP_LOAD($72 | 0, 4, 0) | 0 | 0;
   $74 = _WebPRescalerImport($58, $61, $70, $73) | 0;
   $v_lines_in = $74;
   $75 = $u_lines_in;
   $76 = $v_lines_in;
   $77 = ($75 | 0) == ($76 | 0);
   if (!$77) {
    label = 5;
    break;
   }
   $78 = $u_lines_in;
   $79 = $uv_j;
   $80 = $79 + $78 | 0;
   $uv_j = $80;
  }
  $81 = $1;
  $82 = $1;
  $83 = $82 + 16 | 0;
  $84 = SAFE_HEAP_LOAD($83 | 0, 4, 0) | 0 | 0;
  $85 = $num_lines_out;
  $86 = $84 + $85 | 0;
  $87 = _ExportRGB($81, $86) | 0;
  $88 = $num_lines_out;
  $89 = $88 + $87 | 0;
  $num_lines_out = $89;
 }
 if ((label | 0) == 5) {
  ___assert_fail(3358 | 0, 3071 | 0, 375, 3383 | 0);
 } else if ((label | 0) == 8) {
  $90 = $num_lines_out;
  STACKTOP = sp;
  return $90 | 0;
 }
 return 0 | 0;
}

function _VP8ParseProba($br, $dec) {
 $br = $br | 0;
 $dec = $dec | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $9 = 0, $b = 0, $c = 0, $p = 0, $proba = 0, $t = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $br;
 $1 = $dec;
 $2 = $1;
 $3 = $2 + 904 | 0;
 $proba = $3;
 $t = 0;
 while (1) {
  $4 = $t;
  $5 = ($4 | 0) < 4;
  if (!$5) {
   break;
  }
  $b = 0;
  while (1) {
   $6 = $b;
   $7 = ($6 | 0) < 8;
   if (!$7) {
    break;
   }
   $c = 0;
   while (1) {
    $8 = $c;
    $9 = ($8 | 0) < 3;
    if (!$9) {
     break;
    }
    $p = 0;
    while (1) {
     $10 = $p;
     $11 = ($10 | 0) < 11;
     if (!$11) {
      break;
     }
     $12 = $0;
     $13 = $p;
     $14 = $c;
     $15 = $b;
     $16 = $t;
     $17 = 3553 + ($16 * 264 | 0) | 0;
     $18 = $17 + ($15 * 33 | 0) | 0;
     $19 = $18 + ($14 * 11 | 0) | 0;
     $20 = $19 + $13 | 0;
     $21 = SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0;
     $22 = $21 & 255;
     $23 = _VP8GetBit($12, $22) | 0;
     $24 = ($23 | 0) != 0;
     if ($24) {
      $25 = $0;
      $26 = _VP8GetValue($25, 8) | 0;
      $37 = $26;
     } else {
      $27 = $p;
      $28 = $c;
      $29 = $b;
      $30 = $t;
      $31 = 4609 + ($30 * 264 | 0) | 0;
      $32 = $31 + ($29 * 33 | 0) | 0;
      $33 = $32 + ($28 * 11 | 0) | 0;
      $34 = $33 + $27 | 0;
      $35 = SAFE_HEAP_LOAD($34 >> 0 | 0, 1, 0) | 0 | 0;
      $36 = $35 & 255;
      $37 = $36;
     }
     $v = $37;
     $38 = $v;
     $39 = $38 & 255;
     $40 = $p;
     $41 = $c;
     $42 = $b;
     $43 = $t;
     $44 = $proba;
     $45 = $44 + 3 | 0;
     $46 = $45 + ($43 * 264 | 0) | 0;
     $47 = $46 + ($42 * 33 | 0) | 0;
     $48 = $47 + ($41 * 11 | 0) | 0;
     $49 = $48 + $40 | 0;
     SAFE_HEAP_STORE($49 >> 0 | 0, $39 | 0, 1);
     $50 = $p;
     $51 = $50 + 1 | 0;
     $p = $51;
    }
    $52 = $c;
    $53 = $52 + 1 | 0;
    $c = $53;
   }
   $54 = $b;
   $55 = $54 + 1 | 0;
   $b = $55;
  }
  $b = 0;
  while (1) {
   $56 = $b;
   $57 = ($56 | 0) < 17;
   if (!$57) {
    break;
   }
   $58 = $b;
   $59 = 224 + ($58 << 2) | 0;
   $60 = SAFE_HEAP_LOAD($59 | 0, 4, 0) | 0 | 0;
   $61 = $t;
   $62 = $proba;
   $63 = $62 + 3 | 0;
   $64 = $63 + ($61 * 264 | 0) | 0;
   $65 = $64 + ($60 * 33 | 0) | 0;
   $66 = $b;
   $67 = $t;
   $68 = $proba;
   $69 = $68 + 1060 | 0;
   $70 = $69 + ($67 * 68 | 0) | 0;
   $71 = $70 + ($66 << 2) | 0;
   SAFE_HEAP_STORE($71 | 0, $65 | 0, 4);
   $72 = $b;
   $73 = $72 + 1 | 0;
   $b = $73;
  }
  $74 = $t;
  $75 = $74 + 1 | 0;
  $t = $75;
 }
 $76 = $0;
 $77 = _VP8Get46($76) | 0;
 $78 = $1;
 $79 = $78 + 2236 | 0;
 SAFE_HEAP_STORE($79 | 0, $77 | 0, 4);
 $80 = $1;
 $81 = $80 + 2236 | 0;
 $82 = SAFE_HEAP_LOAD($81 | 0, 4, 0) | 0 | 0;
 $83 = ($82 | 0) != 0;
 if (!$83) {
  STACKTOP = sp;
  return;
 }
 $84 = $0;
 $85 = _VP8GetValue($84, 8) | 0;
 $86 = $85 & 255;
 $87 = $1;
 $88 = $87 + 2240 | 0;
 SAFE_HEAP_STORE($88 >> 0 | 0, $86 | 0, 1);
 STACKTOP = sp;
 return;
}

function _ALPHDecode($dec, $row, $num_rows) {
 $dec = $dec | 0;
 $row = $row | 0;
 $num_rows = $num_rows | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $alph_dec = 0, $height = 0, $num_pixels = 0, $offset = 0, $output = 0, $unfilter_func = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $dec;
 $2 = $row;
 $3 = $num_rows;
 $4 = $1;
 $5 = $4 + 2344 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $alph_dec = $6;
 $7 = $alph_dec;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $width = $8;
 $9 = $alph_dec;
 $10 = $9 + 4 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $height = $11;
 $12 = $alph_dec;
 $13 = $12 + 12 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $15 = 604 + ($14 << 2) | 0;
 $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
 $unfilter_func = $16;
 $17 = $1;
 $18 = $17 + 2360 | 0;
 $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
 $output = $19;
 $20 = $alph_dec;
 $21 = $20 + 8 | 0;
 $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
 $23 = ($22 | 0) == 0;
 do {
  if ($23) {
   $24 = $2;
   $25 = $width;
   $26 = Math_imul($24, $25) | 0;
   $offset = $26;
   $27 = $3;
   $28 = $width;
   $29 = Math_imul($27, $28) | 0;
   $num_pixels = $29;
   $30 = $1;
   $31 = $30 + 2352 | 0;
   $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
   $33 = $offset;
   $34 = 1 + $33 | 0;
   $35 = $num_pixels;
   $36 = $34 + $35 | 0;
   $37 = $32 >>> 0 >= $36 >>> 0;
   if ($37) {
    $38 = $1;
    $39 = $38 + 2360 | 0;
    $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
    $41 = $offset;
    $42 = $40 + $41 | 0;
    $43 = $1;
    $44 = $43 + 2348 | 0;
    $45 = SAFE_HEAP_LOAD($44 | 0, 4, 0) | 0 | 0;
    $46 = $45 + 1 | 0;
    $47 = $offset;
    $48 = $46 + $47 | 0;
    $49 = $num_pixels;
    _memcpy($42 | 0, $48 | 0, $49 | 0) | 0;
    break;
   } else {
    ___assert_fail(2325 | 0, 2256 | 0, 99, 2389 | 0);
   }
  } else {
   $50 = $alph_dec;
   $51 = $50 + 20 | 0;
   $52 = SAFE_HEAP_LOAD($51 | 0, 4, 0) | 0 | 0;
   $53 = ($52 | 0) != (0 | 0);
   if (!$53) {
    ___assert_fail(2400 | 0, 2256 | 0, 103, 2389 | 0);
   }
   $54 = $alph_dec;
   $55 = $2;
   $56 = $3;
   $57 = $55 + $56 | 0;
   $58 = _VP8LDecodeAlphaImageStream($54, $57) | 0;
   $59 = ($58 | 0) != 0;
   if (!$59) {
    $0 = 0;
    $80 = $0;
    STACKTOP = sp;
    return $80 | 0;
   }
  }
 } while (0);
 $60 = $unfilter_func;
 $61 = ($60 | 0) != (0 | 0);
 if ($61) {
  $62 = $unfilter_func;
  $63 = $width;
  $64 = $height;
  $65 = $width;
  $66 = $2;
  $67 = $3;
  $68 = $output;
  FUNCTION_TABLE_viiiiii[(SAFE_FT_MASK($62 | 0, 127 | 0) | 0) & 127]($63, $64, $65, $66, $67, $68);
 }
 $69 = $2;
 $70 = $3;
 $71 = $69 + $70 | 0;
 $72 = $1;
 $73 = $72 + 48 | 0;
 $74 = $73 + 2 | 0;
 $75 = SAFE_HEAP_LOAD($74 | 0, 2, 0) | 0 | 0;
 $76 = $75 & 65535;
 $77 = ($71 | 0) == ($76 | 0);
 if ($77) {
  $78 = $1;
  $79 = $78 + 2356 | 0;
  SAFE_HEAP_STORE($79 | 0, 1 | 0, 4);
 }
 $0 = 1;
 $80 = $0;
 STACKTOP = sp;
 return $80 | 0;
}

function _DoVerticalFilter($in, $width, $height, $stride, $row, $num_rows, $inverse, $out) {
 $in = $in | 0;
 $width = $width | 0;
 $height = $height | 0;
 $stride = $stride | 0;
 $row = $row | 0;
 $num_rows = $num_rows | 0;
 $inverse = $inverse | 0;
 $out = $out | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $9 = 0, $last_row = 0, $or$cond = 0, $preds = 0, $start_offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $in;
 $1 = $width;
 $2 = $height;
 $3 = $stride;
 $4 = $row;
 $5 = $num_rows;
 $6 = $inverse;
 $7 = $out;
 $8 = $4;
 $9 = $3;
 $10 = Math_imul($8, $9) | 0;
 $start_offset = $10;
 $11 = $4;
 $12 = $5;
 $13 = $11 + $12 | 0;
 $last_row = $13;
 $14 = $0;
 $15 = ($14 | 0) != (0 | 0);
 if (!$15) {
  ___assert_fail(12747 | 0, 12758 | 0, 88, 12902 | 0);
 }
 $16 = $7;
 $17 = ($16 | 0) != (0 | 0);
 if (!$17) {
  ___assert_fail(12800 | 0, 12758 | 0, 88, 12902 | 0);
 }
 $18 = $1;
 $19 = ($18 | 0) > 0;
 if (!$19) {
  ___assert_fail(12812 | 0, 12758 | 0, 88, 12902 | 0);
 }
 $20 = $2;
 $21 = ($20 | 0) > 0;
 if (!$21) {
  ___assert_fail(12822 | 0, 12758 | 0, 88, 12902 | 0);
 }
 $22 = $3;
 $23 = $1;
 $24 = ($22 | 0) >= ($23 | 0);
 if (!$24) {
  ___assert_fail(12833 | 0, 12758 | 0, 88, 12902 | 0);
 }
 $25 = $4;
 $26 = ($25 | 0) >= 0;
 $27 = $5;
 $28 = ($27 | 0) > 0;
 $or$cond = $26 & $28;
 if (!$or$cond) {
  ___assert_fail(12849 | 0, 12758 | 0, 88, 12902 | 0);
 }
 $29 = $4;
 $30 = $5;
 $31 = $29 + $30 | 0;
 $32 = $2;
 $33 = ($31 | 0) <= ($32 | 0);
 if (!$33) {
  ___assert_fail(12849 | 0, 12758 | 0, 88, 12902 | 0);
 }
 $34 = $start_offset;
 $35 = $0;
 $36 = $35 + $34 | 0;
 $0 = $36;
 $37 = $start_offset;
 $38 = $7;
 $39 = $38 + $37 | 0;
 $7 = $39;
 $40 = $6;
 $41 = ($40 | 0) != 0;
 $42 = $7;
 $43 = $0;
 $44 = $41 ? $42 : $43;
 $preds = $44;
 $45 = $4;
 $46 = ($45 | 0) == 0;
 if ($46) {
  $47 = $0;
  $48 = SAFE_HEAP_LOAD($47 >> 0 | 0, 1, 0) | 0 | 0;
  $49 = $7;
  SAFE_HEAP_STORE($49 >> 0 | 0, $48 | 0, 1);
  $50 = $0;
  $51 = $50 + 1 | 0;
  $52 = $preds;
  $53 = $7;
  $54 = $53 + 1 | 0;
  $55 = $1;
  $56 = $55 - 1 | 0;
  $57 = $6;
  _PredictLine($51, $52, $54, $56, $57);
  $4 = 1;
  $58 = $3;
  $59 = $0;
  $60 = $59 + $58 | 0;
  $0 = $60;
  $61 = $3;
  $62 = $7;
  $63 = $62 + $61 | 0;
  $7 = $63;
 } else {
  $64 = $3;
  $65 = $preds;
  $66 = 0 - $64 | 0;
  $67 = $65 + $66 | 0;
  $preds = $67;
 }
 while (1) {
  $68 = $4;
  $69 = $last_row;
  $70 = ($68 | 0) < ($69 | 0);
  if (!$70) {
   break;
  }
  $71 = $0;
  $72 = $preds;
  $73 = $7;
  $74 = $1;
  $75 = $6;
  _PredictLine($71, $72, $73, $74, $75);
  $76 = $4;
  $77 = $76 + 1 | 0;
  $4 = $77;
  $78 = $3;
  $79 = $preds;
  $80 = $79 + $78 | 0;
  $preds = $80;
  $81 = $3;
  $82 = $0;
  $83 = $82 + $81 | 0;
  $0 = $83;
  $84 = $3;
  $85 = $7;
  $86 = $85 + $84 | 0;
  $7 = $86;
 }
 STACKTOP = sp;
 return;
}

function _VP8GetInfo($data, $data_size, $chunk_size, $width, $height) {
 $data = $data | 0;
 $data_size = $data_size | 0;
 $chunk_size = $chunk_size | 0;
 $width = $width | 0;
 $height = $height | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $9 = 0, $bits = 0, $h = 0, $key_frame = 0, $or$cond = 0, $or$cond3 = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $data;
 $2 = $data_size;
 $3 = $chunk_size;
 $4 = $width;
 $5 = $height;
 $6 = $1;
 $7 = ($6 | 0) == (0 | 0);
 $8 = $2;
 $9 = $8 >>> 0 < 10;
 $or$cond = $7 | $9;
 if ($or$cond) {
  $0 = 0;
  $84 = $0;
  STACKTOP = sp;
  return $84 | 0;
 }
 $10 = $1;
 $11 = $10 + 3 | 0;
 $12 = $2;
 $13 = $12 - 3 | 0;
 $14 = _VP8CheckSignature($11, $13) | 0;
 $15 = ($14 | 0) != 0;
 if (!$15) {
  $0 = 0;
  $84 = $0;
  STACKTOP = sp;
  return $84 | 0;
 }
 $16 = $1;
 $17 = SAFE_HEAP_LOAD($16 >> 0 | 0, 1, 0) | 0 | 0;
 $18 = $17 & 255;
 $19 = $1;
 $20 = $19 + 1 | 0;
 $21 = SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0;
 $22 = $21 & 255;
 $23 = $22 << 8;
 $24 = $18 | $23;
 $25 = $1;
 $26 = $25 + 2 | 0;
 $27 = SAFE_HEAP_LOAD($26 >> 0 | 0, 1, 0) | 0 | 0;
 $28 = $27 & 255;
 $29 = $28 << 16;
 $30 = $24 | $29;
 $bits = $30;
 $31 = $bits;
 $32 = $31 & 1;
 $33 = ($32 | 0) != 0;
 $34 = $33 ^ 1;
 $35 = $34 & 1;
 $key_frame = $35;
 $36 = $1;
 $37 = $36 + 7 | 0;
 $38 = SAFE_HEAP_LOAD($37 >> 0 | 0, 1, 0) | 0 | 0;
 $39 = $38 & 255;
 $40 = $39 << 8;
 $41 = $1;
 $42 = $41 + 6 | 0;
 $43 = SAFE_HEAP_LOAD($42 >> 0 | 0, 1, 0) | 0 | 0;
 $44 = $43 & 255;
 $45 = $40 | $44;
 $46 = $45 & 16383;
 $w = $46;
 $47 = $1;
 $48 = $47 + 9 | 0;
 $49 = SAFE_HEAP_LOAD($48 >> 0 | 0, 1, 0) | 0 | 0;
 $50 = $49 & 255;
 $51 = $50 << 8;
 $52 = $1;
 $53 = $52 + 8 | 0;
 $54 = SAFE_HEAP_LOAD($53 >> 0 | 0, 1, 0) | 0 | 0;
 $55 = $54 & 255;
 $56 = $51 | $55;
 $57 = $56 & 16383;
 $h = $57;
 $58 = $key_frame;
 $59 = ($58 | 0) != 0;
 if (!$59) {
  $0 = 0;
  $84 = $0;
  STACKTOP = sp;
  return $84 | 0;
 }
 $60 = $bits;
 $61 = $60 >>> 1;
 $62 = $61 & 7;
 $63 = $62 >>> 0 > 3;
 if ($63) {
  $0 = 0;
  $84 = $0;
  STACKTOP = sp;
  return $84 | 0;
 }
 $64 = $bits;
 $65 = $64 >>> 4;
 $66 = $65 & 1;
 $67 = ($66 | 0) != 0;
 if (!$67) {
  $0 = 0;
  $84 = $0;
  STACKTOP = sp;
  return $84 | 0;
 }
 $68 = $bits;
 $69 = $68 >>> 5;
 $70 = $3;
 $71 = $69 >>> 0 >= $70 >>> 0;
 if ($71) {
  $0 = 0;
  $84 = $0;
  STACKTOP = sp;
  return $84 | 0;
 }
 $72 = $w;
 $73 = ($72 | 0) == 0;
 $74 = $h;
 $75 = ($74 | 0) == 0;
 $or$cond3 = $73 | $75;
 if ($or$cond3) {
  $0 = 0;
  $84 = $0;
  STACKTOP = sp;
  return $84 | 0;
 }
 $76 = $4;
 $77 = ($76 | 0) != (0 | 0);
 if ($77) {
  $78 = $w;
  $79 = $4;
  SAFE_HEAP_STORE($79 | 0, $78 | 0, 4);
 }
 $80 = $5;
 $81 = ($80 | 0) != (0 | 0);
 if ($81) {
  $82 = $h;
  $83 = $5;
  SAFE_HEAP_STORE($83 | 0, $82 | 0, 4);
 }
 $0 = 1;
 $84 = $0;
 STACKTOP = sp;
 return $84 | 0;
}

function _GetLargeValue($br, $p) {
 $br = $br | 0;
 $p = $p | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $bit0 = 0, $bit1 = 0, $cat = 0, $tab = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $br;
 $1 = $p;
 $2 = $0;
 $3 = $1;
 $4 = $3 + 3 | 0;
 $5 = SAFE_HEAP_LOAD($4 >> 0 | 0, 1, 0) | 0 | 0;
 $6 = $5 & 255;
 $7 = _VP8GetBit82($2, $6) | 0;
 $8 = ($7 | 0) != 0;
 $9 = $0;
 $10 = $1;
 if (!$8) {
  $11 = $10 + 4 | 0;
  $12 = SAFE_HEAP_LOAD($11 >> 0 | 0, 1, 0) | 0 | 0;
  $13 = $12 & 255;
  $14 = _VP8GetBit82($9, $13) | 0;
  $15 = ($14 | 0) != 0;
  if ($15) {
   $16 = $0;
   $17 = $1;
   $18 = $17 + 5 | 0;
   $19 = SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0 | 0;
   $20 = $19 & 255;
   $21 = _VP8GetBit82($16, $20) | 0;
   $22 = 3 + $21 | 0;
   $v = $22;
   $83 = $v;
   STACKTOP = sp;
   return $83 | 0;
  } else {
   $v = 2;
   $83 = $v;
   STACKTOP = sp;
   return $83 | 0;
  }
 }
 $23 = $10 + 6 | 0;
 $24 = SAFE_HEAP_LOAD($23 >> 0 | 0, 1, 0) | 0 | 0;
 $25 = $24 & 255;
 $26 = _VP8GetBit82($9, $25) | 0;
 $27 = ($26 | 0) != 0;
 $28 = $0;
 $29 = $1;
 if ($27) {
  $45 = $29 + 8 | 0;
  $46 = SAFE_HEAP_LOAD($45 >> 0 | 0, 1, 0) | 0 | 0;
  $47 = $46 & 255;
  $48 = _VP8GetBit82($28, $47) | 0;
  $bit1 = $48;
  $49 = $0;
  $50 = $bit1;
  $51 = 9 + $50 | 0;
  $52 = $1;
  $53 = $52 + $51 | 0;
  $54 = SAFE_HEAP_LOAD($53 >> 0 | 0, 1, 0) | 0 | 0;
  $55 = $54 & 255;
  $56 = _VP8GetBit82($49, $55) | 0;
  $bit0 = $56;
  $57 = $bit1;
  $58 = $57 << 1;
  $59 = $bit0;
  $60 = $58 + $59 | 0;
  $cat = $60;
  $v = 0;
  $61 = $cat;
  $62 = 292 + ($61 << 2) | 0;
  $63 = SAFE_HEAP_LOAD($62 | 0, 4, 0) | 0 | 0;
  $tab = $63;
  while (1) {
   $64 = $tab;
   $65 = SAFE_HEAP_LOAD($64 >> 0 | 0, 1, 0) | 0 | 0;
   $66 = $65 << 24 >> 24 != 0;
   if (!$66) {
    break;
   }
   $67 = $v;
   $68 = $0;
   $69 = $tab;
   $70 = SAFE_HEAP_LOAD($69 >> 0 | 0, 1, 0) | 0 | 0;
   $71 = $70 & 255;
   $72 = _VP8GetBit82($68, $71) | 0;
   $73 = $67 + $72 | 0;
   $74 = $v;
   $75 = $74 + $73 | 0;
   $v = $75;
   $76 = $tab;
   $77 = $76 + 1 | 0;
   $tab = $77;
  }
  $78 = $cat;
  $79 = 8 << $78;
  $80 = 3 + $79 | 0;
  $81 = $v;
  $82 = $81 + $80 | 0;
  $v = $82;
  $83 = $v;
  STACKTOP = sp;
  return $83 | 0;
 } else {
  $30 = $29 + 7 | 0;
  $31 = SAFE_HEAP_LOAD($30 >> 0 | 0, 1, 0) | 0 | 0;
  $32 = $31 & 255;
  $33 = _VP8GetBit82($28, $32) | 0;
  $34 = ($33 | 0) != 0;
  $35 = $0;
  if ($34) {
   $38 = _VP8GetBit82($35, 165) | 0;
   $39 = $38 << 1;
   $40 = 7 + $39 | 0;
   $v = $40;
   $41 = $0;
   $42 = _VP8GetBit82($41, 145) | 0;
   $43 = $v;
   $44 = $43 + $42 | 0;
   $v = $44;
   $83 = $v;
   STACKTOP = sp;
   return $83 | 0;
  } else {
   $36 = _VP8GetBit82($35, 159) | 0;
   $37 = 5 + $36 | 0;
   $v = $37;
   $83 = $v;
   STACKTOP = sp;
   return $83 | 0;
  }
 }
 return 0 | 0;
}

function _ParseVP8Header($data_ptr, $data_size, $have_all_data, $riff_size, $chunk_size, $is_lossless) {
 $data_ptr = $data_ptr | 0;
 $data_size = $data_size | 0;
 $have_all_data = $have_all_data | 0;
 $riff_size = $riff_size | 0;
 $chunk_size = $chunk_size | 0;
 $is_lossless = $is_lossless | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $7 = 0, $8 = 0, $9 = 0, $data = 0, $is_vp8 = 0, $is_vp8l = 0, $minimal_size = 0, $or$cond = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $data_ptr;
 $2 = $data_size;
 $3 = $have_all_data;
 $4 = $riff_size;
 $5 = $chunk_size;
 $6 = $is_lossless;
 $7 = $1;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $data = $8;
 $9 = $data;
 $10 = _memcmp($9, 8742, 4) | 0;
 $11 = ($10 | 0) != 0;
 $12 = $11 ^ 1;
 $13 = $12 & 1;
 $is_vp8 = $13;
 $14 = $data;
 $15 = _memcmp($14, 8747, 4) | 0;
 $16 = ($15 | 0) != 0;
 $17 = $16 ^ 1;
 $18 = $17 & 1;
 $is_vp8l = $18;
 $minimal_size = 12;
 $19 = $data;
 $20 = ($19 | 0) != (0 | 0);
 if (!$20) {
  ___assert_fail(8752 | 0, 8703 | 0, 232, 8765 | 0);
 }
 $21 = $2;
 $22 = ($21 | 0) != (0 | 0);
 if (!$22) {
  ___assert_fail(8780 | 0, 8703 | 0, 233, 8765 | 0);
 }
 $23 = $5;
 $24 = ($23 | 0) != (0 | 0);
 if (!$24) {
  ___assert_fail(8798 | 0, 8703 | 0, 234, 8765 | 0);
 }
 $25 = $6;
 $26 = ($25 | 0) != (0 | 0);
 if (!$26) {
  ___assert_fail(8817 | 0, 8703 | 0, 235, 8765 | 0);
 }
 $27 = $2;
 $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
 $29 = $28 >>> 0 < 8;
 if ($29) {
  $0 = 7;
  $67 = $0;
  STACKTOP = sp;
  return $67 | 0;
 }
 $30 = $is_vp8;
 $31 = ($30 | 0) != 0;
 $32 = $is_vp8l;
 $33 = ($32 | 0) != 0;
 $or$cond = $31 | $33;
 $34 = $data;
 if ($or$cond) {
  $35 = $34 + 4 | 0;
  $36 = _GetLE32($35) | 0;
  $size = $36;
  $37 = $4;
  $38 = $37 >>> 0 >= 12;
  if ($38) {
   $39 = $size;
   $40 = $4;
   $41 = $40 - 12 | 0;
   $42 = $39 >>> 0 > $41 >>> 0;
   if ($42) {
    $0 = 3;
    $67 = $0;
    STACKTOP = sp;
    return $67 | 0;
   }
  }
  $43 = $3;
  $44 = ($43 | 0) != 0;
  if ($44) {
   $45 = $size;
   $46 = $2;
   $47 = SAFE_HEAP_LOAD($46 | 0, 4, 0) | 0 | 0;
   $48 = $47 - 8 | 0;
   $49 = $45 >>> 0 > $48 >>> 0;
   if ($49) {
    $0 = 7;
    $67 = $0;
    STACKTOP = sp;
    return $67 | 0;
   }
  }
  $50 = $size;
  $51 = $5;
  SAFE_HEAP_STORE($51 | 0, $50 | 0, 4);
  $52 = $1;
  $53 = SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0;
  $54 = $53 + 8 | 0;
  SAFE_HEAP_STORE($52 | 0, $54 | 0, 4);
  $55 = $2;
  $56 = SAFE_HEAP_LOAD($55 | 0, 4, 0) | 0 | 0;
  $57 = $56 - 8 | 0;
  SAFE_HEAP_STORE($55 | 0, $57 | 0, 4);
  $58 = $is_vp8l;
  $59 = $6;
  SAFE_HEAP_STORE($59 | 0, $58 | 0, 4);
 } else {
  $60 = $2;
  $61 = SAFE_HEAP_LOAD($60 | 0, 4, 0) | 0 | 0;
  $62 = _VP8LCheckSignature($34, $61) | 0;
  $63 = $6;
  SAFE_HEAP_STORE($63 | 0, $62 | 0, 4);
  $64 = $2;
  $65 = SAFE_HEAP_LOAD($64 | 0, 4, 0) | 0 | 0;
  $66 = $5;
  SAFE_HEAP_STORE($66 | 0, $65 | 0, 4);
 }
 $0 = 0;
 $67 = $0;
 STACKTOP = sp;
 return $67 | 0;
}

function _ExportRGB($p, $y_pos) {
 $p = $p | 0;
 $y_pos = $y_pos | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $buf = 0, $convert = 0, $dst = 0, $num_lines_out = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $p;
 $1 = $y_pos;
 $2 = $0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = 816 + ($4 << 2) | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $convert = $6;
 $7 = $0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $9 = $8 + 16 | 0;
 $buf = $9;
 $10 = $buf;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = $1;
 $13 = $buf;
 $14 = $13 + 4 | 0;
 $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
 $16 = Math_imul($12, $15) | 0;
 $17 = $11 + $16 | 0;
 $dst = $17;
 $num_lines_out = 0;
 while (1) {
  $18 = $0;
  $19 = $18 + 24 | 0;
  $20 = _WebPRescalerHasPendingOutput($19) | 0;
  $21 = ($20 | 0) != 0;
  if (!$21) {
   label = 9;
   break;
  }
  $22 = $0;
  $23 = $22 + 108 | 0;
  $24 = _WebPRescalerHasPendingOutput($23) | 0;
  $25 = ($24 | 0) != 0;
  if (!$25) {
   label = 9;
   break;
  }
  $26 = $1;
  $27 = $num_lines_out;
  $28 = $26 + $27 | 0;
  $29 = $0;
  $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
  $31 = $30 + 8 | 0;
  $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
  $33 = ($28 | 0) < ($32 | 0);
  if (!$33) {
   label = 5;
   break;
  }
  $34 = $0;
  $35 = $34 + 108 | 0;
  $36 = $35 + 24 | 0;
  $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
  $38 = $0;
  $39 = $38 + 192 | 0;
  $40 = $39 + 24 | 0;
  $41 = SAFE_HEAP_LOAD($40 | 0, 4, 0) | 0 | 0;
  $42 = ($37 | 0) == ($41 | 0);
  if (!$42) {
   label = 7;
   break;
  }
  $43 = $0;
  $44 = $43 + 24 | 0;
  _WebPRescalerExportRow($44);
  $45 = $0;
  $46 = $45 + 108 | 0;
  _WebPRescalerExportRow($46);
  $47 = $0;
  $48 = $47 + 192 | 0;
  _WebPRescalerExportRow($48);
  $49 = $convert;
  $50 = $0;
  $51 = $50 + 24 | 0;
  $52 = $51 + 68 | 0;
  $53 = SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0;
  $54 = $0;
  $55 = $54 + 108 | 0;
  $56 = $55 + 68 | 0;
  $57 = SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0;
  $58 = $0;
  $59 = $58 + 192 | 0;
  $60 = $59 + 68 | 0;
  $61 = SAFE_HEAP_LOAD($60 | 0, 4, 0) | 0 | 0;
  $62 = $dst;
  $63 = $0;
  $64 = $63 + 24 | 0;
  $65 = $64 + 52 | 0;
  $66 = SAFE_HEAP_LOAD($65 | 0, 4, 0) | 0 | 0;
  FUNCTION_TABLE_viiiii[(SAFE_FT_MASK($49 | 0, 255 | 0) | 0) & 255]($53, $57, $61, $62, $66);
  $67 = $buf;
  $68 = $67 + 4 | 0;
  $69 = SAFE_HEAP_LOAD($68 | 0, 4, 0) | 0 | 0;
  $70 = $dst;
  $71 = $70 + $69 | 0;
  $dst = $71;
  $72 = $num_lines_out;
  $73 = $72 + 1 | 0;
  $num_lines_out = $73;
 }
 if ((label | 0) == 5) {
  ___assert_fail(3231 | 0, 3071 | 0, 344, 3305 | 0);
 } else if ((label | 0) == 7) {
  ___assert_fail(3315 | 0, 3071 | 0, 345, 3305 | 0);
 } else if ((label | 0) == 9) {
  $74 = $num_lines_out;
  STACKTOP = sp;
  return $74 | 0;
 }
 return 0 | 0;
}

function _VE4($dst) {
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $i = 0, $top = 0, $vals = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vals = sp + 12 | 0;
 $0 = $dst;
 $1 = $0;
 $2 = $1 + -32 | 0;
 $top = $2;
 $3 = $top;
 $4 = $3 + -1 | 0;
 $5 = SAFE_HEAP_LOAD($4 >> 0 | 0, 1, 0) | 0 | 0;
 $6 = $5 & 255;
 $7 = $top;
 $8 = SAFE_HEAP_LOAD($7 >> 0 | 0, 1, 0) | 0 | 0;
 $9 = $8 & 255;
 $10 = $9 << 1;
 $11 = $6 + $10 | 0;
 $12 = $top;
 $13 = $12 + 1 | 0;
 $14 = SAFE_HEAP_LOAD($13 >> 0 | 0, 1, 0) | 0 | 0;
 $15 = $14 & 255;
 $16 = $11 + $15 | 0;
 $17 = $16 + 2 | 0;
 $18 = $17 >> 2;
 $19 = $18 & 255;
 SAFE_HEAP_STORE($vals >> 0 | 0, $19 | 0, 1);
 $20 = $vals + 1 | 0;
 $21 = $top;
 $22 = SAFE_HEAP_LOAD($21 >> 0 | 0, 1, 0) | 0 | 0;
 $23 = $22 & 255;
 $24 = $top;
 $25 = $24 + 1 | 0;
 $26 = SAFE_HEAP_LOAD($25 >> 0 | 0, 1, 0) | 0 | 0;
 $27 = $26 & 255;
 $28 = $27 << 1;
 $29 = $23 + $28 | 0;
 $30 = $top;
 $31 = $30 + 2 | 0;
 $32 = SAFE_HEAP_LOAD($31 >> 0 | 0, 1, 0) | 0 | 0;
 $33 = $32 & 255;
 $34 = $29 + $33 | 0;
 $35 = $34 + 2 | 0;
 $36 = $35 >> 2;
 $37 = $36 & 255;
 SAFE_HEAP_STORE($20 >> 0 | 0, $37 | 0, 1);
 $38 = $20 + 1 | 0;
 $39 = $top;
 $40 = $39 + 1 | 0;
 $41 = SAFE_HEAP_LOAD($40 >> 0 | 0, 1, 0) | 0 | 0;
 $42 = $41 & 255;
 $43 = $top;
 $44 = $43 + 2 | 0;
 $45 = SAFE_HEAP_LOAD($44 >> 0 | 0, 1, 0) | 0 | 0;
 $46 = $45 & 255;
 $47 = $46 << 1;
 $48 = $42 + $47 | 0;
 $49 = $top;
 $50 = $49 + 3 | 0;
 $51 = SAFE_HEAP_LOAD($50 >> 0 | 0, 1, 0) | 0 | 0;
 $52 = $51 & 255;
 $53 = $48 + $52 | 0;
 $54 = $53 + 2 | 0;
 $55 = $54 >> 2;
 $56 = $55 & 255;
 SAFE_HEAP_STORE($38 >> 0 | 0, $56 | 0, 1);
 $57 = $38 + 1 | 0;
 $58 = $top;
 $59 = $58 + 2 | 0;
 $60 = SAFE_HEAP_LOAD($59 >> 0 | 0, 1, 0) | 0 | 0;
 $61 = $60 & 255;
 $62 = $top;
 $63 = $62 + 3 | 0;
 $64 = SAFE_HEAP_LOAD($63 >> 0 | 0, 1, 0) | 0 | 0;
 $65 = $64 & 255;
 $66 = $65 << 1;
 $67 = $61 + $66 | 0;
 $68 = $top;
 $69 = $68 + 4 | 0;
 $70 = SAFE_HEAP_LOAD($69 >> 0 | 0, 1, 0) | 0 | 0;
 $71 = $70 & 255;
 $72 = $67 + $71 | 0;
 $73 = $72 + 2 | 0;
 $74 = $73 >> 2;
 $75 = $74 & 255;
 SAFE_HEAP_STORE($57 >> 0 | 0, $75 | 0, 1);
 $i = 0;
 while (1) {
  $76 = $i;
  $77 = ($76 | 0) < 4;
  if (!$77) {
   break;
  }
  $78 = $0;
  $79 = $i;
  $80 = $79 << 5;
  $81 = $78 + $80 | 0;
  {}
  SAFE_HEAP_STORE($81 >> 0 | 0, SAFE_HEAP_LOAD($vals >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($81 + 1 >> 0 | 0, SAFE_HEAP_LOAD($vals + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($81 + 2 >> 0 | 0, SAFE_HEAP_LOAD($vals + 2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($81 + 3 >> 0 | 0, SAFE_HEAP_LOAD($vals + 3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  $82 = $i;
  $83 = $82 + 1 | 0;
  $i = $83;
 }
 STACKTOP = sp;
 return;
}

function _HU4($dst) {
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $84 = 0, $85 = 0, $86 = 0, $87 = 0, $88 = 0, $89 = 0, $9 = 0, $90 = 0, $91 = 0, $92 = 0, $93 = 0, $94 = 0, $I = 0, $J = 0, $K = 0, $L = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dst;
 $1 = $0;
 $2 = $1 + -1 | 0;
 $3 = SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0;
 $4 = $3 & 255;
 $I = $4;
 $5 = $0;
 $6 = $5 + 31 | 0;
 $7 = SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0;
 $8 = $7 & 255;
 $J = $8;
 $9 = $0;
 $10 = $9 + 63 | 0;
 $11 = SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0 | 0;
 $12 = $11 & 255;
 $K = $12;
 $13 = $0;
 $14 = $13 + 95 | 0;
 $15 = SAFE_HEAP_LOAD($14 >> 0 | 0, 1, 0) | 0 | 0;
 $16 = $15 & 255;
 $L = $16;
 $17 = $I;
 $18 = $J;
 $19 = $17 + $18 | 0;
 $20 = $19 + 1 | 0;
 $21 = $20 >> 1;
 $22 = $21 & 255;
 $23 = $0;
 SAFE_HEAP_STORE($23 >> 0 | 0, $22 | 0, 1);
 $24 = $J;
 $25 = $K;
 $26 = $24 + $25 | 0;
 $27 = $26 + 1 | 0;
 $28 = $27 >> 1;
 $29 = $28 & 255;
 $30 = $0;
 $31 = $30 + 32 | 0;
 SAFE_HEAP_STORE($31 >> 0 | 0, $29 | 0, 1);
 $32 = $0;
 $33 = $32 + 2 | 0;
 SAFE_HEAP_STORE($33 >> 0 | 0, $29 | 0, 1);
 $34 = $K;
 $35 = $L;
 $36 = $34 + $35 | 0;
 $37 = $36 + 1 | 0;
 $38 = $37 >> 1;
 $39 = $38 & 255;
 $40 = $0;
 $41 = $40 + 64 | 0;
 SAFE_HEAP_STORE($41 >> 0 | 0, $39 | 0, 1);
 $42 = $0;
 $43 = $42 + 34 | 0;
 SAFE_HEAP_STORE($43 >> 0 | 0, $39 | 0, 1);
 $44 = $I;
 $45 = $J;
 $46 = $45 << 1;
 $47 = $44 + $46 | 0;
 $48 = $K;
 $49 = $47 + $48 | 0;
 $50 = $49 + 2 | 0;
 $51 = $50 >> 2;
 $52 = $51 & 255;
 $53 = $0;
 $54 = $53 + 1 | 0;
 SAFE_HEAP_STORE($54 >> 0 | 0, $52 | 0, 1);
 $55 = $J;
 $56 = $K;
 $57 = $56 << 1;
 $58 = $55 + $57 | 0;
 $59 = $L;
 $60 = $58 + $59 | 0;
 $61 = $60 + 2 | 0;
 $62 = $61 >> 2;
 $63 = $62 & 255;
 $64 = $0;
 $65 = $64 + 33 | 0;
 SAFE_HEAP_STORE($65 >> 0 | 0, $63 | 0, 1);
 $66 = $0;
 $67 = $66 + 3 | 0;
 SAFE_HEAP_STORE($67 >> 0 | 0, $63 | 0, 1);
 $68 = $K;
 $69 = $L;
 $70 = $69 << 1;
 $71 = $68 + $70 | 0;
 $72 = $L;
 $73 = $71 + $72 | 0;
 $74 = $73 + 2 | 0;
 $75 = $74 >> 2;
 $76 = $75 & 255;
 $77 = $0;
 $78 = $77 + 65 | 0;
 SAFE_HEAP_STORE($78 >> 0 | 0, $76 | 0, 1);
 $79 = $0;
 $80 = $79 + 35 | 0;
 SAFE_HEAP_STORE($80 >> 0 | 0, $76 | 0, 1);
 $81 = $L;
 $82 = $81 & 255;
 $83 = $0;
 $84 = $83 + 99 | 0;
 SAFE_HEAP_STORE($84 >> 0 | 0, $82 | 0, 1);
 $85 = $0;
 $86 = $85 + 98 | 0;
 SAFE_HEAP_STORE($86 >> 0 | 0, $82 | 0, 1);
 $87 = $0;
 $88 = $87 + 97 | 0;
 SAFE_HEAP_STORE($88 >> 0 | 0, $82 | 0, 1);
 $89 = $0;
 $90 = $89 + 96 | 0;
 SAFE_HEAP_STORE($90 >> 0 | 0, $82 | 0, 1);
 $91 = $0;
 $92 = $91 + 66 | 0;
 SAFE_HEAP_STORE($92 >> 0 | 0, $82 | 0, 1);
 $93 = $0;
 $94 = $93 + 67 | 0;
 SAFE_HEAP_STORE($94 >> 0 | 0, $82 | 0, 1);
 STACKTOP = sp;
 return;
}

function _WebPRescalerImport($wrk, $num_lines, $src, $src_stride) {
 $wrk = $wrk | 0;
 $num_lines = $num_lines | 0;
 $src = $src | 0;
 $src_stride = $src_stride | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $tmp = 0, $total_imported = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $wrk;
 $1 = $num_lines;
 $2 = $src;
 $3 = $src_stride;
 $total_imported = 0;
 while (1) {
  $4 = $total_imported;
  $5 = $1;
  $6 = ($4 | 0) < ($5 | 0);
  if (!$6) {
   label = 11;
   break;
  }
  $7 = $0;
  $8 = _WebPRescalerHasPendingOutput1038($7) | 0;
  $9 = ($8 | 0) != 0;
  $10 = $9 ^ 1;
  if (!$10) {
   label = 11;
   break;
  }
  $11 = $0;
  $12 = $11 + 4 | 0;
  $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
  $14 = ($13 | 0) != 0;
  if ($14) {
   $15 = $0;
   $16 = $15 + 76 | 0;
   $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
   $tmp = $17;
   $18 = $0;
   $19 = $18 + 80 | 0;
   $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
   $21 = $0;
   $22 = $21 + 76 | 0;
   SAFE_HEAP_STORE($22 | 0, $20 | 0, 4);
   $23 = $tmp;
   $24 = $0;
   $25 = $24 + 80 | 0;
   SAFE_HEAP_STORE($25 | 0, $23 | 0, 4);
  }
  $26 = $0;
  $27 = $2;
  _WebPRescalerImportRow($26, $27);
  $28 = $0;
  $29 = $28 + 4 | 0;
  $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
  $31 = ($30 | 0) != 0;
  L8 : do {
   if (!$31) {
    $x = 0;
    while (1) {
     $32 = $x;
     $33 = $0;
     $34 = $33 + 8 | 0;
     $35 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
     $36 = $0;
     $37 = $36 + 52 | 0;
     $38 = SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0;
     $39 = Math_imul($35, $38) | 0;
     $40 = ($32 | 0) < ($39 | 0);
     if (!$40) {
      break L8;
     }
     $41 = $x;
     $42 = $0;
     $43 = $42 + 80 | 0;
     $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
     $45 = $44 + ($41 << 2) | 0;
     $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
     $47 = $x;
     $48 = $0;
     $49 = $48 + 76 | 0;
     $50 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0;
     $51 = $50 + ($47 << 2) | 0;
     $52 = SAFE_HEAP_LOAD($51 | 0, 4, 0) | 0 | 0;
     $53 = $52 + $46 | 0;
     SAFE_HEAP_STORE($51 | 0, $53 | 0, 4);
     $54 = $x;
     $55 = $54 + 1 | 0;
     $x = $55;
    }
   }
  } while (0);
  $56 = $0;
  $57 = $56 + 60 | 0;
  $58 = SAFE_HEAP_LOAD($57 | 0, 4, 0) | 0 | 0;
  $59 = $58 + 1 | 0;
  SAFE_HEAP_STORE($57 | 0, $59 | 0, 4);
  $60 = $3;
  $61 = $2;
  $62 = $61 + $60 | 0;
  $2 = $62;
  $63 = $total_imported;
  $64 = $63 + 1 | 0;
  $total_imported = $64;
  $65 = $0;
  $66 = $65 + 32 | 0;
  $67 = SAFE_HEAP_LOAD($66 | 0, 4, 0) | 0 | 0;
  $68 = $0;
  $69 = $68 + 24 | 0;
  $70 = SAFE_HEAP_LOAD($69 | 0, 4, 0) | 0 | 0;
  $71 = $70 - $67 | 0;
  SAFE_HEAP_STORE($69 | 0, $71 | 0, 4);
 }
 if ((label | 0) == 11) {
  $72 = $total_imported;
  STACKTOP = sp;
  return $72 | 0;
 }
 return 0 | 0;
}

function _VP8InitDithering($options, $dec) {
 $options = $options | 0;
 $dec = $dec | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $8 = 0, $9 = 0, $all_amp = 0, $d = 0, $dqm = 0, $f = 0, $idx = 0, $max_amp = 0, $s = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $options;
 $1 = $dec;
 $2 = $1;
 $3 = ($2 | 0) != (0 | 0);
 if (!$3) {
  ___assert_fail(7168 | 0, 2535 | 0, 327, 2558 | 0);
 }
 $4 = $0;
 $5 = ($4 | 0) != (0 | 0);
 if (!$5) {
  STACKTOP = sp;
  return;
 }
 $6 = $0;
 $7 = $6 + 44 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $d = $8;
 $max_amp = 255;
 $9 = $d;
 $10 = ($9 | 0) < 0;
 if ($10) {
  $16 = 0;
 } else {
  $11 = $d;
  $12 = ($11 | 0) > 100;
  if ($12) {
   $16 = 255;
  } else {
   $13 = $d;
   $14 = $13 * 255 | 0;
   $15 = ($14 | 0) / 100 & -1;
   $16 = $15;
  }
 }
 $f = $16;
 $17 = $f;
 $18 = ($17 | 0) > 0;
 if ($18) {
  $all_amp = 0;
  $s = 0;
  while (1) {
   $19 = $s;
   $20 = ($19 | 0) < 4;
   if (!$20) {
    break;
   }
   $21 = $s;
   $22 = $1;
   $23 = $22 + 776 | 0;
   $24 = $23 + ($21 << 5) | 0;
   $dqm = $24;
   $25 = $dqm;
   $26 = $25 + 24 | 0;
   $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
   $28 = ($27 | 0) < 12;
   if ($28) {
    $29 = $dqm;
    $30 = $29 + 24 | 0;
    $31 = SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0;
    $32 = ($31 | 0) < 0;
    if ($32) {
     $36 = 0;
    } else {
     $33 = $dqm;
     $34 = $33 + 24 | 0;
     $35 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
     $36 = $35;
    }
    $idx = $36;
    $37 = $f;
    $38 = $idx;
    $39 = 112 + ($38 << 2) | 0;
    $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
    $41 = Math_imul($37, $40) | 0;
    $42 = $41 >> 3;
    $43 = $dqm;
    $44 = $43 + 28 | 0;
    SAFE_HEAP_STORE($44 | 0, $42 | 0, 4);
   }
   $45 = $dqm;
   $46 = $45 + 28 | 0;
   $47 = SAFE_HEAP_LOAD($46 | 0, 4, 0) | 0 | 0;
   $48 = $all_amp;
   $49 = $48 | $47;
   $all_amp = $49;
   $50 = $s;
   $51 = $50 + 1 | 0;
   $s = $51;
  }
  $52 = $all_amp;
  $53 = ($52 | 0) != 0;
  if ($53) {
   $54 = $1;
   $55 = $54 + 544 | 0;
   _VP8InitRandom($55, 1.0);
   $56 = $1;
   $57 = $56 + 540 | 0;
   SAFE_HEAP_STORE($57 | 0, 1 | 0, 4);
  }
 }
 $58 = $0;
 $59 = $58 + 52 | 0;
 $60 = SAFE_HEAP_LOAD($59 | 0, 4, 0) | 0 | 0;
 $61 = $1;
 $62 = $61 + 2364 | 0;
 SAFE_HEAP_STORE($62 | 0, $60 | 0, 4);
 $63 = $1;
 $64 = $63 + 2364 | 0;
 $65 = SAFE_HEAP_LOAD($64 | 0, 4, 0) | 0 | 0;
 $66 = ($65 | 0) > 100;
 $67 = $1;
 $68 = $67 + 2364 | 0;
 if ($66) {
  SAFE_HEAP_STORE($68 | 0, 100 | 0, 4);
  STACKTOP = sp;
  return;
 }
 $69 = SAFE_HEAP_LOAD($68 | 0, 4, 0) | 0 | 0;
 $70 = ($69 | 0) < 0;
 if (!$70) {
  STACKTOP = sp;
  return;
 }
 $71 = $1;
 $72 = $71 + 2364 | 0;
 SAFE_HEAP_STORE($72 | 0, 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function _ParseFrame($dec, $io) {
 $dec = $dec | 0;
 $io = $io | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $token_br = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $dec;
 $2 = $io;
 $3 = $1;
 $4 = $3 + 2300 | 0;
 SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
 L1 : while (1) {
  $5 = $1;
  $6 = $5 + 2300 | 0;
  $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
  $8 = $1;
  $9 = $8 + 308 | 0;
  $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
  $11 = ($7 | 0) < ($10 | 0);
  $12 = $1;
  if (!$11) {
   label = 12;
   break;
  }
  $13 = $12 + 2300 | 0;
  $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
  $15 = $1;
  $16 = $15 + 312 | 0;
  $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
  $18 = $17 - 1 | 0;
  $19 = $14 & $18;
  $20 = $1;
  $21 = $20 + 316 | 0;
  $22 = $21 + ($19 * 28 | 0) | 0;
  $token_br = $22;
  $23 = $1;
  $24 = $23 + 12 | 0;
  $25 = $1;
  $26 = _VP8ParseIntraModeRow($24, $25) | 0;
  $27 = ($26 | 0) != 0;
  if (!$27) {
   label = 4;
   break;
  }
  while (1) {
   $30 = $1;
   $31 = $30 + 2296 | 0;
   $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
   $33 = $1;
   $34 = $33 + 288 | 0;
   $35 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
   $36 = ($32 | 0) < ($35 | 0);
   $37 = $1;
   if (!$36) {
    break;
   }
   $38 = $token_br;
   $39 = _VP8DecodeMB($37, $38) | 0;
   $40 = ($39 | 0) != 0;
   $41 = $1;
   if (!$40) {
    label = 7;
    break L1;
   }
   $43 = $41 + 2296 | 0;
   $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
   $45 = $44 + 1 | 0;
   SAFE_HEAP_STORE($43 | 0, $45 | 0, 4);
  }
  _VP8InitScanline($37);
  $46 = $1;
  $47 = $2;
  $48 = _VP8ProcessRow($46, $47) | 0;
  $49 = ($48 | 0) != 0;
  $50 = $1;
  if (!$49) {
   label = 10;
   break;
  }
  $52 = $50 + 2300 | 0;
  $53 = SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0;
  $54 = $53 + 1 | 0;
  SAFE_HEAP_STORE($52 | 0, $54 | 0, 4);
 }
 if ((label | 0) == 4) {
  $28 = $1;
  $29 = _VP8SetError($28, 7, 6977) | 0;
  $0 = $29;
  $65 = $0;
  STACKTOP = sp;
  return $65 | 0;
 } else if ((label | 0) == 7) {
  $42 = _VP8SetError($41, 7, 7018) | 0;
  $0 = $42;
  $65 = $0;
  STACKTOP = sp;
  return $65 | 0;
 } else if ((label | 0) == 10) {
  $51 = _VP8SetError($50, 6, 7053) | 0;
  $0 = $51;
  $65 = $0;
  STACKTOP = sp;
  return $65 | 0;
 } else if ((label | 0) == 12) {
  $55 = $12 + 148 | 0;
  $56 = SAFE_HEAP_LOAD($55 | 0, 4, 0) | 0 | 0;
  $57 = ($56 | 0) > 0;
  if ($57) {
   $58 = _WebPGetWorkerInterface() | 0;
   $59 = $58 + 8 | 0;
   $60 = SAFE_HEAP_LOAD($59 | 0, 4, 0) | 0 | 0;
   $61 = $1;
   $62 = $61 + 124 | 0;
   $63 = FUNCTION_TABLE_ii[(SAFE_FT_MASK($60 | 0, 15 | 0) | 0) & 15]($62) | 0;
   $64 = ($63 | 0) != 0;
   if (!$64) {
    $0 = 0;
    $65 = $0;
    STACKTOP = sp;
    return $65 | 0;
   }
  }
  $0 = 1;
  $65 = $0;
  STACKTOP = sp;
  return $65 | 0;
 }
 return 0 | 0;
}

function _EmitAlphaRGB($io, $p, $expected_num_lines_out) {
 $io = $io | 0;
 $p = $p | 0;
 $expected_num_lines_out = $expected_num_lines_out | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $alpha = 0, $alpha_first = 0, $base_rgba = 0, $buf = 0, $colorspace = 0, $dst = 0, $has_alpha = 0, $mb_w = 0, $num_rows = 0, $start_y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $alpha = sp + 36 | 0;
 $num_rows = sp + 16 | 0;
 $0 = $io;
 $1 = $p;
 $2 = $expected_num_lines_out;
 $3 = $0;
 $4 = $3 + 104 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($alpha | 0, $5 | 0, 4);
 $6 = SAFE_HEAP_LOAD($alpha | 0, 4, 0) | 0 | 0;
 $7 = ($6 | 0) != (0 | 0);
 if (!$7) {
  STACKTOP = sp;
  return 0;
 }
 $8 = $0;
 $9 = $8 + 12 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $mb_w = $10;
 $11 = $1;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
 $colorspace = $13;
 $14 = $colorspace;
 $15 = ($14 | 0) == 4;
 $16 = $colorspace;
 $17 = ($16 | 0) == 9;
 $18 = $15 ? 1 : $17;
 $19 = $18 & 1;
 $alpha_first = $19;
 $20 = $1;
 $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
 $22 = $21 + 16 | 0;
 $buf = $22;
 $23 = $0;
 $24 = _GetAlphaSourceRow($23, $alpha, $num_rows) | 0;
 $start_y = $24;
 $25 = $buf;
 $26 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
 $27 = $start_y;
 $28 = $buf;
 $29 = $28 + 4 | 0;
 $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
 $31 = Math_imul($27, $30) | 0;
 $32 = $26 + $31 | 0;
 $base_rgba = $32;
 $33 = $base_rgba;
 $34 = $alpha_first;
 $35 = ($34 | 0) != 0;
 $36 = $35 ? 0 : 3;
 $37 = $33 + $36 | 0;
 $dst = $37;
 $38 = SAFE_HEAP_LOAD(396 | 0, 4, 0) | 0 | 0;
 $39 = SAFE_HEAP_LOAD($alpha | 0, 4, 0) | 0 | 0;
 $40 = $0;
 $41 = SAFE_HEAP_LOAD($40 | 0, 4, 0) | 0 | 0;
 $42 = $mb_w;
 $43 = SAFE_HEAP_LOAD($num_rows | 0, 4, 0) | 0 | 0;
 $44 = $dst;
 $45 = $buf;
 $46 = $45 + 4 | 0;
 $47 = SAFE_HEAP_LOAD($46 | 0, 4, 0) | 0 | 0;
 $48 = FUNCTION_TABLE_iiiiiii[(SAFE_FT_MASK($38 | 0, 63 | 0) | 0) & 63]($39, $41, $42, $43, $44, $47) | 0;
 $has_alpha = $48;
 $49 = $2;
 $50 = SAFE_HEAP_LOAD($num_rows | 0, 4, 0) | 0 | 0;
 $51 = ($49 | 0) == ($50 | 0);
 if (!$51) {
  ___assert_fail(3104 | 0, 3071 | 0, 190, 3139 | 0);
 }
 $52 = $has_alpha;
 $53 = ($52 | 0) != 0;
 if (!$53) {
  STACKTOP = sp;
  return 0;
 }
 $54 = $colorspace;
 $55 = _WebPIsPremultipliedMode($54) | 0;
 $56 = ($55 | 0) != 0;
 if (!$56) {
  STACKTOP = sp;
  return 0;
 }
 $57 = SAFE_HEAP_LOAD(388 | 0, 4, 0) | 0 | 0;
 $58 = $base_rgba;
 $59 = $alpha_first;
 $60 = $mb_w;
 $61 = SAFE_HEAP_LOAD($num_rows | 0, 4, 0) | 0 | 0;
 $62 = $buf;
 $63 = $62 + 4 | 0;
 $64 = SAFE_HEAP_LOAD($63 | 0, 4, 0) | 0 | 0;
 FUNCTION_TABLE_viiiii[(SAFE_FT_MASK($57 | 0, 255 | 0) | 0) & 255]($58, $59, $60, $61, $64);
 STACKTOP = sp;
 return 0;
}

function _GetCoeffs($br, $prob, $ctx, $dq, $n, $out) {
 $br = $br | 0;
 $prob = $prob | 0;
 $ctx = $ctx | 0;
 $dq = $dq | 0;
 $n = $n | 0;
 $out = $out | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $8 = 0, $9 = 0, $p = 0, $p_ctx = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $br;
 $2 = $prob;
 $3 = $ctx;
 $4 = $dq;
 $5 = $n;
 $6 = $out;
 $7 = $3;
 $8 = $5;
 $9 = $2;
 $10 = $9 + ($8 << 2) | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = $11 + ($7 * 11 | 0) | 0;
 $p = $12;
 L1 : while (1) {
  $13 = $5;
  $14 = ($13 | 0) < 16;
  if (!$14) {
   label = 12;
   break;
  }
  $15 = $1;
  $16 = $p;
  $17 = SAFE_HEAP_LOAD($16 >> 0 | 0, 1, 0) | 0 | 0;
  $18 = $17 & 255;
  $19 = _VP8GetBit82($15, $18) | 0;
  $20 = ($19 | 0) != 0;
  if (!$20) {
   label = 4;
   break;
  }
  while (1) {
   $22 = $1;
   $23 = $p;
   $24 = $23 + 1 | 0;
   $25 = SAFE_HEAP_LOAD($24 >> 0 | 0, 1, 0) | 0 | 0;
   $26 = $25 & 255;
   $27 = _VP8GetBit82($22, $26) | 0;
   $28 = ($27 | 0) != 0;
   $29 = $28 ^ 1;
   $30 = $5;
   $31 = $30 + 1 | 0;
   if (!$29) {
    break;
   }
   $5 = $31;
   $32 = $2;
   $33 = $32 + ($31 << 2) | 0;
   $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
   $p = $34;
   $35 = $5;
   $36 = ($35 | 0) == 16;
   if ($36) {
    label = 7;
    break L1;
   }
  }
  $37 = $2;
  $38 = $37 + ($31 << 2) | 0;
  $39 = SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0;
  $p_ctx = $39;
  $40 = $1;
  $41 = $p;
  $42 = $41 + 2 | 0;
  $43 = SAFE_HEAP_LOAD($42 >> 0 | 0, 1, 0) | 0 | 0;
  $44 = $43 & 255;
  $45 = _VP8GetBit82($40, $44) | 0;
  $46 = ($45 | 0) != 0;
  if ($46) {
   $49 = $1;
   $50 = $p;
   $51 = _GetLargeValue($49, $50) | 0;
   $v = $51;
   $52 = $p_ctx;
   $53 = $52 + 22 | 0;
   $p = $53;
  } else {
   $v = 1;
   $47 = $p_ctx;
   $48 = $47 + 11 | 0;
   $p = $48;
  }
  $54 = $1;
  $55 = $v;
  $56 = _VP8GetSigned($54, $55) | 0;
  $57 = $5;
  $58 = ($57 | 0) > 0;
  $59 = $58 & 1;
  $60 = $4;
  $61 = $60 + ($59 << 2) | 0;
  $62 = SAFE_HEAP_LOAD($61 | 0, 4, 0) | 0 | 0;
  $63 = Math_imul($56, $62) | 0;
  $64 = $63 & 65535;
  $65 = $5;
  $66 = 6961 + $65 | 0;
  $67 = SAFE_HEAP_LOAD($66 >> 0 | 0, 1, 0) | 0 | 0;
  $68 = $67 & 255;
  $69 = $6;
  $70 = $69 + ($68 << 1) | 0;
  SAFE_HEAP_STORE($70 | 0, $64 | 0, 2);
  $71 = $5;
  $72 = $71 + 1 | 0;
  $5 = $72;
 }
 if ((label | 0) == 4) {
  $21 = $5;
  $0 = $21;
  $73 = $0;
  STACKTOP = sp;
  return $73 | 0;
 } else if ((label | 0) == 7) {
  $0 = 16;
  $73 = $0;
  STACKTOP = sp;
  return $73 | 0;
 } else if ((label | 0) == 12) {
  $0 = 16;
  $73 = $0;
  STACKTOP = sp;
  return $73 | 0;
 }
 return 0 | 0;
}

function _ApplyAlphaMultiply($rgba, $alpha_first, $w, $h, $stride) {
 $rgba = $rgba | 0;
 $alpha_first = $alpha_first | 0;
 $w = $w | 0;
 $h = $h | 0;
 $stride = $stride | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $83 = 0, $9 = 0, $a = 0, $alpha = 0, $i = 0, $mult = 0, $rgb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $rgba;
 $1 = $alpha_first;
 $2 = $w;
 $3 = $h;
 $4 = $stride;
 while (1) {
  $5 = $3;
  $6 = $5 + -1 | 0;
  $3 = $6;
  $7 = ($5 | 0) > 0;
  if (!$7) {
   break;
  }
  $8 = $0;
  $9 = $1;
  $10 = ($9 | 0) != 0;
  $11 = $10 ? 1 : 0;
  $12 = $8 + $11 | 0;
  $rgb = $12;
  $13 = $0;
  $14 = $1;
  $15 = ($14 | 0) != 0;
  $16 = $15 ? 0 : 3;
  $17 = $13 + $16 | 0;
  $alpha = $17;
  $i = 0;
  while (1) {
   $18 = $i;
   $19 = $2;
   $20 = ($18 | 0) < ($19 | 0);
   if (!$20) {
    break;
   }
   $21 = $i;
   $22 = $21 << 2;
   $23 = $alpha;
   $24 = $23 + $22 | 0;
   $25 = SAFE_HEAP_LOAD($24 >> 0 | 0, 1, 0) | 0 | 0;
   $26 = $25 & 255;
   $a = $26;
   $27 = $a;
   $28 = ($27 | 0) != 255;
   if ($28) {
    $29 = $a;
    $30 = $29 * 32897 | 0;
    $mult = $30;
    $31 = $i;
    $32 = $31 << 2;
    $33 = $32 + 0 | 0;
    $34 = $rgb;
    $35 = $34 + $33 | 0;
    $36 = SAFE_HEAP_LOAD($35 >> 0 | 0, 1, 0) | 0 | 0;
    $37 = $36 & 255;
    $38 = $mult;
    $39 = Math_imul($37, $38) | 0;
    $40 = $39 >>> 23;
    $41 = $40 & 255;
    $42 = $i;
    $43 = $42 << 2;
    $44 = $43 + 0 | 0;
    $45 = $rgb;
    $46 = $45 + $44 | 0;
    SAFE_HEAP_STORE($46 >> 0 | 0, $41 | 0, 1);
    $47 = $i;
    $48 = $47 << 2;
    $49 = $48 + 1 | 0;
    $50 = $rgb;
    $51 = $50 + $49 | 0;
    $52 = SAFE_HEAP_LOAD($51 >> 0 | 0, 1, 0) | 0 | 0;
    $53 = $52 & 255;
    $54 = $mult;
    $55 = Math_imul($53, $54) | 0;
    $56 = $55 >>> 23;
    $57 = $56 & 255;
    $58 = $i;
    $59 = $58 << 2;
    $60 = $59 + 1 | 0;
    $61 = $rgb;
    $62 = $61 + $60 | 0;
    SAFE_HEAP_STORE($62 >> 0 | 0, $57 | 0, 1);
    $63 = $i;
    $64 = $63 << 2;
    $65 = $64 + 2 | 0;
    $66 = $rgb;
    $67 = $66 + $65 | 0;
    $68 = SAFE_HEAP_LOAD($67 >> 0 | 0, 1, 0) | 0 | 0;
    $69 = $68 & 255;
    $70 = $mult;
    $71 = Math_imul($69, $70) | 0;
    $72 = $71 >>> 23;
    $73 = $72 & 255;
    $74 = $i;
    $75 = $74 << 2;
    $76 = $75 + 2 | 0;
    $77 = $rgb;
    $78 = $77 + $76 | 0;
    SAFE_HEAP_STORE($78 >> 0 | 0, $73 | 0, 1);
   }
   $79 = $i;
   $80 = $79 + 1 | 0;
   $i = $80;
  }
  $81 = $4;
  $82 = $0;
  $83 = $82 + $81 | 0;
  $0 = $83;
 }
 STACKTOP = sp;
 return;
}

function _SetCropWindow($io, $y_start, $y_end, $in_data, $pixel_stride) {
 $io = $io | 0;
 $y_start = $y_start | 0;
 $y_end = $y_end | 0;
 $in_data = $in_data | 0;
 $pixel_stride = $pixel_stride | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $8 = 0, $9 = 0, $delta = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $io;
 $2 = $y_start;
 $3 = $y_end;
 $4 = $in_data;
 $5 = $pixel_stride;
 $6 = $2;
 $7 = $3;
 $8 = ($6 | 0) < ($7 | 0);
 if (!$8) {
  ___assert_fail(7637 | 0, 7124 | 0, 657, 7653 | 0);
 }
 $9 = $1;
 $10 = $9 + 76 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = $1;
 $13 = $12 + 80 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $15 = ($11 | 0) < ($14 | 0);
 if (!$15) {
  ___assert_fail(7667 | 0, 7124 | 0, 658, 7653 | 0);
 }
 $16 = $3;
 $17 = $1;
 $18 = $17 + 88 | 0;
 $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
 $20 = ($16 | 0) > ($19 | 0);
 if ($20) {
  $21 = $1;
  $22 = $21 + 88 | 0;
  $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
  $3 = $23;
 }
 $24 = $2;
 $25 = $1;
 $26 = $25 + 84 | 0;
 $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
 $28 = ($24 | 0) < ($27 | 0);
 if ($28) {
  $29 = $1;
  $30 = $29 + 84 | 0;
  $31 = SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0;
  $32 = $2;
  $33 = $31 - $32 | 0;
  $delta = $33;
  $34 = $1;
  $35 = $34 + 84 | 0;
  $36 = SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0;
  $2 = $36;
  $37 = $delta;
  $38 = $5;
  $39 = Math_imul($37, $38) | 0;
  $40 = $4;
  $41 = SAFE_HEAP_LOAD($40 | 0, 4, 0) | 0 | 0;
  $42 = $41 + $39 | 0;
  SAFE_HEAP_STORE($40 | 0, $42 | 0, 4);
 }
 $43 = $2;
 $44 = $3;
 $45 = ($43 | 0) >= ($44 | 0);
 if ($45) {
  $0 = 0;
  $74 = $0;
  STACKTOP = sp;
  return $74 | 0;
 } else {
  $46 = $1;
  $47 = $46 + 76 | 0;
  $48 = SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 0;
  $49 = $48 << 2;
  $50 = $4;
  $51 = SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0;
  $52 = $51 + $49 | 0;
  SAFE_HEAP_STORE($50 | 0, $52 | 0, 4);
  $53 = $2;
  $54 = $1;
  $55 = $54 + 84 | 0;
  $56 = SAFE_HEAP_LOAD($55 | 0, 4, 0) | 0 | 0;
  $57 = $53 - $56 | 0;
  $58 = $1;
  $59 = $58 + 8 | 0;
  SAFE_HEAP_STORE($59 | 0, $57 | 0, 4);
  $60 = $1;
  $61 = $60 + 80 | 0;
  $62 = SAFE_HEAP_LOAD($61 | 0, 4, 0) | 0 | 0;
  $63 = $1;
  $64 = $63 + 76 | 0;
  $65 = SAFE_HEAP_LOAD($64 | 0, 4, 0) | 0 | 0;
  $66 = $62 - $65 | 0;
  $67 = $1;
  $68 = $67 + 12 | 0;
  SAFE_HEAP_STORE($68 | 0, $66 | 0, 4);
  $69 = $3;
  $70 = $2;
  $71 = $69 - $70 | 0;
  $72 = $1;
  $73 = $72 + 16 | 0;
  SAFE_HEAP_STORE($73 | 0, $71 | 0, 4);
  $0 = 1;
  $74 = $0;
  STACKTOP = sp;
  return $74 | 0;
 }
 return 0 | 0;
}

function _ParseFilterHeader($br, $dec) {
 $br = $br | 0;
 $dec = $dec | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $hdr = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $br;
 $1 = $dec;
 $2 = $1;
 $3 = $2 + 56 | 0;
 $hdr = $3;
 $4 = $0;
 $5 = _VP8Get74($4) | 0;
 $6 = $hdr;
 SAFE_HEAP_STORE($6 | 0, $5 | 0, 4);
 $7 = $0;
 $8 = _VP8GetValue($7, 6) | 0;
 $9 = $hdr;
 $10 = $9 + 4 | 0;
 SAFE_HEAP_STORE($10 | 0, $8 | 0, 4);
 $11 = $0;
 $12 = _VP8GetValue($11, 3) | 0;
 $13 = $hdr;
 $14 = $13 + 8 | 0;
 SAFE_HEAP_STORE($14 | 0, $12 | 0, 4);
 $15 = $0;
 $16 = _VP8Get74($15) | 0;
 $17 = $hdr;
 $18 = $17 + 12 | 0;
 SAFE_HEAP_STORE($18 | 0, $16 | 0, 4);
 $19 = $hdr;
 $20 = $19 + 12 | 0;
 $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
 $22 = ($21 | 0) != 0;
 L1 : do {
  if ($22) {
   $23 = $0;
   $24 = _VP8Get74($23) | 0;
   $25 = ($24 | 0) != 0;
   if ($25) {
    $i = 0;
    while (1) {
     $26 = $i;
     $27 = ($26 | 0) < 4;
     if (!$27) {
      break;
     }
     $28 = $0;
     $29 = _VP8Get74($28) | 0;
     $30 = ($29 | 0) != 0;
     if ($30) {
      $31 = $0;
      $32 = _VP8GetSignedValue($31, 6) | 0;
      $33 = $i;
      $34 = $hdr;
      $35 = $34 + 16 | 0;
      $36 = $35 + ($33 << 2) | 0;
      SAFE_HEAP_STORE($36 | 0, $32 | 0, 4);
     }
     $37 = $i;
     $38 = $37 + 1 | 0;
     $i = $38;
    }
    $i = 0;
    while (1) {
     $39 = $i;
     $40 = ($39 | 0) < 4;
     if (!$40) {
      break L1;
     }
     $41 = $0;
     $42 = _VP8Get74($41) | 0;
     $43 = ($42 | 0) != 0;
     if ($43) {
      $44 = $0;
      $45 = _VP8GetSignedValue($44, 6) | 0;
      $46 = $i;
      $47 = $hdr;
      $48 = $47 + 32 | 0;
      $49 = $48 + ($46 << 2) | 0;
      SAFE_HEAP_STORE($49 | 0, $45 | 0, 4);
     }
     $50 = $i;
     $51 = $50 + 1 | 0;
     $i = $51;
    }
   }
  }
 } while (0);
 $52 = $hdr;
 $53 = $52 + 4 | 0;
 $54 = SAFE_HEAP_LOAD($53 | 0, 4, 0) | 0 | 0;
 $55 = ($54 | 0) == 0;
 if ($55) {
  $62 = 0;
  $60 = $1;
  $61 = $60 + 2308 | 0;
  SAFE_HEAP_STORE($61 | 0, $62 | 0, 4);
  $63 = $0;
  $64 = $63 + 24 | 0;
  $65 = SAFE_HEAP_LOAD($64 | 0, 4, 0) | 0 | 0;
  $66 = ($65 | 0) != 0;
  $67 = $66 ^ 1;
  $68 = $67 & 1;
  STACKTOP = sp;
  return $68 | 0;
 }
 $56 = $hdr;
 $57 = SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0;
 $58 = ($57 | 0) != 0;
 $59 = $58 ? 1 : 2;
 $62 = $59;
 $60 = $1;
 $61 = $60 + 2308 | 0;
 SAFE_HEAP_STORE($61 | 0, $62 | 0, 4);
 $63 = $0;
 $64 = $63 + 24 | 0;
 $65 = SAFE_HEAP_LOAD($64 | 0, 4, 0) | 0 | 0;
 $66 = ($65 | 0) != 0;
 $67 = $66 ^ 1;
 $68 = $67 & 1;
 STACKTOP = sp;
 return $68 | 0;
}

function _ParsePartitions($dec, $buf, $size) {
 $dec = $dec | 0;
 $buf = $buf | 0;
 $size = $size | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $9 = 0, $br = 0, $buf_end = 0, $last_part = 0, $p = 0, $part_start = 0, $psize = 0, $size_left = 0, $sz = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $dec;
 $2 = $buf;
 $3 = $size;
 $4 = $1;
 $5 = $4 + 12 | 0;
 $br = $5;
 $6 = $2;
 $sz = $6;
 $7 = $2;
 $8 = $3;
 $9 = $7 + $8 | 0;
 $buf_end = $9;
 $10 = $3;
 $size_left = $10;
 $11 = $br;
 $12 = _VP8GetValue($11, 2) | 0;
 $13 = 1 << $12;
 $14 = $1;
 $15 = $14 + 312 | 0;
 SAFE_HEAP_STORE($15 | 0, $13 | 0, 4);
 $16 = $1;
 $17 = $16 + 312 | 0;
 $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
 $19 = $18 - 1 | 0;
 $last_part = $19;
 $20 = $3;
 $21 = $last_part;
 $22 = $21 * 3 | 0;
 $23 = $20 >>> 0 < $22 >>> 0;
 if ($23) {
  $0 = 7;
  $80 = $0;
  STACKTOP = sp;
  return $80 | 0;
 }
 $24 = $2;
 $25 = $last_part;
 $26 = $25 * 3 | 0;
 $27 = $24 + $26 | 0;
 $part_start = $27;
 $28 = $last_part;
 $29 = $28 * 3 | 0;
 $30 = $size_left;
 $31 = $30 - $29 | 0;
 $size_left = $31;
 $p = 0;
 while (1) {
  $32 = $p;
  $33 = $last_part;
  $34 = $32 >>> 0 < $33 >>> 0;
  if (!$34) {
   break;
  }
  $35 = $sz;
  $36 = SAFE_HEAP_LOAD($35 >> 0 | 0, 1, 0) | 0 | 0;
  $37 = $36 & 255;
  $38 = $sz;
  $39 = $38 + 1 | 0;
  $40 = SAFE_HEAP_LOAD($39 >> 0 | 0, 1, 0) | 0 | 0;
  $41 = $40 & 255;
  $42 = $41 << 8;
  $43 = $37 | $42;
  $44 = $sz;
  $45 = $44 + 2 | 0;
  $46 = SAFE_HEAP_LOAD($45 >> 0 | 0, 1, 0) | 0 | 0;
  $47 = $46 & 255;
  $48 = $47 << 16;
  $49 = $43 | $48;
  $psize = $49;
  $50 = $psize;
  $51 = $size_left;
  $52 = $50 >>> 0 > $51 >>> 0;
  if ($52) {
   $53 = $size_left;
   $psize = $53;
  }
  $54 = $1;
  $55 = $54 + 316 | 0;
  $56 = $p;
  $57 = $55 + ($56 * 28 | 0) | 0;
  $58 = $part_start;
  $59 = $psize;
  _VP8InitBitReader($57, $58, $59);
  $60 = $psize;
  $61 = $part_start;
  $62 = $61 + $60 | 0;
  $part_start = $62;
  $63 = $psize;
  $64 = $size_left;
  $65 = $64 - $63 | 0;
  $size_left = $65;
  $66 = $sz;
  $67 = $66 + 3 | 0;
  $sz = $67;
  $68 = $p;
  $69 = $68 + 1 | 0;
  $p = $69;
 }
 $70 = $1;
 $71 = $70 + 316 | 0;
 $72 = $last_part;
 $73 = $71 + ($72 * 28 | 0) | 0;
 $74 = $part_start;
 $75 = $size_left;
 _VP8InitBitReader($73, $74, $75);
 $76 = $part_start;
 $77 = $buf_end;
 $78 = $76 >>> 0 < $77 >>> 0;
 $79 = $78 ? 0 : 5;
 $0 = $79;
 $80 = $0;
 STACKTOP = sp;
 return $80 | 0;
}

function _CountLevels($data, $size, $p) {
 $data = $data | 0;
 $size = $size | 0;
 $p = $p | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $last_level = 0, $level_dist = 0, $used_levels = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 288 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $used_levels = sp + 32 | 0;
 $0 = $data;
 $1 = $size;
 $2 = $p;
 _memset($used_levels | 0, 0, 256) | 0;
 $3 = $2;
 $4 = $3 + 56 | 0;
 SAFE_HEAP_STORE($4 | 0, 255 | 0, 4);
 $5 = $2;
 $6 = $5 + 60 | 0;
 SAFE_HEAP_STORE($6 | 0, 0 | 0, 4);
 $i = 0;
 while (1) {
  $7 = $i;
  $8 = $1;
  $9 = ($7 | 0) < ($8 | 0);
  if (!$9) {
   break;
  }
  $10 = $i;
  $11 = $0;
  $12 = $11 + $10 | 0;
  $13 = SAFE_HEAP_LOAD($12 >> 0 | 0, 1, 0) | 0 | 0;
  $14 = $13 & 255;
  $v = $14;
  $15 = $v;
  $16 = $2;
  $17 = $16 + 56 | 0;
  $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
  $19 = ($15 | 0) < ($18 | 0);
  if ($19) {
   $20 = $v;
   $21 = $2;
   $22 = $21 + 56 | 0;
   SAFE_HEAP_STORE($22 | 0, $20 | 0, 4);
  }
  $23 = $v;
  $24 = $2;
  $25 = $24 + 60 | 0;
  $26 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
  $27 = ($23 | 0) > ($26 | 0);
  if ($27) {
   $28 = $v;
   $29 = $2;
   $30 = $29 + 60 | 0;
   SAFE_HEAP_STORE($30 | 0, $28 | 0, 4);
  }
  $31 = $v;
  $32 = $used_levels + $31 | 0;
  SAFE_HEAP_STORE($32 >> 0 | 0, 1 | 0, 1);
  $33 = $i;
  $34 = $33 + 1 | 0;
  $i = $34;
 }
 $35 = $2;
 $36 = $35 + 60 | 0;
 $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
 $38 = $2;
 $39 = $38 + 56 | 0;
 $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
 $41 = $37 - $40 | 0;
 $42 = $2;
 $43 = $42 + 64 | 0;
 SAFE_HEAP_STORE($43 | 0, $41 | 0, 4);
 $last_level = -1;
 $i = 0;
 while (1) {
  $44 = $i;
  $45 = ($44 | 0) < 256;
  if (!$45) {
   break;
  }
  $46 = $i;
  $47 = $used_levels + $46 | 0;
  $48 = SAFE_HEAP_LOAD($47 >> 0 | 0, 1, 0) | 0 | 0;
  $49 = $48 << 24 >> 24 != 0;
  if ($49) {
   $50 = $2;
   $51 = $50 + 52 | 0;
   $52 = SAFE_HEAP_LOAD($51 | 0, 4, 0) | 0 | 0;
   $53 = $52 + 1 | 0;
   SAFE_HEAP_STORE($51 | 0, $53 | 0, 4);
   $54 = $last_level;
   $55 = ($54 | 0) >= 0;
   if ($55) {
    $56 = $i;
    $57 = $last_level;
    $58 = $56 - $57 | 0;
    $level_dist = $58;
    $59 = $level_dist;
    $60 = $2;
    $61 = $60 + 64 | 0;
    $62 = SAFE_HEAP_LOAD($61 | 0, 4, 0) | 0 | 0;
    $63 = ($59 | 0) < ($62 | 0);
    if ($63) {
     $64 = $level_dist;
     $65 = $2;
     $66 = $65 + 64 | 0;
     SAFE_HEAP_STORE($66 | 0, $64 | 0, 4);
    }
   }
   $67 = $i;
   $last_level = $67;
  }
  $68 = $i;
  $69 = $68 + 1 | 0;
  $i = $69;
 }
 STACKTOP = sp;
 return;
}

function _do_filter4($p, $step) {
 $p = $p | 0;
 $step = $step | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $8 = 0, $9 = 0, $a = 0;
 var $a1 = 0, $a2 = 0, $a3 = 0, $p0 = 0, $p1 = 0, $q0 = 0, $q1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $p;
 $1 = $step;
 $2 = $1;
 $3 = Math_imul(-2, $2) | 0;
 $4 = $0;
 $5 = $4 + $3 | 0;
 $6 = SAFE_HEAP_LOAD($5 >> 0 | 0, 1, 0) | 0 | 0;
 $7 = $6 & 255;
 $p1 = $7;
 $8 = $1;
 $9 = 0 - $8 | 0;
 $10 = $0;
 $11 = $10 + $9 | 0;
 $12 = SAFE_HEAP_LOAD($11 >> 0 | 0, 1, 0) | 0 | 0;
 $13 = $12 & 255;
 $p0 = $13;
 $14 = $0;
 $15 = SAFE_HEAP_LOAD($14 >> 0 | 0, 1, 0) | 0 | 0;
 $16 = $15 & 255;
 $q0 = $16;
 $17 = $1;
 $18 = $0;
 $19 = $18 + $17 | 0;
 $20 = SAFE_HEAP_LOAD($19 >> 0 | 0, 1, 0) | 0 | 0;
 $21 = $20 & 255;
 $q1 = $21;
 $22 = $q0;
 $23 = $p0;
 $24 = $22 - $23 | 0;
 $25 = $24 * 3 | 0;
 $a = $25;
 $26 = $a;
 $27 = $26 + 4 | 0;
 $28 = $27 >> 3;
 $29 = SAFE_HEAP_LOAD(592 | 0, 4, 0) | 0 | 0;
 $30 = $29 + $28 | 0;
 $31 = SAFE_HEAP_LOAD($30 >> 0 | 0, 1, 0) | 0 | 0;
 $32 = $31 << 24 >> 24;
 $a1 = $32;
 $33 = $a;
 $34 = $33 + 3 | 0;
 $35 = $34 >> 3;
 $36 = SAFE_HEAP_LOAD(592 | 0, 4, 0) | 0 | 0;
 $37 = $36 + $35 | 0;
 $38 = SAFE_HEAP_LOAD($37 >> 0 | 0, 1, 0) | 0 | 0;
 $39 = $38 << 24 >> 24;
 $a2 = $39;
 $40 = $a1;
 $41 = $40 + 1 | 0;
 $42 = $41 >> 1;
 $a3 = $42;
 $43 = $p1;
 $44 = $a3;
 $45 = $43 + $44 | 0;
 $46 = SAFE_HEAP_LOAD(596 | 0, 4, 0) | 0 | 0;
 $47 = $46 + $45 | 0;
 $48 = SAFE_HEAP_LOAD($47 >> 0 | 0, 1, 0) | 0 | 0;
 $49 = $1;
 $50 = Math_imul(-2, $49) | 0;
 $51 = $0;
 $52 = $51 + $50 | 0;
 SAFE_HEAP_STORE($52 >> 0 | 0, $48 | 0, 1);
 $53 = $p0;
 $54 = $a2;
 $55 = $53 + $54 | 0;
 $56 = SAFE_HEAP_LOAD(596 | 0, 4, 0) | 0 | 0;
 $57 = $56 + $55 | 0;
 $58 = SAFE_HEAP_LOAD($57 >> 0 | 0, 1, 0) | 0 | 0;
 $59 = $1;
 $60 = 0 - $59 | 0;
 $61 = $0;
 $62 = $61 + $60 | 0;
 SAFE_HEAP_STORE($62 >> 0 | 0, $58 | 0, 1);
 $63 = $q0;
 $64 = $a1;
 $65 = $63 - $64 | 0;
 $66 = SAFE_HEAP_LOAD(596 | 0, 4, 0) | 0 | 0;
 $67 = $66 + $65 | 0;
 $68 = SAFE_HEAP_LOAD($67 >> 0 | 0, 1, 0) | 0 | 0;
 $69 = $0;
 SAFE_HEAP_STORE($69 >> 0 | 0, $68 | 0, 1);
 $70 = $q1;
 $71 = $a3;
 $72 = $70 - $71 | 0;
 $73 = SAFE_HEAP_LOAD(596 | 0, 4, 0) | 0 | 0;
 $74 = $73 + $72 | 0;
 $75 = SAFE_HEAP_LOAD($74 >> 0 | 0, 1, 0) | 0 | 0;
 $76 = $1;
 $77 = $0;
 $78 = $77 + $76 | 0;
 SAFE_HEAP_STORE($78 >> 0 | 0, $75 | 0, 1);
 STACKTOP = sp;
 return;
}

function _ApplyAlphaMultiply4444($rgba4444, $w, $h, $stride, $rg_byte_pos) {
 $rgba4444 = $rgba4444 | 0;
 $w = $w | 0;
 $h = $h | 0;
 $stride = $stride | 0;
 $rg_byte_pos = $rg_byte_pos | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $72 = 0, $73 = 0, $74 = 0, $75 = 0, $76 = 0, $77 = 0, $78 = 0, $79 = 0, $8 = 0, $80 = 0;
 var $81 = 0, $82 = 0, $9 = 0, $a = 0, $b = 0, $ba = 0, $g = 0, $i = 0, $mult = 0, $r = 0, $rg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $rgba4444;
 $1 = $w;
 $2 = $h;
 $3 = $stride;
 $4 = $rg_byte_pos;
 while (1) {
  $5 = $2;
  $6 = $5 + -1 | 0;
  $2 = $6;
  $7 = ($5 | 0) > 0;
  if (!$7) {
   break;
  }
  $i = 0;
  while (1) {
   $8 = $i;
   $9 = $1;
   $10 = ($8 | 0) < ($9 | 0);
   if (!$10) {
    break;
   }
   $11 = $i;
   $12 = $11 << 1;
   $13 = $4;
   $14 = $12 + $13 | 0;
   $15 = $0;
   $16 = $15 + $14 | 0;
   $17 = SAFE_HEAP_LOAD($16 >> 0 | 0, 1, 0) | 0 | 0;
   $18 = $17 & 255;
   $rg = $18;
   $19 = $i;
   $20 = $19 << 1;
   $21 = $4;
   $22 = $21 ^ 1;
   $23 = $20 + $22 | 0;
   $24 = $0;
   $25 = $24 + $23 | 0;
   $26 = SAFE_HEAP_LOAD($25 >> 0 | 0, 1, 0) | 0 | 0;
   $27 = $26 & 255;
   $ba = $27;
   $28 = $ba;
   $29 = $28 & 15;
   $30 = $29 & 255;
   $a = $30;
   $31 = $a;
   $32 = $31 & 255;
   $33 = $32 * 4369 | 0;
   $mult = $33;
   $34 = $rg;
   $35 = $34 & 255;
   $36 = _dither_hi($35) | 0;
   $37 = $mult;
   $38 = _multiply($36, $37) | 0;
   $r = $38;
   $39 = $rg;
   $40 = $39 & 255;
   $41 = _dither_lo($40) | 0;
   $42 = $mult;
   $43 = _multiply($41, $42) | 0;
   $g = $43;
   $44 = $ba;
   $45 = $44 & 255;
   $46 = _dither_hi($45) | 0;
   $47 = $mult;
   $48 = _multiply($46, $47) | 0;
   $b = $48;
   $49 = $r;
   $50 = $49 & 255;
   $51 = $50 & 240;
   $52 = $g;
   $53 = $52 & 255;
   $54 = $53 >> 4;
   $55 = $54 & 15;
   $56 = $51 | $55;
   $57 = $56 & 255;
   $58 = $i;
   $59 = $58 << 1;
   $60 = $4;
   $61 = $59 + $60 | 0;
   $62 = $0;
   $63 = $62 + $61 | 0;
   SAFE_HEAP_STORE($63 >> 0 | 0, $57 | 0, 1);
   $64 = $b;
   $65 = $64 & 255;
   $66 = $65 & 240;
   $67 = $a;
   $68 = $67 & 255;
   $69 = $66 | $68;
   $70 = $69 & 255;
   $71 = $i;
   $72 = $71 << 1;
   $73 = $4;
   $74 = $73 ^ 1;
   $75 = $72 + $74 | 0;
   $76 = $0;
   $77 = $76 + $75 | 0;
   SAFE_HEAP_STORE($77 >> 0 | 0, $70 | 0, 1);
   $78 = $i;
   $79 = $78 + 1 | 0;
   $i = $79;
  }
  $80 = $3;
  $81 = $0;
  $82 = $81 + $80 | 0;
  $0 = $82;
 }
 STACKTOP = sp;
 return;
}

function _CopyBlock32b($dst, $dist, $length) {
 $dst = $dst | 0;
 $dist = $dist | 0;
 $length = $length | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $or$cond = 0, $pattern = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $pattern = sp;
 $0 = $dst;
 $1 = $dist;
 $2 = $length;
 $3 = $0;
 $4 = $1;
 $5 = 0 - $4 | 0;
 $6 = $3 + ($5 << 2) | 0;
 $src = $6;
 $7 = $1;
 $8 = ($7 | 0) <= 2;
 $9 = $2;
 $10 = ($9 | 0) >= 4;
 $or$cond = $8 & $10;
 if ($or$cond) {
  $11 = $0;
  $12 = $11;
  $13 = $12 & 3;
  $14 = ($13 | 0) == 0;
  if ($14) {
   $15 = $1;
   $16 = ($15 | 0) == 1;
   if ($16) {
    $17 = $src;
    $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
    $19 = $pattern;
    $20 = $19;
    SAFE_HEAP_STORE($20 | 0, $18 | 0, 4);
    $21 = $19 + 4 | 0;
    $22 = $21;
    SAFE_HEAP_STORE($22 | 0, 0 | 0, 4);
    $23 = $pattern;
    $24 = $23;
    $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
    $26 = $23 + 4 | 0;
    $27 = $26;
    $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
    $29 = $pattern;
    $30 = $29;
    $31 = SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0;
    $32 = $29 + 4 | 0;
    $33 = $32;
    $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
    $35 = $34 | $25;
    $36 = $pattern;
    $37 = $36;
    SAFE_HEAP_STORE($37 | 0, $31 | 0, 4);
    $38 = $36 + 4 | 0;
    $39 = $38;
    SAFE_HEAP_STORE($39 | 0, $35 | 0, 4);
   } else {
    $40 = $src;
    {}
    SAFE_HEAP_STORE($pattern | 0, SAFE_HEAP_LOAD($40 | 0, 4, 0) | 0 | 0 | 0, 4);
    SAFE_HEAP_STORE($pattern + 4 | 0, SAFE_HEAP_LOAD($40 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
   }
   $41 = $src;
   $42 = $0;
   $43 = $2;
   $44 = $pattern;
   $45 = $44;
   $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
   $47 = $44 + 4 | 0;
   $48 = $47;
   $49 = SAFE_HEAP_LOAD($48 | 0, 4, 0) | 0 | 0;
   _CopySmallPattern32b($41, $42, $43, $46, $49);
   STACKTOP = sp;
   return;
  }
 }
 $50 = $1;
 $51 = $2;
 $52 = ($50 | 0) >= ($51 | 0);
 if ($52) {
  $53 = $0;
  $54 = $src;
  $55 = $2;
  $56 = $55 << 2;
  _memcpy($53 | 0, $54 | 0, $56 | 0) | 0;
  STACKTOP = sp;
  return;
 }
 $i = 0;
 while (1) {
  $57 = $i;
  $58 = $2;
  $59 = ($57 | 0) < ($58 | 0);
  if (!$59) {
   break;
  }
  $60 = $i;
  $61 = $src;
  $62 = $61 + ($60 << 2) | 0;
  $63 = SAFE_HEAP_LOAD($62 | 0, 4, 0) | 0 | 0;
  $64 = $i;
  $65 = $0;
  $66 = $65 + ($64 << 2) | 0;
  SAFE_HEAP_STORE($66 | 0, $63 | 0, 4);
  $67 = $i;
  $68 = $67 + 1 | 0;
  $i = $68;
 }
 STACKTOP = sp;
 return;
}

function _VP8LColorIndexInverseTransformAlpha($transform, $y_start, $y_end, $src, $dst) {
 $transform = $transform | 0;
 $y_start = $y_start | 0;
 $y_end = $y_end | 0;
 $src = $src | 0;
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $bit_mask = 0, $bits_per_pixel = 0, $color_map = 0, $count_mask = 0, $packed_pixels = 0, $pixels_per_byte = 0, $width = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $transform;
 $1 = $y_start;
 $2 = $y_end;
 $3 = $src;
 $4 = $dst;
 $5 = $0;
 $6 = $5 + 4 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = 8 >> $7;
 $bits_per_pixel = $8;
 $9 = $0;
 $10 = $9 + 8 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $width = $11;
 $12 = $0;
 $13 = $12 + 16 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $color_map = $14;
 $15 = $bits_per_pixel;
 $16 = ($15 | 0) < 8;
 if (!$16) {
  $58 = SAFE_HEAP_LOAD(640 | 0, 4, 0) | 0 | 0;
  $59 = $3;
  $60 = $color_map;
  $61 = $4;
  $62 = $1;
  $63 = $2;
  $64 = $width;
  FUNCTION_TABLE_viiiiii[(SAFE_FT_MASK($58 | 0, 127 | 0) | 0) & 127]($59, $60, $61, $62, $63, $64);
  STACKTOP = sp;
  return;
 }
 $17 = $0;
 $18 = $17 + 4 | 0;
 $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
 $20 = 1 << $19;
 $pixels_per_byte = $20;
 $21 = $pixels_per_byte;
 $22 = $21 - 1 | 0;
 $count_mask = $22;
 $23 = $bits_per_pixel;
 $24 = 1 << $23;
 $25 = $24 - 1 | 0;
 $bit_mask = $25;
 $26 = $1;
 $y = $26;
 while (1) {
  $27 = $y;
  $28 = $2;
  $29 = ($27 | 0) < ($28 | 0);
  if (!$29) {
   break;
  }
  $packed_pixels = 0;
  $x = 0;
  while (1) {
   $30 = $x;
   $31 = $width;
   $32 = ($30 | 0) < ($31 | 0);
   if (!$32) {
    break;
   }
   $33 = $x;
   $34 = $count_mask;
   $35 = $33 & $34;
   $36 = ($35 | 0) == 0;
   if ($36) {
    $37 = $3;
    $38 = $37 + 1 | 0;
    $3 = $38;
    $39 = SAFE_HEAP_LOAD($37 >> 0 | 0, 1, 0) | 0 | 0;
    $40 = _VP8GetAlphaIndex($39) | 0;
    $41 = $40 & 255;
    $packed_pixels = $41;
   }
   $42 = $packed_pixels;
   $43 = $bit_mask;
   $44 = $42 & $43;
   $45 = $color_map;
   $46 = $45 + ($44 << 2) | 0;
   $47 = SAFE_HEAP_LOAD($46 | 0, 4, 0) | 0 | 0;
   $48 = _VP8GetAlphaValue($47) | 0;
   $49 = $4;
   $50 = $49 + 1 | 0;
   $4 = $50;
   SAFE_HEAP_STORE($49 >> 0 | 0, $48 | 0, 1);
   $51 = $bits_per_pixel;
   $52 = $packed_pixels;
   $53 = $52 >>> $51;
   $packed_pixels = $53;
   $54 = $x;
   $55 = $54 + 1 | 0;
   $x = $55;
  }
  $56 = $y;
  $57 = $56 + 1 | 0;
  $y = $57;
 }
 STACKTOP = sp;
 return;
}

function _EmitRescaledRowsRGBA($dec, $in, $in_stride, $mb_h, $out, $out_stride) {
 $dec = $dec | 0;
 $in = $in | 0;
 $in_stride = $in_stride | 0;
 $mb_h = $mb_h | 0;
 $out = $out | 0;
 $out_stride = $out_stride | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $colorspace = 0, $lines_left = 0, $needed_lines = 0, $num_lines_in = 0, $num_lines_out = 0, $row_in = 0, $row_out = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $in;
 $2 = $in_stride;
 $3 = $mb_h;
 $4 = $out;
 $5 = $out_stride;
 $6 = $0;
 $7 = $6 + 12 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $colorspace = $9;
 $num_lines_in = 0;
 $num_lines_out = 0;
 while (1) {
  $10 = $num_lines_in;
  $11 = $3;
  $12 = ($10 | 0) < ($11 | 0);
  if (!$12) {
   label = 7;
   break;
  }
  $13 = $1;
  $14 = $num_lines_in;
  $15 = $2;
  $16 = Math_imul($14, $15) | 0;
  $17 = $13 + $16 | 0;
  $row_in = $17;
  $18 = $4;
  $19 = $num_lines_out;
  $20 = $5;
  $21 = Math_imul($19, $20) | 0;
  $22 = $18 + $21 | 0;
  $row_out = $22;
  $23 = $3;
  $24 = $num_lines_in;
  $25 = $23 - $24 | 0;
  $lines_left = $25;
  $26 = $0;
  $27 = $26 + 268 | 0;
  $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
  $29 = $lines_left;
  $30 = _WebPRescaleNeededLines($28, $29) | 0;
  $needed_lines = $30;
  $31 = $needed_lines;
  $32 = ($31 | 0) > 0;
  if (!$32) {
   label = 5;
   break;
  }
  $33 = $needed_lines;
  $34 = $lines_left;
  $35 = ($33 | 0) <= ($34 | 0);
  if (!$35) {
   label = 5;
   break;
  }
  $36 = $row_in;
  $37 = $2;
  $38 = $0;
  $39 = $38 + 268 | 0;
  $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
  $41 = $40 + 44 | 0;
  $42 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
  $43 = $needed_lines;
  _WebPMultARGBRows($36, $37, $42, $43, 0);
  $44 = $0;
  $45 = $44 + 268 | 0;
  $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
  $47 = $lines_left;
  $48 = $row_in;
  $49 = $2;
  _WebPRescalerImport($46, $47, $48, $49) | 0;
  $50 = $needed_lines;
  $51 = $num_lines_in;
  $52 = $51 + $50 | 0;
  $num_lines_in = $52;
  $53 = $0;
  $54 = $53 + 268 | 0;
  $55 = SAFE_HEAP_LOAD($54 | 0, 4, 0) | 0 | 0;
  $56 = $colorspace;
  $57 = $5;
  $58 = $row_out;
  $59 = _Export($55, $56, $57, $58) | 0;
  $60 = $num_lines_out;
  $61 = $60 + $59 | 0;
  $num_lines_out = $61;
 }
 if ((label | 0) == 5) {
  ___assert_fail(7569 | 0, 7124 | 0, 550, 7616 | 0);
 } else if ((label | 0) == 7) {
  $62 = $num_lines_out;
  STACKTOP = sp;
  return $62 | 0;
 }
 return 0 | 0;
}

function _ColorIndexInverseTransform($transform, $y_start, $y_end, $src, $dst) {
 $transform = $transform | 0;
 $y_start = $y_start | 0;
 $y_end = $y_end | 0;
 $src = $src | 0;
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $bit_mask = 0, $bits_per_pixel = 0, $color_map = 0, $count_mask = 0, $packed_pixels = 0, $pixels_per_byte = 0, $width = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $transform;
 $1 = $y_start;
 $2 = $y_end;
 $3 = $src;
 $4 = $dst;
 $5 = $0;
 $6 = $5 + 4 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = 8 >> $7;
 $bits_per_pixel = $8;
 $9 = $0;
 $10 = $9 + 8 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $width = $11;
 $12 = $0;
 $13 = $12 + 16 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $color_map = $14;
 $15 = $bits_per_pixel;
 $16 = ($15 | 0) < 8;
 if (!$16) {
  $57 = SAFE_HEAP_LOAD(736 | 0, 4, 0) | 0 | 0;
  $58 = $3;
  $59 = $color_map;
  $60 = $4;
  $61 = $1;
  $62 = $2;
  $63 = $width;
  FUNCTION_TABLE_viiiiii[(SAFE_FT_MASK($57 | 0, 127 | 0) | 0) & 127]($58, $59, $60, $61, $62, $63);
  STACKTOP = sp;
  return;
 }
 $17 = $0;
 $18 = $17 + 4 | 0;
 $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
 $20 = 1 << $19;
 $pixels_per_byte = $20;
 $21 = $pixels_per_byte;
 $22 = $21 - 1 | 0;
 $count_mask = $22;
 $23 = $bits_per_pixel;
 $24 = 1 << $23;
 $25 = $24 - 1 | 0;
 $bit_mask = $25;
 $26 = $1;
 $y = $26;
 while (1) {
  $27 = $y;
  $28 = $2;
  $29 = ($27 | 0) < ($28 | 0);
  if (!$29) {
   break;
  }
  $packed_pixels = 0;
  $x = 0;
  while (1) {
   $30 = $x;
   $31 = $width;
   $32 = ($30 | 0) < ($31 | 0);
   if (!$32) {
    break;
   }
   $33 = $x;
   $34 = $count_mask;
   $35 = $33 & $34;
   $36 = ($35 | 0) == 0;
   if ($36) {
    $37 = $3;
    $38 = $37 + 4 | 0;
    $3 = $38;
    $39 = SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0;
    $40 = _VP8GetARGBIndex($39) | 0;
    $packed_pixels = $40;
   }
   $41 = $packed_pixels;
   $42 = $bit_mask;
   $43 = $41 & $42;
   $44 = $color_map;
   $45 = $44 + ($43 << 2) | 0;
   $46 = SAFE_HEAP_LOAD($45 | 0, 4, 0) | 0 | 0;
   $47 = _VP8GetARGBValue($46) | 0;
   $48 = $4;
   $49 = $48 + 4 | 0;
   $4 = $49;
   SAFE_HEAP_STORE($48 | 0, $47 | 0, 4);
   $50 = $bits_per_pixel;
   $51 = $packed_pixels;
   $52 = $51 >>> $50;
   $packed_pixels = $52;
   $53 = $x;
   $54 = $53 + 1 | 0;
   $x = $54;
  }
  $55 = $y;
  $56 = $55 + 1 | 0;
  $y = $56;
 }
 STACKTOP = sp;
 return;
}

function _VP8LInitBitReader($br, $start, $length) {
 $br = $br | 0;
 $start = $start | 0;
 $length = $length | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $value = sp;
 $0 = $br;
 $1 = $start;
 $2 = $length;
 $3 = $value;
 $4 = $3;
 SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
 $5 = $3 + 4 | 0;
 $6 = $5;
 SAFE_HEAP_STORE($6 | 0, 0 | 0, 4);
 $7 = $0;
 $8 = ($7 | 0) != (0 | 0);
 if (!$8) {
  ___assert_fail(14021 | 0, 14032 | 0, 143, 14160 | 0);
 }
 $9 = $1;
 $10 = ($9 | 0) != (0 | 0);
 if (!$10) {
  ___assert_fail(14079 | 0, 14032 | 0, 144, 14160 | 0);
 }
 $11 = $2;
 $12 = $11 >>> 0 < 4294967288;
 if (!$12) {
  ___assert_fail(14178 | 0, 14032 | 0, 145, 14160 | 0);
 }
 $13 = $2;
 $14 = $0;
 $15 = $14 + 12 | 0;
 SAFE_HEAP_STORE($15 | 0, $13 | 0, 4);
 $16 = $0;
 $17 = $16;
 $18 = $17;
 SAFE_HEAP_STORE($18 | 0, 0 | 0, 4);
 $19 = $17 + 4 | 0;
 $20 = $19;
 SAFE_HEAP_STORE($20 | 0, 0 | 0, 4);
 $21 = $0;
 $22 = $21 + 20 | 0;
 SAFE_HEAP_STORE($22 | 0, 0 | 0, 4);
 $23 = $0;
 $24 = $23 + 24 | 0;
 SAFE_HEAP_STORE($24 | 0, 0 | 0, 4);
 $25 = $2;
 $26 = $25 >>> 0 > 8;
 if ($26) {
  $2 = 8;
 }
 $i = 0;
 while (1) {
  $27 = $i;
  $28 = $2;
  $29 = $27 >>> 0 < $28 >>> 0;
  if (!$29) {
   break;
  }
  $30 = $i;
  $31 = $1;
  $32 = $31 + $30 | 0;
  $33 = SAFE_HEAP_LOAD($32 >> 0 | 0, 1, 0) | 0 | 0;
  $34 = $33 & 255;
  $35 = $i;
  $36 = $35 << 3;
  $37 = _bitshift64Shl($34 | 0, 0, $36 | 0) | 0;
  $38 = tempRet0;
  $39 = $value;
  $40 = $39;
  $41 = SAFE_HEAP_LOAD($40 | 0, 4, 0) | 0 | 0;
  $42 = $39 + 4 | 0;
  $43 = $42;
  $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
  $45 = $41 | $37;
  $46 = $44 | $38;
  $47 = $value;
  $48 = $47;
  SAFE_HEAP_STORE($48 | 0, $45 | 0, 4);
  $49 = $47 + 4 | 0;
  $50 = $49;
  SAFE_HEAP_STORE($50 | 0, $46 | 0, 4);
  $51 = $i;
  $52 = $51 + 1 | 0;
  $i = $52;
 }
 $53 = $value;
 $54 = $53;
 $55 = SAFE_HEAP_LOAD($54 | 0, 4, 0) | 0 | 0;
 $56 = $53 + 4 | 0;
 $57 = $56;
 $58 = SAFE_HEAP_LOAD($57 | 0, 4, 0) | 0 | 0;
 $59 = $0;
 $60 = $59;
 $61 = $60;
 SAFE_HEAP_STORE($61 | 0, $55 | 0, 4);
 $62 = $60 + 4 | 0;
 $63 = $62;
 SAFE_HEAP_STORE($63 | 0, $58 | 0, 4);
 $64 = $2;
 $65 = $0;
 $66 = $65 + 16 | 0;
 SAFE_HEAP_STORE($66 | 0, $64 | 0, 4);
 $67 = $1;
 $68 = $0;
 $69 = $68 + 8 | 0;
 SAFE_HEAP_STORE($69 | 0, $67 | 0, 4);
 STACKTOP = sp;
 return;
}

function _EmitAlphaYUV($io, $p, $expected_num_lines_out) {
 $io = $io | 0;
 $p = $p | 0;
 $expected_num_lines_out = $expected_num_lines_out | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $7 = 0, $8 = 0, $9 = 0, $alpha = 0, $buf = 0, $dst = 0, $j = 0, $mb_h = 0, $mb_w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $io;
 $1 = $p;
 $2 = $expected_num_lines_out;
 $3 = $0;
 $4 = $3 + 104 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $alpha = $5;
 $6 = $1;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = $7 + 16 | 0;
 $buf = $8;
 $9 = $0;
 $10 = $9 + 12 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $mb_w = $11;
 $12 = $0;
 $13 = $12 + 16 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $mb_h = $14;
 $15 = $buf;
 $16 = $15 + 12 | 0;
 $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
 $18 = $0;
 $19 = $18 + 8 | 0;
 $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
 $21 = $buf;
 $22 = $21 + 28 | 0;
 $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
 $24 = Math_imul($20, $23) | 0;
 $25 = $17 + $24 | 0;
 $dst = $25;
 $26 = $2;
 $27 = $mb_h;
 $28 = ($26 | 0) == ($27 | 0);
 if (!$28) {
  ___assert_fail(3040 | 0, 3071 | 0, 131, 3091 | 0);
 }
 $29 = $alpha;
 $30 = ($29 | 0) != (0 | 0);
 if ($30) {
  $j = 0;
  while (1) {
   $31 = $j;
   $32 = $mb_h;
   $33 = ($31 | 0) < ($32 | 0);
   if (!$33) {
    break;
   }
   $34 = $dst;
   $35 = $alpha;
   $36 = $mb_w;
   $37 = $36;
   _memcpy($34 | 0, $35 | 0, $37 | 0) | 0;
   $38 = $0;
   $39 = SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0;
   $40 = $alpha;
   $41 = $40 + $39 | 0;
   $alpha = $41;
   $42 = $buf;
   $43 = $42 + 28 | 0;
   $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
   $45 = $dst;
   $46 = $45 + $44 | 0;
   $dst = $46;
   $47 = $j;
   $48 = $47 + 1 | 0;
   $j = $48;
  }
  STACKTOP = sp;
  return 0;
 }
 $49 = $buf;
 $50 = $49 + 12 | 0;
 $51 = SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0;
 $52 = ($51 | 0) != (0 | 0);
 if (!$52) {
  STACKTOP = sp;
  return 0;
 }
 $j = 0;
 while (1) {
  $53 = $j;
  $54 = $mb_h;
  $55 = ($53 | 0) < ($54 | 0);
  if (!$55) {
   break;
  }
  $56 = $dst;
  $57 = $mb_w;
  $58 = $57;
  _memset($56 | 0, -1, $58 | 0) | 0;
  $59 = $buf;
  $60 = $59 + 28 | 0;
  $61 = SAFE_HEAP_LOAD($60 | 0, 4, 0) | 0 | 0;
  $62 = $dst;
  $63 = $62 + $61 | 0;
  $dst = $63;
  $64 = $j;
  $65 = $64 + 1 | 0;
  $j = $65;
 }
 STACKTOP = sp;
 return 0;
}

function _DitherRow($dec) {
 $dec = $dec | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $8 = 0, $9 = 0, $cache_id = 0, $ctx = 0, $data = 0, $mb_x = 0, $u_dst = 0, $uv_bps = 0, $v_dst = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $0;
 $2 = $1 + 540 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = ($3 | 0) != 0;
 if (!$4) {
  ___assert_fail(2776 | 0, 2535 | 0, 384, 2789 | 0);
 }
 $5 = $0;
 $6 = $5 + 296 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $mb_x = $7;
 while (1) {
  $8 = $mb_x;
  $9 = $0;
  $10 = $9 + 304 | 0;
  $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
  $12 = ($8 | 0) < ($11 | 0);
  if (!$12) {
   break;
  }
  $13 = $0;
  $14 = $13 + 160 | 0;
  $ctx = $14;
  $15 = $ctx;
  $16 = $15 + 16 | 0;
  $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
  $18 = $mb_x;
  $19 = $17 + ($18 * 800 | 0) | 0;
  $data = $19;
  $20 = $ctx;
  $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
  $cache_id = $21;
  $22 = $0;
  $23 = $22 + 2284 | 0;
  $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
  $uv_bps = $24;
  $25 = $data;
  $26 = $25 + 796 | 0;
  $27 = SAFE_HEAP_LOAD($26 >> 0 | 0, 1, 0) | 0 | 0;
  $28 = $27 & 255;
  $29 = ($28 | 0) >= 4;
  if ($29) {
   $30 = $0;
   $31 = $30 + 2272 | 0;
   $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
   $33 = $cache_id;
   $34 = $33 << 3;
   $35 = $uv_bps;
   $36 = Math_imul($34, $35) | 0;
   $37 = $32 + $36 | 0;
   $38 = $mb_x;
   $39 = $38 << 3;
   $40 = $37 + $39 | 0;
   $u_dst = $40;
   $41 = $0;
   $42 = $41 + 2276 | 0;
   $43 = SAFE_HEAP_LOAD($42 | 0, 4, 0) | 0 | 0;
   $44 = $cache_id;
   $45 = $44 << 3;
   $46 = $uv_bps;
   $47 = Math_imul($45, $46) | 0;
   $48 = $43 + $47 | 0;
   $49 = $mb_x;
   $50 = $49 << 3;
   $51 = $48 + $50 | 0;
   $v_dst = $51;
   $52 = $0;
   $53 = $52 + 544 | 0;
   $54 = $u_dst;
   $55 = $uv_bps;
   $56 = $data;
   $57 = $56 + 796 | 0;
   $58 = SAFE_HEAP_LOAD($57 >> 0 | 0, 1, 0) | 0 | 0;
   $59 = $58 & 255;
   _Dither8x8($53, $54, $55, $59);
   $60 = $0;
   $61 = $60 + 544 | 0;
   $62 = $v_dst;
   $63 = $uv_bps;
   $64 = $data;
   $65 = $64 + 796 | 0;
   $66 = SAFE_HEAP_LOAD($65 >> 0 | 0, 1, 0) | 0 | 0;
   $67 = $66 & 255;
   _Dither8x8($61, $62, $63, $67);
  }
  $68 = $mb_x;
  $69 = $68 + 1 | 0;
  $mb_x = $69;
 }
 STACKTOP = sp;
 return;
}

function _CopyBlock8b($dst, $dist, $length) {
 $dst = $dst | 0;
 $dist = $dist | 0;
 $length = $length | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $i = 0, $pattern = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $pattern = sp + 4 | 0;
 $0 = $dst;
 $1 = $dist;
 $2 = $length;
 $3 = $0;
 $4 = $1;
 $5 = 0 - $4 | 0;
 $6 = $3 + $5 | 0;
 $src = $6;
 $7 = $2;
 $8 = ($7 | 0) >= 8;
 L1 : do {
  if ($8) {
   SAFE_HEAP_STORE($pattern | 0, 0 | 0, 4);
   $9 = $1;
   switch ($9 | 0) {
   case 1:
    {
     $10 = $src;
     $11 = SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0 | 0;
     $12 = $11 & 255;
     SAFE_HEAP_STORE($pattern | 0, $12 | 0, 4);
     $13 = SAFE_HEAP_LOAD($pattern | 0, 4, 0) | 0 | 0;
     $14 = Math_imul(16843009, $13) | 0;
     SAFE_HEAP_STORE($pattern | 0, $14 | 0, 4);
     break;
    }
   case 2:
    {
     $15 = $src;
     {}
     SAFE_HEAP_STORE($pattern >> 0 | 0, SAFE_HEAP_LOAD($15 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
     SAFE_HEAP_STORE($pattern + 1 >> 0 | 0, SAFE_HEAP_LOAD($15 + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
     $16 = SAFE_HEAP_LOAD($pattern | 0, 4, 0) | 0 | 0;
     $17 = $16 * 65537 | 0;
     SAFE_HEAP_STORE($pattern | 0, $17 | 0, 4);
     break;
    }
   case 4:
    {
     $18 = $src;
     {}
     SAFE_HEAP_STORE($pattern >> 0 | 0, SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
     SAFE_HEAP_STORE($pattern + 1 >> 0 | 0, SAFE_HEAP_LOAD($18 + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
     SAFE_HEAP_STORE($pattern + 2 >> 0 | 0, SAFE_HEAP_LOAD($18 + 2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
     SAFE_HEAP_STORE($pattern + 3 >> 0 | 0, SAFE_HEAP_LOAD($18 + 3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
     break;
    }
   default:
    {
     break L1;
    }
   }
   $19 = $src;
   $20 = $0;
   $21 = $2;
   $22 = SAFE_HEAP_LOAD($pattern | 0, 4, 0) | 0 | 0;
   _CopySmallPattern8b($19, $20, $21, $22);
   STACKTOP = sp;
   return;
  }
 } while (0);
 $23 = $1;
 $24 = $2;
 $25 = ($23 | 0) >= ($24 | 0);
 if ($25) {
  $26 = $0;
  $27 = $src;
  $28 = $2;
  $29 = $28;
  _memcpy($26 | 0, $27 | 0, $29 | 0) | 0;
  STACKTOP = sp;
  return;
 }
 $i = 0;
 while (1) {
  $30 = $i;
  $31 = $2;
  $32 = ($30 | 0) < ($31 | 0);
  if (!$32) {
   break;
  }
  $33 = $i;
  $34 = $src;
  $35 = $34 + $33 | 0;
  $36 = SAFE_HEAP_LOAD($35 >> 0 | 0, 1, 0) | 0 | 0;
  $37 = $i;
  $38 = $0;
  $39 = $38 + $37 | 0;
  SAFE_HEAP_STORE($39 >> 0 | 0, $36 | 0, 1);
  $40 = $i;
  $41 = $40 + 1 | 0;
  $i = $41;
 }
 STACKTOP = sp;
 return;
}

function _CopySmallPattern32b($src, $dst, $length, $0, $1) {
 $src = $src | 0;
 $dst = $dst | 0;
 $length = $length | 0;
 $0 = $0 | 0;
 $1 = $1 | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0, $63 = 0, $64 = 0;
 var $65 = 0, $66 = 0, $67 = 0, $68 = 0, $69 = 0, $7 = 0, $70 = 0, $71 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $5 = sp;
 $2 = $src;
 $3 = $dst;
 $4 = $length;
 $6 = $5;
 $7 = $6;
 SAFE_HEAP_STORE($7 | 0, $0 | 0, 4);
 $8 = $6 + 4 | 0;
 $9 = $8;
 SAFE_HEAP_STORE($9 | 0, $1 | 0, 4);
 $10 = $3;
 $11 = $10;
 $12 = $11 & 4;
 $13 = ($12 | 0) != 0;
 if ($13) {
  $14 = $2;
  $15 = $14 + 4 | 0;
  $2 = $15;
  $16 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
  $17 = $3;
  $18 = $17 + 4 | 0;
  $3 = $18;
  SAFE_HEAP_STORE($17 | 0, $16 | 0, 4);
  $19 = $5;
  $20 = $19;
  $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
  $22 = $19 + 4 | 0;
  $23 = $22;
  $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
  $25 = $5;
  $26 = $25;
  $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
  $28 = $25 + 4 | 0;
  $29 = $28;
  $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
  $31 = $5;
  $32 = $31;
  SAFE_HEAP_STORE($32 | 0, $24 | 0, 4);
  $33 = $31 + 4 | 0;
  $34 = $33;
  SAFE_HEAP_STORE($34 | 0, $27 | 0, 4);
  $35 = $4;
  $36 = $35 + -1 | 0;
  $4 = $36;
 }
 $37 = $3;
 $38 = $37;
 $39 = $38 & 7;
 $40 = 0 == ($39 | 0);
 if (!$40) {
  ___assert_fail(7810 | 0, 7124 | 0, 887, 7836 | 0);
 }
 $i = 0;
 while (1) {
  $41 = $i;
  $42 = $4;
  $43 = $42 >> 1;
  $44 = ($41 | 0) < ($43 | 0);
  if (!$44) {
   break;
  }
  $45 = $5;
  $46 = $45;
  $47 = SAFE_HEAP_LOAD($46 | 0, 4, 0) | 0 | 0;
  $48 = $45 + 4 | 0;
  $49 = $48;
  $50 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0;
  $51 = $i;
  $52 = $3;
  $53 = $52 + ($51 << 3) | 0;
  $54 = $53;
  $55 = $54;
  SAFE_HEAP_STORE($55 | 0, $47 | 0, 4);
  $56 = $54 + 4 | 0;
  $57 = $56;
  SAFE_HEAP_STORE($57 | 0, $50 | 0, 4);
  $58 = $i;
  $59 = $58 + 1 | 0;
  $i = $59;
 }
 $60 = $4;
 $61 = $60 & 1;
 $62 = ($61 | 0) != 0;
 if (!$62) {
  STACKTOP = sp;
  return;
 }
 $63 = $i;
 $64 = $63 << 1;
 $65 = $2;
 $66 = $65 + ($64 << 2) | 0;
 $67 = SAFE_HEAP_LOAD($66 | 0, 4, 0) | 0 | 0;
 $68 = $i;
 $69 = $68 << 1;
 $70 = $3;
 $71 = $70 + ($69 << 2) | 0;
 SAFE_HEAP_STORE($71 | 0, $67 | 0, 4);
 STACKTOP = sp;
 return;
}

function _ExpandColorMap($num_colors, $transform) {
 $num_colors = $num_colors | 0;
 $transform = $transform | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $data = 0, $final_num_colors = 0, $i = 0, $new_color_map = 0, $new_data = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $num_colors;
 $2 = $transform;
 $3 = $2;
 $4 = $3 + 4 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = 8 >> $5;
 $7 = 1 << $6;
 $final_num_colors = $7;
 $8 = $final_num_colors;
 $9 = ($8 | 0) < 0;
 $10 = $9 << 31 >> 31;
 $11 = _WebPSafeMalloc($8, $10, 4) | 0;
 $new_color_map = $11;
 $12 = $new_color_map;
 $13 = ($12 | 0) == (0 | 0);
 if ($13) {
  $0 = 0;
  $61 = $0;
  STACKTOP = sp;
  return $61 | 0;
 }
 $14 = $2;
 $15 = $14 + 16 | 0;
 $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
 $data = $16;
 $17 = $new_color_map;
 $new_data = $17;
 $18 = $2;
 $19 = $18 + 16 | 0;
 $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
 $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
 $22 = $new_color_map;
 SAFE_HEAP_STORE($22 | 0, $21 | 0, 4);
 $i = 4;
 while (1) {
  $23 = $i;
  $24 = $1;
  $25 = $24 << 2;
  $26 = ($23 | 0) < ($25 | 0);
  if (!$26) {
   break;
  }
  $27 = $i;
  $28 = $data;
  $29 = $28 + $27 | 0;
  $30 = SAFE_HEAP_LOAD($29 >> 0 | 0, 1, 0) | 0 | 0;
  $31 = $30 & 255;
  $32 = $i;
  $33 = $32 - 4 | 0;
  $34 = $new_data;
  $35 = $34 + $33 | 0;
  $36 = SAFE_HEAP_LOAD($35 >> 0 | 0, 1, 0) | 0 | 0;
  $37 = $36 & 255;
  $38 = $31 + $37 | 0;
  $39 = $38 & 255;
  $40 = $39 & 255;
  $41 = $i;
  $42 = $new_data;
  $43 = $42 + $41 | 0;
  SAFE_HEAP_STORE($43 >> 0 | 0, $40 | 0, 1);
  $44 = $i;
  $45 = $44 + 1 | 0;
  $i = $45;
 }
 while (1) {
  $46 = $i;
  $47 = $final_num_colors;
  $48 = $47 << 2;
  $49 = ($46 | 0) < ($48 | 0);
  if (!$49) {
   break;
  }
  $50 = $i;
  $51 = $new_data;
  $52 = $51 + $50 | 0;
  SAFE_HEAP_STORE($52 >> 0 | 0, 0 | 0, 1);
  $53 = $i;
  $54 = $53 + 1 | 0;
  $i = $54;
 }
 $55 = $2;
 $56 = $55 + 16 | 0;
 $57 = SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0;
 _WebPSafeFree($57);
 $58 = $new_color_map;
 $59 = $2;
 $60 = $59 + 16 | 0;
 SAFE_HEAP_STORE($60 | 0, $58 | 0, 4);
 $0 = 1;
 $61 = $0;
 STACKTOP = sp;
 return $61 | 0;
}

function _ConvertToYUVA($src, $width, $y_pos, $output) {
 $src = $src | 0;
 $width = $width | 0;
 $y_pos = $y_pos | 0;
 $output = $output | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $buf = 0, $u = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $src;
 $1 = $width;
 $2 = $y_pos;
 $3 = $output;
 $4 = $3;
 $5 = $4 + 16 | 0;
 $buf = $5;
 $6 = SAFE_HEAP_LOAD(928 | 0, 4, 0) | 0 | 0;
 $7 = $0;
 $8 = $buf;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $10 = $2;
 $11 = $buf;
 $12 = $11 + 16 | 0;
 $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
 $14 = Math_imul($10, $13) | 0;
 $15 = $9 + $14 | 0;
 $16 = $1;
 FUNCTION_TABLE_viii[(SAFE_FT_MASK($6 | 0, 255 | 0) | 0) & 255]($7, $15, $16);
 $17 = $buf;
 $18 = $17 + 4 | 0;
 $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
 $20 = $2;
 $21 = $20 >> 1;
 $22 = $buf;
 $23 = $22 + 20 | 0;
 $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
 $25 = Math_imul($21, $24) | 0;
 $26 = $19 + $25 | 0;
 $u = $26;
 $27 = $buf;
 $28 = $27 + 8 | 0;
 $29 = SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0;
 $30 = $2;
 $31 = $30 >> 1;
 $32 = $buf;
 $33 = $32 + 24 | 0;
 $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
 $35 = Math_imul($31, $34) | 0;
 $36 = $29 + $35 | 0;
 $v = $36;
 $37 = SAFE_HEAP_LOAD(932 | 0, 4, 0) | 0 | 0;
 $38 = $0;
 $39 = $u;
 $40 = $v;
 $41 = $1;
 $42 = $2;
 $43 = $42 & 1;
 $44 = ($43 | 0) != 0;
 $45 = $44 ^ 1;
 $46 = $45 & 1;
 FUNCTION_TABLE_viiiii[(SAFE_FT_MASK($37 | 0, 255 | 0) | 0) & 255]($38, $39, $40, $41, $46);
 $47 = $buf;
 $48 = $47 + 12 | 0;
 $49 = SAFE_HEAP_LOAD($48 | 0, 4, 0) | 0 | 0;
 $50 = ($49 | 0) != (0 | 0);
 if (!$50) {
  STACKTOP = sp;
  return;
 }
 $51 = $buf;
 $52 = $51 + 12 | 0;
 $53 = SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0;
 $54 = $2;
 $55 = $buf;
 $56 = $55 + 28 | 0;
 $57 = SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0;
 $58 = Math_imul($54, $57) | 0;
 $59 = $53 + $58 | 0;
 $a = $59;
 $60 = SAFE_HEAP_LOAD(404 | 0, 4, 0) | 0 | 0;
 $61 = $0;
 $62 = $61 + 3 | 0;
 $63 = $1;
 $64 = $a;
 FUNCTION_TABLE_iiiiiii[(SAFE_FT_MASK($60 | 0, 63 | 0) | 0) & 63]($62, 0, $63, 1, $64, 0) | 0;
 STACKTOP = sp;
 return;
}

function _ExtractAlphaRows($dec, $row) {
 $dec = $dec | 0;
 $row = $row | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $cache_pixs = 0, $dst = 0, $i = 0, $in = 0, $num_rows = 0, $src = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $row;
 $2 = $1;
 $3 = $0;
 $4 = $3 + 108 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = $2 - $5 | 0;
 $num_rows = $6;
 $7 = $0;
 $8 = $7 + 16 | 0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $10 = $0;
 $11 = $10 + 100 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = $0;
 $14 = $13 + 108 | 0;
 $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
 $16 = Math_imul($12, $15) | 0;
 $17 = $9 + ($16 << 2) | 0;
 $in = $17;
 $18 = $num_rows;
 $19 = ($18 | 0) <= 0;
 if ($19) {
  STACKTOP = sp;
  return;
 }
 $20 = $0;
 $21 = $num_rows;
 $22 = $in;
 _ApplyInverseTransforms($20, $21, $22);
 $23 = $0;
 $24 = $23 + 8 | 0;
 $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
 $26 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
 $width = $26;
 $27 = $width;
 $28 = $num_rows;
 $29 = Math_imul($27, $28) | 0;
 $cache_pixs = $29;
 $30 = $0;
 $31 = $30 + 8 | 0;
 $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
 $33 = $32 + 40 | 0;
 $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
 $35 = $width;
 $36 = $0;
 $37 = $36 + 108 | 0;
 $38 = SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0;
 $39 = Math_imul($35, $38) | 0;
 $40 = $34 + $39 | 0;
 $dst = $40;
 $41 = $0;
 $42 = $41 + 20 | 0;
 $43 = SAFE_HEAP_LOAD($42 | 0, 4, 0) | 0 | 0;
 $src = $43;
 $i = 0;
 while (1) {
  $44 = $i;
  $45 = $cache_pixs;
  $46 = ($44 | 0) < ($45 | 0);
  if (!$46) {
   break;
  }
  $47 = $i;
  $48 = $src;
  $49 = $48 + ($47 << 2) | 0;
  $50 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0;
  $51 = $50 >>> 8;
  $52 = $51 & 255;
  $53 = $52 & 255;
  $54 = $i;
  $55 = $dst;
  $56 = $55 + $54 | 0;
  SAFE_HEAP_STORE($56 >> 0 | 0, $53 | 0, 1);
  $57 = $i;
  $58 = $57 + 1 | 0;
  $i = $58;
 }
 $59 = $1;
 $60 = $0;
 $61 = $60 + 116 | 0;
 SAFE_HEAP_STORE($61 | 0, $59 | 0, 4);
 $62 = $0;
 $63 = $62 + 108 | 0;
 SAFE_HEAP_STORE($63 | 0, $59 | 0, 4);
 STACKTOP = sp;
 return;
}

function _ParseRIFF($data, $data_size, $have_all_data, $riff_size) {
 $data = $data | 0;
 $data_size = $data_size | 0;
 $have_all_data = $have_all_data | 0;
 $riff_size = $riff_size | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $data;
 $2 = $data_size;
 $3 = $have_all_data;
 $4 = $riff_size;
 $5 = $1;
 $6 = ($5 | 0) != (0 | 0);
 if (!$6) {
  ___assert_fail(8752 | 0, 8703 | 0, 57, 8934 | 0);
 }
 $7 = $2;
 $8 = ($7 | 0) != (0 | 0);
 if (!$8) {
  ___assert_fail(8780 | 0, 8703 | 0, 58, 8934 | 0);
 }
 $9 = $4;
 $10 = ($9 | 0) != (0 | 0);
 if (!$10) {
  ___assert_fail(8944 | 0, 8703 | 0, 59, 8934 | 0);
 }
 $11 = $4;
 SAFE_HEAP_STORE($11 | 0, 0 | 0, 4);
 $12 = $2;
 $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
 $14 = $13 >>> 0 >= 12;
 if ($14) {
  $15 = $1;
  $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
  $17 = _memcmp($16, 8962, 4) | 0;
  $18 = ($17 | 0) != 0;
  if (!$18) {
   $19 = $1;
   $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
   $21 = $20 + 8 | 0;
   $22 = _memcmp($21, 8967, 4) | 0;
   $23 = ($22 | 0) != 0;
   if ($23) {
    $0 = 3;
    $47 = $0;
    STACKTOP = sp;
    return $47 | 0;
   }
   $24 = $1;
   $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
   $26 = $25 + 4 | 0;
   $27 = _GetLE32($26) | 0;
   $size = $27;
   $28 = $size;
   $29 = $28 >>> 0 < 12;
   if ($29) {
    $0 = 3;
    $47 = $0;
    STACKTOP = sp;
    return $47 | 0;
   }
   $30 = $size;
   $31 = $30 >>> 0 > 4294967286;
   if ($31) {
    $0 = 3;
    $47 = $0;
    STACKTOP = sp;
    return $47 | 0;
   }
   $32 = $3;
   $33 = ($32 | 0) != 0;
   if ($33) {
    $34 = $size;
    $35 = $2;
    $36 = SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0;
    $37 = $36 - 8 | 0;
    $38 = $34 >>> 0 > $37 >>> 0;
    if ($38) {
     $0 = 7;
     $47 = $0;
     STACKTOP = sp;
     return $47 | 0;
    }
   }
   $39 = $size;
   $40 = $4;
   SAFE_HEAP_STORE($40 | 0, $39 | 0, 4);
   $41 = $1;
   $42 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
   $43 = $42 + 12 | 0;
   SAFE_HEAP_STORE($41 | 0, $43 | 0, 4);
   $44 = $2;
   $45 = SAFE_HEAP_LOAD($44 | 0, 4, 0) | 0 | 0;
   $46 = $45 - 12 | 0;
   SAFE_HEAP_STORE($44 | 0, $46 | 0, 4);
  }
 }
 $0 = 0;
 $47 = $0;
 STACKTOP = sp;
 return $47 | 0;
}

function _EmitRescaledAlphaYUV($io, $p, $expected_num_lines_out) {
 $io = $io | 0;
 $p = $p | 0;
 $expected_num_lines_out = $expected_num_lines_out | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $buf = 0, $dst_y = 0, $num_lines_out = 0, $src_a = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $io;
 $1 = $p;
 $2 = $expected_num_lines_out;
 $3 = $0;
 $4 = $3 + 104 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = ($5 | 0) != (0 | 0);
 if (!$6) {
  STACKTOP = sp;
  return 0;
 }
 $7 = $1;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $9 = $8 + 16 | 0;
 $buf = $9;
 $10 = $buf;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = $1;
 $13 = $12 + 16 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $15 = $buf;
 $16 = $15 + 16 | 0;
 $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
 $18 = Math_imul($14, $17) | 0;
 $19 = $11 + $18 | 0;
 $dst_y = $19;
 $20 = $buf;
 $21 = $20 + 12 | 0;
 $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
 $23 = $1;
 $24 = $23 + 16 | 0;
 $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
 $26 = $buf;
 $27 = $26 + 28 | 0;
 $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
 $29 = Math_imul($25, $28) | 0;
 $30 = $22 + $29 | 0;
 $src_a = $30;
 $31 = $0;
 $32 = $31 + 104 | 0;
 $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
 $34 = $0;
 $35 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
 $36 = $0;
 $37 = $36 + 16 | 0;
 $38 = SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0;
 $39 = $1;
 $40 = $39 + 276 | 0;
 $41 = _Rescale($33, $35, $38, $40) | 0;
 $num_lines_out = $41;
 $42 = $2;
 $43 = $num_lines_out;
 $44 = ($42 | 0) == ($43 | 0);
 if (!$44) {
  ___assert_fail(3170 | 0, 3071 | 0, 278, 3210 | 0);
 }
 $45 = $num_lines_out;
 $46 = ($45 | 0) > 0;
 if (!$46) {
  STACKTOP = sp;
  return 0;
 }
 $47 = $dst_y;
 $48 = $buf;
 $49 = $48 + 16 | 0;
 $50 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0;
 $51 = $src_a;
 $52 = $buf;
 $53 = $52 + 28 | 0;
 $54 = SAFE_HEAP_LOAD($53 | 0, 4, 0) | 0 | 0;
 $55 = $1;
 $56 = $55 + 276 | 0;
 $57 = $56 + 52 | 0;
 $58 = SAFE_HEAP_LOAD($57 | 0, 4, 0) | 0 | 0;
 $59 = $num_lines_out;
 _WebPMultRows($47, $50, $51, $54, $58, $59, 1);
 STACKTOP = sp;
 return 0;
}

function _ShiftBytes($br) {
 $br = $br | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $br;
 while (1) {
  $1 = $0;
  $2 = $1 + 20 | 0;
  $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
  $4 = ($3 | 0) >= 8;
  if ($4) {
   $5 = $0;
   $6 = $5 + 16 | 0;
   $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
   $8 = $0;
   $9 = $8 + 12 | 0;
   $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
   $11 = $7 >>> 0 < $10 >>> 0;
   $60 = $11;
  } else {
   $60 = 0;
  }
  $12 = $0;
  if (!$60) {
   break;
  }
  $13 = $12;
  $14 = $13;
  $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
  $16 = $13 + 4 | 0;
  $17 = $16;
  $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
  $19 = _bitshift64Lshr($15 | 0, $18 | 0, 8) | 0;
  $20 = tempRet0;
  $21 = $12;
  $22 = $21;
  SAFE_HEAP_STORE($22 | 0, $19 | 0, 4);
  $23 = $21 + 4 | 0;
  $24 = $23;
  SAFE_HEAP_STORE($24 | 0, $20 | 0, 4);
  $25 = $0;
  $26 = $25 + 16 | 0;
  $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
  $28 = $0;
  $29 = $28 + 8 | 0;
  $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
  $31 = $30 + $27 | 0;
  $32 = SAFE_HEAP_LOAD($31 >> 0 | 0, 1, 0) | 0 | 0;
  $33 = $32 & 255;
  $34 = _bitshift64Shl($33 | 0, 0, 56) | 0;
  $35 = tempRet0;
  $36 = $0;
  $37 = $36;
  $38 = $37;
  $39 = SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0;
  $40 = $37 + 4 | 0;
  $41 = $40;
  $42 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
  $43 = $39 | $34;
  $44 = $42 | $35;
  $45 = $36;
  $46 = $45;
  SAFE_HEAP_STORE($46 | 0, $43 | 0, 4);
  $47 = $45 + 4 | 0;
  $48 = $47;
  SAFE_HEAP_STORE($48 | 0, $44 | 0, 4);
  $49 = $0;
  $50 = $49 + 16 | 0;
  $51 = SAFE_HEAP_LOAD($50 | 0, 4, 0) | 0 | 0;
  $52 = $51 + 1 | 0;
  SAFE_HEAP_STORE($50 | 0, $52 | 0, 4);
  $53 = $0;
  $54 = $53 + 20 | 0;
  $55 = SAFE_HEAP_LOAD($54 | 0, 4, 0) | 0 | 0;
  $56 = $55 - 8 | 0;
  SAFE_HEAP_STORE($54 | 0, $56 | 0, 4);
 }
 $57 = _VP8LIsEndOfStream934($12) | 0;
 $58 = ($57 | 0) != 0;
 if (!$58) {
  STACKTOP = sp;
  return;
 }
 $59 = $0;
 _VP8LSetEndOfStream($59);
 STACKTOP = sp;
 return;
}

function _EmitRescaledYUV($io, $p) {
 $io = $io | 0;
 $p = $p | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $mb_h = 0, $num_lines_out = 0, $scaler = 0, $uv_mb_h = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $io;
 $1 = $p;
 $2 = $0;
 $3 = $2 + 16 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $mb_h = $4;
 $5 = $mb_h;
 $6 = $5 + 1 | 0;
 $7 = $6 >> 1;
 $uv_mb_h = $7;
 $8 = $1;
 $9 = $8 + 24 | 0;
 $scaler = $9;
 $num_lines_out = 0;
 $10 = $1;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = _WebPIsAlphaMode($12) | 0;
 $14 = ($13 | 0) != 0;
 if ($14) {
  $15 = $0;
  $16 = $15 + 104 | 0;
  $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
  $18 = ($17 | 0) != (0 | 0);
  if ($18) {
   $19 = $0;
   $20 = $19 + 20 | 0;
   $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
   $22 = $0;
   $23 = $22 + 32 | 0;
   $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
   $25 = $0;
   $26 = $25 + 104 | 0;
   $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
   $28 = $0;
   $29 = SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0;
   $30 = $0;
   $31 = $30 + 12 | 0;
   $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
   $33 = $mb_h;
   _WebPMultRows($21, $24, $27, $29, $32, $33, 0);
  }
 }
 $34 = $0;
 $35 = $34 + 20 | 0;
 $36 = SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0;
 $37 = $0;
 $38 = $37 + 32 | 0;
 $39 = SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0;
 $40 = $mb_h;
 $41 = $scaler;
 $42 = _Rescale($36, $39, $40, $41) | 0;
 $num_lines_out = $42;
 $43 = $0;
 $44 = $43 + 24 | 0;
 $45 = SAFE_HEAP_LOAD($44 | 0, 4, 0) | 0 | 0;
 $46 = $0;
 $47 = $46 + 36 | 0;
 $48 = SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 0;
 $49 = $uv_mb_h;
 $50 = $1;
 $51 = $50 + 108 | 0;
 _Rescale($45, $48, $49, $51) | 0;
 $52 = $0;
 $53 = $52 + 28 | 0;
 $54 = SAFE_HEAP_LOAD($53 | 0, 4, 0) | 0 | 0;
 $55 = $0;
 $56 = $55 + 36 | 0;
 $57 = SAFE_HEAP_LOAD($56 | 0, 4, 0) | 0 | 0;
 $58 = $uv_mb_h;
 $59 = $1;
 $60 = $59 + 192 | 0;
 _Rescale($54, $57, $58, $60) | 0;
 $61 = $num_lines_out;
 STACKTOP = sp;
 return $61 | 0;
}

function _do_filter2($p, $step) {
 $p = $p | 0;
 $step = $step | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $64 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $a1 = 0, $a2 = 0, $p0 = 0, $p1 = 0, $q0 = 0, $q1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $p;
 $1 = $step;
 $2 = $1;
 $3 = Math_imul(-2, $2) | 0;
 $4 = $0;
 $5 = $4 + $3 | 0;
 $6 = SAFE_HEAP_LOAD($5 >> 0 | 0, 1, 0) | 0 | 0;
 $7 = $6 & 255;
 $p1 = $7;
 $8 = $1;
 $9 = 0 - $8 | 0;
 $10 = $0;
 $11 = $10 + $9 | 0;
 $12 = SAFE_HEAP_LOAD($11 >> 0 | 0, 1, 0) | 0 | 0;
 $13 = $12 & 255;
 $p0 = $13;
 $14 = $0;
 $15 = SAFE_HEAP_LOAD($14 >> 0 | 0, 1, 0) | 0 | 0;
 $16 = $15 & 255;
 $q0 = $16;
 $17 = $1;
 $18 = $0;
 $19 = $18 + $17 | 0;
 $20 = SAFE_HEAP_LOAD($19 >> 0 | 0, 1, 0) | 0 | 0;
 $21 = $20 & 255;
 $q1 = $21;
 $22 = $q0;
 $23 = $p0;
 $24 = $22 - $23 | 0;
 $25 = $24 * 3 | 0;
 $26 = $p1;
 $27 = $q1;
 $28 = $26 - $27 | 0;
 $29 = SAFE_HEAP_LOAD(588 | 0, 4, 0) | 0 | 0;
 $30 = $29 + $28 | 0;
 $31 = SAFE_HEAP_LOAD($30 >> 0 | 0, 1, 0) | 0 | 0;
 $32 = $31 << 24 >> 24;
 $33 = $25 + $32 | 0;
 $a = $33;
 $34 = $a;
 $35 = $34 + 4 | 0;
 $36 = $35 >> 3;
 $37 = SAFE_HEAP_LOAD(592 | 0, 4, 0) | 0 | 0;
 $38 = $37 + $36 | 0;
 $39 = SAFE_HEAP_LOAD($38 >> 0 | 0, 1, 0) | 0 | 0;
 $40 = $39 << 24 >> 24;
 $a1 = $40;
 $41 = $a;
 $42 = $41 + 3 | 0;
 $43 = $42 >> 3;
 $44 = SAFE_HEAP_LOAD(592 | 0, 4, 0) | 0 | 0;
 $45 = $44 + $43 | 0;
 $46 = SAFE_HEAP_LOAD($45 >> 0 | 0, 1, 0) | 0 | 0;
 $47 = $46 << 24 >> 24;
 $a2 = $47;
 $48 = $p0;
 $49 = $a2;
 $50 = $48 + $49 | 0;
 $51 = SAFE_HEAP_LOAD(596 | 0, 4, 0) | 0 | 0;
 $52 = $51 + $50 | 0;
 $53 = SAFE_HEAP_LOAD($52 >> 0 | 0, 1, 0) | 0 | 0;
 $54 = $1;
 $55 = 0 - $54 | 0;
 $56 = $0;
 $57 = $56 + $55 | 0;
 SAFE_HEAP_STORE($57 >> 0 | 0, $53 | 0, 1);
 $58 = $q0;
 $59 = $a1;
 $60 = $58 - $59 | 0;
 $61 = SAFE_HEAP_LOAD(596 | 0, 4, 0) | 0 | 0;
 $62 = $61 + $60 | 0;
 $63 = SAFE_HEAP_LOAD($62 >> 0 | 0, 1, 0) | 0 | 0;
 $64 = $0;
 SAFE_HEAP_STORE($64 >> 0 | 0, $63 | 0, 1);
 STACKTOP = sp;
 return;
}

function _WebPDequantizeLevels($data, $width, $height, $strength) {
 $data = $data | 0;
 $width = $width | 0;
 $height = $height | 0;
 $strength = $strength | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $p = 0, $radius = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 96 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $p = sp;
 $1 = $data;
 $2 = $width;
 $3 = $height;
 $4 = $strength;
 $5 = $4;
 $6 = $5 << 2;
 $7 = ($6 | 0) / 100 & -1;
 $radius = $7;
 $8 = $4;
 $9 = ($8 | 0) < 0;
 $10 = $4;
 $11 = ($10 | 0) > 100;
 $or$cond = $9 | $11;
 if ($or$cond) {
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;
  return $42 | 0;
 }
 $12 = $1;
 $13 = ($12 | 0) == (0 | 0);
 $14 = $2;
 $15 = ($14 | 0) <= 0;
 $or$cond3 = $13 | $15;
 $16 = $3;
 $17 = ($16 | 0) <= 0;
 $or$cond5 = $or$cond3 | $17;
 if ($or$cond5) {
  $0 = 0;
  $42 = $0;
  STACKTOP = sp;
  return $42 | 0;
 }
 $18 = $radius;
 $19 = ($18 | 0) > 0;
 if ($19) {
  dest = $p;
  stop = dest + 72 | 0;
  do {
   SAFE_HEAP_STORE(dest | 0, 0 | 0 | 0, 4);
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  $20 = $1;
  $21 = $2;
  $22 = $3;
  $23 = $radius;
  $24 = _InitParams($20, $21, $22, $23, $p) | 0;
  $25 = ($24 | 0) != 0;
  if (!$25) {
   $0 = 0;
   $42 = $0;
   STACKTOP = sp;
   return $42 | 0;
  }
  $26 = $p + 52 | 0;
  $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
  $28 = ($27 | 0) > 2;
  L15 : do {
   if ($28) {
    while (1) {
     $29 = $p + 8 | 0;
     $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
     $31 = $p + 4 | 0;
     $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
     $33 = ($30 | 0) < ($32 | 0);
     if (!$33) {
      break L15;
     }
     _VFilter($p);
     $34 = $p + 8 | 0;
     $35 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
     $36 = $p + 20 | 0;
     $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
     $38 = ($35 | 0) >= ($37 | 0);
     if ($38) {
      _HFilter($p);
      _ApplyFilter($p);
     }
     $39 = $p + 8 | 0;
     $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
     $41 = $40 + 1 | 0;
     SAFE_HEAP_STORE($39 | 0, $41 | 0, 4);
    }
   }
  } while (0);
  _CleanupParams($p);
 }
 $0 = 1;
 $42 = $0;
 STACKTOP = sp;
 return $42 | 0;
}

function _EmitRescaledAlphaRGB($io, $p, $expected_num_out_lines) {
 $io = $io | 0;
 $p = $p | 0;
 $expected_num_out_lines = $expected_num_out_lines | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lines_left = 0, $row_offset = 0, $scaler = 0;
 var $y_end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $io;
 $1 = $p;
 $2 = $expected_num_out_lines;
 $3 = $0;
 $4 = $3 + 104 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = ($5 | 0) != (0 | 0);
 if (!$6) {
  STACKTOP = sp;
  return 0;
 }
 $7 = $1;
 $8 = $7 + 276 | 0;
 $scaler = $8;
 $9 = $2;
 $lines_left = $9;
 $10 = $1;
 $11 = $10 + 16 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = $lines_left;
 $14 = $12 + $13 | 0;
 $y_end = $14;
 while (1) {
  $15 = $lines_left;
  $16 = ($15 | 0) > 0;
  if (!$16) {
   break;
  }
  $17 = $scaler;
  $18 = $17 + 60 | 0;
  $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
  $20 = $0;
  $21 = $20 + 8 | 0;
  $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
  $23 = $19 - $22 | 0;
  $row_offset = $23;
  $24 = $scaler;
  $25 = $0;
  $26 = $25 + 16 | 0;
  $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
  $28 = $0;
  $29 = $28 + 8 | 0;
  $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
  $31 = $27 + $30 | 0;
  $32 = $scaler;
  $33 = $32 + 60 | 0;
  $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
  $35 = $31 - $34 | 0;
  $36 = $0;
  $37 = $36 + 104 | 0;
  $38 = SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0;
  $39 = $row_offset;
  $40 = $0;
  $41 = SAFE_HEAP_LOAD($40 | 0, 4, 0) | 0 | 0;
  $42 = Math_imul($39, $41) | 0;
  $43 = $38 + $42 | 0;
  $44 = $0;
  $45 = SAFE_HEAP_LOAD($44 | 0, 4, 0) | 0 | 0;
  _WebPRescalerImport($24, $35, $43, $45) | 0;
  $46 = $1;
  $47 = $46 + 372 | 0;
  $48 = SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 0;
  $49 = $1;
  $50 = $y_end;
  $51 = $lines_left;
  $52 = $50 - $51 | 0;
  $53 = $lines_left;
  $54 = FUNCTION_TABLE_iiii[(SAFE_FT_MASK($48 | 0, 255 | 0) | 0) & 255]($49, $52, $53) | 0;
  $55 = $lines_left;
  $56 = $55 - $54 | 0;
  $lines_left = $56;
 }
 STACKTOP = sp;
 return 0;
}

function _CheckSizeArgumentsOverflow($0, $1, $size) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $size = $size | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0, $45 = 0, $46 = 0;
 var $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $7 = 0, $8 = 0, $9 = 0, $total_size = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $3 = sp + 8 | 0;
 $total_size = sp;
 $5 = $3;
 $6 = $5;
 SAFE_HEAP_STORE($6 | 0, $0 | 0, 4);
 $7 = $5 + 4 | 0;
 $8 = $7;
 SAFE_HEAP_STORE($8 | 0, $1 | 0, 4);
 $4 = $size;
 $9 = $3;
 $10 = $9;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = $9 + 4 | 0;
 $13 = $12;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $15 = $4;
 $16 = ___muldi3($11 | 0, $14 | 0, $15 | 0, 0) | 0;
 $17 = tempRet0;
 $18 = $total_size;
 $19 = $18;
 SAFE_HEAP_STORE($19 | 0, $16 | 0, 4);
 $20 = $18 + 4 | 0;
 $21 = $20;
 SAFE_HEAP_STORE($21 | 0, $17 | 0, 4);
 $22 = $3;
 $23 = $22;
 $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
 $25 = $22 + 4 | 0;
 $26 = $25;
 $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
 $28 = ($24 | 0) == 0;
 $29 = ($27 | 0) == 0;
 $30 = $28 & $29;
 if ($30) {
  $2 = 1;
  $60 = $2;
  STACKTOP = sp;
  return $60 | 0;
 }
 $31 = $4;
 $32 = $3;
 $33 = $32;
 $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
 $35 = $32 + 4 | 0;
 $36 = $35;
 $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
 $38 = ___udivdi3(0, 256, $34 | 0, $37 | 0) | 0;
 $39 = tempRet0;
 $40 = 0 > $39 >>> 0;
 $41 = $31 >>> 0 > $38 >>> 0;
 $42 = 0 == ($39 | 0);
 $43 = $42 & $41;
 $44 = $40 | $43;
 if ($44) {
  $2 = 0;
  $60 = $2;
  STACKTOP = sp;
  return $60 | 0;
 }
 $45 = $total_size;
 $46 = $45;
 $47 = SAFE_HEAP_LOAD($46 | 0, 4, 0) | 0 | 0;
 $48 = $45 + 4 | 0;
 $49 = $48;
 $50 = SAFE_HEAP_LOAD($49 | 0, 4, 0) | 0 | 0;
 $51 = $total_size;
 $52 = $51;
 $53 = SAFE_HEAP_LOAD($52 | 0, 4, 0) | 0 | 0;
 $54 = $51 + 4 | 0;
 $55 = $54;
 $56 = SAFE_HEAP_LOAD($55 | 0, 4, 0) | 0 | 0;
 $57 = ($47 | 0) != ($53 | 0);
 $58 = ($50 | 0) != 0;
 $59 = $57 | $58;
 if ($59) {
  $2 = 0;
  $60 = $2;
  STACKTOP = sp;
  return $60 | 0;
 } else {
  $2 = 1;
  $60 = $2;
  STACKTOP = sp;
  return $60 | 0;
 }
 return 0 | 0;
}

function _VP8GetBit929($br, $prob) {
 $br = $br | 0;
 $prob = $prob | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bit = 0, $pos = 0, $range = 0, $shift = 0, $split = 0, $value = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $br;
 $1 = $prob;
 $2 = $0;
 $3 = $2 + 4 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $range = $4;
 $5 = $0;
 $6 = $5 + 8 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = ($7 | 0) < 0;
 if ($8) {
  $9 = $0;
  _VP8LoadNewBytes927($9);
 }
 $10 = $0;
 $11 = $10 + 8 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $pos = $12;
 $13 = $range;
 $14 = $1;
 $15 = Math_imul($13, $14) | 0;
 $16 = $15 >>> 8;
 $split = $16;
 $17 = $0;
 $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
 $19 = $pos;
 $20 = $18 >>> $19;
 $value = $20;
 $21 = $value;
 $22 = $split;
 $23 = $21 >>> 0 > $22 >>> 0;
 $24 = $split;
 if ($23) {
  $25 = $24 + 1 | 0;
  $26 = $range;
  $27 = $26 - $25 | 0;
  $range = $27;
  $28 = $split;
  $29 = $28 + 1 | 0;
  $30 = $pos;
  $31 = $29 << $30;
  $32 = $0;
  $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
  $34 = $33 - $31 | 0;
  SAFE_HEAP_STORE($32 | 0, $34 | 0, 4);
  $bit = 1;
 } else {
  $range = $24;
  $bit = 0;
 }
 $35 = $range;
 $36 = $35 >>> 0 <= 126;
 if (!$36) {
  $50 = $range;
  $51 = $0;
  $52 = $51 + 4 | 0;
  SAFE_HEAP_STORE($52 | 0, $50 | 0, 4);
  $53 = $bit;
  STACKTOP = sp;
  return $53 | 0;
 }
 $37 = $range;
 $38 = 13765 + $37 | 0;
 $39 = SAFE_HEAP_LOAD($38 >> 0 | 0, 1, 0) | 0 | 0;
 $40 = $39 & 255;
 $shift = $40;
 $41 = $range;
 $42 = 13893 + $41 | 0;
 $43 = SAFE_HEAP_LOAD($42 >> 0 | 0, 1, 0) | 0 | 0;
 $44 = $43 & 255;
 $range = $44;
 $45 = $shift;
 $46 = $0;
 $47 = $46 + 8 | 0;
 $48 = SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 0;
 $49 = $48 - $45 | 0;
 SAFE_HEAP_STORE($47 | 0, $49 | 0, 4);
 $50 = $range;
 $51 = $0;
 $52 = $51 + 4 | 0;
 SAFE_HEAP_STORE($52 | 0, $50 | 0, 4);
 $53 = $bit;
 STACKTOP = sp;
 return $53 | 0;
}

function _VP8GetBit82($br, $prob) {
 $br = $br | 0;
 $prob = $prob | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bit = 0, $pos = 0, $range = 0, $shift = 0, $split = 0, $value = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $br;
 $1 = $prob;
 $2 = $0;
 $3 = $2 + 4 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $range = $4;
 $5 = $0;
 $6 = $5 + 8 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = ($7 | 0) < 0;
 if ($8) {
  $9 = $0;
  _VP8LoadNewBytes83($9);
 }
 $10 = $0;
 $11 = $10 + 8 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $pos = $12;
 $13 = $range;
 $14 = $1;
 $15 = Math_imul($13, $14) | 0;
 $16 = $15 >>> 8;
 $split = $16;
 $17 = $0;
 $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
 $19 = $pos;
 $20 = $18 >>> $19;
 $value = $20;
 $21 = $value;
 $22 = $split;
 $23 = $21 >>> 0 > $22 >>> 0;
 $24 = $split;
 if ($23) {
  $25 = $24 + 1 | 0;
  $26 = $range;
  $27 = $26 - $25 | 0;
  $range = $27;
  $28 = $split;
  $29 = $28 + 1 | 0;
  $30 = $pos;
  $31 = $29 << $30;
  $32 = $0;
  $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
  $34 = $33 - $31 | 0;
  SAFE_HEAP_STORE($32 | 0, $34 | 0, 4);
  $bit = 1;
 } else {
  $range = $24;
  $bit = 0;
 }
 $35 = $range;
 $36 = $35 >>> 0 <= 126;
 if (!$36) {
  $50 = $range;
  $51 = $0;
  $52 = $51 + 4 | 0;
  SAFE_HEAP_STORE($52 | 0, $50 | 0, 4);
  $53 = $bit;
  STACKTOP = sp;
  return $53 | 0;
 }
 $37 = $range;
 $38 = 13765 + $37 | 0;
 $39 = SAFE_HEAP_LOAD($38 >> 0 | 0, 1, 0) | 0 | 0;
 $40 = $39 & 255;
 $shift = $40;
 $41 = $range;
 $42 = 13893 + $41 | 0;
 $43 = SAFE_HEAP_LOAD($42 >> 0 | 0, 1, 0) | 0 | 0;
 $44 = $43 & 255;
 $range = $44;
 $45 = $shift;
 $46 = $0;
 $47 = $46 + 8 | 0;
 $48 = SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 0;
 $49 = $48 - $45 | 0;
 SAFE_HEAP_STORE($47 | 0, $49 | 0, 4);
 $50 = $range;
 $51 = $0;
 $52 = $51 + 4 | 0;
 SAFE_HEAP_STORE($52 | 0, $50 | 0, 4);
 $53 = $bit;
 STACKTOP = sp;
 return $53 | 0;
}

function _VP8GetBit($br, $prob) {
 $br = $br | 0;
 $prob = $prob | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bit = 0, $pos = 0, $range = 0, $shift = 0, $split = 0, $value = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $br;
 $1 = $prob;
 $2 = $0;
 $3 = $2 + 4 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $range = $4;
 $5 = $0;
 $6 = $5 + 8 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = ($7 | 0) < 0;
 if ($8) {
  $9 = $0;
  _VP8LoadNewBytes($9);
 }
 $10 = $0;
 $11 = $10 + 8 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $pos = $12;
 $13 = $range;
 $14 = $1;
 $15 = Math_imul($13, $14) | 0;
 $16 = $15 >>> 8;
 $split = $16;
 $17 = $0;
 $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
 $19 = $pos;
 $20 = $18 >>> $19;
 $value = $20;
 $21 = $value;
 $22 = $split;
 $23 = $21 >>> 0 > $22 >>> 0;
 $24 = $split;
 if ($23) {
  $25 = $24 + 1 | 0;
  $26 = $range;
  $27 = $26 - $25 | 0;
  $range = $27;
  $28 = $split;
  $29 = $28 + 1 | 0;
  $30 = $pos;
  $31 = $29 << $30;
  $32 = $0;
  $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
  $34 = $33 - $31 | 0;
  SAFE_HEAP_STORE($32 | 0, $34 | 0, 4);
  $bit = 1;
 } else {
  $range = $24;
  $bit = 0;
 }
 $35 = $range;
 $36 = $35 >>> 0 <= 126;
 if (!$36) {
  $50 = $range;
  $51 = $0;
  $52 = $51 + 4 | 0;
  SAFE_HEAP_STORE($52 | 0, $50 | 0, 4);
  $53 = $bit;
  STACKTOP = sp;
  return $53 | 0;
 }
 $37 = $range;
 $38 = 13765 + $37 | 0;
 $39 = SAFE_HEAP_LOAD($38 >> 0 | 0, 1, 0) | 0 | 0;
 $40 = $39 & 255;
 $shift = $40;
 $41 = $range;
 $42 = 13893 + $41 | 0;
 $43 = SAFE_HEAP_LOAD($42 >> 0 | 0, 1, 0) | 0 | 0;
 $44 = $43 & 255;
 $range = $44;
 $45 = $shift;
 $46 = $0;
 $47 = $46 + 8 | 0;
 $48 = SAFE_HEAP_LOAD($47 | 0, 4, 0) | 0 | 0;
 $49 = $48 - $45 | 0;
 SAFE_HEAP_STORE($47 | 0, $49 | 0, 4);
 $50 = $range;
 $51 = $0;
 $52 = $51 + 4 | 0;
 SAFE_HEAP_STORE($52 | 0, $50 | 0, 4);
 $53 = $bit;
 STACKTOP = sp;
 return $53 | 0;
}

function _ApplyFilter($p) {
 $p = $p | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $average = 0, $c = 0, $correction = 0;
 var $dst = 0, $v = 0, $w = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = $1 + 48 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $average = $3;
 $4 = $0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $w = $5;
 $6 = $0;
 $7 = $6 + 68 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $correction = $8;
 $9 = $0;
 $10 = $9 + 16 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $dst = $11;
 $x = 0;
 while (1) {
  $12 = $x;
  $13 = $w;
  $14 = ($12 | 0) < ($13 | 0);
  if (!$14) {
   break;
  }
  $15 = $x;
  $16 = $dst;
  $17 = $16 + $15 | 0;
  $18 = SAFE_HEAP_LOAD($17 >> 0 | 0, 1, 0) | 0 | 0;
  $19 = $18 & 255;
  $v = $19;
  $20 = $v;
  $21 = $0;
  $22 = $21 + 60 | 0;
  $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
  $24 = ($20 | 0) < ($23 | 0);
  if ($24) {
   $25 = $v;
   $26 = $0;
   $27 = $26 + 56 | 0;
   $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
   $29 = ($25 | 0) > ($28 | 0);
   if ($29) {
    $30 = $v;
    $31 = $30 << 0;
    $32 = $x;
    $33 = $average;
    $34 = $33 + ($32 << 1) | 0;
    $35 = SAFE_HEAP_LOAD($34 | 0, 2, 0) | 0 | 0;
    $36 = $35 & 65535;
    $37 = $v;
    $38 = $37 << 2;
    $39 = $36 - $38 | 0;
    $40 = $correction;
    $41 = $40 + ($39 << 1) | 0;
    $42 = SAFE_HEAP_LOAD($41 | 0, 2, 0) | 0 | 0;
    $43 = $42 << 16 >> 16;
    $44 = $31 + $43 | 0;
    $c = $44;
    $45 = $c;
    $46 = _clip_8b1022($45) | 0;
    $47 = $x;
    $48 = $dst;
    $49 = $48 + $47 | 0;
    SAFE_HEAP_STORE($49 >> 0 | 0, $46 | 0, 1);
   }
  }
  $50 = $x;
  $51 = $50 + 1 | 0;
  $x = $51;
 }
 $52 = $w;
 $53 = $0;
 $54 = $53 + 16 | 0;
 $55 = SAFE_HEAP_LOAD($54 | 0, 4, 0) | 0 | 0;
 $56 = $55 + $52 | 0;
 SAFE_HEAP_STORE($54 | 0, $56 | 0, 4);
 STACKTOP = sp;
 return;
}

function _GetAlphaSourceRow($io, $alpha, $num_rows) {
 $io = $io | 0;
 $alpha = $alpha | 0;
 $num_rows = $num_rows | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $start_y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $io;
 $1 = $alpha;
 $2 = $num_rows;
 $3 = $0;
 $4 = $3 + 8 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $start_y = $5;
 $6 = $0;
 $7 = $6 + 16 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $9 = $2;
 SAFE_HEAP_STORE($9 | 0, $8 | 0, 4);
 $10 = $0;
 $11 = $10 + 56 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = ($12 | 0) != 0;
 if (!$13) {
  $52 = $start_y;
  STACKTOP = sp;
  return $52 | 0;
 }
 $14 = $start_y;
 $15 = ($14 | 0) == 0;
 if ($15) {
  $16 = $2;
  $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
  $18 = $17 + -1 | 0;
  SAFE_HEAP_STORE($16 | 0, $18 | 0, 4);
 } else {
  $19 = $start_y;
  $20 = $19 + -1 | 0;
  $start_y = $20;
  $21 = $0;
  $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
  $23 = $1;
  $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
  $25 = 0 - $22 | 0;
  $26 = $24 + $25 | 0;
  SAFE_HEAP_STORE($23 | 0, $26 | 0, 4);
 }
 $27 = $0;
 $28 = $27 + 84 | 0;
 $29 = SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0;
 $30 = $0;
 $31 = $30 + 8 | 0;
 $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
 $33 = $29 + $32 | 0;
 $34 = $0;
 $35 = $34 + 16 | 0;
 $36 = SAFE_HEAP_LOAD($35 | 0, 4, 0) | 0 | 0;
 $37 = $33 + $36 | 0;
 $38 = $0;
 $39 = $38 + 88 | 0;
 $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
 $41 = ($37 | 0) == ($40 | 0);
 if (!$41) {
  $52 = $start_y;
  STACKTOP = sp;
  return $52 | 0;
 }
 $42 = $0;
 $43 = $42 + 88 | 0;
 $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
 $45 = $0;
 $46 = $45 + 84 | 0;
 $47 = SAFE_HEAP_LOAD($46 | 0, 4, 0) | 0 | 0;
 $48 = $44 - $47 | 0;
 $49 = $start_y;
 $50 = $48 - $49 | 0;
 $51 = $2;
 SAFE_HEAP_STORE($51 | 0, $50 | 0, 4);
 $52 = $start_y;
 STACKTOP = sp;
 return $52 | 0;
}

function _VP8RandomBits2($rg, $num_bits, $amp) {
 $rg = $rg | 0;
 $num_bits = $num_bits | 0;
 $amp = $amp | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $diff = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $rg;
 $1 = $num_bits;
 $2 = $amp;
 $3 = $1;
 $4 = $3 + 8 | 0;
 $5 = ($4 | 0) <= 31;
 if (!$5) {
  ___assert_fail(2693 | 0, 2732 | 0, 42, 2761 | 0);
 }
 $6 = $0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = $0;
 $9 = $8 + 8 | 0;
 $10 = $9 + ($7 << 2) | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = $0;
 $13 = $12 + 4 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $15 = $0;
 $16 = $15 + 8 | 0;
 $17 = $16 + ($14 << 2) | 0;
 $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
 $19 = $11 - $18 | 0;
 $diff = $19;
 $20 = $diff;
 $21 = ($20 | 0) < 0;
 if ($21) {
  $22 = $diff;
  $23 = $22 + -2147483648 | 0;
  $diff = $23;
 }
 $24 = $diff;
 $25 = $0;
 $26 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
 $27 = $0;
 $28 = $27 + 8 | 0;
 $29 = $28 + ($26 << 2) | 0;
 SAFE_HEAP_STORE($29 | 0, $24 | 0, 4);
 $30 = $0;
 $31 = SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0;
 $32 = $31 + 1 | 0;
 SAFE_HEAP_STORE($30 | 0, $32 | 0, 4);
 $33 = ($32 | 0) == 55;
 if ($33) {
  $34 = $0;
  SAFE_HEAP_STORE($34 | 0, 0 | 0, 4);
 }
 $35 = $0;
 $36 = $35 + 4 | 0;
 $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
 $38 = $37 + 1 | 0;
 SAFE_HEAP_STORE($36 | 0, $38 | 0, 4);
 $39 = ($38 | 0) == 55;
 if ($39) {
  $40 = $0;
  $41 = $40 + 4 | 0;
  SAFE_HEAP_STORE($41 | 0, 0 | 0, 4);
 }
 $42 = $diff;
 $43 = $42 << 1;
 $44 = $1;
 $45 = 32 - $44 | 0;
 $46 = $43 >> $45;
 $diff = $46;
 $47 = $diff;
 $48 = $2;
 $49 = Math_imul($47, $48) | 0;
 $50 = $49 >> 8;
 $diff = $50;
 $51 = $1;
 $52 = $51 - 1 | 0;
 $53 = 1 << $52;
 $54 = $diff;
 $55 = $54 + $53 | 0;
 $diff = $55;
 $56 = $diff;
 STACKTOP = sp;
 return $56 | 0;
}

function _WebPMultARGBRowC($ptr, $width, $inverse) {
 $ptr = $ptr | 0;
 $width = $width | 0;
 $inverse = $inverse | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $alpha = 0, $argb = 0, $out = 0, $scale = 0, $x = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $ptr;
 $1 = $width;
 $2 = $inverse;
 $x = 0;
 while (1) {
  $3 = $x;
  $4 = $1;
  $5 = ($3 | 0) < ($4 | 0);
  if (!$5) {
   break;
  }
  $6 = $x;
  $7 = $0;
  $8 = $7 + ($6 << 2) | 0;
  $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
  $argb = $9;
  $10 = $argb;
  $11 = $10 >>> 0 < 4278190080;
  do {
   if ($11) {
    $12 = $argb;
    $13 = $12 >>> 0 <= 16777215;
    if ($13) {
     $14 = $x;
     $15 = $0;
     $16 = $15 + ($14 << 2) | 0;
     SAFE_HEAP_STORE($16 | 0, 0 | 0, 4);
     break;
    } else {
     $17 = $argb;
     $18 = $17 >>> 24;
     $19 = $18 & 255;
     $alpha = $19;
     $20 = $alpha;
     $21 = $2;
     $22 = _GetScale($20, $21) | 0;
     $scale = $22;
     $23 = $argb;
     $24 = $23 & -16777216;
     $out = $24;
     $25 = $argb;
     $26 = $25 >>> 0;
     $27 = $26 & 255;
     $28 = $scale;
     $29 = _Mult($27, $28) | 0;
     $30 = $29 << 0;
     $31 = $out;
     $32 = $31 | $30;
     $out = $32;
     $33 = $argb;
     $34 = $33 >>> 8;
     $35 = $34 & 255;
     $36 = $scale;
     $37 = _Mult($35, $36) | 0;
     $38 = $37 << 8;
     $39 = $out;
     $40 = $39 | $38;
     $out = $40;
     $41 = $argb;
     $42 = $41 >>> 16;
     $43 = $42 & 255;
     $44 = $scale;
     $45 = _Mult($43, $44) | 0;
     $46 = $45 << 16;
     $47 = $out;
     $48 = $47 | $46;
     $out = $48;
     $49 = $out;
     $50 = $x;
     $51 = $0;
     $52 = $51 + ($50 << 2) | 0;
     SAFE_HEAP_STORE($52 | 0, $49 | 0, 4);
     break;
    }
   }
  } while (0);
  $53 = $x;
  $54 = $53 + 1 | 0;
  $x = $54;
 }
 STACKTOP = sp;
 return;
}

function _VP8LTransformColorInverse_C($m, $data, $num_pixels) {
 $m = $m | 0;
 $data = $data | 0;
 $num_pixels = $num_pixels | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argb = 0, $green = 0, $i = 0, $new_blue = 0, $new_red = 0;
 var $red = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $m;
 $1 = $data;
 $2 = $num_pixels;
 $i = 0;
 while (1) {
  $3 = $i;
  $4 = $2;
  $5 = ($3 | 0) < ($4 | 0);
  if (!$5) {
   break;
  }
  $6 = $i;
  $7 = $1;
  $8 = $7 + ($6 << 2) | 0;
  $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
  $argb = $9;
  $10 = $argb;
  $11 = $10 >>> 8;
  $green = $11;
  $12 = $argb;
  $13 = $12 >>> 16;
  $red = $13;
  $14 = $red;
  $new_red = $14;
  $15 = $argb;
  $new_blue = $15;
  $16 = $0;
  $17 = SAFE_HEAP_LOAD($16 >> 0 | 0, 1, 0) | 0 | 0;
  $18 = $green;
  $19 = $18 & 255;
  $20 = _ColorTransformDelta($17, $19) | 0;
  $21 = $new_red;
  $22 = $21 + $20 | 0;
  $new_red = $22;
  $23 = $new_red;
  $24 = $23 & 255;
  $new_red = $24;
  $25 = $0;
  $26 = $25 + 1 | 0;
  $27 = SAFE_HEAP_LOAD($26 >> 0 | 0, 1, 0) | 0 | 0;
  $28 = $green;
  $29 = $28 & 255;
  $30 = _ColorTransformDelta($27, $29) | 0;
  $31 = $new_blue;
  $32 = $31 + $30 | 0;
  $new_blue = $32;
  $33 = $0;
  $34 = $33 + 2 | 0;
  $35 = SAFE_HEAP_LOAD($34 >> 0 | 0, 1, 0) | 0 | 0;
  $36 = $new_red;
  $37 = $36 & 255;
  $38 = _ColorTransformDelta($35, $37) | 0;
  $39 = $new_blue;
  $40 = $39 + $38 | 0;
  $new_blue = $40;
  $41 = $new_blue;
  $42 = $41 & 255;
  $new_blue = $42;
  $43 = $argb;
  $44 = $43 & -16711936;
  $45 = $new_red;
  $46 = $45 << 16;
  $47 = $44 | $46;
  $48 = $new_blue;
  $49 = $47 | $48;
  $50 = $i;
  $51 = $1;
  $52 = $51 + ($50 << 2) | 0;
  SAFE_HEAP_STORE($52 | 0, $49 | 0, 4);
  $53 = $i;
  $54 = $53 + 1 | 0;
  $i = $54;
 }
 STACKTOP = sp;
 return;
}

function _VP8LDecodeHeader($dec, $io) {
 $dec = $dec | 0;
 $io = $io | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $has_alpha = 0, $height = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $width = sp + 8 | 0;
 $height = sp + 4 | 0;
 $has_alpha = sp;
 $1 = $dec;
 $2 = $io;
 $3 = $1;
 $4 = ($3 | 0) == (0 | 0);
 if ($4) {
  $0 = 0;
  $40 = $0;
  STACKTOP = sp;
  return $40 | 0;
 }
 $5 = $2;
 $6 = ($5 | 0) == (0 | 0);
 if ($6) {
  $7 = $1;
  SAFE_HEAP_STORE($7 | 0, 2 | 0, 4);
  $0 = 0;
  $40 = $0;
  STACKTOP = sp;
  return $40 | 0;
 }
 $8 = $2;
 $9 = $1;
 $10 = $9 + 8 | 0;
 SAFE_HEAP_STORE($10 | 0, $8 | 0, 4);
 $11 = $1;
 SAFE_HEAP_STORE($11 | 0, 0 | 0, 4);
 $12 = $1;
 $13 = $12 + 24 | 0;
 $14 = $2;
 $15 = $14 + 64 | 0;
 $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
 $17 = $2;
 $18 = $17 + 60 | 0;
 $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
 _VP8LInitBitReader($13, $16, $19);
 $20 = $1;
 $21 = $20 + 24 | 0;
 $22 = _ReadImageInfo($21, $width, $height, $has_alpha) | 0;
 $23 = ($22 | 0) != 0;
 $24 = $1;
 if ($23) {
  $25 = $24 + 4 | 0;
  SAFE_HEAP_STORE($25 | 0, 2 | 0, 4);
  $26 = SAFE_HEAP_LOAD($width | 0, 4, 0) | 0 | 0;
  $27 = $2;
  SAFE_HEAP_STORE($27 | 0, $26 | 0, 4);
  $28 = SAFE_HEAP_LOAD($height | 0, 4, 0) | 0 | 0;
  $29 = $2;
  $30 = $29 + 4 | 0;
  SAFE_HEAP_STORE($30 | 0, $28 | 0, 4);
  $31 = SAFE_HEAP_LOAD($width | 0, 4, 0) | 0 | 0;
  $32 = SAFE_HEAP_LOAD($height | 0, 4, 0) | 0 | 0;
  $33 = $1;
  $34 = _DecodeImageStream($31, $32, 1, $33, 0) | 0;
  $35 = ($34 | 0) != 0;
  if ($35) {
   $0 = 1;
   $40 = $0;
   STACKTOP = sp;
   return $40 | 0;
  }
 } else {
  SAFE_HEAP_STORE($24 | 0, 3 | 0, 4);
 }
 $36 = $1;
 _VP8LClear($36);
 $37 = $1;
 $38 = SAFE_HEAP_LOAD($37 | 0, 4, 0) | 0 | 0;
 $39 = ($38 | 0) != 0;
 if (!$39) {
  ___assert_fail(7232 | 0, 7124 | 0, 1557, 7262 | 0);
 }
 $0 = 0;
 $40 = $0;
 STACKTOP = sp;
 return $40 | 0;
}

function _VP8LDecodeAlphaImageStream($alph_dec, $last_row) {
 $alph_dec = $alph_dec | 0;
 $last_row = $last_row | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dec = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $alph_dec;
 $2 = $last_row;
 $3 = $1;
 $4 = $3 + 20 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $dec = $5;
 $6 = $dec;
 $7 = ($6 | 0) != (0 | 0);
 if (!$7) {
  ___assert_fail(7168 | 0, 7124 | 0, 1515, 7180 | 0);
 }
 $8 = $2;
 $9 = $dec;
 $10 = $9 + 104 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = ($8 | 0) <= ($11 | 0);
 if (!$12) {
  ___assert_fail(7207 | 0, 7124 | 0, 1516, 7180 | 0);
 }
 $13 = $dec;
 $14 = $13 + 112 | 0;
 $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
 $16 = $dec;
 $17 = $16 + 100 | 0;
 $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
 $19 = $dec;
 $20 = $19 + 104 | 0;
 $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
 $22 = Math_imul($18, $21) | 0;
 $23 = ($15 | 0) == ($22 | 0);
 if ($23) {
  $0 = 1;
  $49 = $0;
  STACKTOP = sp;
  return $49 | 0;
 }
 $24 = $1;
 $25 = $24 + 132 | 0;
 $26 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
 $27 = ($26 | 0) != 0;
 $28 = $dec;
 $29 = $dec;
 $30 = $29 + 16 | 0;
 $31 = SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0;
 if ($27) {
  $32 = $dec;
  $33 = $32 + 100 | 0;
  $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
  $35 = $dec;
  $36 = $35 + 104 | 0;
  $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
  $38 = $2;
  $39 = _DecodeAlphaData($28, $31, $34, $37, $38) | 0;
  $48 = $39;
 } else {
  $40 = $dec;
  $41 = $40 + 100 | 0;
  $42 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
  $43 = $dec;
  $44 = $43 + 104 | 0;
  $45 = SAFE_HEAP_LOAD($44 | 0, 4, 0) | 0 | 0;
  $46 = $2;
  $47 = _DecodeImageData($28, $31, $42, $45, $46, 26) | 0;
  $48 = $47;
 }
 $0 = $48;
 $49 = $0;
 STACKTOP = sp;
 return $49 | 0;
}

function _HE4($dst) {
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $56 = 0, $57 = 0, $58 = 0, $59 = 0, $6 = 0, $60 = 0, $61 = 0, $62 = 0;
 var $63 = 0, $7 = 0, $8 = 0, $9 = 0, $A = 0, $B = 0, $C = 0, $D = 0, $E = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dst;
 $1 = $0;
 $2 = $1 + -33 | 0;
 $3 = SAFE_HEAP_LOAD($2 >> 0 | 0, 1, 0) | 0 | 0;
 $4 = $3 & 255;
 $A = $4;
 $5 = $0;
 $6 = $5 + -1 | 0;
 $7 = SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0;
 $8 = $7 & 255;
 $B = $8;
 $9 = $0;
 $10 = $9 + 31 | 0;
 $11 = SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0 | 0;
 $12 = $11 & 255;
 $C = $12;
 $13 = $0;
 $14 = $13 + 63 | 0;
 $15 = SAFE_HEAP_LOAD($14 >> 0 | 0, 1, 0) | 0 | 0;
 $16 = $15 & 255;
 $D = $16;
 $17 = $0;
 $18 = $17 + 95 | 0;
 $19 = SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0 | 0;
 $20 = $19 & 255;
 $E = $20;
 $21 = $0;
 $22 = $A;
 $23 = $B;
 $24 = $23 << 1;
 $25 = $22 + $24 | 0;
 $26 = $C;
 $27 = $25 + $26 | 0;
 $28 = $27 + 2 | 0;
 $29 = $28 >> 2;
 $30 = Math_imul(16843009, $29) | 0;
 _WebPUint32ToMem($21, $30);
 $31 = $0;
 $32 = $31 + 32 | 0;
 $33 = $B;
 $34 = $C;
 $35 = $34 << 1;
 $36 = $33 + $35 | 0;
 $37 = $D;
 $38 = $36 + $37 | 0;
 $39 = $38 + 2 | 0;
 $40 = $39 >> 2;
 $41 = Math_imul(16843009, $40) | 0;
 _WebPUint32ToMem($32, $41);
 $42 = $0;
 $43 = $42 + 64 | 0;
 $44 = $C;
 $45 = $D;
 $46 = $45 << 1;
 $47 = $44 + $46 | 0;
 $48 = $E;
 $49 = $47 + $48 | 0;
 $50 = $49 + 2 | 0;
 $51 = $50 >> 2;
 $52 = Math_imul(16843009, $51) | 0;
 _WebPUint32ToMem($43, $52);
 $53 = $0;
 $54 = $53 + 96 | 0;
 $55 = $D;
 $56 = $E;
 $57 = $56 << 1;
 $58 = $55 + $57 | 0;
 $59 = $E;
 $60 = $58 + $59 | 0;
 $61 = $60 + 2 | 0;
 $62 = $61 >> 2;
 $63 = Math_imul(16843009, $62) | 0;
 _WebPUint32ToMem($54, $63);
 STACKTOP = sp;
 return;
}

function _YuvToRgba4444Row($y, $u, $v, $dst, $len) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 $dst = $dst | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $dst;
 $4 = $len;
 $5 = $3;
 $6 = $4;
 $7 = $6 & -2;
 $8 = $7 << 1;
 $9 = $5 + $8 | 0;
 $end = $9;
 while (1) {
  $10 = $3;
  $11 = $end;
  $12 = ($10 | 0) != ($11 | 0);
  if (!$12) {
   break;
  }
  $13 = $0;
  $14 = SAFE_HEAP_LOAD($13 >> 0 | 0, 1, 0) | 0 | 0;
  $15 = $14 & 255;
  $16 = $1;
  $17 = SAFE_HEAP_LOAD($16 >> 0 | 0, 1, 0) | 0 | 0;
  $18 = $17 & 255;
  $19 = $2;
  $20 = SAFE_HEAP_LOAD($19 >> 0 | 0, 1, 0) | 0 | 0;
  $21 = $20 & 255;
  $22 = $3;
  _VP8YuvToRgba4444377($15, $18, $21, $22);
  $23 = $0;
  $24 = $23 + 1 | 0;
  $25 = SAFE_HEAP_LOAD($24 >> 0 | 0, 1, 0) | 0 | 0;
  $26 = $25 & 255;
  $27 = $1;
  $28 = SAFE_HEAP_LOAD($27 >> 0 | 0, 1, 0) | 0 | 0;
  $29 = $28 & 255;
  $30 = $2;
  $31 = SAFE_HEAP_LOAD($30 >> 0 | 0, 1, 0) | 0 | 0;
  $32 = $31 & 255;
  $33 = $3;
  $34 = $33 + 2 | 0;
  _VP8YuvToRgba4444377($26, $29, $32, $34);
  $35 = $0;
  $36 = $35 + 2 | 0;
  $0 = $36;
  $37 = $1;
  $38 = $37 + 1 | 0;
  $1 = $38;
  $39 = $2;
  $40 = $39 + 1 | 0;
  $2 = $40;
  $41 = $3;
  $42 = $41 + 4 | 0;
  $3 = $42;
 }
 $43 = $4;
 $44 = $43 & 1;
 $45 = ($44 | 0) != 0;
 if (!$45) {
  STACKTOP = sp;
  return;
 }
 $46 = $0;
 $47 = SAFE_HEAP_LOAD($46 >> 0 | 0, 1, 0) | 0 | 0;
 $48 = $47 & 255;
 $49 = $1;
 $50 = SAFE_HEAP_LOAD($49 >> 0 | 0, 1, 0) | 0 | 0;
 $51 = $50 & 255;
 $52 = $2;
 $53 = SAFE_HEAP_LOAD($52 >> 0 | 0, 1, 0) | 0 | 0;
 $54 = $53 & 255;
 $55 = $3;
 _VP8YuvToRgba4444377($48, $51, $54, $55);
 STACKTOP = sp;
 return;
}

function _YuvToRgb565Row($y, $u, $v, $dst, $len) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 $dst = $dst | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $dst;
 $4 = $len;
 $5 = $3;
 $6 = $4;
 $7 = $6 & -2;
 $8 = $7 << 1;
 $9 = $5 + $8 | 0;
 $end = $9;
 while (1) {
  $10 = $3;
  $11 = $end;
  $12 = ($10 | 0) != ($11 | 0);
  if (!$12) {
   break;
  }
  $13 = $0;
  $14 = SAFE_HEAP_LOAD($13 >> 0 | 0, 1, 0) | 0 | 0;
  $15 = $14 & 255;
  $16 = $1;
  $17 = SAFE_HEAP_LOAD($16 >> 0 | 0, 1, 0) | 0 | 0;
  $18 = $17 & 255;
  $19 = $2;
  $20 = SAFE_HEAP_LOAD($19 >> 0 | 0, 1, 0) | 0 | 0;
  $21 = $20 & 255;
  $22 = $3;
  _VP8YuvToRgb565378($15, $18, $21, $22);
  $23 = $0;
  $24 = $23 + 1 | 0;
  $25 = SAFE_HEAP_LOAD($24 >> 0 | 0, 1, 0) | 0 | 0;
  $26 = $25 & 255;
  $27 = $1;
  $28 = SAFE_HEAP_LOAD($27 >> 0 | 0, 1, 0) | 0 | 0;
  $29 = $28 & 255;
  $30 = $2;
  $31 = SAFE_HEAP_LOAD($30 >> 0 | 0, 1, 0) | 0 | 0;
  $32 = $31 & 255;
  $33 = $3;
  $34 = $33 + 2 | 0;
  _VP8YuvToRgb565378($26, $29, $32, $34);
  $35 = $0;
  $36 = $35 + 2 | 0;
  $0 = $36;
  $37 = $1;
  $38 = $37 + 1 | 0;
  $1 = $38;
  $39 = $2;
  $40 = $39 + 1 | 0;
  $2 = $40;
  $41 = $3;
  $42 = $41 + 4 | 0;
  $3 = $42;
 }
 $43 = $4;
 $44 = $43 & 1;
 $45 = ($44 | 0) != 0;
 if (!$45) {
  STACKTOP = sp;
  return;
 }
 $46 = $0;
 $47 = SAFE_HEAP_LOAD($46 >> 0 | 0, 1, 0) | 0 | 0;
 $48 = $47 & 255;
 $49 = $1;
 $50 = SAFE_HEAP_LOAD($49 >> 0 | 0, 1, 0) | 0 | 0;
 $51 = $50 & 255;
 $52 = $2;
 $53 = SAFE_HEAP_LOAD($52 >> 0 | 0, 1, 0) | 0 | 0;
 $54 = $53 & 255;
 $55 = $3;
 _VP8YuvToRgb565378($48, $51, $54, $55);
 STACKTOP = sp;
 return;
}

function _YuvToRgbRow($y, $u, $v, $dst, $len) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 $dst = $dst | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $dst;
 $4 = $len;
 $5 = $3;
 $6 = $4;
 $7 = $6 & -2;
 $8 = $7 * 3 | 0;
 $9 = $5 + $8 | 0;
 $end = $9;
 while (1) {
  $10 = $3;
  $11 = $end;
  $12 = ($10 | 0) != ($11 | 0);
  if (!$12) {
   break;
  }
  $13 = $0;
  $14 = SAFE_HEAP_LOAD($13 >> 0 | 0, 1, 0) | 0 | 0;
  $15 = $14 & 255;
  $16 = $1;
  $17 = SAFE_HEAP_LOAD($16 >> 0 | 0, 1, 0) | 0 | 0;
  $18 = $17 & 255;
  $19 = $2;
  $20 = SAFE_HEAP_LOAD($19 >> 0 | 0, 1, 0) | 0 | 0;
  $21 = $20 & 255;
  $22 = $3;
  _VP8YuvToRgb367($15, $18, $21, $22);
  $23 = $0;
  $24 = $23 + 1 | 0;
  $25 = SAFE_HEAP_LOAD($24 >> 0 | 0, 1, 0) | 0 | 0;
  $26 = $25 & 255;
  $27 = $1;
  $28 = SAFE_HEAP_LOAD($27 >> 0 | 0, 1, 0) | 0 | 0;
  $29 = $28 & 255;
  $30 = $2;
  $31 = SAFE_HEAP_LOAD($30 >> 0 | 0, 1, 0) | 0 | 0;
  $32 = $31 & 255;
  $33 = $3;
  $34 = $33 + 3 | 0;
  _VP8YuvToRgb367($26, $29, $32, $34);
  $35 = $0;
  $36 = $35 + 2 | 0;
  $0 = $36;
  $37 = $1;
  $38 = $37 + 1 | 0;
  $1 = $38;
  $39 = $2;
  $40 = $39 + 1 | 0;
  $2 = $40;
  $41 = $3;
  $42 = $41 + 6 | 0;
  $3 = $42;
 }
 $43 = $4;
 $44 = $43 & 1;
 $45 = ($44 | 0) != 0;
 if (!$45) {
  STACKTOP = sp;
  return;
 }
 $46 = $0;
 $47 = SAFE_HEAP_LOAD($46 >> 0 | 0, 1, 0) | 0 | 0;
 $48 = $47 & 255;
 $49 = $1;
 $50 = SAFE_HEAP_LOAD($49 >> 0 | 0, 1, 0) | 0 | 0;
 $51 = $50 & 255;
 $52 = $2;
 $53 = SAFE_HEAP_LOAD($52 >> 0 | 0, 1, 0) | 0 | 0;
 $54 = $53 & 255;
 $55 = $3;
 _VP8YuvToRgb367($48, $51, $54, $55);
 STACKTOP = sp;
 return;
}

function _YuvToBgrRow($y, $u, $v, $dst, $len) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 $dst = $dst | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $49 = 0, $5 = 0, $50 = 0, $51 = 0, $52 = 0, $53 = 0, $54 = 0, $55 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $dst;
 $4 = $len;
 $5 = $3;
 $6 = $4;
 $7 = $6 & -2;
 $8 = $7 * 3 | 0;
 $9 = $5 + $8 | 0;
 $end = $9;
 while (1) {
  $10 = $3;
  $11 = $end;
  $12 = ($10 | 0) != ($11 | 0);
  if (!$12) {
   break;
  }
  $13 = $0;
  $14 = SAFE_HEAP_LOAD($13 >> 0 | 0, 1, 0) | 0 | 0;
  $15 = $14 & 255;
  $16 = $1;
  $17 = SAFE_HEAP_LOAD($16 >> 0 | 0, 1, 0) | 0 | 0;
  $18 = $17 & 255;
  $19 = $2;
  $20 = SAFE_HEAP_LOAD($19 >> 0 | 0, 1, 0) | 0 | 0;
  $21 = $20 & 255;
  $22 = $3;
  _VP8YuvToBgr374($15, $18, $21, $22);
  $23 = $0;
  $24 = $23 + 1 | 0;
  $25 = SAFE_HEAP_LOAD($24 >> 0 | 0, 1, 0) | 0 | 0;
  $26 = $25 & 255;
  $27 = $1;
  $28 = SAFE_HEAP_LOAD($27 >> 0 | 0, 1, 0) | 0 | 0;
  $29 = $28 & 255;
  $30 = $2;
  $31 = SAFE_HEAP_LOAD($30 >> 0 | 0, 1, 0) | 0 | 0;
  $32 = $31 & 255;
  $33 = $3;
  $34 = $33 + 3 | 0;
  _VP8YuvToBgr374($26, $29, $32, $34);
  $35 = $0;
  $36 = $35 + 2 | 0;
  $0 = $36;
  $37 = $1;
  $38 = $37 + 1 | 0;
  $1 = $38;
  $39 = $2;
  $40 = $39 + 1 | 0;
  $2 = $40;
  $41 = $3;
  $42 = $41 + 6 | 0;
  $3 = $42;
 }
 $43 = $4;
 $44 = $43 & 1;
 $45 = ($44 | 0) != 0;
 if (!$45) {
  STACKTOP = sp;
  return;
 }
 $46 = $0;
 $47 = SAFE_HEAP_LOAD($46 >> 0 | 0, 1, 0) | 0 | 0;
 $48 = $47 & 255;
 $49 = $1;
 $50 = SAFE_HEAP_LOAD($49 >> 0 | 0, 1, 0) | 0 | 0;
 $51 = $50 & 255;
 $52 = $2;
 $53 = SAFE_HEAP_LOAD($52 >> 0 | 0, 1, 0) | 0 | 0;
 $54 = $53 & 255;
 $55 = $3;
 _VP8YuvToBgr374($48, $51, $54, $55);
 STACKTOP = sp;
 return;
}

function _VP8Decode($dec, $io) {
 $dec = $dec | 0;
 $io = $io | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $ok = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $dec;
 $2 = $io;
 $ok = 0;
 $3 = $1;
 $4 = ($3 | 0) == (0 | 0);
 if ($4) {
  $0 = 0;
  $47 = $0;
  STACKTOP = sp;
  return $47 | 0;
 }
 $5 = $2;
 $6 = ($5 | 0) == (0 | 0);
 $7 = $1;
 if ($6) {
  $8 = _VP8SetError($7, 2, 6854) | 0;
  $0 = $8;
  $47 = $0;
  STACKTOP = sp;
  return $47 | 0;
 }
 $9 = $7 + 4 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $11 = ($10 | 0) != 0;
 if (!$11) {
  $12 = $1;
  $13 = $2;
  $14 = _VP8GetHeaders($12, $13) | 0;
  $15 = ($14 | 0) != 0;
  if (!$15) {
   $0 = 0;
   $47 = $0;
   STACKTOP = sp;
   return $47 | 0;
  }
 }
 $16 = $1;
 $17 = $16 + 4 | 0;
 $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
 $19 = ($18 | 0) != 0;
 if (!$19) {
  ___assert_fail(6891 | 0, 6903 | 0, 623, 6924 | 0);
 }
 $20 = $1;
 $21 = $2;
 $22 = _VP8EnterCritical($20, $21) | 0;
 $23 = ($22 | 0) == 0;
 $24 = $23 & 1;
 $ok = $24;
 $25 = $ok;
 $26 = ($25 | 0) != 0;
 if ($26) {
  $27 = $ok;
  $28 = ($27 | 0) != 0;
  if ($28) {
   $29 = $1;
   $30 = $2;
   $31 = _VP8InitFrame($29, $30) | 0;
   $ok = $31;
  }
  $32 = $ok;
  $33 = ($32 | 0) != 0;
  if ($33) {
   $34 = $1;
   $35 = $2;
   $36 = _ParseFrame($34, $35) | 0;
   $ok = $36;
  }
  $37 = $1;
  $38 = $2;
  $39 = _VP8ExitCritical($37, $38) | 0;
  $40 = $ok;
  $41 = $40 & $39;
  $ok = $41;
 }
 $42 = $ok;
 $43 = ($42 | 0) != 0;
 $44 = $1;
 if ($43) {
  $45 = $44 + 4 | 0;
  SAFE_HEAP_STORE($45 | 0, 0 | 0, 4);
  $46 = $ok;
  $0 = $46;
  $47 = $0;
  STACKTOP = sp;
  return $47 | 0;
 } else {
  _VP8Clear($44);
  $0 = 0;
  $47 = $0;
  STACKTOP = sp;
  return $47 | 0;
 }
 return 0 | 0;
}

function _VP8LoadNewBytes927($br) {
 $br = $br | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bits = 0, $in_bits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $in_bits = sp;
 $0 = $br;
 $1 = $0;
 $2 = ($1 | 0) != (0 | 0);
 if (!$2) {
  ___assert_fail(14111 | 0, 14343 | 0, 59, 14380 | 0);
 }
 $3 = $0;
 $4 = $3 + 12 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = ($5 | 0) != (0 | 0);
 if (!$6) {
  ___assert_fail(14111 | 0, 14343 | 0, 59, 14380 | 0);
 }
 $7 = $0;
 $8 = $7 + 12 | 0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $10 = $0;
 $11 = $10 + 20 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = $9 >>> 0 < $12 >>> 0;
 if ($13) {
  $14 = $0;
  $15 = $14 + 12 | 0;
  $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
  {}
  SAFE_HEAP_STORE($in_bits >> 0 | 0, SAFE_HEAP_LOAD($16 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($in_bits + 1 >> 0 | 0, SAFE_HEAP_LOAD($16 + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($in_bits + 2 >> 0 | 0, SAFE_HEAP_LOAD($16 + 2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($in_bits + 3 >> 0 | 0, SAFE_HEAP_LOAD($16 + 3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  $17 = $0;
  $18 = $17 + 12 | 0;
  $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
  $20 = $19 + 3 | 0;
  SAFE_HEAP_STORE($18 | 0, $20 | 0, 4);
  $21 = SAFE_HEAP_LOAD($in_bits | 0, 4, 0) | 0 | 0;
  $22 = _BSwap32938($21) | 0;
  $bits = $22;
  $23 = $bits;
  $24 = $23 >>> 8;
  $bits = $24;
  $25 = $bits;
  $26 = $0;
  $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
  $28 = $27 << 24;
  $29 = $25 | $28;
  $30 = $0;
  SAFE_HEAP_STORE($30 | 0, $29 | 0, 4);
  $31 = $0;
  $32 = $31 + 8 | 0;
  $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
  $34 = $33 + 24 | 0;
  SAFE_HEAP_STORE($32 | 0, $34 | 0, 4);
  STACKTOP = sp;
  return;
 } else {
  $35 = $0;
  _VP8LoadFinalBytes($35);
  STACKTOP = sp;
  return;
 }
}

function _VP8LoadNewBytes83($br) {
 $br = $br | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bits = 0, $in_bits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $in_bits = sp;
 $0 = $br;
 $1 = $0;
 $2 = ($1 | 0) != (0 | 0);
 if (!$2) {
  ___assert_fail(14111 | 0, 14343 | 0, 59, 14380 | 0);
 }
 $3 = $0;
 $4 = $3 + 12 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = ($5 | 0) != (0 | 0);
 if (!$6) {
  ___assert_fail(14111 | 0, 14343 | 0, 59, 14380 | 0);
 }
 $7 = $0;
 $8 = $7 + 12 | 0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $10 = $0;
 $11 = $10 + 20 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = $9 >>> 0 < $12 >>> 0;
 if ($13) {
  $14 = $0;
  $15 = $14 + 12 | 0;
  $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
  {}
  SAFE_HEAP_STORE($in_bits >> 0 | 0, SAFE_HEAP_LOAD($16 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($in_bits + 1 >> 0 | 0, SAFE_HEAP_LOAD($16 + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($in_bits + 2 >> 0 | 0, SAFE_HEAP_LOAD($16 + 2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($in_bits + 3 >> 0 | 0, SAFE_HEAP_LOAD($16 + 3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  $17 = $0;
  $18 = $17 + 12 | 0;
  $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
  $20 = $19 + 3 | 0;
  SAFE_HEAP_STORE($18 | 0, $20 | 0, 4);
  $21 = SAFE_HEAP_LOAD($in_bits | 0, 4, 0) | 0 | 0;
  $22 = _BSwap3284($21) | 0;
  $bits = $22;
  $23 = $bits;
  $24 = $23 >>> 8;
  $bits = $24;
  $25 = $bits;
  $26 = $0;
  $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
  $28 = $27 << 24;
  $29 = $25 | $28;
  $30 = $0;
  SAFE_HEAP_STORE($30 | 0, $29 | 0, 4);
  $31 = $0;
  $32 = $31 + 8 | 0;
  $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
  $34 = $33 + 24 | 0;
  SAFE_HEAP_STORE($32 | 0, $34 | 0, 4);
  STACKTOP = sp;
  return;
 } else {
  $35 = $0;
  _VP8LoadFinalBytes($35);
  STACKTOP = sp;
  return;
 }
}

function _fflush($f) {
 $f = $f | 0;
 var $$0 = 0, $$01 = 0, $$012 = 0, $$014 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0;
 var $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $phitmp = 0, $r$0$lcssa = 0, $r$03 = 0, $r$1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($f | 0) == (0 | 0);
 do {
  if ($0) {
   $7 = SAFE_HEAP_LOAD(1344 | 0, 4, 0) | 0 | 0;
   $8 = ($7 | 0) == (0 | 0);
   if ($8) {
    $27 = 0;
   } else {
    $9 = SAFE_HEAP_LOAD(1344 | 0, 4, 0) | 0 | 0;
    $10 = _fflush($9) | 0;
    $27 = $10;
   }
   ___lock(1328 | 0);
   $$012 = SAFE_HEAP_LOAD(1324 | 0, 4, 0) | 0 | 0;
   $11 = ($$012 | 0) == (0 | 0);
   if ($11) {
    $r$0$lcssa = $27;
   } else {
    $$014 = $$012;
    $r$03 = $27;
    while (1) {
     $12 = $$014 + 76 | 0;
     $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
     $14 = ($13 | 0) > -1;
     if ($14) {
      $15 = ___lockfile($$014) | 0;
      $24 = $15;
     } else {
      $24 = 0;
     }
     $16 = $$014 + 20 | 0;
     $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
     $18 = $$014 + 28 | 0;
     $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
     $20 = $17 >>> 0 > $19 >>> 0;
     if ($20) {
      $21 = ___fflush_unlocked($$014) | 0;
      $22 = $21 | $r$03;
      $r$1 = $22;
     } else {
      $r$1 = $r$03;
     }
     $23 = ($24 | 0) == 0;
     if (!$23) {
      ___unlockfile($$014);
     }
     $25 = $$014 + 56 | 0;
     $$01 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
     $26 = ($$01 | 0) == (0 | 0);
     if ($26) {
      $r$0$lcssa = $r$1;
      break;
     } else {
      $$014 = $$01;
      $r$03 = $r$1;
     }
    }
   }
   ___unlock(1328 | 0);
   $$0 = $r$0$lcssa;
  } else {
   $1 = $f + 76 | 0;
   $2 = SAFE_HEAP_LOAD($1 | 0, 4, 0) | 0 | 0;
   $3 = ($2 | 0) > -1;
   if (!$3) {
    $4 = ___fflush_unlocked($f) | 0;
    $$0 = $4;
    break;
   }
   $5 = ___lockfile($f) | 0;
   $phitmp = ($5 | 0) == 0;
   $6 = ___fflush_unlocked($f) | 0;
   if ($phitmp) {
    $$0 = $6;
   } else {
    ___unlockfile($f);
    $$0 = $6;
   }
  }
 } while (0);
 return $$0 | 0;
}

function _VP8LoadNewBytes($br) {
 $br = $br | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $bits = 0, $in_bits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $in_bits = sp;
 $0 = $br;
 $1 = $0;
 $2 = ($1 | 0) != (0 | 0);
 if (!$2) {
  ___assert_fail(14111 | 0, 14343 | 0, 59, 14380 | 0);
 }
 $3 = $0;
 $4 = $3 + 12 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = ($5 | 0) != (0 | 0);
 if (!$6) {
  ___assert_fail(14111 | 0, 14343 | 0, 59, 14380 | 0);
 }
 $7 = $0;
 $8 = $7 + 12 | 0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $10 = $0;
 $11 = $10 + 20 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = $9 >>> 0 < $12 >>> 0;
 if ($13) {
  $14 = $0;
  $15 = $14 + 12 | 0;
  $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
  {}
  SAFE_HEAP_STORE($in_bits >> 0 | 0, SAFE_HEAP_LOAD($16 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($in_bits + 1 >> 0 | 0, SAFE_HEAP_LOAD($16 + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($in_bits + 2 >> 0 | 0, SAFE_HEAP_LOAD($16 + 2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($in_bits + 3 >> 0 | 0, SAFE_HEAP_LOAD($16 + 3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  $17 = $0;
  $18 = $17 + 12 | 0;
  $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
  $20 = $19 + 3 | 0;
  SAFE_HEAP_STORE($18 | 0, $20 | 0, 4);
  $21 = SAFE_HEAP_LOAD($in_bits | 0, 4, 0) | 0 | 0;
  $22 = _BSwap32($21) | 0;
  $bits = $22;
  $23 = $bits;
  $24 = $23 >>> 8;
  $bits = $24;
  $25 = $bits;
  $26 = $0;
  $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
  $28 = $27 << 24;
  $29 = $25 | $28;
  $30 = $0;
  SAFE_HEAP_STORE($30 | 0, $29 | 0, 4);
  $31 = $0;
  $32 = $31 + 8 | 0;
  $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
  $34 = $33 + 24 | 0;
  SAFE_HEAP_STORE($32 | 0, $34 | 0, 4);
  STACKTOP = sp;
  return;
 } else {
  $35 = $0;
  _VP8LoadFinalBytes($35);
  STACKTOP = sp;
  return;
 }
}

function _VP8LoadFinalBytes($br) {
 $br = $br | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $br;
 $1 = $0;
 $2 = ($1 | 0) != (0 | 0);
 if (!$2) {
  ___assert_fail(14111 | 0, 14032 | 0, 87, 14142 | 0);
 }
 $3 = $0;
 $4 = $3 + 12 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = ($5 | 0) != (0 | 0);
 if (!$6) {
  ___assert_fail(14111 | 0, 14032 | 0, 87, 14142 | 0);
 }
 $7 = $0;
 $8 = $7 + 12 | 0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $10 = $0;
 $11 = $10 + 16 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = $9 >>> 0 < $12 >>> 0;
 $14 = $0;
 if ($13) {
  $15 = $14 + 8 | 0;
  $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
  $17 = $16 + 8 | 0;
  SAFE_HEAP_STORE($15 | 0, $17 | 0, 4);
  $18 = $0;
  $19 = $18 + 12 | 0;
  $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
  $21 = $20 + 1 | 0;
  SAFE_HEAP_STORE($19 | 0, $21 | 0, 4);
  $22 = SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0;
  $23 = $22 & 255;
  $24 = $0;
  $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
  $26 = $25 << 8;
  $27 = $23 | $26;
  $28 = $0;
  SAFE_HEAP_STORE($28 | 0, $27 | 0, 4);
  STACKTOP = sp;
  return;
 }
 $29 = $14 + 24 | 0;
 $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
 $31 = ($30 | 0) != 0;
 $32 = $0;
 if ($31) {
  $41 = $32 + 8 | 0;
  SAFE_HEAP_STORE($41 | 0, 0 | 0, 4);
  STACKTOP = sp;
  return;
 } else {
  $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
  $34 = $33 << 8;
  SAFE_HEAP_STORE($32 | 0, $34 | 0, 4);
  $35 = $0;
  $36 = $35 + 8 | 0;
  $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
  $38 = $37 + 8 | 0;
  SAFE_HEAP_STORE($36 | 0, $38 | 0, 4);
  $39 = $0;
  $40 = $39 + 24 | 0;
  SAFE_HEAP_STORE($40 | 0, 1 | 0, 4);
  STACKTOP = sp;
  return;
 }
}

function _Decode($mode, $data, $data_size, $width, $height, $keep_info) {
 $mode = $mode | 0;
 $data = $data | 0;
 $data_size = $data_size | 0;
 $width = $width | 0;
 $height = $height | 0;
 $keep_info = $keep_info | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $output = 0;
 var $params = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 496 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $params = sp + 88 | 0;
 $output = sp;
 $1 = $mode;
 $2 = $data;
 $3 = $data_size;
 $4 = $width;
 $5 = $height;
 $6 = $keep_info;
 _WebPInitDecBuffer144($output) | 0;
 _WebPResetDecParams($params);
 SAFE_HEAP_STORE($params | 0, $output | 0, 4);
 $7 = $1;
 SAFE_HEAP_STORE($output | 0, $7 | 0, 4);
 $8 = $2;
 $9 = $3;
 $10 = $output + 4 | 0;
 $11 = $output + 8 | 0;
 $12 = _WebPGetInfo($8, $9, $10, $11) | 0;
 $13 = ($12 | 0) != 0;
 if (!$13) {
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;
  return $38 | 0;
 }
 $14 = $4;
 $15 = ($14 | 0) != (0 | 0);
 if ($15) {
  $16 = $output + 4 | 0;
  $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
  $18 = $4;
  SAFE_HEAP_STORE($18 | 0, $17 | 0, 4);
 }
 $19 = $5;
 $20 = ($19 | 0) != (0 | 0);
 if ($20) {
  $21 = $output + 8 | 0;
  $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
  $23 = $5;
  SAFE_HEAP_STORE($23 | 0, $22 | 0, 4);
 }
 $24 = $2;
 $25 = $3;
 $26 = _DecodeInto($24, $25, $params) | 0;
 $27 = ($26 | 0) != 0;
 if ($27) {
  $0 = 0;
  $38 = $0;
  STACKTOP = sp;
  return $38 | 0;
 }
 $28 = $6;
 $29 = ($28 | 0) != (0 | 0);
 if ($29) {
  $30 = $6;
  _WebPCopyDecBuffer($output, $30);
 }
 $31 = $1;
 $32 = _WebPIsRGBMode146($31) | 0;
 $33 = ($32 | 0) != 0;
 $34 = $output + 16 | 0;
 $35 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
 $36 = SAFE_HEAP_LOAD($34 | 0, 4, 0) | 0 | 0;
 $37 = $33 ? $35 : $36;
 $0 = $37;
 $38 = $0;
 STACKTOP = sp;
 return $38 | 0;
}

function _WebPRescalerGetScaledDimensions($src_width, $src_height, $scaled_width, $scaled_height) {
 $src_width = $src_width | 0;
 $src_height = $src_height | 0;
 $scaled_width = $scaled_width | 0;
 $scaled_height = $scaled_height | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $height = 0, $or$cond = 0, $width = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $src_width;
 $2 = $src_height;
 $3 = $scaled_width;
 $4 = $scaled_height;
 $5 = $3;
 $6 = ($5 | 0) != (0 | 0);
 if (!$6) {
  ___assert_fail(14762 | 0, 14783 | 0, 76, 14811 | 0);
 }
 $7 = $4;
 $8 = ($7 | 0) != (0 | 0);
 if (!$8) {
  ___assert_fail(14843 | 0, 14783 | 0, 77, 14811 | 0);
 }
 $9 = $3;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $width = $10;
 $11 = $4;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $height = $12;
 $13 = $width;
 $14 = ($13 | 0) == 0;
 if ($14) {
  $15 = $1;
  $16 = $height;
  $17 = Math_imul($15, $16) | 0;
  $18 = $2;
  $19 = ($18 | 0) / 2 & -1;
  $20 = $17 + $19 | 0;
  $21 = $2;
  $22 = ($20 | 0) / ($21 | 0) & -1;
  $width = $22;
 }
 $23 = $height;
 $24 = ($23 | 0) == 0;
 if ($24) {
  $25 = $2;
  $26 = $width;
  $27 = Math_imul($25, $26) | 0;
  $28 = $1;
  $29 = ($28 | 0) / 2 & -1;
  $30 = $27 + $29 | 0;
  $31 = $1;
  $32 = ($30 | 0) / ($31 | 0) & -1;
  $height = $32;
 }
 $33 = $width;
 $34 = ($33 | 0) <= 0;
 $35 = $height;
 $36 = ($35 | 0) <= 0;
 $or$cond = $34 | $36;
 if ($or$cond) {
  $0 = 0;
  $41 = $0;
  STACKTOP = sp;
  return $41 | 0;
 } else {
  $37 = $width;
  $38 = $3;
  SAFE_HEAP_STORE($38 | 0, $37 | 0, 4);
  $39 = $height;
  $40 = $4;
  SAFE_HEAP_STORE($40 | 0, $39 | 0, 4);
  $0 = 1;
  $41 = $0;
  STACKTOP = sp;
  return $41 | 0;
 }
 return 0 | 0;
}

function _Is8bOptimizable($hdr) {
 $hdr = $hdr | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $htrees = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $hdr;
 $2 = $1;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = ($3 | 0) > 0;
 do {
  if ($4) {
   $0 = 0;
  } else {
   $i = 0;
   while (1) {
    $5 = $i;
    $6 = $1;
    $7 = $6 + 44 | 0;
    $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
    $9 = ($5 | 0) < ($8 | 0);
    if (!$9) {
     label = 12;
     break;
    }
    $10 = $i;
    $11 = $1;
    $12 = $11 + 48 | 0;
    $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
    $14 = $13 + ($10 * 548 | 0) | 0;
    $htrees = $14;
    $15 = $htrees;
    $16 = $15 + 4 | 0;
    $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
    $18 = SAFE_HEAP_LOAD($17 >> 0 | 0, 1, 0) | 0 | 0;
    $19 = $18 & 255;
    $20 = ($19 | 0) > 0;
    if ($20) {
     label = 6;
     break;
    }
    $21 = $htrees;
    $22 = $21 + 8 | 0;
    $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
    $24 = SAFE_HEAP_LOAD($23 >> 0 | 0, 1, 0) | 0 | 0;
    $25 = $24 & 255;
    $26 = ($25 | 0) > 0;
    if ($26) {
     label = 8;
     break;
    }
    $27 = $htrees;
    $28 = $27 + 12 | 0;
    $29 = SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0;
    $30 = SAFE_HEAP_LOAD($29 >> 0 | 0, 1, 0) | 0 | 0;
    $31 = $30 & 255;
    $32 = ($31 | 0) > 0;
    if ($32) {
     label = 10;
     break;
    }
    $33 = $i;
    $34 = $33 + 1 | 0;
    $i = $34;
   }
   if ((label | 0) == 6) {
    $0 = 0;
    break;
   } else if ((label | 0) == 8) {
    $0 = 0;
    break;
   } else if ((label | 0) == 10) {
    $0 = 0;
    break;
   } else if ((label | 0) == 12) {
    $0 = 1;
    break;
   }
  }
 } while (0);
 $35 = $0;
 STACKTOP = sp;
 return $35 | 0;
}

function _EmitRescaledRowsYUVA($dec, $in, $in_stride, $mb_h) {
 $dec = $dec | 0;
 $in = $in | 0;
 $in_stride = $in_stride | 0;
 $mb_h = $mb_h | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lines_left = 0, $needed_lines = 0, $num_lines_in = 0, $y_pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $in;
 $2 = $in_stride;
 $3 = $mb_h;
 $num_lines_in = 0;
 $4 = $0;
 $5 = $4 + 116 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $y_pos = $6;
 while (1) {
  $7 = $num_lines_in;
  $8 = $3;
  $9 = ($7 | 0) < ($8 | 0);
  if (!$9) {
   break;
  }
  $10 = $3;
  $11 = $num_lines_in;
  $12 = $10 - $11 | 0;
  $lines_left = $12;
  $13 = $0;
  $14 = $13 + 268 | 0;
  $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
  $16 = $lines_left;
  $17 = _WebPRescaleNeededLines($15, $16) | 0;
  $needed_lines = $17;
  $18 = $1;
  $19 = $2;
  $20 = $0;
  $21 = $20 + 268 | 0;
  $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
  $23 = $22 + 44 | 0;
  $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
  $25 = $needed_lines;
  _WebPMultARGBRows($18, $19, $24, $25, 0);
  $26 = $0;
  $27 = $26 + 268 | 0;
  $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
  $29 = $lines_left;
  $30 = $1;
  $31 = $2;
  _WebPRescalerImport($28, $29, $30, $31) | 0;
  $32 = $needed_lines;
  $33 = $num_lines_in;
  $34 = $33 + $32 | 0;
  $num_lines_in = $34;
  $35 = $needed_lines;
  $36 = $2;
  $37 = Math_imul($35, $36) | 0;
  $38 = $1;
  $39 = $38 + $37 | 0;
  $1 = $39;
  $40 = $0;
  $41 = $y_pos;
  $42 = _ExportYUVA($40, $41) | 0;
  $43 = $y_pos;
  $44 = $43 + $42 | 0;
  $y_pos = $44;
 }
 $45 = $y_pos;
 STACKTOP = sp;
 return $45 | 0;
}

function _EmitSampledRGB($io, $p) {
 $io = $io | 0;
 $p = $p | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $buf = 0, $dst = 0, $output = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $io;
 $1 = $p;
 $2 = $1;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $output = $3;
 $4 = $output;
 $5 = $4 + 16 | 0;
 $buf = $5;
 $6 = $buf;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = $0;
 $9 = $8 + 8 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $11 = $buf;
 $12 = $11 + 4 | 0;
 $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
 $14 = Math_imul($10, $13) | 0;
 $15 = $7 + $14 | 0;
 $dst = $15;
 $16 = $0;
 $17 = $16 + 20 | 0;
 $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
 $19 = $0;
 $20 = $19 + 32 | 0;
 $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
 $22 = $0;
 $23 = $22 + 24 | 0;
 $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
 $25 = $0;
 $26 = $25 + 28 | 0;
 $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
 $28 = $0;
 $29 = $28 + 36 | 0;
 $30 = SAFE_HEAP_LOAD($29 | 0, 4, 0) | 0 | 0;
 $31 = $dst;
 $32 = $buf;
 $33 = $32 + 4 | 0;
 $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
 $35 = $0;
 $36 = $35 + 12 | 0;
 $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
 $38 = $0;
 $39 = $38 + 16 | 0;
 $40 = SAFE_HEAP_LOAD($39 | 0, 4, 0) | 0 | 0;
 $41 = $output;
 $42 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
 $43 = 876 + ($42 << 2) | 0;
 $44 = SAFE_HEAP_LOAD($43 | 0, 4, 0) | 0 | 0;
 _WebPSamplerProcessPlane($18, $21, $24, $27, $30, $31, $34, $37, $40, $44);
 $45 = $0;
 $46 = $45 + 16 | 0;
 $47 = SAFE_HEAP_LOAD($46 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $47 | 0;
}

function _CustomPut($io) {
 $io = $io | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $mb_h = 0, $mb_w = 0, $num_lines_out = 0, $or$cond = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $io;
 $2 = $1;
 $3 = $2 + 40 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $p = $4;
 $5 = $1;
 $6 = $5 + 12 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $mb_w = $7;
 $8 = $1;
 $9 = $8 + 16 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $mb_h = $10;
 $11 = $1;
 $12 = $11 + 8 | 0;
 $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
 $14 = $13 & 1;
 $15 = ($14 | 0) != 0;
 if ($15) {
  ___assert_fail(3399 | 0, 3071 | 0, 583, 3415 | 0);
 }
 $16 = $mb_w;
 $17 = ($16 | 0) <= 0;
 $18 = $mb_h;
 $19 = ($18 | 0) <= 0;
 $or$cond = $17 | $19;
 if ($or$cond) {
  $0 = 0;
  $41 = $0;
  STACKTOP = sp;
  return $41 | 0;
 }
 $20 = $p;
 $21 = $20 + 364 | 0;
 $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
 $23 = $1;
 $24 = $p;
 $25 = FUNCTION_TABLE_iii[(SAFE_FT_MASK($22 | 0, 127 | 0) | 0) & 127]($23, $24) | 0;
 $num_lines_out = $25;
 $26 = $p;
 $27 = $26 + 368 | 0;
 $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
 $29 = ($28 | 0) != (0 | 0);
 if ($29) {
  $30 = $p;
  $31 = $30 + 368 | 0;
  $32 = SAFE_HEAP_LOAD($31 | 0, 4, 0) | 0 | 0;
  $33 = $1;
  $34 = $p;
  $35 = $num_lines_out;
  FUNCTION_TABLE_iiii[(SAFE_FT_MASK($32 | 0, 255 | 0) | 0) & 255]($33, $34, $35) | 0;
 }
 $36 = $num_lines_out;
 $37 = $p;
 $38 = $37 + 16 | 0;
 $39 = SAFE_HEAP_LOAD($38 | 0, 4, 0) | 0 | 0;
 $40 = $39 + $36 | 0;
 SAFE_HEAP_STORE($38 | 0, $40 | 0, 4);
 $0 = 1;
 $41 = $0;
 STACKTOP = sp;
 return $41 | 0;
}

function _YuvToRgbaRow($y, $u, $v, $dst, $len) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 $dst = $dst | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $dst;
 $4 = $len;
 $5 = $3;
 $6 = $4;
 $7 = $6 & -2;
 $8 = $7 << 2;
 $9 = $5 + $8 | 0;
 $end = $9;
 while (1) {
  $10 = $3;
  $11 = $end;
  $12 = ($10 | 0) != ($11 | 0);
  if (!$12) {
   break;
  }
  $13 = $0;
  $14 = SAFE_HEAP_LOAD($13 >> 0 | 0, 1, 0) | 0 | 0;
  $15 = $1;
  $16 = SAFE_HEAP_LOAD($15 >> 0 | 0, 1, 0) | 0 | 0;
  $17 = $2;
  $18 = SAFE_HEAP_LOAD($17 >> 0 | 0, 1, 0) | 0 | 0;
  $19 = $3;
  _VP8YuvToRgba373($14, $16, $18, $19);
  $20 = $0;
  $21 = $20 + 1 | 0;
  $22 = SAFE_HEAP_LOAD($21 >> 0 | 0, 1, 0) | 0 | 0;
  $23 = $1;
  $24 = SAFE_HEAP_LOAD($23 >> 0 | 0, 1, 0) | 0 | 0;
  $25 = $2;
  $26 = SAFE_HEAP_LOAD($25 >> 0 | 0, 1, 0) | 0 | 0;
  $27 = $3;
  $28 = $27 + 4 | 0;
  _VP8YuvToRgba373($22, $24, $26, $28);
  $29 = $0;
  $30 = $29 + 2 | 0;
  $0 = $30;
  $31 = $1;
  $32 = $31 + 1 | 0;
  $1 = $32;
  $33 = $2;
  $34 = $33 + 1 | 0;
  $2 = $34;
  $35 = $3;
  $36 = $35 + 8 | 0;
  $3 = $36;
 }
 $37 = $4;
 $38 = $37 & 1;
 $39 = ($38 | 0) != 0;
 if (!$39) {
  STACKTOP = sp;
  return;
 }
 $40 = $0;
 $41 = SAFE_HEAP_LOAD($40 >> 0 | 0, 1, 0) | 0 | 0;
 $42 = $1;
 $43 = SAFE_HEAP_LOAD($42 >> 0 | 0, 1, 0) | 0 | 0;
 $44 = $2;
 $45 = SAFE_HEAP_LOAD($44 >> 0 | 0, 1, 0) | 0 | 0;
 $46 = $3;
 _VP8YuvToRgba373($41, $43, $45, $46);
 STACKTOP = sp;
 return;
}

function _YuvToBgraRow($y, $u, $v, $dst, $len) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 $dst = $dst | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $dst;
 $4 = $len;
 $5 = $3;
 $6 = $4;
 $7 = $6 & -2;
 $8 = $7 << 2;
 $9 = $5 + $8 | 0;
 $end = $9;
 while (1) {
  $10 = $3;
  $11 = $end;
  $12 = ($10 | 0) != ($11 | 0);
  if (!$12) {
   break;
  }
  $13 = $0;
  $14 = SAFE_HEAP_LOAD($13 >> 0 | 0, 1, 0) | 0 | 0;
  $15 = $1;
  $16 = SAFE_HEAP_LOAD($15 >> 0 | 0, 1, 0) | 0 | 0;
  $17 = $2;
  $18 = SAFE_HEAP_LOAD($17 >> 0 | 0, 1, 0) | 0 | 0;
  $19 = $3;
  _VP8YuvToBgra375($14, $16, $18, $19);
  $20 = $0;
  $21 = $20 + 1 | 0;
  $22 = SAFE_HEAP_LOAD($21 >> 0 | 0, 1, 0) | 0 | 0;
  $23 = $1;
  $24 = SAFE_HEAP_LOAD($23 >> 0 | 0, 1, 0) | 0 | 0;
  $25 = $2;
  $26 = SAFE_HEAP_LOAD($25 >> 0 | 0, 1, 0) | 0 | 0;
  $27 = $3;
  $28 = $27 + 4 | 0;
  _VP8YuvToBgra375($22, $24, $26, $28);
  $29 = $0;
  $30 = $29 + 2 | 0;
  $0 = $30;
  $31 = $1;
  $32 = $31 + 1 | 0;
  $1 = $32;
  $33 = $2;
  $34 = $33 + 1 | 0;
  $2 = $34;
  $35 = $3;
  $36 = $35 + 8 | 0;
  $3 = $36;
 }
 $37 = $4;
 $38 = $37 & 1;
 $39 = ($38 | 0) != 0;
 if (!$39) {
  STACKTOP = sp;
  return;
 }
 $40 = $0;
 $41 = SAFE_HEAP_LOAD($40 >> 0 | 0, 1, 0) | 0 | 0;
 $42 = $1;
 $43 = SAFE_HEAP_LOAD($42 >> 0 | 0, 1, 0) | 0 | 0;
 $44 = $2;
 $45 = SAFE_HEAP_LOAD($44 >> 0 | 0, 1, 0) | 0 | 0;
 $46 = $3;
 _VP8YuvToBgra375($41, $43, $45, $46);
 STACKTOP = sp;
 return;
}

function _YuvToArgbRow($y, $u, $v, $dst, $len) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 $dst = $dst | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $dst;
 $4 = $len;
 $5 = $3;
 $6 = $4;
 $7 = $6 & -2;
 $8 = $7 << 2;
 $9 = $5 + $8 | 0;
 $end = $9;
 while (1) {
  $10 = $3;
  $11 = $end;
  $12 = ($10 | 0) != ($11 | 0);
  if (!$12) {
   break;
  }
  $13 = $0;
  $14 = SAFE_HEAP_LOAD($13 >> 0 | 0, 1, 0) | 0 | 0;
  $15 = $1;
  $16 = SAFE_HEAP_LOAD($15 >> 0 | 0, 1, 0) | 0 | 0;
  $17 = $2;
  $18 = SAFE_HEAP_LOAD($17 >> 0 | 0, 1, 0) | 0 | 0;
  $19 = $3;
  _VP8YuvToArgb376($14, $16, $18, $19);
  $20 = $0;
  $21 = $20 + 1 | 0;
  $22 = SAFE_HEAP_LOAD($21 >> 0 | 0, 1, 0) | 0 | 0;
  $23 = $1;
  $24 = SAFE_HEAP_LOAD($23 >> 0 | 0, 1, 0) | 0 | 0;
  $25 = $2;
  $26 = SAFE_HEAP_LOAD($25 >> 0 | 0, 1, 0) | 0 | 0;
  $27 = $3;
  $28 = $27 + 4 | 0;
  _VP8YuvToArgb376($22, $24, $26, $28);
  $29 = $0;
  $30 = $29 + 2 | 0;
  $0 = $30;
  $31 = $1;
  $32 = $31 + 1 | 0;
  $1 = $32;
  $33 = $2;
  $34 = $33 + 1 | 0;
  $2 = $34;
  $35 = $3;
  $36 = $35 + 8 | 0;
  $3 = $36;
 }
 $37 = $4;
 $38 = $37 & 1;
 $39 = ($38 | 0) != 0;
 if (!$39) {
  STACKTOP = sp;
  return;
 }
 $40 = $0;
 $41 = SAFE_HEAP_LOAD($40 >> 0 | 0, 1, 0) | 0 | 0;
 $42 = $1;
 $43 = SAFE_HEAP_LOAD($42 >> 0 | 0, 1, 0) | 0 | 0;
 $44 = $2;
 $45 = SAFE_HEAP_LOAD($44 >> 0 | 0, 1, 0) | 0 | 0;
 $46 = $3;
 _VP8YuvToArgb376($41, $43, $45, $46);
 STACKTOP = sp;
 return;
}

function _PredictLine($src, $pred, $dst, $length, $inverse) {
 $src = $src | 0;
 $pred = $pred | 0;
 $dst = $dst | 0;
 $length = $length | 0;
 $inverse = $inverse | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $src;
 $1 = $pred;
 $2 = $dst;
 $3 = $length;
 $4 = $inverse;
 $5 = $4;
 $6 = ($5 | 0) != 0;
 $i = 0;
 if ($6) {
  while (1) {
   $7 = $i;
   $8 = $3;
   $9 = ($7 | 0) < ($8 | 0);
   if (!$9) {
    break;
   }
   $10 = $i;
   $11 = $0;
   $12 = $11 + $10 | 0;
   $13 = SAFE_HEAP_LOAD($12 >> 0 | 0, 1, 0) | 0 | 0;
   $14 = $13 & 255;
   $15 = $i;
   $16 = $1;
   $17 = $16 + $15 | 0;
   $18 = SAFE_HEAP_LOAD($17 >> 0 | 0, 1, 0) | 0 | 0;
   $19 = $18 & 255;
   $20 = $14 + $19 | 0;
   $21 = $20 & 255;
   $22 = $i;
   $23 = $2;
   $24 = $23 + $22 | 0;
   SAFE_HEAP_STORE($24 >> 0 | 0, $21 | 0, 1);
   $25 = $i;
   $26 = $25 + 1 | 0;
   $i = $26;
  }
  STACKTOP = sp;
  return;
 } else {
  while (1) {
   $27 = $i;
   $28 = $3;
   $29 = ($27 | 0) < ($28 | 0);
   if (!$29) {
    break;
   }
   $30 = $i;
   $31 = $0;
   $32 = $31 + $30 | 0;
   $33 = SAFE_HEAP_LOAD($32 >> 0 | 0, 1, 0) | 0 | 0;
   $34 = $33 & 255;
   $35 = $i;
   $36 = $1;
   $37 = $36 + $35 | 0;
   $38 = SAFE_HEAP_LOAD($37 >> 0 | 0, 1, 0) | 0 | 0;
   $39 = $38 & 255;
   $40 = $34 - $39 | 0;
   $41 = $40 & 255;
   $42 = $i;
   $43 = $2;
   $44 = $43 + $42 | 0;
   SAFE_HEAP_STORE($44 >> 0 | 0, $41 | 0, 1);
   $45 = $i;
   $46 = $45 + 1 | 0;
   $i = $46;
  }
  STACKTOP = sp;
  return;
 }
}

function _InitCorrectionLUT($lut, $min_dist) {
 $lut = $lut | 0;
 $min_dist = $min_dist | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $c = 0, $delta = 0, $i = 0, $max_threshold = 0, $threshold1 = 0, $threshold2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $lut;
 $1 = $min_dist;
 $2 = $1;
 $3 = $2 << 2;
 $threshold1 = $3;
 $4 = $threshold1;
 $5 = $4 * 3 | 0;
 $6 = $5 >> 2;
 $threshold2 = $6;
 $7 = $threshold2;
 $8 = $7 << 0;
 $max_threshold = $8;
 $9 = $threshold1;
 $10 = $threshold2;
 $11 = $9 - $10 | 0;
 $delta = $11;
 $i = 1;
 while (1) {
  $12 = $i;
  $13 = ($12 | 0) <= 1023;
  if (!$13) {
   break;
  }
  $14 = $i;
  $15 = $threshold2;
  $16 = ($14 | 0) <= ($15 | 0);
  $17 = $i;
  if ($16) {
   $18 = $17 << 0;
   $28 = $18;
  } else {
   $19 = $threshold1;
   $20 = ($17 | 0) < ($19 | 0);
   if ($20) {
    $21 = $max_threshold;
    $22 = $threshold1;
    $23 = $i;
    $24 = $22 - $23 | 0;
    $25 = Math_imul($21, $24) | 0;
    $26 = $delta;
    $27 = ($25 | 0) / ($26 | 0) & -1;
    $28 = $27;
   } else {
    $28 = 0;
   }
  }
  $c = $28;
  $29 = $c;
  $30 = $29 >> 2;
  $c = $30;
  $31 = $c;
  $32 = $31 & 65535;
  $33 = $i;
  $34 = $0;
  $35 = $34 + ($33 << 1) | 0;
  SAFE_HEAP_STORE($35 | 0, $32 | 0, 2);
  $36 = $c;
  $37 = 0 - $36 | 0;
  $38 = $37 & 65535;
  $39 = $i;
  $40 = 0 - $39 | 0;
  $41 = $0;
  $42 = $41 + ($40 << 1) | 0;
  SAFE_HEAP_STORE($42 | 0, $38 | 0, 2);
  $43 = $i;
  $44 = $43 + 1 | 0;
  $i = $44;
 }
 $45 = $0;
 SAFE_HEAP_STORE($45 | 0, 0 | 0, 2);
 STACKTOP = sp;
 return;
}

function _VP8GetSigned($br, $v) {
 $br = $br | 0;
 $v = $v | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $47 = 0, $48 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mask = 0, $pos = 0, $split = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $br;
 $1 = $v;
 $2 = $0;
 $3 = $2 + 8 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = ($4 | 0) < 0;
 if ($5) {
  $6 = $0;
  _VP8LoadNewBytes83($6);
 }
 $7 = $0;
 $8 = $7 + 8 | 0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $pos = $9;
 $10 = $0;
 $11 = $10 + 4 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = $12 >>> 1;
 $split = $13;
 $14 = $0;
 $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
 $16 = $pos;
 $17 = $15 >>> $16;
 $value = $17;
 $18 = $split;
 $19 = $value;
 $20 = $18 - $19 | 0;
 $21 = $20 >> 31;
 $mask = $21;
 $22 = $0;
 $23 = $22 + 8 | 0;
 $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
 $25 = $24 - 1 | 0;
 SAFE_HEAP_STORE($23 | 0, $25 | 0, 4);
 $26 = $mask;
 $27 = $0;
 $28 = $27 + 4 | 0;
 $29 = SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0;
 $30 = $29 + $26 | 0;
 SAFE_HEAP_STORE($28 | 0, $30 | 0, 4);
 $31 = $0;
 $32 = $31 + 4 | 0;
 $33 = SAFE_HEAP_LOAD($32 | 0, 4, 0) | 0 | 0;
 $34 = $33 | 1;
 SAFE_HEAP_STORE($32 | 0, $34 | 0, 4);
 $35 = $split;
 $36 = $35 + 1 | 0;
 $37 = $mask;
 $38 = $36 & $37;
 $39 = $pos;
 $40 = $38 << $39;
 $41 = $0;
 $42 = SAFE_HEAP_LOAD($41 | 0, 4, 0) | 0 | 0;
 $43 = $42 - $40 | 0;
 SAFE_HEAP_STORE($41 | 0, $43 | 0, 4);
 $44 = $1;
 $45 = $mask;
 $46 = $44 ^ $45;
 $47 = $mask;
 $48 = $46 - $47 | 0;
 STACKTOP = sp;
 return $48 | 0;
}

function _VP8DspInit() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD(584 | 0, 4, 0) | 0 | 0;
 $1 = SAFE_HEAP_LOAD(412 | 0, 4, 0) | 0 | 0;
 $2 = ($0 | 0) == ($1 | 0);
 if ($2) {
  return;
 }
 _VP8InitClipTables();
 SAFE_HEAP_STORE(416 | 0, 35 | 0, 4);
 SAFE_HEAP_STORE(420 | 0, 36 | 0, 4);
 SAFE_HEAP_STORE(424 | 0, 37 | 0, 4);
 SAFE_HEAP_STORE(428 | 0, 38 | 0, 4);
 SAFE_HEAP_STORE(432 | 0, 39 | 0, 4);
 SAFE_HEAP_STORE(436 | 0, 40 | 0, 4);
 SAFE_HEAP_STORE(440 | 0, 41 | 0, 4);
 SAFE_HEAP_STORE(444 | 0, 42 | 0, 4);
 SAFE_HEAP_STORE(448 | 0, 43 | 0, 4);
 SAFE_HEAP_STORE(452 | 0, 44 | 0, 4);
 SAFE_HEAP_STORE(456 | 0, 45 | 0, 4);
 SAFE_HEAP_STORE(460 | 0, 46 | 0, 4);
 SAFE_HEAP_STORE(464 | 0, 47 | 0, 4);
 SAFE_HEAP_STORE(468 | 0, 48 | 0, 4);
 SAFE_HEAP_STORE(472 | 0, 49 | 0, 4);
 SAFE_HEAP_STORE(476 | 0, 50 | 0, 4);
 SAFE_HEAP_STORE(480 | 0, 51 | 0, 4);
 SAFE_HEAP_STORE(484 | 0, 52 | 0, 4);
 SAFE_HEAP_STORE(488 | 0, 53 | 0, 4);
 SAFE_HEAP_STORE(492 | 0, 54 | 0, 4);
 SAFE_HEAP_STORE(496 | 0, 55 | 0, 4);
 SAFE_HEAP_STORE(500 | 0, 56 | 0, 4);
 SAFE_HEAP_STORE(504 | 0, 57 | 0, 4);
 SAFE_HEAP_STORE(508 | 0, 58 | 0, 4);
 SAFE_HEAP_STORE(512 | 0, 59 | 0, 4);
 SAFE_HEAP_STORE(516 | 0, 60 | 0, 4);
 SAFE_HEAP_STORE(520 | 0, 61 | 0, 4);
 SAFE_HEAP_STORE(524 | 0, 62 | 0, 4);
 SAFE_HEAP_STORE(528 | 0, 63 | 0, 4);
 SAFE_HEAP_STORE(532 | 0, 64 | 0, 4);
 SAFE_HEAP_STORE(536 | 0, 65 | 0, 4);
 SAFE_HEAP_STORE(540 | 0, 66 | 0, 4);
 SAFE_HEAP_STORE(544 | 0, 67 | 0, 4);
 SAFE_HEAP_STORE(548 | 0, 68 | 0, 4);
 SAFE_HEAP_STORE(552 | 0, 69 | 0, 4);
 SAFE_HEAP_STORE(556 | 0, 70 | 0, 4);
 SAFE_HEAP_STORE(560 | 0, 71 | 0, 4);
 SAFE_HEAP_STORE(564 | 0, 72 | 0, 4);
 SAFE_HEAP_STORE(568 | 0, 73 | 0, 4);
 SAFE_HEAP_STORE(572 | 0, 74 | 0, 4);
 SAFE_HEAP_STORE(576 | 0, 75 | 0, 4);
 SAFE_HEAP_STORE(580 | 0, 76 | 0, 4);
 $3 = SAFE_HEAP_LOAD(412 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE(584 | 0, $3 | 0, 4);
 return;
}

function _ExtractAlpha($argb, $argb_stride, $width, $height, $alpha, $alpha_stride) {
 $argb = $argb | 0;
 $argb_stride = $argb_stride | 0;
 $width = $width | 0;
 $height = $height | 0;
 $alpha = $alpha | 0;
 $alpha_stride = $alpha_stride | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $alpha_mask = 0, $alpha_value = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $argb;
 $1 = $argb_stride;
 $2 = $width;
 $3 = $height;
 $4 = $alpha;
 $5 = $alpha_stride;
 $alpha_mask = -1;
 $j = 0;
 while (1) {
  $6 = $j;
  $7 = $3;
  $8 = ($6 | 0) < ($7 | 0);
  if (!$8) {
   break;
  }
  $i = 0;
  while (1) {
   $9 = $i;
   $10 = $2;
   $11 = ($9 | 0) < ($10 | 0);
   if (!$11) {
    break;
   }
   $12 = $i;
   $13 = $12 << 2;
   $14 = $0;
   $15 = $14 + $13 | 0;
   $16 = SAFE_HEAP_LOAD($15 >> 0 | 0, 1, 0) | 0 | 0;
   $alpha_value = $16;
   $17 = $alpha_value;
   $18 = $i;
   $19 = $4;
   $20 = $19 + $18 | 0;
   SAFE_HEAP_STORE($20 >> 0 | 0, $17 | 0, 1);
   $21 = $alpha_value;
   $22 = $21 & 255;
   $23 = $alpha_mask;
   $24 = $23 & 255;
   $25 = $24 & $22;
   $26 = $25 & 255;
   $alpha_mask = $26;
   $27 = $i;
   $28 = $27 + 1 | 0;
   $i = $28;
  }
  $29 = $1;
  $30 = $0;
  $31 = $30 + $29 | 0;
  $0 = $31;
  $32 = $5;
  $33 = $4;
  $34 = $33 + $32 | 0;
  $4 = $34;
  $35 = $j;
  $36 = $35 + 1 | 0;
  $j = $36;
 }
 $37 = $alpha_mask;
 $38 = $37 & 255;
 $39 = ($38 | 0) == 255;
 $40 = $39 & 1;
 STACKTOP = sp;
 return $40 | 0;
}

function _ReadPackedSymbols($group, $br, $dst) {
 $group = $group | 0;
 $br = $br | 0;
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $code = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $code = sp;
 $1 = $group;
 $2 = $br;
 $3 = $dst;
 $4 = $2;
 $5 = _VP8LPrefetchBits($4) | 0;
 $6 = $5 & 63;
 $val = $6;
 $7 = $val;
 $8 = $1;
 $9 = $8 + 36 | 0;
 $10 = $9 + ($7 << 3) | 0;
 {}
 SAFE_HEAP_STORE($code | 0, SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($code + 4 | 0, SAFE_HEAP_LOAD($10 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 $11 = $1;
 $12 = $11 + 32 | 0;
 $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
 $14 = ($13 | 0) != 0;
 if (!$14) {
  ___assert_fail(7856 | 0, 7124 | 0, 206, 7880 | 0);
 }
 $15 = SAFE_HEAP_LOAD($code | 0, 4, 0) | 0 | 0;
 $16 = ($15 | 0) < 256;
 $17 = $2;
 $18 = $2;
 $19 = $18 + 20 | 0;
 $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
 $21 = SAFE_HEAP_LOAD($code | 0, 4, 0) | 0 | 0;
 $22 = $20 + $21 | 0;
 if ($16) {
  _VP8LSetBitPos($17, $22);
  $23 = $code + 4 | 0;
  $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
  $25 = $3;
  SAFE_HEAP_STORE($25 | 0, $24 | 0, 4);
  $0 = 0;
  $32 = $0;
  STACKTOP = sp;
  return $32 | 0;
 }
 $26 = $22 - 256 | 0;
 _VP8LSetBitPos($17, $26);
 $27 = $code + 4 | 0;
 $28 = SAFE_HEAP_LOAD($27 | 0, 4, 0) | 0 | 0;
 $29 = $28 >>> 0 >= 256;
 if (!$29) {
  ___assert_fail(7898 | 0, 7124 | 0, 213, 7880 | 0);
 }
 $30 = $code + 4 | 0;
 $31 = SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0;
 $0 = $31;
 $32 = $0;
 STACKTOP = sp;
 return $32 | 0;
}

function _VP8LGetInfo($data, $data_size, $width, $height, $has_alpha) {
 $data = $data | 0;
 $data_size = $data_size | 0;
 $width = $width | 0;
 $height = $height | 0;
 $has_alpha = $has_alpha | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $br = 0, $h = 0, $or$cond = 0, $w = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $w = sp + 40 | 0;
 $h = sp + 36 | 0;
 $a = sp + 32 | 0;
 $br = sp;
 $1 = $data;
 $2 = $data_size;
 $3 = $width;
 $4 = $height;
 $5 = $has_alpha;
 $6 = $1;
 $7 = ($6 | 0) == (0 | 0);
 $8 = $2;
 $9 = $8 >>> 0 < 5;
 $or$cond = $7 | $9;
 if ($or$cond) {
  $0 = 0;
  $30 = $0;
  STACKTOP = sp;
  return $30 | 0;
 }
 $10 = $1;
 $11 = $2;
 $12 = _VP8LCheckSignature($10, $11) | 0;
 $13 = ($12 | 0) != 0;
 if (!$13) {
  $0 = 0;
  $30 = $0;
  STACKTOP = sp;
  return $30 | 0;
 }
 $14 = $1;
 $15 = $2;
 _VP8LInitBitReader($br, $14, $15);
 $16 = _ReadImageInfo($br, $w, $h, $a) | 0;
 $17 = ($16 | 0) != 0;
 if (!$17) {
  $0 = 0;
  $30 = $0;
  STACKTOP = sp;
  return $30 | 0;
 }
 $18 = $3;
 $19 = ($18 | 0) != (0 | 0);
 if ($19) {
  $20 = SAFE_HEAP_LOAD($w | 0, 4, 0) | 0 | 0;
  $21 = $3;
  SAFE_HEAP_STORE($21 | 0, $20 | 0, 4);
 }
 $22 = $4;
 $23 = ($22 | 0) != (0 | 0);
 if ($23) {
  $24 = SAFE_HEAP_LOAD($h | 0, 4, 0) | 0 | 0;
  $25 = $4;
  SAFE_HEAP_STORE($25 | 0, $24 | 0, 4);
 }
 $26 = $5;
 $27 = ($26 | 0) != (0 | 0);
 if ($27) {
  $28 = SAFE_HEAP_LOAD($a | 0, 4, 0) | 0 | 0;
  $29 = $5;
  SAFE_HEAP_STORE($29 | 0, $28 | 0, 4);
 }
 $0 = 1;
 $30 = $0;
 STACKTOP = sp;
 return $30 | 0;
}

function _ApplyInverseTransformsAlpha($dec, $num_rows, $rows) {
 $dec = $dec | 0;
 $num_rows = $num_rows | 0;
 $rows = $rows | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $end_row = 0, $rows_in = 0, $rows_out = 0, $start_row = 0;
 var $transform = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $num_rows;
 $2 = $rows;
 $3 = $0;
 $4 = $3 + 108 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $start_row = $5;
 $6 = $start_row;
 $7 = $1;
 $8 = $6 + $7 | 0;
 $end_row = $8;
 $9 = $2;
 $rows_in = $9;
 $10 = $0;
 $11 = $10 + 8 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = $12 + 40 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $15 = $0;
 $16 = $15 + 8 | 0;
 $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
 $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
 $19 = $start_row;
 $20 = Math_imul($18, $19) | 0;
 $21 = $14 + $20 | 0;
 $rows_out = $21;
 $22 = $0;
 $23 = $22 + 180 | 0;
 $transform = $23;
 $24 = $0;
 $25 = $24 + 176 | 0;
 $26 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
 $27 = ($26 | 0) == 1;
 if (!$27) {
  ___assert_fail(7958 | 0, 7124 | 0, 725, 7984 | 0);
 }
 $28 = $transform;
 $29 = SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0;
 $30 = ($29 | 0) == 3;
 if ($30) {
  $31 = $transform;
  $32 = $start_row;
  $33 = $end_row;
  $34 = $rows_in;
  $35 = $rows_out;
  _VP8LColorIndexInverseTransformAlpha($31, $32, $33, $34, $35);
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(8012 | 0, 7124 | 0, 726, 7984 | 0);
 }
}

function _InitThreadContext($dec) {
 $dec = $dec | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $worker = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $dec;
 $2 = $1;
 $3 = $2 + 152 | 0;
 SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
 $4 = $1;
 $5 = $4 + 148 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = ($6 | 0) > 0;
 $8 = $1;
 do {
  if ($7) {
   $9 = $8 + 124 | 0;
   $worker = $9;
   $10 = _WebPGetWorkerInterface() | 0;
   $11 = $10 + 4 | 0;
   $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
   $13 = $worker;
   $14 = FUNCTION_TABLE_ii[(SAFE_FT_MASK($12 | 0, 15 | 0) | 0) & 15]($13) | 0;
   $15 = ($14 | 0) != 0;
   $16 = $1;
   if ($15) {
    $18 = $worker;
    $19 = $18 + 12 | 0;
    SAFE_HEAP_STORE($19 | 0, $16 | 0, 4);
    $20 = $1;
    $21 = $20 + 160 | 0;
    $22 = $21 + 20 | 0;
    $23 = $worker;
    $24 = $23 + 16 | 0;
    SAFE_HEAP_STORE($24 | 0, $22 | 0, 4);
    $25 = $worker;
    $26 = $25 + 8 | 0;
    SAFE_HEAP_STORE($26 | 0, 10 | 0, 4);
    $27 = $1;
    $28 = $27 + 2308 | 0;
    $29 = SAFE_HEAP_LOAD($28 | 0, 4, 0) | 0 | 0;
    $30 = ($29 | 0) > 0;
    $31 = $30 ? 3 : 2;
    $32 = $1;
    $33 = $32 + 156 | 0;
    SAFE_HEAP_STORE($33 | 0, $31 | 0, 4);
    break;
   }
   $17 = _VP8SetError($16, 1, 2956) | 0;
   $0 = $17;
   $35 = $0;
   STACKTOP = sp;
   return $35 | 0;
  } else {
   $34 = $8 + 156 | 0;
   SAFE_HEAP_STORE($34 | 0, 1 | 0, 4);
  }
 } while (0);
 $0 = 1;
 $35 = $0;
 STACKTOP = sp;
 return $35 | 0;
}

function _RestoreState($dec) {
 $dec = $dec | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $0;
 $2 = $1 + 24 | 0;
 $3 = $2 + 24 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = ($4 | 0) != 0;
 if (!$5) {
  ___assert_fail(7698 | 0, 7124 | 0, 1011, 7712 | 0);
 }
 $6 = $0;
 SAFE_HEAP_STORE($6 | 0, 5 | 0, 4);
 $7 = $0;
 $8 = $7 + 24 | 0;
 $9 = $0;
 $10 = $9 + 64 | 0;
 {}
 SAFE_HEAP_STORE($8 | 0, SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($8 + 4 | 0, SAFE_HEAP_LOAD($10 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($8 + 8 | 0, SAFE_HEAP_LOAD($10 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($8 + 12 | 0, SAFE_HEAP_LOAD($10 + 12 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($8 + 16 | 0, SAFE_HEAP_LOAD($10 + 16 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($8 + 20 | 0, SAFE_HEAP_LOAD($10 + 20 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($8 + 24 | 0, SAFE_HEAP_LOAD($10 + 24 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($8 + 28 | 0, SAFE_HEAP_LOAD($10 + 28 | 0, 4, 0) | 0 | 0 | 0, 4);
 $11 = $0;
 $12 = $11 + 96 | 0;
 $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
 $14 = $0;
 $15 = $14 + 112 | 0;
 SAFE_HEAP_STORE($15 | 0, $13 | 0, 4);
 $16 = $0;
 $17 = $16 + 120 | 0;
 $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
 $19 = ($18 | 0) > 0;
 if (!$19) {
  STACKTOP = sp;
  return;
 }
 $20 = $0;
 $21 = $20 + 120 | 0;
 $22 = $21 + 16 | 0;
 $23 = $0;
 $24 = $23 + 120 | 0;
 $25 = $24 + 4 | 0;
 _VP8LColorCacheCopy($22, $25);
 STACKTOP = sp;
 return;
}

function _ReadSymbol($table, $br) {
 $table = $table | 0;
 $br = $br | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $nbits = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $table;
 $1 = $br;
 $2 = $1;
 $3 = _VP8LPrefetchBits($2) | 0;
 $val = $3;
 $4 = $val;
 $5 = $4 & 255;
 $6 = $0;
 $7 = $6 + ($5 << 2) | 0;
 $0 = $7;
 $8 = $0;
 $9 = SAFE_HEAP_LOAD($8 >> 0 | 0, 1, 0) | 0 | 0;
 $10 = $9 & 255;
 $11 = $10 - 8 | 0;
 $nbits = $11;
 $12 = $nbits;
 $13 = ($12 | 0) > 0;
 if ($13) {
  $14 = $1;
  $15 = $1;
  $16 = $15 + 20 | 0;
  $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
  $18 = $17 + 8 | 0;
  _VP8LSetBitPos($14, $18);
  $19 = $1;
  $20 = _VP8LPrefetchBits($19) | 0;
  $val = $20;
  $21 = $0;
  $22 = $21 + 2 | 0;
  $23 = SAFE_HEAP_LOAD($22 | 0, 2, 0) | 0 | 0;
  $24 = $23 & 65535;
  $25 = $0;
  $26 = $25 + ($24 << 2) | 0;
  $0 = $26;
  $27 = $val;
  $28 = $nbits;
  $29 = 1 << $28;
  $30 = $29 - 1 | 0;
  $31 = $27 & $30;
  $32 = $0;
  $33 = $32 + ($31 << 2) | 0;
  $0 = $33;
 }
 $34 = $1;
 $35 = $1;
 $36 = $35 + 20 | 0;
 $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
 $38 = $0;
 $39 = SAFE_HEAP_LOAD($38 >> 0 | 0, 1, 0) | 0 | 0;
 $40 = $39 & 255;
 $41 = $37 + $40 | 0;
 _VP8LSetBitPos($34, $41);
 $42 = $0;
 $43 = $42 + 2 | 0;
 $44 = SAFE_HEAP_LOAD($43 | 0, 2, 0) | 0 | 0;
 $45 = $44 & 65535;
 STACKTOP = sp;
 return $45 | 0;
}

function _DispatchAlpha($alpha, $alpha_stride, $width, $height, $dst, $dst_stride) {
 $alpha = $alpha | 0;
 $alpha_stride = $alpha_stride | 0;
 $width = $width | 0;
 $height = $height | 0;
 $dst = $dst | 0;
 $dst_stride = $dst_stride | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $alpha_mask = 0;
 var $alpha_value = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $alpha;
 $1 = $alpha_stride;
 $2 = $width;
 $3 = $height;
 $4 = $dst;
 $5 = $dst_stride;
 $alpha_mask = 255;
 $j = 0;
 while (1) {
  $6 = $j;
  $7 = $3;
  $8 = ($6 | 0) < ($7 | 0);
  if (!$8) {
   break;
  }
  $i = 0;
  while (1) {
   $9 = $i;
   $10 = $2;
   $11 = ($9 | 0) < ($10 | 0);
   if (!$11) {
    break;
   }
   $12 = $i;
   $13 = $0;
   $14 = $13 + $12 | 0;
   $15 = SAFE_HEAP_LOAD($14 >> 0 | 0, 1, 0) | 0 | 0;
   $16 = $15 & 255;
   $alpha_value = $16;
   $17 = $alpha_value;
   $18 = $17 & 255;
   $19 = $i;
   $20 = $19 << 2;
   $21 = $4;
   $22 = $21 + $20 | 0;
   SAFE_HEAP_STORE($22 >> 0 | 0, $18 | 0, 1);
   $23 = $alpha_value;
   $24 = $alpha_mask;
   $25 = $24 & $23;
   $alpha_mask = $25;
   $26 = $i;
   $27 = $26 + 1 | 0;
   $i = $27;
  }
  $28 = $1;
  $29 = $0;
  $30 = $29 + $28 | 0;
  $0 = $30;
  $31 = $5;
  $32 = $4;
  $33 = $32 + $31 | 0;
  $4 = $33;
  $34 = $j;
  $35 = $34 + 1 | 0;
  $j = $35;
 }
 $36 = $alpha_mask;
 $37 = ($36 | 0) != 255;
 $38 = $37 & 1;
 STACKTOP = sp;
 return $38 | 0;
}

function _WebPSafeMalloc($0, $1, $size) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $size = $size | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $3 = sp;
 $5 = $3;
 $6 = $5;
 SAFE_HEAP_STORE($6 | 0, $0 | 0, 4);
 $7 = $5 + 4 | 0;
 $8 = $7;
 SAFE_HEAP_STORE($8 | 0, $1 | 0, 4);
 $4 = $size;
 $9 = $3;
 $10 = $9;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = $9 + 4 | 0;
 $13 = $12;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $15 = $4;
 $16 = _CheckSizeArgumentsOverflow($11, $14, $15) | 0;
 $17 = ($16 | 0) != 0;
 if (!$17) {
  $2 = 0;
  $43 = $2;
  STACKTOP = sp;
  return $43 | 0;
 }
 $18 = $3;
 $19 = $18;
 $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
 $21 = $18 + 4 | 0;
 $22 = $21;
 $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
 $24 = $4;
 $25 = ___muldi3($20 | 0, $23 | 0, $24 | 0, 0) | 0;
 $26 = tempRet0;
 $27 = $26 >>> 0 > 0;
 $28 = $25 >>> 0 > 0;
 $29 = ($26 | 0) == 0;
 $30 = $29 & $28;
 $31 = $27 | $30;
 if (!$31) {
  ___assert_fail(15007 | 0, 15024 | 0, 189, 15049 | 0);
 }
 $32 = $3;
 $33 = $32;
 $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
 $35 = $32 + 4 | 0;
 $36 = $35;
 $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
 $38 = $4;
 $39 = ___muldi3($34 | 0, $37 | 0, $38 | 0, 0) | 0;
 $40 = tempRet0;
 $41 = _malloc($39) | 0;
 $ptr = $41;
 $42 = $ptr;
 $2 = $42;
 $43 = $2;
 STACKTOP = sp;
 return $43 | 0;
}

function _TransformDCUV($in, $dst) {
 $in = $in | 0;
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $in;
 $1 = $dst;
 $2 = $0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0;
 $4 = $3 << 16 >> 16 != 0;
 if ($4) {
  $5 = SAFE_HEAP_LOAD(428 | 0, 4, 0) | 0 | 0;
  $6 = $0;
  $7 = $1;
  FUNCTION_TABLE_vii[(SAFE_FT_MASK($5 | 0, 127 | 0) | 0) & 127]($6, $7);
 }
 $8 = $0;
 $9 = $8 + 32 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 2, 0) | 0 | 0;
 $11 = $10 << 16 >> 16 != 0;
 if ($11) {
  $12 = SAFE_HEAP_LOAD(428 | 0, 4, 0) | 0 | 0;
  $13 = $0;
  $14 = $13 + 32 | 0;
  $15 = $1;
  $16 = $15 + 4 | 0;
  FUNCTION_TABLE_vii[(SAFE_FT_MASK($12 | 0, 127 | 0) | 0) & 127]($14, $16);
 }
 $17 = $0;
 $18 = $17 + 64 | 0;
 $19 = SAFE_HEAP_LOAD($18 | 0, 2, 0) | 0 | 0;
 $20 = $19 << 16 >> 16 != 0;
 if ($20) {
  $21 = SAFE_HEAP_LOAD(428 | 0, 4, 0) | 0 | 0;
  $22 = $0;
  $23 = $22 + 64 | 0;
  $24 = $1;
  $25 = $24 + 128 | 0;
  FUNCTION_TABLE_vii[(SAFE_FT_MASK($21 | 0, 127 | 0) | 0) & 127]($23, $25);
 }
 $26 = $0;
 $27 = $26 + 96 | 0;
 $28 = SAFE_HEAP_LOAD($27 | 0, 2, 0) | 0 | 0;
 $29 = $28 << 16 >> 16 != 0;
 if (!$29) {
  STACKTOP = sp;
  return;
 }
 $30 = SAFE_HEAP_LOAD(428 | 0, 4, 0) | 0 | 0;
 $31 = $0;
 $32 = $31 + 96 | 0;
 $33 = $1;
 $34 = $33 + 128 | 0;
 $35 = $34 + 4 | 0;
 FUNCTION_TABLE_vii[(SAFE_FT_MASK($30 | 0, 127 | 0) | 0) & 127]($32, $35);
 STACKTOP = sp;
 return;
}

function _ApplyInverseTransforms($dec, $num_rows, $rows) {
 $dec = $dec | 0;
 $num_rows = $num_rows | 0;
 $rows = $rows | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $cache_pixs = 0, $end_row = 0;
 var $n = 0, $rows_in = 0, $rows_out = 0, $start_row = 0, $transform = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $num_rows;
 $2 = $rows;
 $3 = $0;
 $4 = $3 + 176 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $n = $5;
 $6 = $0;
 $7 = $6 + 100 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $9 = $1;
 $10 = Math_imul($8, $9) | 0;
 $cache_pixs = $10;
 $11 = $0;
 $12 = $11 + 108 | 0;
 $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
 $start_row = $13;
 $14 = $start_row;
 $15 = $1;
 $16 = $14 + $15 | 0;
 $end_row = $16;
 $17 = $2;
 $rows_in = $17;
 $18 = $0;
 $19 = $18 + 20 | 0;
 $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
 $rows_out = $20;
 $21 = $rows_out;
 $22 = $rows_in;
 $23 = $cache_pixs;
 $24 = $23 << 2;
 _memcpy($21 | 0, $22 | 0, $24 | 0) | 0;
 while (1) {
  $25 = $n;
  $26 = $25 + -1 | 0;
  $n = $26;
  $27 = ($25 | 0) > 0;
  if (!$27) {
   break;
  }
  $28 = $n;
  $29 = $0;
  $30 = $29 + 180 | 0;
  $31 = $30 + ($28 * 20 | 0) | 0;
  $transform = $31;
  $32 = $transform;
  $33 = $start_row;
  $34 = $end_row;
  $35 = $rows_in;
  $36 = $rows_out;
  _VP8LInverseTransform($32, $33, $34, $35, $36);
  $37 = $rows_out;
  $rows_in = $37;
 }
 STACKTOP = sp;
 return;
}

function _Dither8x8($rg, $dst, $bps, $amp) {
 $rg = $rg | 0;
 $dst = $dst | 0;
 $bps = $bps | 0;
 $amp = $amp | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $bits = 0, $delta = 0, $i = 0, $j = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $rg;
 $1 = $dst;
 $2 = $bps;
 $3 = $amp;
 $j = 0;
 while (1) {
  $4 = $j;
  $5 = ($4 | 0) < 8;
  if (!$5) {
   break;
  }
  $i = 0;
  while (1) {
   $6 = $i;
   $7 = ($6 | 0) < 8;
   if (!$7) {
    break;
   }
   $8 = $0;
   $9 = $3;
   $10 = _VP8RandomBits2($8, 9, $9) | 0;
   $11 = $10 - 256 | 0;
   $bits = $11;
   $12 = $bits;
   $13 = $12 + 8 | 0;
   $14 = $13 >> 4;
   $delta = $14;
   $15 = $i;
   $16 = $1;
   $17 = $16 + $15 | 0;
   $18 = SAFE_HEAP_LOAD($17 >> 0 | 0, 1, 0) | 0 | 0;
   $19 = $18 & 255;
   $20 = $delta;
   $21 = $19 + $20 | 0;
   $v = $21;
   $22 = $v;
   $23 = ($22 | 0) < 0;
   if ($23) {
    $30 = 0;
   } else {
    $24 = $v;
    $25 = ($24 | 0) > 255;
    if ($25) {
     $30 = 255;
    } else {
     $26 = $v;
     $27 = $26 & 255;
     $28 = $27 & 255;
     $30 = $28;
    }
   }
   $29 = $30 & 255;
   $31 = $i;
   $32 = $1;
   $33 = $32 + $31 | 0;
   SAFE_HEAP_STORE($33 >> 0 | 0, $29 | 0, 1);
   $34 = $i;
   $35 = $34 + 1 | 0;
   $i = $35;
  }
  $36 = $2;
  $37 = $1;
  $38 = $37 + $36 | 0;
  $1 = $38;
  $39 = $j;
  $40 = $39 + 1 | 0;
  $j = $40;
 }
 STACKTOP = sp;
 return;
}

function _hev($p, $step, $thresh) {
 $p = $p | 0;
 $step = $step | 0;
 $thresh = $thresh | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $p0 = 0, $p1 = 0, $q0 = 0, $q1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $p;
 $1 = $step;
 $2 = $thresh;
 $3 = $1;
 $4 = Math_imul(-2, $3) | 0;
 $5 = $0;
 $6 = $5 + $4 | 0;
 $7 = SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0;
 $8 = $7 & 255;
 $p1 = $8;
 $9 = $1;
 $10 = 0 - $9 | 0;
 $11 = $0;
 $12 = $11 + $10 | 0;
 $13 = SAFE_HEAP_LOAD($12 >> 0 | 0, 1, 0) | 0 | 0;
 $14 = $13 & 255;
 $p0 = $14;
 $15 = $0;
 $16 = SAFE_HEAP_LOAD($15 >> 0 | 0, 1, 0) | 0 | 0;
 $17 = $16 & 255;
 $q0 = $17;
 $18 = $1;
 $19 = $0;
 $20 = $19 + $18 | 0;
 $21 = SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0;
 $22 = $21 & 255;
 $q1 = $22;
 $23 = $p1;
 $24 = $p0;
 $25 = $23 - $24 | 0;
 $26 = SAFE_HEAP_LOAD(600 | 0, 4, 0) | 0 | 0;
 $27 = $26 + $25 | 0;
 $28 = SAFE_HEAP_LOAD($27 >> 0 | 0, 1, 0) | 0 | 0;
 $29 = $28 & 255;
 $30 = $2;
 $31 = ($29 | 0) > ($30 | 0);
 if ($31) {
  $42 = 1;
  $41 = $42 & 1;
  STACKTOP = sp;
  return $41 | 0;
 }
 $32 = $q1;
 $33 = $q0;
 $34 = $32 - $33 | 0;
 $35 = SAFE_HEAP_LOAD(600 | 0, 4, 0) | 0 | 0;
 $36 = $35 + $34 | 0;
 $37 = SAFE_HEAP_LOAD($36 >> 0 | 0, 1, 0) | 0 | 0;
 $38 = $37 & 255;
 $39 = $2;
 $40 = ($38 | 0) > ($39 | 0);
 $42 = $40;
 $41 = $42 & 1;
 STACKTOP = sp;
 return $41 | 0;
}

function _CopySmallPattern8b($src, $dst, $length, $pattern) {
 $src = $src | 0;
 $dst = $dst | 0;
 $length = $length | 0;
 $pattern = $pattern | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $src;
 $1 = $dst;
 $2 = $length;
 $3 = $pattern;
 while (1) {
  $4 = $1;
  $5 = $4;
  $6 = $5 & 3;
  $7 = ($6 | 0) != 0;
  if (!$7) {
   break;
  }
  $8 = $0;
  $9 = $8 + 1 | 0;
  $0 = $9;
  $10 = SAFE_HEAP_LOAD($8 >> 0 | 0, 1, 0) | 0 | 0;
  $11 = $1;
  $12 = $11 + 1 | 0;
  $1 = $12;
  SAFE_HEAP_STORE($11 >> 0 | 0, $10 | 0, 1);
  $13 = $3;
  $14 = _Rotate8b($13) | 0;
  $3 = $14;
  $15 = $2;
  $16 = $15 + -1 | 0;
  $2 = $16;
 }
 $i = 0;
 while (1) {
  $17 = $i;
  $18 = $2;
  $19 = $18 >> 2;
  $20 = ($17 | 0) < ($19 | 0);
  if (!$20) {
   break;
  }
  $21 = $3;
  $22 = $i;
  $23 = $1;
  $24 = $23 + ($22 << 2) | 0;
  SAFE_HEAP_STORE($24 | 0, $21 | 0, 4);
  $25 = $i;
  $26 = $25 + 1 | 0;
  $i = $26;
 }
 $27 = $i;
 $28 = $27 << 2;
 $i = $28;
 while (1) {
  $29 = $i;
  $30 = $2;
  $31 = ($29 | 0) < ($30 | 0);
  if (!$31) {
   break;
  }
  $32 = $i;
  $33 = $0;
  $34 = $33 + $32 | 0;
  $35 = SAFE_HEAP_LOAD($34 >> 0 | 0, 1, 0) | 0 | 0;
  $36 = $i;
  $37 = $1;
  $38 = $37 + $36 | 0;
  SAFE_HEAP_STORE($38 >> 0 | 0, $35 | 0, 1);
  $39 = $i;
  $40 = $39 + 1 | 0;
  $i = $40;
 }
 STACKTOP = sp;
 return;
}

function _TrueMotion($dst, $size) {
 $dst = $dst | 0;
 $size = $size | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $clip = 0, $clip0 = 0, $top = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dst;
 $1 = $size;
 $2 = $0;
 $3 = $2 + -32 | 0;
 $top = $3;
 $4 = SAFE_HEAP_LOAD(596 | 0, 4, 0) | 0 | 0;
 $5 = $top;
 $6 = $5 + -1 | 0;
 $7 = SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0;
 $8 = $7 & 255;
 $9 = 0 - $8 | 0;
 $10 = $4 + $9 | 0;
 $clip0 = $10;
 $y = 0;
 while (1) {
  $11 = $y;
  $12 = $1;
  $13 = ($11 | 0) < ($12 | 0);
  if (!$13) {
   break;
  }
  $14 = $clip0;
  $15 = $0;
  $16 = $15 + -1 | 0;
  $17 = SAFE_HEAP_LOAD($16 >> 0 | 0, 1, 0) | 0 | 0;
  $18 = $17 & 255;
  $19 = $14 + $18 | 0;
  $clip = $19;
  $x = 0;
  while (1) {
   $20 = $x;
   $21 = $1;
   $22 = ($20 | 0) < ($21 | 0);
   if (!$22) {
    break;
   }
   $23 = $x;
   $24 = $top;
   $25 = $24 + $23 | 0;
   $26 = SAFE_HEAP_LOAD($25 >> 0 | 0, 1, 0) | 0 | 0;
   $27 = $26 & 255;
   $28 = $clip;
   $29 = $28 + $27 | 0;
   $30 = SAFE_HEAP_LOAD($29 >> 0 | 0, 1, 0) | 0 | 0;
   $31 = $x;
   $32 = $0;
   $33 = $32 + $31 | 0;
   SAFE_HEAP_STORE($33 >> 0 | 0, $30 | 0, 1);
   $34 = $x;
   $35 = $34 + 1 | 0;
   $x = $35;
  }
  $36 = $0;
  $37 = $36 + 32 | 0;
  $0 = $37;
  $38 = $y;
  $39 = $38 + 1 | 0;
  $y = $39;
 }
 STACKTOP = sp;
 return;
}

function _WebPSafeCalloc($0, $1, $size) {
 $0 = $0 | 0;
 $1 = $1 | 0;
 $size = $size | 0;
 var $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0, $27 = 0, $28 = 0;
 var $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ptr = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $3 = sp;
 $5 = $3;
 $6 = $5;
 SAFE_HEAP_STORE($6 | 0, $0 | 0, 4);
 $7 = $5 + 4 | 0;
 $8 = $7;
 SAFE_HEAP_STORE($8 | 0, $1 | 0, 4);
 $4 = $size;
 $9 = $3;
 $10 = $9;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = $9 + 4 | 0;
 $13 = $12;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $15 = $4;
 $16 = _CheckSizeArgumentsOverflow($11, $14, $15) | 0;
 $17 = ($16 | 0) != 0;
 if (!$17) {
  $2 = 0;
  $41 = $2;
  STACKTOP = sp;
  return $41 | 0;
 }
 $18 = $3;
 $19 = $18;
 $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
 $21 = $18 + 4 | 0;
 $22 = $21;
 $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
 $24 = $4;
 $25 = ___muldi3($20 | 0, $23 | 0, $24 | 0, 0) | 0;
 $26 = tempRet0;
 $27 = $26 >>> 0 > 0;
 $28 = $25 >>> 0 > 0;
 $29 = ($26 | 0) == 0;
 $30 = $29 & $28;
 $31 = $27 | $30;
 if (!$31) {
  ___assert_fail(15007 | 0, 15024 | 0, 199, 15064 | 0);
 }
 $32 = $3;
 $33 = $32;
 $34 = SAFE_HEAP_LOAD($33 | 0, 4, 0) | 0 | 0;
 $35 = $32 + 4 | 0;
 $36 = $35;
 $37 = SAFE_HEAP_LOAD($36 | 0, 4, 0) | 0 | 0;
 $38 = $4;
 $39 = _calloc($34, $38) | 0;
 $ptr = $39;
 $40 = $ptr;
 $2 = $40;
 $41 = $2;
 STACKTOP = sp;
 return $41 | 0;
}

function _SaveState($dec, $last_pixel) {
 $dec = $dec | 0;
 $last_pixel = $last_pixel | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $last_pixel;
 $2 = $0;
 $3 = $2 + 56 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = ($4 | 0) != 0;
 if (!$5) {
  ___assert_fail(7930 | 0, 7124 | 0, 1002, 7948 | 0);
 }
 $6 = $0;
 $7 = $6 + 64 | 0;
 $8 = $0;
 $9 = $8 + 24 | 0;
 {}
 SAFE_HEAP_STORE($7 | 0, SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($7 + 4 | 0, SAFE_HEAP_LOAD($9 + 4 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($7 + 8 | 0, SAFE_HEAP_LOAD($9 + 8 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($7 + 12 | 0, SAFE_HEAP_LOAD($9 + 12 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($7 + 16 | 0, SAFE_HEAP_LOAD($9 + 16 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($7 + 20 | 0, SAFE_HEAP_LOAD($9 + 20 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($7 + 24 | 0, SAFE_HEAP_LOAD($9 + 24 | 0, 4, 0) | 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($7 + 28 | 0, SAFE_HEAP_LOAD($9 + 28 | 0, 4, 0) | 0 | 0 | 0, 4);
 $10 = $1;
 $11 = $0;
 $12 = $11 + 96 | 0;
 SAFE_HEAP_STORE($12 | 0, $10 | 0, 4);
 $13 = $0;
 $14 = $13 + 120 | 0;
 $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
 $16 = ($15 | 0) > 0;
 if (!$16) {
  STACKTOP = sp;
  return;
 }
 $17 = $0;
 $18 = $17 + 120 | 0;
 $19 = $18 + 4 | 0;
 $20 = $0;
 $21 = $20 + 120 | 0;
 $22 = $21 + 16 | 0;
 _VP8LColorCacheCopy($19, $22);
 STACKTOP = sp;
 return;
}

function _AllocateInternalBuffers8b($dec) {
 $dec = $dec | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $total_num_pixels = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $total_num_pixels = sp;
 $1 = $dec;
 $2 = $1;
 $3 = $2 + 100 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = ($4 | 0) < 0;
 $6 = $5 << 31 >> 31;
 $7 = $1;
 $8 = $7 + 104 | 0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $10 = ($9 | 0) < 0;
 $11 = $10 << 31 >> 31;
 $12 = ___muldi3($4 | 0, $6 | 0, $9 | 0, $11 | 0) | 0;
 $13 = tempRet0;
 $14 = $total_num_pixels;
 $15 = $14;
 SAFE_HEAP_STORE($15 | 0, $12 | 0, 4);
 $16 = $14 + 4 | 0;
 $17 = $16;
 SAFE_HEAP_STORE($17 | 0, $13 | 0, 4);
 $18 = $1;
 $19 = $18 + 20 | 0;
 SAFE_HEAP_STORE($19 | 0, 0 | 0, 4);
 $20 = $total_num_pixels;
 $21 = $20;
 $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
 $23 = $20 + 4 | 0;
 $24 = $23;
 $25 = SAFE_HEAP_LOAD($24 | 0, 4, 0) | 0 | 0;
 $26 = _WebPSafeMalloc($22, $25, 1) | 0;
 $27 = $1;
 $28 = $27 + 16 | 0;
 SAFE_HEAP_STORE($28 | 0, $26 | 0, 4);
 $29 = $1;
 $30 = $29 + 16 | 0;
 $31 = SAFE_HEAP_LOAD($30 | 0, 4, 0) | 0 | 0;
 $32 = ($31 | 0) == (0 | 0);
 if ($32) {
  $33 = $1;
  SAFE_HEAP_STORE($33 | 0, 1 | 0, 4);
  $0 = 0;
  $34 = $0;
  STACKTOP = sp;
  return $34 | 0;
 } else {
  $0 = 1;
  $34 = $0;
  STACKTOP = sp;
  return $34 | 0;
 }
 return 0 | 0;
}

function _needs_filter($p, $step, $t) {
 $p = $p | 0;
 $step = $step | 0;
 $t = $t | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $p0 = 0, $p1 = 0, $q0 = 0, $q1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $p;
 $1 = $step;
 $2 = $t;
 $3 = $1;
 $4 = Math_imul(-2, $3) | 0;
 $5 = $0;
 $6 = $5 + $4 | 0;
 $7 = SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0;
 $8 = $7 & 255;
 $p1 = $8;
 $9 = $1;
 $10 = 0 - $9 | 0;
 $11 = $0;
 $12 = $11 + $10 | 0;
 $13 = SAFE_HEAP_LOAD($12 >> 0 | 0, 1, 0) | 0 | 0;
 $14 = $13 & 255;
 $p0 = $14;
 $15 = $0;
 $16 = SAFE_HEAP_LOAD($15 >> 0 | 0, 1, 0) | 0 | 0;
 $17 = $16 & 255;
 $q0 = $17;
 $18 = $1;
 $19 = $0;
 $20 = $19 + $18 | 0;
 $21 = SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0;
 $22 = $21 & 255;
 $q1 = $22;
 $23 = $p0;
 $24 = $q0;
 $25 = $23 - $24 | 0;
 $26 = SAFE_HEAP_LOAD(600 | 0, 4, 0) | 0 | 0;
 $27 = $26 + $25 | 0;
 $28 = SAFE_HEAP_LOAD($27 >> 0 | 0, 1, 0) | 0 | 0;
 $29 = $28 & 255;
 $30 = $29 << 2;
 $31 = $p1;
 $32 = $q1;
 $33 = $31 - $32 | 0;
 $34 = SAFE_HEAP_LOAD(600 | 0, 4, 0) | 0 | 0;
 $35 = $34 + $33 | 0;
 $36 = SAFE_HEAP_LOAD($35 >> 0 | 0, 1, 0) | 0 | 0;
 $37 = $36 & 255;
 $38 = $30 + $37 | 0;
 $39 = $2;
 $40 = ($38 | 0) <= ($39 | 0);
 $41 = $40 & 1;
 STACKTOP = sp;
 return $41 | 0;
}

function _WebPMultRowC($ptr, $alpha, $width, $inverse) {
 $ptr = $ptr | 0;
 $alpha = $alpha | 0;
 $width = $width | 0;
 $inverse = $inverse | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $scale = 0, $x = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $ptr;
 $1 = $alpha;
 $2 = $width;
 $3 = $inverse;
 $x = 0;
 while (1) {
  $4 = $x;
  $5 = $2;
  $6 = ($4 | 0) < ($5 | 0);
  if (!$6) {
   break;
  }
  $7 = $x;
  $8 = $1;
  $9 = $8 + $7 | 0;
  $10 = SAFE_HEAP_LOAD($9 >> 0 | 0, 1, 0) | 0 | 0;
  $11 = $10 & 255;
  $a = $11;
  $12 = $a;
  $13 = ($12 | 0) != 255;
  do {
   if ($13) {
    $14 = $a;
    $15 = ($14 | 0) == 0;
    if ($15) {
     $16 = $x;
     $17 = $0;
     $18 = $17 + $16 | 0;
     SAFE_HEAP_STORE($18 >> 0 | 0, 0 | 0, 1);
     break;
    } else {
     $19 = $a;
     $20 = $3;
     $21 = _GetScale($19, $20) | 0;
     $scale = $21;
     $22 = $x;
     $23 = $0;
     $24 = $23 + $22 | 0;
     $25 = SAFE_HEAP_LOAD($24 >> 0 | 0, 1, 0) | 0 | 0;
     $26 = $scale;
     $27 = _Mult($25, $26) | 0;
     $28 = $27 & 255;
     $29 = $x;
     $30 = $0;
     $31 = $30 + $29 | 0;
     SAFE_HEAP_STORE($31 >> 0 | 0, $28 | 0, 1);
     break;
    }
   }
  } while (0);
  $32 = $x;
  $33 = $32 + 1 | 0;
  $x = $33;
 }
 STACKTOP = sp;
 return;
}

function _ClampedAddSubtractFull($c0, $c1, $c2) {
 $c0 = $c0 | 0;
 $c1 = $c1 | 0;
 $c2 = $c2 | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $45 = 0, $46 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $a = 0, $b = 0, $g = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $c0;
 $1 = $c1;
 $2 = $c2;
 $3 = $0;
 $4 = $3 >>> 24;
 $5 = $1;
 $6 = $5 >>> 24;
 $7 = $2;
 $8 = $7 >>> 24;
 $9 = _AddSubtractComponentFull($4, $6, $8) | 0;
 $a = $9;
 $10 = $0;
 $11 = $10 >>> 16;
 $12 = $11 & 255;
 $13 = $1;
 $14 = $13 >>> 16;
 $15 = $14 & 255;
 $16 = $2;
 $17 = $16 >>> 16;
 $18 = $17 & 255;
 $19 = _AddSubtractComponentFull($12, $15, $18) | 0;
 $r = $19;
 $20 = $0;
 $21 = $20 >>> 8;
 $22 = $21 & 255;
 $23 = $1;
 $24 = $23 >>> 8;
 $25 = $24 & 255;
 $26 = $2;
 $27 = $26 >>> 8;
 $28 = $27 & 255;
 $29 = _AddSubtractComponentFull($22, $25, $28) | 0;
 $g = $29;
 $30 = $0;
 $31 = $30 & 255;
 $32 = $1;
 $33 = $32 & 255;
 $34 = $2;
 $35 = $34 & 255;
 $36 = _AddSubtractComponentFull($31, $33, $35) | 0;
 $b = $36;
 $37 = $a;
 $38 = $37 << 24;
 $39 = $r;
 $40 = $39 << 16;
 $41 = $38 | $40;
 $42 = $g;
 $43 = $42 << 8;
 $44 = $41 | $43;
 $45 = $b;
 $46 = $44 | $45;
 STACKTOP = sp;
 return $46 | 0;
}

function _WebPConvertRGBA32ToUV_C($rgb, $u, $v, $width) {
 $rgb = $rgb | 0;
 $u = $u | 0;
 $v = $v | 0;
 $width = $width | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $g = 0;
 var $i = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $rgb;
 $1 = $u;
 $2 = $v;
 $3 = $width;
 $i = 0;
 while (1) {
  $4 = $i;
  $5 = $3;
  $6 = ($4 | 0) < ($5 | 0);
  if (!$6) {
   break;
  }
  $7 = $0;
  $8 = SAFE_HEAP_LOAD($7 | 0, 2, 0) | 0 | 0;
  $9 = $8 & 65535;
  $r = $9;
  $10 = $0;
  $11 = $10 + 2 | 0;
  $12 = SAFE_HEAP_LOAD($11 | 0, 2, 0) | 0 | 0;
  $13 = $12 & 65535;
  $g = $13;
  $14 = $0;
  $15 = $14 + 4 | 0;
  $16 = SAFE_HEAP_LOAD($15 | 0, 2, 0) | 0 | 0;
  $17 = $16 & 65535;
  $b = $17;
  $18 = $r;
  $19 = $g;
  $20 = $b;
  $21 = _VP8RGBToU($18, $19, $20, 131072) | 0;
  $22 = $21 & 255;
  $23 = $i;
  $24 = $1;
  $25 = $24 + $23 | 0;
  SAFE_HEAP_STORE($25 >> 0 | 0, $22 | 0, 1);
  $26 = $r;
  $27 = $g;
  $28 = $b;
  $29 = _VP8RGBToV($26, $27, $28, 131072) | 0;
  $30 = $29 & 255;
  $31 = $i;
  $32 = $2;
  $33 = $32 + $31 | 0;
  SAFE_HEAP_STORE($33 >> 0 | 0, $30 | 0, 1);
  $34 = $i;
  $35 = $34 + 1 | 0;
  $i = $35;
  $36 = $0;
  $37 = $36 + 8 | 0;
  $0 = $37;
 }
 STACKTOP = sp;
 return;
}

function _VP8LConvertBGRAToRGBA_C($src, $num_pixels, $dst) {
 $src = $src | 0;
 $num_pixels = $num_pixels | 0;
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argb = 0, $src_end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $src;
 $1 = $num_pixels;
 $2 = $dst;
 $3 = $0;
 $4 = $1;
 $5 = $3 + ($4 << 2) | 0;
 $src_end = $5;
 while (1) {
  $6 = $0;
  $7 = $src_end;
  $8 = $6 >>> 0 < $7 >>> 0;
  if (!$8) {
   break;
  }
  $9 = $0;
  $10 = $9 + 4 | 0;
  $0 = $10;
  $11 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
  $argb = $11;
  $12 = $argb;
  $13 = $12 >>> 16;
  $14 = $13 & 255;
  $15 = $14 & 255;
  $16 = $2;
  $17 = $16 + 1 | 0;
  $2 = $17;
  SAFE_HEAP_STORE($16 >> 0 | 0, $15 | 0, 1);
  $18 = $argb;
  $19 = $18 >>> 8;
  $20 = $19 & 255;
  $21 = $20 & 255;
  $22 = $2;
  $23 = $22 + 1 | 0;
  $2 = $23;
  SAFE_HEAP_STORE($22 >> 0 | 0, $21 | 0, 1);
  $24 = $argb;
  $25 = $24 >>> 0;
  $26 = $25 & 255;
  $27 = $26 & 255;
  $28 = $2;
  $29 = $28 + 1 | 0;
  $2 = $29;
  SAFE_HEAP_STORE($28 >> 0 | 0, $27 | 0, 1);
  $30 = $argb;
  $31 = $30 >>> 24;
  $32 = $31 & 255;
  $33 = $32 & 255;
  $34 = $2;
  $35 = $34 + 1 | 0;
  $2 = $35;
  SAFE_HEAP_STORE($34 >> 0 | 0, $33 | 0, 1);
 }
 STACKTOP = sp;
 return;
}

function _WebPSamplerProcessPlane($y, $y_stride, $u, $v, $uv_stride, $dst, $dst_stride, $width, $height, $func) {
 $y = $y | 0;
 $y_stride = $y_stride | 0;
 $u = $u | 0;
 $v = $v | 0;
 $uv_stride = $uv_stride | 0;
 $dst = $dst | 0;
 $dst_stride = $dst_stride | 0;
 $width = $width | 0;
 $height = $height | 0;
 $func = $func | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $y_stride;
 $2 = $u;
 $3 = $v;
 $4 = $uv_stride;
 $5 = $dst;
 $6 = $dst_stride;
 $7 = $width;
 $8 = $height;
 $9 = $func;
 $j = 0;
 while (1) {
  $10 = $j;
  $11 = $8;
  $12 = ($10 | 0) < ($11 | 0);
  if (!$12) {
   break;
  }
  $13 = $9;
  $14 = $0;
  $15 = $2;
  $16 = $3;
  $17 = $5;
  $18 = $7;
  FUNCTION_TABLE_viiiii[(SAFE_FT_MASK($13 | 0, 255 | 0) | 0) & 255]($14, $15, $16, $17, $18);
  $19 = $1;
  $20 = $0;
  $21 = $20 + $19 | 0;
  $0 = $21;
  $22 = $j;
  $23 = $22 & 1;
  $24 = ($23 | 0) != 0;
  if ($24) {
   $25 = $4;
   $26 = $2;
   $27 = $26 + $25 | 0;
   $2 = $27;
   $28 = $4;
   $29 = $3;
   $30 = $29 + $28 | 0;
   $3 = $30;
  }
  $31 = $6;
  $32 = $5;
  $33 = $32 + $31 | 0;
  $5 = $33;
  $34 = $j;
  $35 = $34 + 1 | 0;
  $j = $35;
 }
 STACKTOP = sp;
 return;
}

function _Export($rescaler, $colorspace, $rgba_stride, $rgba) {
 $rescaler = $rescaler | 0;
 $colorspace = $colorspace | 0;
 $rgba_stride = $rgba_stride | 0;
 $rgba = $rgba | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst = 0, $dst_width = 0, $num_lines_out = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $rescaler;
 $1 = $colorspace;
 $2 = $rgba_stride;
 $3 = $rgba;
 $4 = $0;
 $5 = $4 + 68 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $src = $6;
 $7 = $0;
 $8 = $7 + 52 | 0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $dst_width = $9;
 $num_lines_out = 0;
 while (1) {
  $10 = $0;
  $11 = _WebPRescalerHasPendingOutput116($10) | 0;
  $12 = ($11 | 0) != 0;
  if (!$12) {
   break;
  }
  $13 = $3;
  $14 = $num_lines_out;
  $15 = $2;
  $16 = Math_imul($14, $15) | 0;
  $17 = $13 + $16 | 0;
  $dst = $17;
  $18 = $0;
  _WebPRescalerExportRow($18);
  $19 = SAFE_HEAP_LOAD(380 | 0, 4, 0) | 0 | 0;
  $20 = $src;
  $21 = $dst_width;
  FUNCTION_TABLE_viii[(SAFE_FT_MASK($19 | 0, 255 | 0) | 0) & 255]($20, $21, 1);
  $22 = $src;
  $23 = $dst_width;
  $24 = $1;
  $25 = $dst;
  _VP8LConvertFromBGRA($22, $23, $24, $25);
  $26 = $num_lines_out;
  $27 = $26 + 1 | 0;
  $num_lines_out = $27;
 }
 $28 = $num_lines_out;
 STACKTOP = sp;
 return $28 | 0;
}

function _ExportYUVA($dec, $y_pos) {
 $dec = $dec | 0;
 $y_pos = $y_pos | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dst_width = 0, $num_lines_out = 0, $rescaler = 0, $src = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $y_pos;
 $2 = $0;
 $3 = $2 + 268 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $rescaler = $4;
 $5 = $rescaler;
 $6 = $5 + 68 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $src = $7;
 $8 = $rescaler;
 $9 = $8 + 52 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $dst_width = $10;
 $num_lines_out = 0;
 while (1) {
  $11 = $rescaler;
  $12 = _WebPRescalerHasPendingOutput116($11) | 0;
  $13 = ($12 | 0) != 0;
  if (!$13) {
   break;
  }
  $14 = $rescaler;
  _WebPRescalerExportRow($14);
  $15 = SAFE_HEAP_LOAD(380 | 0, 4, 0) | 0 | 0;
  $16 = $src;
  $17 = $dst_width;
  FUNCTION_TABLE_viii[(SAFE_FT_MASK($15 | 0, 255 | 0) | 0) & 255]($16, $17, 1);
  $18 = $src;
  $19 = $dst_width;
  $20 = $1;
  $21 = $0;
  $22 = $21 + 12 | 0;
  $23 = SAFE_HEAP_LOAD($22 | 0, 4, 0) | 0 | 0;
  _ConvertToYUVA($18, $19, $20, $23);
  $24 = $1;
  $25 = $24 + 1 | 0;
  $1 = $25;
  $26 = $num_lines_out;
  $27 = $26 + 1 | 0;
  $num_lines_out = $27;
 }
 $28 = $num_lines_out;
 STACKTOP = sp;
 return $28 | 0;
}

function _VP8Clear($dec) {
 $dec = $dec | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $0;
 $2 = ($1 | 0) == (0 | 0);
 if ($2) {
  STACKTOP = sp;
  return;
 }
 $3 = _WebPGetWorkerInterface() | 0;
 $4 = $3 + 20 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = $0;
 $7 = $6 + 124 | 0;
 FUNCTION_TABLE_vi[(SAFE_FT_MASK($5 | 0, 255 | 0) | 0) & 255]($7);
 $8 = $0;
 $9 = $8 + 2344 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 _ALPHDelete($10);
 $11 = $0;
 $12 = $11 + 2344 | 0;
 SAFE_HEAP_STORE($12 | 0, 0 | 0, 4);
 $13 = $0;
 $14 = $13 + 2288 | 0;
 $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
 _WebPSafeFree($15);
 $16 = $0;
 $17 = $16 + 2288 | 0;
 SAFE_HEAP_STORE($17 | 0, 0 | 0, 4);
 $18 = $0;
 $19 = $18 + 2292 | 0;
 SAFE_HEAP_STORE($19 | 0, 0 | 0, 4);
 $20 = $0;
 $21 = $20 + 12 | 0;
 {}
 SAFE_HEAP_STORE($21 | 0, 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($21 + 4 | 0, 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($21 + 8 | 0, 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($21 + 12 | 0, 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($21 + 16 | 0, 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($21 + 20 | 0, 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($21 + 24 | 0, 0 | 0 | 0, 4);
 $22 = $0;
 $23 = $22 + 4 | 0;
 SAFE_HEAP_STORE($23 | 0, 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function _ClampedAddSubtractHalf($c0, $c1, $c2) {
 $c0 = $c0 | 0;
 $c1 = $c1 | 0;
 $c2 = $c2 | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $a = 0, $ave = 0, $b = 0, $g = 0, $r = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $c0;
 $1 = $c1;
 $2 = $c2;
 $3 = $0;
 $4 = $1;
 $5 = _Average2($3, $4) | 0;
 $ave = $5;
 $6 = $ave;
 $7 = $6 >>> 24;
 $8 = $2;
 $9 = $8 >>> 24;
 $10 = _AddSubtractComponentHalf($7, $9) | 0;
 $a = $10;
 $11 = $ave;
 $12 = $11 >>> 16;
 $13 = $12 & 255;
 $14 = $2;
 $15 = $14 >>> 16;
 $16 = $15 & 255;
 $17 = _AddSubtractComponentHalf($13, $16) | 0;
 $r = $17;
 $18 = $ave;
 $19 = $18 >>> 8;
 $20 = $19 & 255;
 $21 = $2;
 $22 = $21 >>> 8;
 $23 = $22 & 255;
 $24 = _AddSubtractComponentHalf($20, $23) | 0;
 $g = $24;
 $25 = $ave;
 $26 = $25 >>> 0;
 $27 = $26 & 255;
 $28 = $2;
 $29 = $28 >>> 0;
 $30 = $29 & 255;
 $31 = _AddSubtractComponentHalf($27, $30) | 0;
 $b = $31;
 $32 = $a;
 $33 = $32 << 24;
 $34 = $r;
 $35 = $34 << 16;
 $36 = $33 | $35;
 $37 = $g;
 $38 = $37 << 8;
 $39 = $36 | $38;
 $40 = $b;
 $41 = $39 | $40;
 STACKTOP = sp;
 return $41 | 0;
}

function _VP8LClear($dec) {
 $dec = $dec | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $0;
 $2 = ($1 | 0) == (0 | 0);
 if ($2) {
  STACKTOP = sp;
  return;
 }
 $3 = $0;
 $4 = $3 + 120 | 0;
 _ClearMetadata($4);
 $5 = $0;
 $6 = $5 + 16 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 _WebPSafeFree($7);
 $8 = $0;
 $9 = $8 + 16 | 0;
 SAFE_HEAP_STORE($9 | 0, 0 | 0, 4);
 $i = 0;
 while (1) {
  $10 = $i;
  $11 = $0;
  $12 = $11 + 176 | 0;
  $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
  $14 = ($10 | 0) < ($13 | 0);
  if (!$14) {
   break;
  }
  $15 = $i;
  $16 = $0;
  $17 = $16 + 180 | 0;
  $18 = $17 + ($15 * 20 | 0) | 0;
  _ClearTransform($18);
  $19 = $i;
  $20 = $19 + 1 | 0;
  $i = $20;
 }
 $21 = $0;
 $22 = $21 + 176 | 0;
 SAFE_HEAP_STORE($22 | 0, 0 | 0, 4);
 $23 = $0;
 $24 = $23 + 260 | 0;
 SAFE_HEAP_STORE($24 | 0, 0 | 0, 4);
 $25 = $0;
 $26 = $25 + 264 | 0;
 $27 = SAFE_HEAP_LOAD($26 | 0, 4, 0) | 0 | 0;
 _WebPSafeFree($27);
 $28 = $0;
 $29 = $28 + 264 | 0;
 SAFE_HEAP_STORE($29 | 0, 0 | 0, 4);
 $30 = $0;
 $31 = $30 + 12 | 0;
 SAFE_HEAP_STORE($31 | 0, 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function _VP8LConvertBGRAToRGBA4444_C($src, $num_pixels, $dst) {
 $src = $src | 0;
 $num_pixels = $num_pixels | 0;
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argb = 0, $ba = 0, $rg = 0, $src_end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $src;
 $1 = $num_pixels;
 $2 = $dst;
 $3 = $0;
 $4 = $1;
 $5 = $3 + ($4 << 2) | 0;
 $src_end = $5;
 while (1) {
  $6 = $0;
  $7 = $src_end;
  $8 = $6 >>> 0 < $7 >>> 0;
  if (!$8) {
   break;
  }
  $9 = $0;
  $10 = $9 + 4 | 0;
  $0 = $10;
  $11 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
  $argb = $11;
  $12 = $argb;
  $13 = $12 >>> 16;
  $14 = $13 & 240;
  $15 = $argb;
  $16 = $15 >>> 12;
  $17 = $16 & 15;
  $18 = $14 | $17;
  $19 = $18 & 255;
  $rg = $19;
  $20 = $argb;
  $21 = $20 >>> 0;
  $22 = $21 & 240;
  $23 = $argb;
  $24 = $23 >>> 28;
  $25 = $24 & 15;
  $26 = $22 | $25;
  $27 = $26 & 255;
  $ba = $27;
  $28 = $rg;
  $29 = $2;
  $30 = $29 + 1 | 0;
  $2 = $30;
  SAFE_HEAP_STORE($29 >> 0 | 0, $28 | 0, 1);
  $31 = $ba;
  $32 = $2;
  $33 = $32 + 1 | 0;
  $2 = $33;
  SAFE_HEAP_STORE($32 >> 0 | 0, $31 | 0, 1);
 }
 STACKTOP = sp;
 return;
}

function _DispatchAlphaToGreen($alpha, $alpha_stride, $width, $height, $dst, $dst_stride) {
 $alpha = $alpha | 0;
 $alpha_stride = $alpha_stride | 0;
 $width = $width | 0;
 $height = $height | 0;
 $dst = $dst | 0;
 $dst_stride = $dst_stride | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $alpha;
 $1 = $alpha_stride;
 $2 = $width;
 $3 = $height;
 $4 = $dst;
 $5 = $dst_stride;
 $j = 0;
 while (1) {
  $6 = $j;
  $7 = $3;
  $8 = ($6 | 0) < ($7 | 0);
  if (!$8) {
   break;
  }
  $i = 0;
  while (1) {
   $9 = $i;
   $10 = $2;
   $11 = ($9 | 0) < ($10 | 0);
   if (!$11) {
    break;
   }
   $12 = $i;
   $13 = $0;
   $14 = $13 + $12 | 0;
   $15 = SAFE_HEAP_LOAD($14 >> 0 | 0, 1, 0) | 0 | 0;
   $16 = $15 & 255;
   $17 = $16 << 8;
   $18 = $i;
   $19 = $4;
   $20 = $19 + ($18 << 2) | 0;
   SAFE_HEAP_STORE($20 | 0, $17 | 0, 4);
   $21 = $i;
   $22 = $21 + 1 | 0;
   $i = $22;
  }
  $23 = $1;
  $24 = $0;
  $25 = $24 + $23 | 0;
  $0 = $25;
  $26 = $5;
  $27 = $4;
  $28 = $27 + ($26 << 2) | 0;
  $4 = $28;
  $29 = $j;
  $30 = $29 + 1 | 0;
  $j = $30;
 }
 STACKTOP = sp;
 return;
}

function _VP8LConvertBGRAToRGB565_C($src, $num_pixels, $dst) {
 $src = $src | 0;
 $num_pixels = $num_pixels | 0;
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argb = 0, $gb = 0, $rg = 0, $src_end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $src;
 $1 = $num_pixels;
 $2 = $dst;
 $3 = $0;
 $4 = $1;
 $5 = $3 + ($4 << 2) | 0;
 $src_end = $5;
 while (1) {
  $6 = $0;
  $7 = $src_end;
  $8 = $6 >>> 0 < $7 >>> 0;
  if (!$8) {
   break;
  }
  $9 = $0;
  $10 = $9 + 4 | 0;
  $0 = $10;
  $11 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
  $argb = $11;
  $12 = $argb;
  $13 = $12 >>> 16;
  $14 = $13 & 248;
  $15 = $argb;
  $16 = $15 >>> 13;
  $17 = $16 & 7;
  $18 = $14 | $17;
  $19 = $18 & 255;
  $rg = $19;
  $20 = $argb;
  $21 = $20 >>> 5;
  $22 = $21 & 224;
  $23 = $argb;
  $24 = $23 >>> 3;
  $25 = $24 & 31;
  $26 = $22 | $25;
  $27 = $26 & 255;
  $gb = $27;
  $28 = $rg;
  $29 = $2;
  $30 = $29 + 1 | 0;
  $2 = $30;
  SAFE_HEAP_STORE($29 >> 0 | 0, $28 | 0, 1);
  $31 = $gb;
  $32 = $2;
  $33 = $32 + 1 | 0;
  $2 = $33;
  SAFE_HEAP_STORE($32 >> 0 | 0, $31 | 0, 1);
 }
 STACKTOP = sp;
 return;
}

function _Select($a, $b, $c) {
 $a = $a | 0;
 $b = $b | 0;
 $c = $c | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $33 = 0, $34 = 0, $35 = 0, $36 = 0, $37 = 0, $38 = 0, $39 = 0, $4 = 0, $40 = 0, $41 = 0, $42 = 0, $43 = 0, $44 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pa_minus_pb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $c;
 $3 = $0;
 $4 = $3 >>> 24;
 $5 = $1;
 $6 = $5 >>> 24;
 $7 = $2;
 $8 = $7 >>> 24;
 $9 = _Sub3($4, $6, $8) | 0;
 $10 = $0;
 $11 = $10 >>> 16;
 $12 = $11 & 255;
 $13 = $1;
 $14 = $13 >>> 16;
 $15 = $14 & 255;
 $16 = $2;
 $17 = $16 >>> 16;
 $18 = $17 & 255;
 $19 = _Sub3($12, $15, $18) | 0;
 $20 = $9 + $19 | 0;
 $21 = $0;
 $22 = $21 >>> 8;
 $23 = $22 & 255;
 $24 = $1;
 $25 = $24 >>> 8;
 $26 = $25 & 255;
 $27 = $2;
 $28 = $27 >>> 8;
 $29 = $28 & 255;
 $30 = _Sub3($23, $26, $29) | 0;
 $31 = $20 + $30 | 0;
 $32 = $0;
 $33 = $32 & 255;
 $34 = $1;
 $35 = $34 & 255;
 $36 = $2;
 $37 = $36 & 255;
 $38 = _Sub3($33, $35, $37) | 0;
 $39 = $31 + $38 | 0;
 $pa_minus_pb = $39;
 $40 = $pa_minus_pb;
 $41 = ($40 | 0) <= 0;
 $42 = $0;
 $43 = $1;
 $44 = $41 ? $42 : $43;
 STACKTOP = sp;
 return $44 | 0;
}

function _FilterLoop26($p, $hstride, $vstride, $size, $thresh, $ithresh, $hev_thresh) {
 $p = $p | 0;
 $hstride = $hstride | 0;
 $vstride = $vstride | 0;
 $size = $size | 0;
 $thresh = $thresh | 0;
 $ithresh = $ithresh | 0;
 $hev_thresh = $hev_thresh | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thresh2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $p;
 $1 = $hstride;
 $2 = $vstride;
 $3 = $size;
 $4 = $thresh;
 $5 = $ithresh;
 $6 = $hev_thresh;
 $7 = $4;
 $8 = $7 << 1;
 $9 = $8 + 1 | 0;
 $thresh2 = $9;
 while (1) {
  $10 = $3;
  $11 = $10 + -1 | 0;
  $3 = $11;
  $12 = ($10 | 0) > 0;
  if (!$12) {
   break;
  }
  $13 = $0;
  $14 = $1;
  $15 = $thresh2;
  $16 = $5;
  $17 = _needs_filter2($13, $14, $15, $16) | 0;
  $18 = ($17 | 0) != 0;
  do {
   if ($18) {
    $19 = $0;
    $20 = $1;
    $21 = $6;
    $22 = _hev($19, $20, $21) | 0;
    $23 = ($22 | 0) != 0;
    $24 = $0;
    $25 = $1;
    if ($23) {
     _do_filter2($24, $25);
     break;
    } else {
     _do_filter6($24, $25);
     break;
    }
   }
  } while (0);
  $26 = $2;
  $27 = $0;
  $28 = $27 + $26 | 0;
  $0 = $28;
 }
 STACKTOP = sp;
 return;
}

function _FilterLoop24($p, $hstride, $vstride, $size, $thresh, $ithresh, $hev_thresh) {
 $p = $p | 0;
 $hstride = $hstride | 0;
 $vstride = $vstride | 0;
 $size = $size | 0;
 $thresh = $thresh | 0;
 $ithresh = $ithresh | 0;
 $hev_thresh = $hev_thresh | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $thresh2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $p;
 $1 = $hstride;
 $2 = $vstride;
 $3 = $size;
 $4 = $thresh;
 $5 = $ithresh;
 $6 = $hev_thresh;
 $7 = $4;
 $8 = $7 << 1;
 $9 = $8 + 1 | 0;
 $thresh2 = $9;
 while (1) {
  $10 = $3;
  $11 = $10 + -1 | 0;
  $3 = $11;
  $12 = ($10 | 0) > 0;
  if (!$12) {
   break;
  }
  $13 = $0;
  $14 = $1;
  $15 = $thresh2;
  $16 = $5;
  $17 = _needs_filter2($13, $14, $15, $16) | 0;
  $18 = ($17 | 0) != 0;
  do {
   if ($18) {
    $19 = $0;
    $20 = $1;
    $21 = $6;
    $22 = _hev($19, $20, $21) | 0;
    $23 = ($22 | 0) != 0;
    $24 = $0;
    $25 = $1;
    if ($23) {
     _do_filter2($24, $25);
     break;
    } else {
     _do_filter4($24, $25);
     break;
    }
   }
  } while (0);
  $26 = $2;
  $27 = $0;
  $28 = $27 + $26 | 0;
  $0 = $28;
 }
 STACKTOP = sp;
 return;
}

function _ReadImageInfo($br, $width, $height, $has_alpha) {
 $br = $br | 0;
 $width = $width | 0;
 $height = $height | 0;
 $has_alpha = $has_alpha | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $br;
 $2 = $width;
 $3 = $height;
 $4 = $has_alpha;
 $5 = $1;
 $6 = _VP8LReadBits($5, 8) | 0;
 $7 = ($6 | 0) != 47;
 if ($7) {
  $0 = 0;
  $28 = $0;
  STACKTOP = sp;
  return $28 | 0;
 }
 $8 = $1;
 $9 = _VP8LReadBits($8, 14) | 0;
 $10 = $9 + 1 | 0;
 $11 = $2;
 SAFE_HEAP_STORE($11 | 0, $10 | 0, 4);
 $12 = $1;
 $13 = _VP8LReadBits($12, 14) | 0;
 $14 = $13 + 1 | 0;
 $15 = $3;
 SAFE_HEAP_STORE($15 | 0, $14 | 0, 4);
 $16 = $1;
 $17 = _VP8LReadBits($16, 1) | 0;
 $18 = $4;
 SAFE_HEAP_STORE($18 | 0, $17 | 0, 4);
 $19 = $1;
 $20 = _VP8LReadBits($19, 3) | 0;
 $21 = ($20 | 0) != 0;
 if ($21) {
  $0 = 0;
  $28 = $0;
  STACKTOP = sp;
  return $28 | 0;
 } else {
  $22 = $1;
  $23 = $22 + 24 | 0;
  $24 = SAFE_HEAP_LOAD($23 | 0, 4, 0) | 0 | 0;
  $25 = ($24 | 0) != 0;
  $26 = $25 ^ 1;
  $27 = $26 & 1;
  $0 = $27;
  $28 = $0;
  STACKTOP = sp;
  return $28 | 0;
 }
 return 0 | 0;
}

function _MapAlpha($src, $color_map, $dst, $y_start, $y_end, $width) {
 $src = $src | 0;
 $color_map = $color_map | 0;
 $dst = $dst | 0;
 $y_start = $y_start | 0;
 $y_end = $y_end | 0;
 $width = $width | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $src;
 $1 = $color_map;
 $2 = $dst;
 $3 = $y_start;
 $4 = $y_end;
 $5 = $width;
 $6 = $3;
 $y = $6;
 while (1) {
  $7 = $y;
  $8 = $4;
  $9 = ($7 | 0) < ($8 | 0);
  if (!$9) {
   break;
  }
  $x = 0;
  while (1) {
   $10 = $x;
   $11 = $5;
   $12 = ($10 | 0) < ($11 | 0);
   if (!$12) {
    break;
   }
   $13 = $0;
   $14 = $13 + 1 | 0;
   $0 = $14;
   $15 = SAFE_HEAP_LOAD($13 >> 0 | 0, 1, 0) | 0 | 0;
   $16 = _VP8GetAlphaIndex($15) | 0;
   $17 = $16 & 255;
   $18 = $1;
   $19 = $18 + ($17 << 2) | 0;
   $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
   $21 = _VP8GetAlphaValue($20) | 0;
   $22 = $2;
   $23 = $22 + 1 | 0;
   $2 = $23;
   SAFE_HEAP_STORE($22 >> 0 | 0, $21 | 0, 1);
   $24 = $x;
   $25 = $24 + 1 | 0;
   $x = $25;
  }
  $26 = $y;
  $27 = $26 + 1 | 0;
  $y = $27;
 }
 STACKTOP = sp;
 return;
}

function _VP8LReadBits($br, $n_bits) {
 $br = $br | 0;
 $n_bits = $n_bits | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $new_bits = 0, $or$cond = 0, $val = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $br;
 $2 = $n_bits;
 $3 = $2;
 $4 = ($3 | 0) >= 0;
 if (!$4) {
  ___assert_fail(14246 | 0, 14032 | 0, 212, 14258 | 0);
 }
 $5 = $1;
 $6 = $5 + 24 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = ($7 | 0) == 0;
 $9 = $2;
 $10 = ($9 | 0) <= 24;
 $or$cond = $8 & $10;
 $11 = $1;
 if ($or$cond) {
  $12 = _VP8LPrefetchBits937($11) | 0;
  $13 = $2;
  $14 = 956 + ($13 << 2) | 0;
  $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
  $16 = $12 & $15;
  $val = $16;
  $17 = $1;
  $18 = $17 + 20 | 0;
  $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
  $20 = $2;
  $21 = $19 + $20 | 0;
  $new_bits = $21;
  $22 = $new_bits;
  $23 = $1;
  $24 = $23 + 20 | 0;
  SAFE_HEAP_STORE($24 | 0, $22 | 0, 4);
  $25 = $1;
  _ShiftBytes($25);
  $26 = $val;
  $0 = $26;
  $27 = $0;
  STACKTOP = sp;
  return $27 | 0;
 } else {
  _VP8LSetEndOfStream($11);
  $0 = 0;
  $27 = $0;
  STACKTOP = sp;
  return $27 | 0;
 }
 return 0 | 0;
}

function ___fflush_unlocked($f) {
 $f = $f | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $f + 20 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $2 = $f + 28 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = $1 >>> 0 > $3 >>> 0;
 if ($4) {
  $5 = $f + 36 | 0;
  $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
  FUNCTION_TABLE_iiii[(SAFE_FT_MASK($6 | 0, 255 | 0) | 0) & 255]($f, 0, 0) | 0;
  $7 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
  $8 = ($7 | 0) == (0 | 0);
  if ($8) {
   $$0 = -1;
  } else {
   label = 3;
  }
 } else {
  label = 3;
 }
 if ((label | 0) == 3) {
  $9 = $f + 4 | 0;
  $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
  $11 = $f + 8 | 0;
  $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
  $13 = $10 >>> 0 < $12 >>> 0;
  if ($13) {
   $14 = $f + 40 | 0;
   $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
   $16 = $10;
   $17 = $12;
   $18 = $16 - $17 | 0;
   FUNCTION_TABLE_iiii[(SAFE_FT_MASK($15 | 0, 255 | 0) | 0) & 255]($f, $18, 1) | 0;
  }
  $19 = $f + 16 | 0;
  SAFE_HEAP_STORE($19 | 0, 0 | 0, 4);
  SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
  SAFE_HEAP_STORE($0 | 0, 0 | 0, 4);
  SAFE_HEAP_STORE($11 | 0, 0 | 0, 4);
  SAFE_HEAP_STORE($9 | 0, 0 | 0, 4);
  $$0 = 0;
 }
 return $$0 | 0;
}

function _InitIo($dec, $io) {
 $dec = $dec | 0;
 $io = $io | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $io;
 $2 = $1;
 $3 = $2 + 8 | 0;
 SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
 $4 = $0;
 $5 = $4 + 2268 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = $1;
 $8 = $7 + 20 | 0;
 SAFE_HEAP_STORE($8 | 0, $6 | 0, 4);
 $9 = $0;
 $10 = $9 + 2272 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = $1;
 $13 = $12 + 24 | 0;
 SAFE_HEAP_STORE($13 | 0, $11 | 0, 4);
 $14 = $0;
 $15 = $14 + 2276 | 0;
 $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
 $17 = $1;
 $18 = $17 + 28 | 0;
 SAFE_HEAP_STORE($18 | 0, $16 | 0, 4);
 $19 = $0;
 $20 = $19 + 2280 | 0;
 $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
 $22 = $1;
 $23 = $22 + 32 | 0;
 SAFE_HEAP_STORE($23 | 0, $21 | 0, 4);
 $24 = $0;
 $25 = $24 + 2284 | 0;
 $26 = SAFE_HEAP_LOAD($25 | 0, 4, 0) | 0 | 0;
 $27 = $1;
 $28 = $27 + 36 | 0;
 SAFE_HEAP_STORE($28 | 0, $26 | 0, 4);
 $29 = $1;
 $30 = $29 + 104 | 0;
 SAFE_HEAP_STORE($30 | 0, 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function _MapARGB($src, $color_map, $dst, $y_start, $y_end, $width) {
 $src = $src | 0;
 $color_map = $color_map | 0;
 $dst = $dst | 0;
 $y_start = $y_start | 0;
 $y_end = $y_end | 0;
 $width = $width | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $x = 0, $y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $src;
 $1 = $color_map;
 $2 = $dst;
 $3 = $y_start;
 $4 = $y_end;
 $5 = $width;
 $6 = $3;
 $y = $6;
 while (1) {
  $7 = $y;
  $8 = $4;
  $9 = ($7 | 0) < ($8 | 0);
  if (!$9) {
   break;
  }
  $x = 0;
  while (1) {
   $10 = $x;
   $11 = $5;
   $12 = ($10 | 0) < ($11 | 0);
   if (!$12) {
    break;
   }
   $13 = $0;
   $14 = $13 + 4 | 0;
   $0 = $14;
   $15 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
   $16 = _VP8GetARGBIndex($15) | 0;
   $17 = $1;
   $18 = $17 + ($16 << 2) | 0;
   $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
   $20 = _VP8GetARGBValue($19) | 0;
   $21 = $2;
   $22 = $21 + 4 | 0;
   $2 = $22;
   SAFE_HEAP_STORE($21 | 0, $20 | 0, 4);
   $23 = $x;
   $24 = $23 + 1 | 0;
   $x = $24;
  }
  $25 = $y;
  $26 = $25 + 1 | 0;
  $y = $26;
 }
 STACKTOP = sp;
 return;
}

function _VP8LConvertBGRAToRGB_C($src, $num_pixels, $dst) {
 $src = $src | 0;
 $num_pixels = $num_pixels | 0;
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argb = 0, $src_end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $src;
 $1 = $num_pixels;
 $2 = $dst;
 $3 = $0;
 $4 = $1;
 $5 = $3 + ($4 << 2) | 0;
 $src_end = $5;
 while (1) {
  $6 = $0;
  $7 = $src_end;
  $8 = $6 >>> 0 < $7 >>> 0;
  if (!$8) {
   break;
  }
  $9 = $0;
  $10 = $9 + 4 | 0;
  $0 = $10;
  $11 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
  $argb = $11;
  $12 = $argb;
  $13 = $12 >>> 16;
  $14 = $13 & 255;
  $15 = $14 & 255;
  $16 = $2;
  $17 = $16 + 1 | 0;
  $2 = $17;
  SAFE_HEAP_STORE($16 >> 0 | 0, $15 | 0, 1);
  $18 = $argb;
  $19 = $18 >>> 8;
  $20 = $19 & 255;
  $21 = $20 & 255;
  $22 = $2;
  $23 = $22 + 1 | 0;
  $2 = $23;
  SAFE_HEAP_STORE($22 >> 0 | 0, $21 | 0, 1);
  $24 = $argb;
  $25 = $24 >>> 0;
  $26 = $25 & 255;
  $27 = $26 & 255;
  $28 = $2;
  $29 = $28 + 1 | 0;
  $2 = $29;
  SAFE_HEAP_STORE($28 >> 0 | 0, $27 | 0, 1);
 }
 STACKTOP = sp;
 return;
}

function _VP8LConvertBGRAToBGR_C($src, $num_pixels, $dst) {
 $src = $src | 0;
 $num_pixels = $num_pixels | 0;
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argb = 0, $src_end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $src;
 $1 = $num_pixels;
 $2 = $dst;
 $3 = $0;
 $4 = $1;
 $5 = $3 + ($4 << 2) | 0;
 $src_end = $5;
 while (1) {
  $6 = $0;
  $7 = $src_end;
  $8 = $6 >>> 0 < $7 >>> 0;
  if (!$8) {
   break;
  }
  $9 = $0;
  $10 = $9 + 4 | 0;
  $0 = $10;
  $11 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
  $argb = $11;
  $12 = $argb;
  $13 = $12 >>> 0;
  $14 = $13 & 255;
  $15 = $14 & 255;
  $16 = $2;
  $17 = $16 + 1 | 0;
  $2 = $17;
  SAFE_HEAP_STORE($16 >> 0 | 0, $15 | 0, 1);
  $18 = $argb;
  $19 = $18 >>> 8;
  $20 = $19 & 255;
  $21 = $20 & 255;
  $22 = $2;
  $23 = $22 + 1 | 0;
  $2 = $23;
  SAFE_HEAP_STORE($22 >> 0 | 0, $21 | 0, 1);
  $24 = $argb;
  $25 = $24 >>> 16;
  $26 = $25 & 255;
  $27 = $26 & 255;
  $28 = $2;
  $29 = $28 + 1 | 0;
  $2 = $29;
  SAFE_HEAP_STORE($28 >> 0 | 0, $27 | 0, 1);
 }
 STACKTOP = sp;
 return;
}

function _VP8LAddGreenToBlueAndRed_C($data, $num_pixels) {
 $data = $data | 0;
 $num_pixels = $num_pixels | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argb = 0, $green = 0, $i = 0, $red_blue = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $data;
 $1 = $num_pixels;
 $i = 0;
 while (1) {
  $2 = $i;
  $3 = $1;
  $4 = ($2 | 0) < ($3 | 0);
  if (!$4) {
   break;
  }
  $5 = $i;
  $6 = $0;
  $7 = $6 + ($5 << 2) | 0;
  $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
  $argb = $8;
  $9 = $argb;
  $10 = $9 >>> 8;
  $11 = $10 & 255;
  $green = $11;
  $12 = $argb;
  $13 = $12 & 16711935;
  $red_blue = $13;
  $14 = $green;
  $15 = $14 << 16;
  $16 = $green;
  $17 = $15 | $16;
  $18 = $red_blue;
  $19 = $18 + $17 | 0;
  $red_blue = $19;
  $20 = $red_blue;
  $21 = $20 & 16711935;
  $red_blue = $21;
  $22 = $argb;
  $23 = $22 & -16711936;
  $24 = $red_blue;
  $25 = $23 | $24;
  $26 = $i;
  $27 = $0;
  $28 = $27 + ($26 << 2) | 0;
  SAFE_HEAP_STORE($28 | 0, $25 | 0, 4);
  $29 = $i;
  $30 = $29 + 1 | 0;
  $i = $30;
 }
 STACKTOP = sp;
 return;
}

function _TransformDC($in, $dst) {
 $in = $in | 0;
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $DC = 0, $i = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $in;
 $1 = $dst;
 $2 = $0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 2, 0) | 0 | 0;
 $4 = $3 << 16 >> 16;
 $5 = $4 + 4 | 0;
 $DC = $5;
 $j = 0;
 while (1) {
  $6 = $j;
  $7 = ($6 | 0) < 4;
  if (!$7) {
   break;
  }
  $i = 0;
  while (1) {
   $8 = $i;
   $9 = ($8 | 0) < 4;
   if (!$9) {
    break;
   }
   $10 = $i;
   $11 = $j;
   $12 = $11 << 5;
   $13 = $10 + $12 | 0;
   $14 = $1;
   $15 = $14 + $13 | 0;
   $16 = SAFE_HEAP_LOAD($15 >> 0 | 0, 1, 0) | 0 | 0;
   $17 = $16 & 255;
   $18 = $DC;
   $19 = $18 >> 3;
   $20 = $17 + $19 | 0;
   $21 = _clip_8b($20) | 0;
   $22 = $i;
   $23 = $j;
   $24 = $23 << 5;
   $25 = $22 + $24 | 0;
   $26 = $1;
   $27 = $26 + $25 | 0;
   SAFE_HEAP_STORE($27 >> 0 | 0, $21 | 0, 1);
   $28 = $i;
   $29 = $28 + 1 | 0;
   $i = $29;
  }
  $30 = $j;
  $31 = $30 + 1 | 0;
  $j = $31;
 }
 STACKTOP = sp;
 return;
}

function _VP8LColorCacheInit($cc, $hash_bits) {
 $cc = $cc | 0;
 $hash_bits = $hash_bits | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hash_size = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $cc;
 $2 = $hash_bits;
 $3 = $2;
 $4 = 1 << $3;
 $hash_size = $4;
 $5 = $1;
 $6 = ($5 | 0) != (0 | 0);
 if (!$6) {
  ___assert_fail(14396 | 0, 14407 | 0, 25, 14438 | 0);
 }
 $7 = $2;
 $8 = ($7 | 0) > 0;
 if (!$8) {
  ___assert_fail(14457 | 0, 14407 | 0, 26, 14438 | 0);
 }
 $9 = $hash_size;
 $10 = ($9 | 0) < 0;
 $11 = $10 << 31 >> 31;
 $12 = _WebPSafeCalloc($9, $11, 4) | 0;
 $13 = $1;
 SAFE_HEAP_STORE($13 | 0, $12 | 0, 4);
 $14 = $1;
 $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
 $16 = ($15 | 0) == (0 | 0);
 if ($16) {
  $0 = 0;
  $24 = $0;
  STACKTOP = sp;
  return $24 | 0;
 } else {
  $17 = $2;
  $18 = 32 - $17 | 0;
  $19 = $1;
  $20 = $19 + 4 | 0;
  SAFE_HEAP_STORE($20 | 0, $18 | 0, 4);
  $21 = $2;
  $22 = $1;
  $23 = $22 + 8 | 0;
  SAFE_HEAP_STORE($23 | 0, $21 | 0, 4);
  $0 = 1;
  $24 = $0;
  STACKTOP = sp;
  return $24 | 0;
 }
 return 0 | 0;
}

function _UpdateDecoder($dec, $width, $height) {
 $dec = $dec | 0;
 $width = $width | 0;
 $height = $height | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $hdr = 0, $num_bits = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $width;
 $2 = $height;
 $3 = $0;
 $4 = $3 + 120 | 0;
 $hdr = $4;
 $5 = $hdr;
 $6 = $5 + 32 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $num_bits = $7;
 $8 = $1;
 $9 = $0;
 $10 = $9 + 100 | 0;
 SAFE_HEAP_STORE($10 | 0, $8 | 0, 4);
 $11 = $2;
 $12 = $0;
 $13 = $12 + 104 | 0;
 SAFE_HEAP_STORE($13 | 0, $11 | 0, 4);
 $14 = $1;
 $15 = $num_bits;
 $16 = _VP8LSubSampleSize($14, $15) | 0;
 $17 = $hdr;
 $18 = $17 + 36 | 0;
 SAFE_HEAP_STORE($18 | 0, $16 | 0, 4);
 $19 = $num_bits;
 $20 = ($19 | 0) == 0;
 if ($20) {
  $26 = -1;
  $24 = $hdr;
  $25 = $24 + 28 | 0;
  SAFE_HEAP_STORE($25 | 0, $26 | 0, 4);
  STACKTOP = sp;
  return;
 }
 $21 = $num_bits;
 $22 = 1 << $21;
 $23 = $22 - 1 | 0;
 $26 = $23;
 $24 = $hdr;
 $25 = $24 + 28 | 0;
 SAFE_HEAP_STORE($25 | 0, $26 | 0, 4);
 STACKTOP = sp;
 return;
}

function _DC4($dst) {
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $32 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dc = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dst;
 $dc = 4;
 $i = 0;
 while (1) {
  $1 = $i;
  $2 = ($1 | 0) < 4;
  if (!$2) {
   break;
  }
  $3 = $i;
  $4 = $3 - 32 | 0;
  $5 = $0;
  $6 = $5 + $4 | 0;
  $7 = SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0;
  $8 = $7 & 255;
  $9 = $i;
  $10 = $9 << 5;
  $11 = -1 + $10 | 0;
  $12 = $0;
  $13 = $12 + $11 | 0;
  $14 = SAFE_HEAP_LOAD($13 >> 0 | 0, 1, 0) | 0 | 0;
  $15 = $14 & 255;
  $16 = $8 + $15 | 0;
  $17 = $dc;
  $18 = $17 + $16 | 0;
  $dc = $18;
  $19 = $i;
  $20 = $19 + 1 | 0;
  $i = $20;
 }
 $21 = $dc;
 $22 = $21 >>> 3;
 $dc = $22;
 $i = 0;
 while (1) {
  $23 = $i;
  $24 = ($23 | 0) < 4;
  if (!$24) {
   break;
  }
  $25 = $0;
  $26 = $i;
  $27 = $26 << 5;
  $28 = $25 + $27 | 0;
  $29 = $dc;
  $30 = $29 & 255;
  _memset($28 | 0, $30 | 0, 4) | 0;
  $31 = $i;
  $32 = $31 + 1 | 0;
  $i = $32;
 }
 STACKTOP = sp;
 return;
}

function _VP8LDspInit() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD(740 | 0, 4, 0) | 0 | 0;
 $1 = SAFE_HEAP_LOAD(412 | 0, 4, 0) | 0 | 0;
 $2 = ($0 | 0) == ($1 | 0);
 if ($2) {
  return;
 }
 SAFE_HEAP_STORE(668 | 0, 83 | 0, 4);
 SAFE_HEAP_STORE(672 | 0, 84 | 0, 4);
 SAFE_HEAP_STORE(676 | 0, 85 | 0, 4);
 SAFE_HEAP_STORE(680 | 0, 86 | 0, 4);
 SAFE_HEAP_STORE(684 | 0, 87 | 0, 4);
 SAFE_HEAP_STORE(688 | 0, 88 | 0, 4);
 SAFE_HEAP_STORE(692 | 0, 89 | 0, 4);
 SAFE_HEAP_STORE(696 | 0, 90 | 0, 4);
 SAFE_HEAP_STORE(700 | 0, 91 | 0, 4);
 SAFE_HEAP_STORE(704 | 0, 92 | 0, 4);
 SAFE_HEAP_STORE(708 | 0, 93 | 0, 4);
 SAFE_HEAP_STORE(712 | 0, 94 | 0, 4);
 SAFE_HEAP_STORE(716 | 0, 95 | 0, 4);
 SAFE_HEAP_STORE(720 | 0, 96 | 0, 4);
 SAFE_HEAP_STORE(724 | 0, 83 | 0, 4);
 SAFE_HEAP_STORE(728 | 0, 83 | 0, 4);
 SAFE_HEAP_STORE(644 | 0, 97 | 0, 4);
 SAFE_HEAP_STORE(732 | 0, 98 | 0, 4);
 SAFE_HEAP_STORE(648 | 0, 99 | 0, 4);
 SAFE_HEAP_STORE(652 | 0, 100 | 0, 4);
 SAFE_HEAP_STORE(660 | 0, 101 | 0, 4);
 SAFE_HEAP_STORE(664 | 0, 102 | 0, 4);
 SAFE_HEAP_STORE(656 | 0, 103 | 0, 4);
 SAFE_HEAP_STORE(736 | 0, 104 | 0, 4);
 SAFE_HEAP_STORE(640 | 0, 105 | 0, 4);
 $3 = SAFE_HEAP_LOAD(412 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE(740 | 0, $3 | 0, 4);
 return;
}

function _CopyOrSwap($src, $num_pixels, $dst, $swap_on_big_endian) {
 $src = $src | 0;
 $num_pixels = $num_pixels | 0;
 $dst = $dst | 0;
 $swap_on_big_endian = $swap_on_big_endian | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $argb = 0, $src_end = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $src;
 $1 = $num_pixels;
 $2 = $dst;
 $3 = $swap_on_big_endian;
 $4 = _is_big_endian() | 0;
 $5 = $3;
 $6 = ($4 | 0) == ($5 | 0);
 if (!$6) {
  $21 = $2;
  $22 = $0;
  $23 = $1;
  $24 = $23 << 2;
  _memcpy($21 | 0, $22 | 0, $24 | 0) | 0;
  STACKTOP = sp;
  return;
 }
 $7 = $0;
 $8 = $1;
 $9 = $7 + ($8 << 2) | 0;
 $src_end = $9;
 while (1) {
  $10 = $0;
  $11 = $src_end;
  $12 = $10 >>> 0 < $11 >>> 0;
  if (!$12) {
   break;
  }
  $13 = $0;
  $14 = $13 + 4 | 0;
  $0 = $14;
  $15 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
  $argb = $15;
  $16 = $2;
  $17 = $argb;
  $18 = _BSwap32318($17) | 0;
  _WebPUint32ToMem317($16, $18);
  $19 = $2;
  $20 = $19 + 4 | 0;
  $2 = $20;
 }
 STACKTOP = sp;
 return;
}

function _VP8LIsEndOfStream934($br) {
 $br = $br | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $br;
 $1 = $0;
 $2 = $1 + 16 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = $0;
 $5 = $4 + 12 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = $3 >>> 0 <= $6 >>> 0;
 if (!$7) {
  ___assert_fail(14271 | 0, 14292 | 0, 152, 14325 | 0);
 }
 $8 = $0;
 $9 = $8 + 24 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $11 = ($10 | 0) != 0;
 if ($11) {
  $24 = 1;
  $23 = $24 & 1;
  STACKTOP = sp;
  return $23 | 0;
 }
 $12 = $0;
 $13 = $12 + 16 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $15 = $0;
 $16 = $15 + 12 | 0;
 $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
 $18 = ($14 | 0) == ($17 | 0);
 if (!$18) {
  $24 = 0;
  $23 = $24 & 1;
  STACKTOP = sp;
  return $23 | 0;
 }
 $19 = $0;
 $20 = $19 + 20 | 0;
 $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
 $22 = ($21 | 0) > 64;
 $24 = $22;
 $23 = $24 & 1;
 STACKTOP = sp;
 return $23 | 0;
}

function _VP8LIsEndOfStream($br) {
 $br = $br | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $br;
 $1 = $0;
 $2 = $1 + 16 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = $0;
 $5 = $4 + 12 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = $3 >>> 0 <= $6 >>> 0;
 if (!$7) {
  ___assert_fail(14271 | 0, 14292 | 0, 152, 14325 | 0);
 }
 $8 = $0;
 $9 = $8 + 24 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $11 = ($10 | 0) != 0;
 if ($11) {
  $24 = 1;
  $23 = $24 & 1;
  STACKTOP = sp;
  return $23 | 0;
 }
 $12 = $0;
 $13 = $12 + 16 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $15 = $0;
 $16 = $15 + 12 | 0;
 $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
 $18 = ($14 | 0) == ($17 | 0);
 if (!$18) {
  $24 = 0;
  $23 = $24 & 1;
  STACKTOP = sp;
  return $23 | 0;
 }
 $19 = $0;
 $20 = $19 + 20 | 0;
 $21 = SAFE_HEAP_LOAD($20 | 0, 4, 0) | 0 | 0;
 $22 = ($21 | 0) > 64;
 $24 = $22;
 $23 = $24 & 1;
 STACKTOP = sp;
 return $23 | 0;
}

function _ExtractPalettedAlphaRows($dec, $row) {
 $dec = $dec | 0;
 $row = $row | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $in = 0, $num_rows = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $row;
 $2 = $1;
 $3 = $0;
 $4 = $3 + 108 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = $2 - $5 | 0;
 $num_rows = $6;
 $7 = $0;
 $8 = $7 + 16 | 0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $10 = $0;
 $11 = $10 + 100 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = $0;
 $14 = $13 + 108 | 0;
 $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
 $16 = Math_imul($12, $15) | 0;
 $17 = $9 + $16 | 0;
 $in = $17;
 $18 = $num_rows;
 $19 = ($18 | 0) > 0;
 if ($19) {
  $20 = $0;
  $21 = $num_rows;
  $22 = $in;
  _ApplyInverseTransformsAlpha($20, $21, $22);
 }
 $23 = $1;
 $24 = $0;
 $25 = $24 + 116 | 0;
 SAFE_HEAP_STORE($25 | 0, $23 | 0, 4);
 $26 = $0;
 $27 = $26 + 108 | 0;
 SAFE_HEAP_STORE($27 | 0, $23 | 0, 4);
 STACKTOP = sp;
 return;
}

function _VE8uv($dst) {
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dst;
 $j = 0;
 while (1) {
  $1 = $j;
  $2 = ($1 | 0) < 8;
  if (!$2) {
   break;
  }
  $3 = $0;
  $4 = $j;
  $5 = $4 << 5;
  $6 = $3 + $5 | 0;
  $7 = $0;
  $8 = $7 + -32 | 0;
  {}
  SAFE_HEAP_STORE($6 >> 0 | 0, SAFE_HEAP_LOAD($8 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($6 + 1 >> 0 | 0, SAFE_HEAP_LOAD($8 + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($6 + 2 >> 0 | 0, SAFE_HEAP_LOAD($8 + 2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($6 + 3 >> 0 | 0, SAFE_HEAP_LOAD($8 + 3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($6 + 4 >> 0 | 0, SAFE_HEAP_LOAD($8 + 4 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($6 + 5 >> 0 | 0, SAFE_HEAP_LOAD($8 + 5 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($6 + 6 >> 0 | 0, SAFE_HEAP_LOAD($8 + 6 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($6 + 7 >> 0 | 0, SAFE_HEAP_LOAD($8 + 7 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
  $9 = $j;
  $10 = $9 + 1 | 0;
  $j = $10;
 }
 STACKTOP = sp;
 return;
}

function _PlaneCodeToDistance($xsize, $plane_code) {
 $xsize = $xsize | 0;
 $plane_code = $plane_code | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dist = 0, $dist_code = 0, $xoffset = 0, $yoffset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $xsize;
 $2 = $plane_code;
 $3 = $2;
 $4 = ($3 | 0) > 120;
 $5 = $2;
 if ($4) {
  $6 = $5 - 120 | 0;
  $0 = $6;
  $25 = $0;
  STACKTOP = sp;
  return $25 | 0;
 } else {
  $7 = $5 - 1 | 0;
  $8 = 7449 + $7 | 0;
  $9 = SAFE_HEAP_LOAD($8 >> 0 | 0, 1, 0) | 0 | 0;
  $10 = $9 & 255;
  $dist_code = $10;
  $11 = $dist_code;
  $12 = $11 >> 4;
  $yoffset = $12;
  $13 = $dist_code;
  $14 = $13 & 15;
  $15 = 8 - $14 | 0;
  $xoffset = $15;
  $16 = $yoffset;
  $17 = $1;
  $18 = Math_imul($16, $17) | 0;
  $19 = $xoffset;
  $20 = $18 + $19 | 0;
  $dist = $20;
  $21 = $dist;
  $22 = ($21 | 0) >= 1;
  $23 = $dist;
  $24 = $22 ? $23 : 1;
  $0 = $24;
  $25 = $0;
  STACKTOP = sp;
  return $25 | 0;
 }
 return 0 | 0;
}

function _VP8YuvToRgb565378($y, $u, $v, $rgb) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 $rgb = $rgb | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $g = 0, $gb = 0, $r = 0, $rg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $rgb;
 $4 = $0;
 $5 = $2;
 $6 = _VP8YUVToR368($4, $5) | 0;
 $r = $6;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = _VP8YUVToG371($7, $8, $9) | 0;
 $g = $10;
 $11 = $0;
 $12 = $1;
 $13 = _VP8YUVToB372($11, $12) | 0;
 $b = $13;
 $14 = $r;
 $15 = $14 & 248;
 $16 = $g;
 $17 = $16 >> 5;
 $18 = $15 | $17;
 $rg = $18;
 $19 = $g;
 $20 = $19 << 3;
 $21 = $20 & 224;
 $22 = $b;
 $23 = $22 >> 3;
 $24 = $21 | $23;
 $gb = $24;
 $25 = $rg;
 $26 = $25 & 255;
 $27 = $3;
 SAFE_HEAP_STORE($27 >> 0 | 0, $26 | 0, 1);
 $28 = $gb;
 $29 = $28 & 255;
 $30 = $3;
 $31 = $30 + 1 | 0;
 SAFE_HEAP_STORE($31 >> 0 | 0, $29 | 0, 1);
 STACKTOP = sp;
 return;
}

function _WebPYuv444ToRgba4444C($y, $u, $v, $dst, $len) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 $dst = $dst | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $dst;
 $4 = $len;
 $i = 0;
 while (1) {
  $5 = $i;
  $6 = $4;
  $7 = ($5 | 0) < ($6 | 0);
  if (!$7) {
   break;
  }
  $8 = $i;
  $9 = $0;
  $10 = $9 + $8 | 0;
  $11 = SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0 | 0;
  $12 = $11 & 255;
  $13 = $i;
  $14 = $1;
  $15 = $14 + $13 | 0;
  $16 = SAFE_HEAP_LOAD($15 >> 0 | 0, 1, 0) | 0 | 0;
  $17 = $16 & 255;
  $18 = $i;
  $19 = $2;
  $20 = $19 + $18 | 0;
  $21 = SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0;
  $22 = $21 & 255;
  $23 = $i;
  $24 = $23 << 1;
  $25 = $3;
  $26 = $25 + $24 | 0;
  _VP8YuvToRgba4444($12, $17, $22, $26);
  $27 = $i;
  $28 = $27 + 1 | 0;
  $i = $28;
 }
 STACKTOP = sp;
 return;
}

function _VP8YuvToRgb565($y, $u, $v, $rgb) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 $rgb = $rgb | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $29 = 0, $3 = 0, $30 = 0, $31 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $g = 0, $gb = 0, $r = 0, $rg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $rgb;
 $4 = $0;
 $5 = $2;
 $6 = _VP8YUVToR($4, $5) | 0;
 $r = $6;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = _VP8YUVToG($7, $8, $9) | 0;
 $g = $10;
 $11 = $0;
 $12 = $1;
 $13 = _VP8YUVToB($11, $12) | 0;
 $b = $13;
 $14 = $r;
 $15 = $14 & 248;
 $16 = $g;
 $17 = $16 >> 5;
 $18 = $15 | $17;
 $rg = $18;
 $19 = $g;
 $20 = $19 << 3;
 $21 = $20 & 224;
 $22 = $b;
 $23 = $22 >> 3;
 $24 = $21 | $23;
 $gb = $24;
 $25 = $rg;
 $26 = $25 & 255;
 $27 = $3;
 SAFE_HEAP_STORE($27 >> 0 | 0, $26 | 0, 1);
 $28 = $gb;
 $29 = $28 & 255;
 $30 = $3;
 $31 = $30 + 1 | 0;
 SAFE_HEAP_STORE($31 >> 0 | 0, $29 | 0, 1);
 STACKTOP = sp;
 return;
}

function _WebPYuv444ToRgb565C($y, $u, $v, $dst, $len) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 $dst = $dst | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $dst;
 $4 = $len;
 $i = 0;
 while (1) {
  $5 = $i;
  $6 = $4;
  $7 = ($5 | 0) < ($6 | 0);
  if (!$7) {
   break;
  }
  $8 = $i;
  $9 = $0;
  $10 = $9 + $8 | 0;
  $11 = SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0 | 0;
  $12 = $11 & 255;
  $13 = $i;
  $14 = $1;
  $15 = $14 + $13 | 0;
  $16 = SAFE_HEAP_LOAD($15 >> 0 | 0, 1, 0) | 0 | 0;
  $17 = $16 & 255;
  $18 = $i;
  $19 = $2;
  $20 = $19 + $18 | 0;
  $21 = SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0;
  $22 = $21 & 255;
  $23 = $i;
  $24 = $23 << 1;
  $25 = $3;
  $26 = $25 + $24 | 0;
  _VP8YuvToRgb565($12, $17, $22, $26);
  $27 = $i;
  $28 = $27 + 1 | 0;
  $i = $28;
 }
 STACKTOP = sp;
 return;
}

function _WebPYuv444ToRgbC($y, $u, $v, $dst, $len) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 $dst = $dst | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $dst;
 $4 = $len;
 $i = 0;
 while (1) {
  $5 = $i;
  $6 = $4;
  $7 = ($5 | 0) < ($6 | 0);
  if (!$7) {
   break;
  }
  $8 = $i;
  $9 = $0;
  $10 = $9 + $8 | 0;
  $11 = SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0 | 0;
  $12 = $11 & 255;
  $13 = $i;
  $14 = $1;
  $15 = $14 + $13 | 0;
  $16 = SAFE_HEAP_LOAD($15 >> 0 | 0, 1, 0) | 0 | 0;
  $17 = $16 & 255;
  $18 = $i;
  $19 = $2;
  $20 = $19 + $18 | 0;
  $21 = SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0;
  $22 = $21 & 255;
  $23 = $i;
  $24 = $23 * 3 | 0;
  $25 = $3;
  $26 = $25 + $24 | 0;
  _VP8YuvToRgb($12, $17, $22, $26);
  $27 = $i;
  $28 = $27 + 1 | 0;
  $i = $28;
 }
 STACKTOP = sp;
 return;
}

function _WebPYuv444ToBgrC($y, $u, $v, $dst, $len) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 $dst = $dst | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $dst;
 $4 = $len;
 $i = 0;
 while (1) {
  $5 = $i;
  $6 = $4;
  $7 = ($5 | 0) < ($6 | 0);
  if (!$7) {
   break;
  }
  $8 = $i;
  $9 = $0;
  $10 = $9 + $8 | 0;
  $11 = SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0 | 0;
  $12 = $11 & 255;
  $13 = $i;
  $14 = $1;
  $15 = $14 + $13 | 0;
  $16 = SAFE_HEAP_LOAD($15 >> 0 | 0, 1, 0) | 0 | 0;
  $17 = $16 & 255;
  $18 = $i;
  $19 = $2;
  $20 = $19 + $18 | 0;
  $21 = SAFE_HEAP_LOAD($20 >> 0 | 0, 1, 0) | 0 | 0;
  $22 = $21 & 255;
  $23 = $i;
  $24 = $23 * 3 | 0;
  $25 = $3;
  $26 = $25 + $24 | 0;
  _VP8YuvToBgr($12, $17, $22, $26);
  $27 = $i;
  $28 = $27 + 1 | 0;
  $i = $28;
 }
 STACKTOP = sp;
 return;
}

function _VP8LColorCacheCopy($src, $dst) {
 $src = $src | 0;
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $src;
 $1 = $dst;
 $2 = $0;
 $3 = ($2 | 0) != (0 | 0);
 if (!$3) {
  ___assert_fail(14471 | 0, 14407 | 0, 44, 14483 | 0);
 }
 $4 = $1;
 $5 = ($4 | 0) != (0 | 0);
 if (!$5) {
  ___assert_fail(14502 | 0, 14407 | 0, 45, 14483 | 0);
 }
 $6 = $0;
 $7 = $6 + 8 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $9 = $1;
 $10 = $9 + 8 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = ($8 | 0) == ($11 | 0);
 if ($12) {
  $13 = $1;
  $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
  $15 = $0;
  $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
  $17 = $1;
  $18 = $17 + 8 | 0;
  $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
  $20 = 1 << $19;
  $21 = $20 << 2;
  _memcpy($14 | 0, $16 | 0, $21 | 0) | 0;
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(14514 | 0, 14407 | 0, 46, 14483 | 0);
 }
}

function _GetHtreeGroupForPos($hdr, $x, $y) {
 $hdr = $hdr | 0;
 $x = $x | 0;
 $y = $y | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $meta_index = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $hdr;
 $1 = $x;
 $2 = $y;
 $3 = $0;
 $4 = $3 + 40 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = $0;
 $7 = $6 + 36 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $9 = $0;
 $10 = $9 + 32 | 0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = $1;
 $13 = $2;
 $14 = _GetMetaIndex($5, $8, $11, $12, $13) | 0;
 $meta_index = $14;
 $15 = $meta_index;
 $16 = $0;
 $17 = $16 + 44 | 0;
 $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
 $19 = ($15 | 0) < ($18 | 0);
 if ($19) {
  $20 = $0;
  $21 = $20 + 48 | 0;
  $22 = SAFE_HEAP_LOAD($21 | 0, 4, 0) | 0 | 0;
  $23 = $meta_index;
  $24 = $22 + ($23 * 548 | 0) | 0;
  STACKTOP = sp;
  return $24 | 0;
 } else {
  ___assert_fail(8057 | 0, 7124 | 0, 689, 8093 | 0);
 }
 return 0 | 0;
}

function _VP8InitBitReader($br, $start, $size) {
 $br = $br | 0;
 $start = $start | 0;
 $size = $size | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $br;
 $1 = $start;
 $2 = $size;
 $3 = $0;
 $4 = ($3 | 0) != (0 | 0);
 if (!$4) {
  ___assert_fail(14021 | 0, 14032 | 0, 35, 14062 | 0);
 }
 $5 = $1;
 $6 = ($5 | 0) != (0 | 0);
 if (!$6) {
  ___assert_fail(14079 | 0, 14032 | 0, 36, 14062 | 0);
 }
 $7 = $2;
 $8 = $7 >>> 0 < 2147483648;
 if ($8) {
  $9 = $0;
  $10 = $9 + 4 | 0;
  SAFE_HEAP_STORE($10 | 0, 254 | 0, 4);
  $11 = $0;
  SAFE_HEAP_STORE($11 | 0, 0 | 0, 4);
  $12 = $0;
  $13 = $12 + 8 | 0;
  SAFE_HEAP_STORE($13 | 0, -8 | 0, 4);
  $14 = $0;
  $15 = $14 + 24 | 0;
  SAFE_HEAP_STORE($15 | 0, 0 | 0, 4);
  $16 = $0;
  $17 = $1;
  $18 = $2;
  _VP8BitReaderSetBuffer($16, $17, $18);
  $19 = $0;
  _VP8LoadNewBytes927($19);
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(14093 | 0, 14032 | 0, 37, 14062 | 0);
 }
}

function _WebPMultRows($ptr, $stride, $alpha, $alpha_stride, $width, $num_rows, $inverse) {
 $ptr = $ptr | 0;
 $stride = $stride | 0;
 $alpha = $alpha | 0;
 $alpha_stride = $alpha_stride | 0;
 $width = $width | 0;
 $num_rows = $num_rows | 0;
 $inverse = $inverse | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $ptr;
 $1 = $stride;
 $2 = $alpha;
 $3 = $alpha_stride;
 $4 = $width;
 $5 = $num_rows;
 $6 = $inverse;
 $n = 0;
 while (1) {
  $7 = $n;
  $8 = $5;
  $9 = ($7 | 0) < ($8 | 0);
  if (!$9) {
   break;
  }
  $10 = SAFE_HEAP_LOAD(384 | 0, 4, 0) | 0 | 0;
  $11 = $0;
  $12 = $2;
  $13 = $4;
  $14 = $6;
  FUNCTION_TABLE_viiii[(SAFE_FT_MASK($10 | 0, 255 | 0) | 0) & 255]($11, $12, $13, $14);
  $15 = $1;
  $16 = $0;
  $17 = $16 + $15 | 0;
  $0 = $17;
  $18 = $3;
  $19 = $2;
  $20 = $19 + $18 | 0;
  $2 = $20;
  $21 = $n;
  $22 = $21 + 1 | 0;
  $n = $22;
 }
 STACKTOP = sp;
 return;
}

function ___stdio_seek($f, $off, $whence) {
 $f = $f | 0;
 $off = $off | 0;
 $whence = $whence | 0;
 var $$pre = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $ret = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, $vararg_ptr3 = 0, $vararg_ptr4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $ret = sp + 20 | 0;
 $0 = $f + 60 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($vararg_buffer | 0, $1 | 0, 4);
 $vararg_ptr1 = $vararg_buffer + 4 | 0;
 SAFE_HEAP_STORE($vararg_ptr1 | 0, 0 | 0, 4);
 $vararg_ptr2 = $vararg_buffer + 8 | 0;
 SAFE_HEAP_STORE($vararg_ptr2 | 0, $off | 0, 4);
 $vararg_ptr3 = $vararg_buffer + 12 | 0;
 SAFE_HEAP_STORE($vararg_ptr3 | 0, $ret | 0, 4);
 $vararg_ptr4 = $vararg_buffer + 16 | 0;
 SAFE_HEAP_STORE($vararg_ptr4 | 0, $whence | 0, 4);
 $2 = ___syscall140(140, $vararg_buffer | 0) | 0;
 $3 = ___syscall_ret($2) | 0;
 $4 = ($3 | 0) < 0;
 if ($4) {
  SAFE_HEAP_STORE($ret | 0, -1 | 0, 4);
  $5 = -1;
 } else {
  $$pre = SAFE_HEAP_LOAD($ret | 0, 4, 0) | 0 | 0;
  $5 = $$pre;
 }
 STACKTOP = sp;
 return $5 | 0;
}

function _EmitRows($colorspace, $row_in, $in_stride, $mb_w, $mb_h, $out, $out_stride) {
 $colorspace = $colorspace | 0;
 $row_in = $row_in | 0;
 $in_stride = $in_stride | 0;
 $mb_w = $mb_w | 0;
 $mb_h = $mb_h | 0;
 $out = $out | 0;
 $out_stride = $out_stride | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $lines = 0, $row_out = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $colorspace;
 $1 = $row_in;
 $2 = $in_stride;
 $3 = $mb_w;
 $4 = $mb_h;
 $5 = $out;
 $6 = $out_stride;
 $7 = $4;
 $lines = $7;
 $8 = $5;
 $row_out = $8;
 while (1) {
  $9 = $lines;
  $10 = $9 + -1 | 0;
  $lines = $10;
  $11 = ($9 | 0) > 0;
  if (!$11) {
   break;
  }
  $12 = $1;
  $13 = $3;
  $14 = $0;
  $15 = $row_out;
  _VP8LConvertFromBGRA($12, $13, $14, $15);
  $16 = $2;
  $17 = $1;
  $18 = $17 + $16 | 0;
  $1 = $18;
  $19 = $6;
  $20 = $row_out;
  $21 = $20 + $19 | 0;
  $row_out = $21;
 }
 $22 = $4;
 STACKTOP = sp;
 return $22 | 0;
}

function _WebPParseHeaders($headers) {
 $headers = $headers | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $has_animation = 0, $or$cond = 0, $or$cond3 = 0;
 var $status = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $has_animation = sp;
 $0 = $headers;
 SAFE_HEAP_STORE($has_animation | 0, 0 | 0, 4);
 $1 = $0;
 $2 = ($1 | 0) != (0 | 0);
 if (!$2) {
  ___assert_fail(8687 | 0, 8703 | 0, 420, 8725 | 0);
 }
 $3 = $0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = $0;
 $6 = $5 + 4 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = $0;
 $9 = _ParseHeadersInternal($4, $7, 0, 0, 0, $has_animation, 0, $8) | 0;
 $status = $9;
 $10 = $status;
 $11 = ($10 | 0) == 0;
 $12 = $status;
 $13 = ($12 | 0) == 7;
 $or$cond = $11 | $13;
 $14 = SAFE_HEAP_LOAD($has_animation | 0, 4, 0) | 0 | 0;
 $15 = ($14 | 0) != 0;
 $or$cond3 = $or$cond & $15;
 if (!$or$cond3) {
  $16 = $status;
  STACKTOP = sp;
  return $16 | 0;
 }
 $status = 4;
 $16 = $status;
 STACKTOP = sp;
 return $16 | 0;
}

function _AccumulateHCode($hcode, $shift, $huff) {
 $hcode = $hcode | 0;
 $shift = $shift | 0;
 $huff = $huff | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $shift;
 $1 = $huff;
 $2 = SAFE_HEAP_LOAD($hcode >> 0 | 0, 1, 0) | 0 | 0;
 $3 = $2 & 255;
 $4 = $1;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = $5 + $3 | 0;
 SAFE_HEAP_STORE($4 | 0, $6 | 0, 4);
 $7 = $hcode + 2 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 2, 0) | 0 | 0;
 $9 = $8 & 65535;
 $10 = $0;
 $11 = $9 << $10;
 $12 = $1;
 $13 = $12 + 4 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $15 = $14 | $11;
 SAFE_HEAP_STORE($13 | 0, $15 | 0, 4);
 $16 = $1;
 $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
 $18 = ($17 | 0) <= 8;
 if ($18) {
  $19 = SAFE_HEAP_LOAD($hcode >> 0 | 0, 1, 0) | 0 | 0;
  $20 = $19 & 255;
  STACKTOP = sp;
  return $20 | 0;
 } else {
  ___assert_fail(8113 | 0, 7124 | 0, 222, 8146 | 0);
 }
 return 0 | 0;
}

function _ConvertRGB24ToY($rgb, $y, $width) {
 $rgb = $rgb | 0;
 $y = $y | 0;
 $width = $width | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $rgb;
 $1 = $y;
 $2 = $width;
 $i = 0;
 while (1) {
  $3 = $i;
  $4 = $2;
  $5 = ($3 | 0) < ($4 | 0);
  if (!$5) {
   break;
  }
  $6 = $0;
  $7 = SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0;
  $8 = $7 & 255;
  $9 = $0;
  $10 = $9 + 1 | 0;
  $11 = SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0 | 0;
  $12 = $11 & 255;
  $13 = $0;
  $14 = $13 + 2 | 0;
  $15 = SAFE_HEAP_LOAD($14 >> 0 | 0, 1, 0) | 0 | 0;
  $16 = $15 & 255;
  $17 = _VP8RGBToY($8, $12, $16, 32768) | 0;
  $18 = $17 & 255;
  $19 = $i;
  $20 = $1;
  $21 = $20 + $19 | 0;
  SAFE_HEAP_STORE($21 >> 0 | 0, $18 | 0, 1);
  $22 = $i;
  $23 = $22 + 1 | 0;
  $i = $23;
  $24 = $0;
  $25 = $24 + 3 | 0;
  $0 = $25;
 }
 STACKTOP = sp;
 return;
}

function _ConvertBGR24ToY($bgr, $y, $width) {
 $bgr = $bgr | 0;
 $y = $y | 0;
 $width = $width | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $bgr;
 $1 = $y;
 $2 = $width;
 $i = 0;
 while (1) {
  $3 = $i;
  $4 = $2;
  $5 = ($3 | 0) < ($4 | 0);
  if (!$5) {
   break;
  }
  $6 = $0;
  $7 = $6 + 2 | 0;
  $8 = SAFE_HEAP_LOAD($7 >> 0 | 0, 1, 0) | 0 | 0;
  $9 = $8 & 255;
  $10 = $0;
  $11 = $10 + 1 | 0;
  $12 = SAFE_HEAP_LOAD($11 >> 0 | 0, 1, 0) | 0 | 0;
  $13 = $12 & 255;
  $14 = $0;
  $15 = SAFE_HEAP_LOAD($14 >> 0 | 0, 1, 0) | 0 | 0;
  $16 = $15 & 255;
  $17 = _VP8RGBToY($9, $13, $16, 32768) | 0;
  $18 = $17 & 255;
  $19 = $i;
  $20 = $1;
  $21 = $20 + $19 | 0;
  SAFE_HEAP_STORE($21 >> 0 | 0, $18 | 0, 1);
  $22 = $i;
  $23 = $22 + 1 | 0;
  $i = $23;
  $24 = $0;
  $25 = $24 + 3 | 0;
  $0 = $25;
 }
 STACKTOP = sp;
 return;
}

function _VP8YuvToRgba4444377($y, $u, $v, $argb) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 $argb = $argb | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $ba = 0, $g = 0, $r = 0, $rg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $argb;
 $4 = $0;
 $5 = $2;
 $6 = _VP8YUVToR368($4, $5) | 0;
 $r = $6;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = _VP8YUVToG371($7, $8, $9) | 0;
 $g = $10;
 $11 = $0;
 $12 = $1;
 $13 = _VP8YUVToB372($11, $12) | 0;
 $b = $13;
 $14 = $r;
 $15 = $14 & 240;
 $16 = $g;
 $17 = $16 >> 4;
 $18 = $15 | $17;
 $rg = $18;
 $19 = $b;
 $20 = $19 & 240;
 $21 = $20 | 15;
 $ba = $21;
 $22 = $rg;
 $23 = $22 & 255;
 $24 = $3;
 SAFE_HEAP_STORE($24 >> 0 | 0, $23 | 0, 1);
 $25 = $ba;
 $26 = $25 & 255;
 $27 = $3;
 $28 = $27 + 1 | 0;
 SAFE_HEAP_STORE($28 >> 0 | 0, $26 | 0, 1);
 STACKTOP = sp;
 return;
}

function _Rescale($src, $src_stride, $new_lines, $wrk) {
 $src = $src | 0;
 $src_stride = $src_stride | 0;
 $new_lines = $new_lines | 0;
 $wrk = $wrk | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $lines_in = 0, $num_lines_out = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $src;
 $1 = $src_stride;
 $2 = $new_lines;
 $3 = $wrk;
 $num_lines_out = 0;
 while (1) {
  $4 = $2;
  $5 = ($4 | 0) > 0;
  if (!$5) {
   break;
  }
  $6 = $3;
  $7 = $2;
  $8 = $0;
  $9 = $1;
  $10 = _WebPRescalerImport($6, $7, $8, $9) | 0;
  $lines_in = $10;
  $11 = $lines_in;
  $12 = $1;
  $13 = Math_imul($11, $12) | 0;
  $14 = $0;
  $15 = $14 + $13 | 0;
  $0 = $15;
  $16 = $lines_in;
  $17 = $2;
  $18 = $17 - $16 | 0;
  $2 = $18;
  $19 = $3;
  $20 = _WebPRescalerExport($19) | 0;
  $21 = $num_lines_out;
  $22 = $21 + $20 | 0;
  $num_lines_out = $22;
 }
 $23 = $num_lines_out;
 STACKTOP = sp;
 return $23 | 0;
}

function _VP8YuvToRgba4444($y, $u, $v, $argb) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 $argb = $argb | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $26 = 0;
 var $27 = 0, $28 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $b = 0, $ba = 0, $g = 0, $r = 0, $rg = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 48 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $argb;
 $4 = $0;
 $5 = $2;
 $6 = _VP8YUVToR($4, $5) | 0;
 $r = $6;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = _VP8YUVToG($7, $8, $9) | 0;
 $g = $10;
 $11 = $0;
 $12 = $1;
 $13 = _VP8YUVToB($11, $12) | 0;
 $b = $13;
 $14 = $r;
 $15 = $14 & 240;
 $16 = $g;
 $17 = $16 >> 4;
 $18 = $15 | $17;
 $rg = $18;
 $19 = $b;
 $20 = $19 & 240;
 $21 = $20 | 15;
 $ba = $21;
 $22 = $rg;
 $23 = $22 & 255;
 $24 = $3;
 SAFE_HEAP_STORE($24 >> 0 | 0, $23 | 0, 1);
 $25 = $ba;
 $26 = $25 & 255;
 $27 = $3;
 $28 = $27 + 1 | 0;
 SAFE_HEAP_STORE($28 >> 0 | 0, $26 | 0, 1);
 STACKTOP = sp;
 return;
}

function _VP8ExitCritical($dec, $io) {
 $dec = $dec | 0;
 $io = $io | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $ok = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $io;
 $ok = 1;
 $2 = $0;
 $3 = $2 + 148 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = ($4 | 0) > 0;
 if ($5) {
  $6 = _WebPGetWorkerInterface() | 0;
  $7 = $6 + 8 | 0;
  $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
  $9 = $0;
  $10 = $9 + 124 | 0;
  $11 = FUNCTION_TABLE_ii[(SAFE_FT_MASK($8 | 0, 15 | 0) | 0) & 15]($10) | 0;
  $ok = $11;
 }
 $12 = $1;
 $13 = $12 + 52 | 0;
 $14 = SAFE_HEAP_LOAD($13 | 0, 4, 0) | 0 | 0;
 $15 = ($14 | 0) != (0 | 0);
 if (!$15) {
  $20 = $ok;
  STACKTOP = sp;
  return $20 | 0;
 }
 $16 = $1;
 $17 = $16 + 52 | 0;
 $18 = SAFE_HEAP_LOAD($17 | 0, 4, 0) | 0 | 0;
 $19 = $1;
 FUNCTION_TABLE_vi[(SAFE_FT_MASK($18 | 0, 255 | 0) | 0) & 255]($19);
 $20 = $ok;
 STACKTOP = sp;
 return $20 | 0;
}

function _initializeWebPDecoding($buf, $length) {
 $buf = $buf | 0;
 $length = $length | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $featuresResult = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $buf;
 $2 = $length;
 $3 = $1;
 $4 = $2;
 $5 = _WebPGetFeatures($3, $4, 8) | 0;
 $featuresResult = $5;
 $6 = $featuresResult;
 $7 = ($6 | 0) != 0;
 if ($7) {
  $0 = 1;
  $12 = $0;
  STACKTOP = sp;
  return $12 | 0;
 }
 $8 = SAFE_HEAP_LOAD(16 | 0, 4, 0) | 0 | 0;
 $9 = ($8 | 0) != 0;
 if ($9) {
  SAFE_HEAP_STORE(2228 >> 0 | 0, 1 | 0, 1);
  SAFE_HEAP_STORE(2229 >> 0 | 0, 1 | 0, 1);
  SAFE_HEAP_STORE(48 | 0, 0 | 0, 4);
 } else {
  SAFE_HEAP_STORE(2228 >> 0 | 0, 0 | 0, 1);
  SAFE_HEAP_STORE(2229 >> 0 | 0, 0 | 0, 1);
  SAFE_HEAP_STORE(48 | 0, 1 | 0, 4);
 }
 $10 = SAFE_HEAP_LOAD(8 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE(52 | 0, $10 | 0, 4);
 $11 = SAFE_HEAP_LOAD(12 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE(56 | 0, $11 | 0, 4);
 $0 = 0;
 $12 = $0;
 STACKTOP = sp;
 return $12 | 0;
}

function _NextTableBitSize($count, $len, $root_bits) {
 $count = $count | 0;
 $len = $len | 0;
 $root_bits = $root_bits | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $left = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $count;
 $1 = $len;
 $2 = $root_bits;
 $3 = $1;
 $4 = $2;
 $5 = $3 - $4 | 0;
 $6 = 1 << $5;
 $left = $6;
 while (1) {
  $7 = $1;
  $8 = ($7 | 0) < 15;
  if (!$8) {
   label = 5;
   break;
  }
  $9 = $1;
  $10 = $0;
  $11 = $10 + ($9 << 2) | 0;
  $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
  $13 = $left;
  $14 = $13 - $12 | 0;
  $left = $14;
  $15 = $left;
  $16 = ($15 | 0) <= 0;
  if ($16) {
   label = 5;
   break;
  }
  $17 = $1;
  $18 = $17 + 1 | 0;
  $1 = $18;
  $19 = $left;
  $20 = $19 << 1;
  $left = $20;
 }
 if ((label | 0) == 5) {
  $21 = $1;
  $22 = $2;
  $23 = $21 - $22 | 0;
  STACKTOP = sp;
  return $23 | 0;
 }
 return 0 | 0;
}

function _WebPYuv444ToRgbaC($y, $u, $v, $dst, $len) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 $dst = $dst | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $dst;
 $4 = $len;
 $i = 0;
 while (1) {
  $5 = $i;
  $6 = $4;
  $7 = ($5 | 0) < ($6 | 0);
  if (!$7) {
   break;
  }
  $8 = $i;
  $9 = $0;
  $10 = $9 + $8 | 0;
  $11 = SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0 | 0;
  $12 = $i;
  $13 = $1;
  $14 = $13 + $12 | 0;
  $15 = SAFE_HEAP_LOAD($14 >> 0 | 0, 1, 0) | 0 | 0;
  $16 = $i;
  $17 = $2;
  $18 = $17 + $16 | 0;
  $19 = SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0 | 0;
  $20 = $i;
  $21 = $20 << 2;
  $22 = $3;
  $23 = $22 + $21 | 0;
  _VP8YuvToRgba($11, $15, $19, $23);
  $24 = $i;
  $25 = $24 + 1 | 0;
  $i = $25;
 }
 STACKTOP = sp;
 return;
}

function _WebPYuv444ToBgraC($y, $u, $v, $dst, $len) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 $dst = $dst | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $dst;
 $4 = $len;
 $i = 0;
 while (1) {
  $5 = $i;
  $6 = $4;
  $7 = ($5 | 0) < ($6 | 0);
  if (!$7) {
   break;
  }
  $8 = $i;
  $9 = $0;
  $10 = $9 + $8 | 0;
  $11 = SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0 | 0;
  $12 = $i;
  $13 = $1;
  $14 = $13 + $12 | 0;
  $15 = SAFE_HEAP_LOAD($14 >> 0 | 0, 1, 0) | 0 | 0;
  $16 = $i;
  $17 = $2;
  $18 = $17 + $16 | 0;
  $19 = SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0 | 0;
  $20 = $i;
  $21 = $20 << 2;
  $22 = $3;
  $23 = $22 + $21 | 0;
  _VP8YuvToBgra($11, $15, $19, $23);
  $24 = $i;
  $25 = $24 + 1 | 0;
  $i = $25;
 }
 STACKTOP = sp;
 return;
}

function _WebPYuv444ToArgbC($y, $u, $v, $dst, $len) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 $dst = $dst | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $dst;
 $4 = $len;
 $i = 0;
 while (1) {
  $5 = $i;
  $6 = $4;
  $7 = ($5 | 0) < ($6 | 0);
  if (!$7) {
   break;
  }
  $8 = $i;
  $9 = $0;
  $10 = $9 + $8 | 0;
  $11 = SAFE_HEAP_LOAD($10 >> 0 | 0, 1, 0) | 0 | 0;
  $12 = $i;
  $13 = $1;
  $14 = $13 + $12 | 0;
  $15 = SAFE_HEAP_LOAD($14 >> 0 | 0, 1, 0) | 0 | 0;
  $16 = $i;
  $17 = $2;
  $18 = $17 + $16 | 0;
  $19 = SAFE_HEAP_LOAD($18 >> 0 | 0, 1, 0) | 0 | 0;
  $20 = $i;
  $21 = $20 << 2;
  $22 = $3;
  $23 = $22 + $21 | 0;
  _VP8YuvToArgb($11, $15, $19, $23);
  $24 = $i;
  $25 = $24 + 1 | 0;
  $i = $25;
 }
 STACKTOP = sp;
 return;
}

function _Reset($worker) {
 $worker = $worker | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $ok = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $worker;
 $ok = 1;
 $1 = $0;
 $2 = $1 + 20 | 0;
 SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
 $3 = $0;
 $4 = $3 + 4 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = $5 >>> 0 < 1;
 $7 = $0;
 $8 = $7 + 4 | 0;
 if ($6) {
  SAFE_HEAP_STORE($8 | 0, 1 | 0, 4);
 } else {
  $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
  $10 = $9 >>> 0 > 1;
  if ($10) {
   $11 = $0;
   $12 = _Sync($11) | 0;
   $ok = $12;
  }
 }
 $13 = $ok;
 $14 = ($13 | 0) != 0;
 if (!$14) {
  $19 = $ok;
  STACKTOP = sp;
  return $19 | 0;
 }
 $15 = $0;
 $16 = $15 + 4 | 0;
 $17 = SAFE_HEAP_LOAD($16 | 0, 4, 0) | 0 | 0;
 $18 = ($17 | 0) == 1;
 if ($18) {
  $19 = $ok;
  STACKTOP = sp;
  return $19 | 0;
 } else {
  ___assert_fail(14970 | 0, 14887 | 0, 302, 15001 | 0);
 }
 return 0 | 0;
}

function _FilterRow($dec) {
 $dec = $dec | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $mb_x = 0, $mb_y = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $0;
 $2 = $1 + 160 | 0;
 $3 = $2 + 4 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $mb_y = $4;
 $5 = $0;
 $6 = $5 + 160 | 0;
 $7 = $6 + 8 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $9 = ($8 | 0) != 0;
 if (!$9) {
  ___assert_fail(2819 | 0, 2535 | 0, 256, 2848 | 0);
 }
 $10 = $0;
 $11 = $10 + 296 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $mb_x = $12;
 while (1) {
  $13 = $mb_x;
  $14 = $0;
  $15 = $14 + 304 | 0;
  $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
  $17 = ($13 | 0) < ($16 | 0);
  if (!$17) {
   break;
  }
  $18 = $0;
  $19 = $mb_x;
  $20 = $mb_y;
  _DoFilter($18, $19, $20);
  $21 = $mb_x;
  $22 = $21 + 1 | 0;
  $mb_x = $22;
 }
 STACKTOP = sp;
 return;
}

function _EmitRowsYUVA($dec, $in, $in_stride, $mb_w, $num_rows) {
 $dec = $dec | 0;
 $in = $in | 0;
 $in_stride = $in_stride | 0;
 $mb_w = $mb_w | 0;
 $num_rows = $num_rows | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $y_pos = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $in;
 $2 = $in_stride;
 $3 = $mb_w;
 $4 = $num_rows;
 $5 = $0;
 $6 = $5 + 116 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $y_pos = $7;
 while (1) {
  $8 = $4;
  $9 = $8 + -1 | 0;
  $4 = $9;
  $10 = ($8 | 0) > 0;
  if (!$10) {
   break;
  }
  $11 = $1;
  $12 = $3;
  $13 = $y_pos;
  $14 = $0;
  $15 = $14 + 12 | 0;
  $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
  _ConvertToYUVA($11, $12, $13, $16);
  $17 = $2;
  $18 = $1;
  $19 = $18 + $17 | 0;
  $1 = $19;
  $20 = $y_pos;
  $21 = $20 + 1 | 0;
  $y_pos = $21;
 }
 $22 = $y_pos;
 STACKTOP = sp;
 return $22 | 0;
}

function _ConvertARGBToY($argb, $y, $width) {
 $argb = $argb | 0;
 $y = $y | 0;
 $width = $width | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $25 = 0, $3 = 0;
 var $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $i = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $argb;
 $1 = $y;
 $2 = $width;
 $i = 0;
 while (1) {
  $3 = $i;
  $4 = $2;
  $5 = ($3 | 0) < ($4 | 0);
  if (!$5) {
   break;
  }
  $6 = $i;
  $7 = $0;
  $8 = $7 + ($6 << 2) | 0;
  $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
  $p = $9;
  $10 = $p;
  $11 = $10 >>> 16;
  $12 = $11 & 255;
  $13 = $p;
  $14 = $13 >>> 8;
  $15 = $14 & 255;
  $16 = $p;
  $17 = $16 >>> 0;
  $18 = $17 & 255;
  $19 = _VP8RGBToY($12, $15, $18, 32768) | 0;
  $20 = $19 & 255;
  $21 = $i;
  $22 = $1;
  $23 = $22 + $21 | 0;
  SAFE_HEAP_STORE($23 >> 0 | 0, $20 | 0, 1);
  $24 = $i;
  $25 = $24 + 1 | 0;
  $i = $25;
 }
 STACKTOP = sp;
 return;
}

function _WebPCopyDecBuffer($src, $dst) {
 $src = $src | 0;
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, dest = 0, label = 0, sp = 0;
 var src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $src;
 $1 = $dst;
 $2 = $0;
 $3 = ($2 | 0) != (0 | 0);
 $4 = $1;
 $5 = ($4 | 0) != (0 | 0);
 $or$cond = $3 & $5;
 if (!$or$cond) {
  STACKTOP = sp;
  return;
 }
 $6 = $1;
 $7 = $0;
 dest = $6;
 src = $7;
 stop = dest + 84 | 0;
 do {
  SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0 | 0 | 0, 4);
  dest = dest + 4 | 0;
  src = src + 4 | 0;
 } while ((dest | 0) < (stop | 0));
 $8 = $0;
 $9 = $8 + 80 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $11 = ($10 | 0) != (0 | 0);
 if (!$11) {
  STACKTOP = sp;
  return;
 }
 $12 = $1;
 $13 = $12 + 12 | 0;
 SAFE_HEAP_STORE($13 | 0, 1 | 0, 4);
 $14 = $1;
 $15 = $14 + 80 | 0;
 SAFE_HEAP_STORE($15 | 0, 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function _DoTransform($bits, $src, $dst) {
 $bits = $bits | 0;
 $src = $src | 0;
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $bits;
 $1 = $src;
 $2 = $dst;
 $3 = $0;
 $4 = $3 >>> 30;
 switch ($4 | 0) {
 case 3:
  {
   $5 = SAFE_HEAP_LOAD(420 | 0, 4, 0) | 0 | 0;
   $6 = $1;
   $7 = $2;
   FUNCTION_TABLE_viii[(SAFE_FT_MASK($5 | 0, 255 | 0) | 0) & 255]($6, $7, 0);
   STACKTOP = sp;
   return;
   break;
  }
 case 2:
  {
   $8 = SAFE_HEAP_LOAD(436 | 0, 4, 0) | 0 | 0;
   $9 = $1;
   $10 = $2;
   FUNCTION_TABLE_vii[(SAFE_FT_MASK($8 | 0, 127 | 0) | 0) & 127]($9, $10);
   STACKTOP = sp;
   return;
   break;
  }
 case 1:
  {
   $11 = SAFE_HEAP_LOAD(428 | 0, 4, 0) | 0 | 0;
   $12 = $1;
   $13 = $2;
   FUNCTION_TABLE_vii[(SAFE_FT_MASK($11 | 0, 127 | 0) | 0) & 127]($12, $13);
   STACKTOP = sp;
   return;
   break;
  }
 default:
  {
   STACKTOP = sp;
   return;
  }
 }
}

function _WebPGetInfo($data, $data_size, $width, $height) {
 $data = $data | 0;
 $data_size = $data_size | 0;
 $width = $width | 0;
 $height = $height | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $features = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 64 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $features = sp;
 $1 = $data;
 $2 = $data_size;
 $3 = $width;
 $4 = $height;
 $5 = $1;
 $6 = $2;
 $7 = _GetFeatures($5, $6, $features) | 0;
 $8 = ($7 | 0) != 0;
 if ($8) {
  $0 = 0;
  $18 = $0;
  STACKTOP = sp;
  return $18 | 0;
 }
 $9 = $3;
 $10 = ($9 | 0) != (0 | 0);
 if ($10) {
  $11 = SAFE_HEAP_LOAD($features | 0, 4, 0) | 0 | 0;
  $12 = $3;
  SAFE_HEAP_STORE($12 | 0, $11 | 0, 4);
 }
 $13 = $4;
 $14 = ($13 | 0) != (0 | 0);
 if ($14) {
  $15 = $features + 4 | 0;
  $16 = SAFE_HEAP_LOAD($15 | 0, 4, 0) | 0 | 0;
  $17 = $4;
  SAFE_HEAP_STORE($17 | 0, $16 | 0, 4);
 }
 $0 = 1;
 $18 = $0;
 STACKTOP = sp;
 return $18 | 0;
}

function _ResetSegmentHeader($hdr) {
 $hdr = $hdr | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $hdr;
 $1 = $0;
 $2 = ($1 | 0) != (0 | 0);
 if ($2) {
  $3 = $0;
  SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
  $4 = $0;
  $5 = $4 + 4 | 0;
  SAFE_HEAP_STORE($5 | 0, 0 | 0, 4);
  $6 = $0;
  $7 = $6 + 8 | 0;
  SAFE_HEAP_STORE($7 | 0, 1 | 0, 4);
  $8 = $0;
  $9 = $8 + 12 | 0;
  {}
  SAFE_HEAP_STORE($9 >> 0 | 0, 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($9 + 1 >> 0 | 0, 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($9 + 2 >> 0 | 0, 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($9 + 3 >> 0 | 0, 0 | 0 | 0, 1);
  $10 = $0;
  $11 = $10 + 16 | 0;
  {}
  SAFE_HEAP_STORE($11 >> 0 | 0, 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($11 + 1 >> 0 | 0, 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($11 + 2 >> 0 | 0, 0 | 0 | 0, 1);
  SAFE_HEAP_STORE($11 + 3 >> 0 | 0, 0 | 0 | 0, 1);
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(8215 | 0, 6903 | 0, 140, 7088 | 0);
 }
}

function ___stdout_write($f, $buf, $len) {
 $f = $f | 0;
 $buf = $buf | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $tio = 0, $vararg_buffer = 0, $vararg_ptr1 = 0, $vararg_ptr2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 80 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $tio = sp + 12 | 0;
 $0 = $f + 36 | 0;
 SAFE_HEAP_STORE($0 | 0, 137 | 0, 4);
 $1 = SAFE_HEAP_LOAD($f | 0, 4, 0) | 0 | 0;
 $2 = $1 & 64;
 $3 = ($2 | 0) == 0;
 if ($3) {
  $4 = $f + 60 | 0;
  $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
  SAFE_HEAP_STORE($vararg_buffer | 0, $5 | 0, 4);
  $vararg_ptr1 = $vararg_buffer + 4 | 0;
  SAFE_HEAP_STORE($vararg_ptr1 | 0, 21505 | 0, 4);
  $vararg_ptr2 = $vararg_buffer + 8 | 0;
  SAFE_HEAP_STORE($vararg_ptr2 | 0, $tio | 0, 4);
  $6 = ___syscall54(54, $vararg_buffer | 0) | 0;
  $7 = ($6 | 0) == 0;
  if (!$7) {
   $8 = $f + 75 | 0;
   SAFE_HEAP_STORE($8 >> 0 | 0, -1 | 0, 1);
  }
 }
 $9 = ___stdio_write($f, $buf, $len) | 0;
 STACKTOP = sp;
 return $9 | 0;
}

function _Execute($worker) {
 $worker = $worker | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $worker;
 $1 = $0;
 $2 = $1 + 8 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = ($3 | 0) != (0 | 0);
 if (!$4) {
  STACKTOP = sp;
  return;
 }
 $5 = $0;
 $6 = $5 + 8 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = $0;
 $9 = $8 + 12 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $11 = $0;
 $12 = $11 + 16 | 0;
 $13 = SAFE_HEAP_LOAD($12 | 0, 4, 0) | 0 | 0;
 $14 = FUNCTION_TABLE_iii[(SAFE_FT_MASK($7 | 0, 127 | 0) | 0) & 127]($10, $13) | 0;
 $15 = ($14 | 0) != 0;
 $16 = $15 ^ 1;
 $17 = $16 & 1;
 $18 = $0;
 $19 = $18 + 20 | 0;
 $20 = SAFE_HEAP_LOAD($19 | 0, 4, 0) | 0 | 0;
 $21 = $20 | $17;
 SAFE_HEAP_STORE($19 | 0, $21 | 0, 4);
 STACKTOP = sp;
 return;
}

function _GetFeatures($data, $data_size, $features) {
 $data = $data | 0;
 $data_size = $data_size | 0;
 $features = $features | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, $or$cond = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $data;
 $2 = $data_size;
 $3 = $features;
 $4 = $3;
 $5 = ($4 | 0) == (0 | 0);
 $6 = $1;
 $7 = ($6 | 0) == (0 | 0);
 $or$cond = $5 | $7;
 if ($or$cond) {
  $0 = 2;
  $21 = $0;
  STACKTOP = sp;
  return $21 | 0;
 } else {
  $8 = $3;
  _DefaultFeatures($8);
  $9 = $1;
  $10 = $2;
  $11 = $3;
  $12 = $3;
  $13 = $12 + 4 | 0;
  $14 = $3;
  $15 = $14 + 8 | 0;
  $16 = $3;
  $17 = $16 + 12 | 0;
  $18 = $3;
  $19 = $18 + 16 | 0;
  $20 = _ParseHeadersInternal($9, $10, $11, $13, $15, $17, $19, 0) | 0;
  $0 = $20;
  $21 = $0;
  STACKTOP = sp;
  return $21 | 0;
 }
 return 0 | 0;
}

function _VP8GetThreadMethod($options, $headers, $width, $height) {
 $options = $options | 0;
 $headers = $headers | 0;
 $width = $width | 0;
 $height = $height | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $options;
 $2 = $headers;
 $3 = $width;
 $4 = $height;
 $5 = $1;
 $6 = ($5 | 0) == (0 | 0);
 if (!$6) {
  $7 = $1;
  $8 = $7 + 40 | 0;
  $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
  $10 = ($9 | 0) == 0;
  if (!$10) {
   $11 = $2;
   $12 = ($11 | 0) == (0 | 0);
   if (!$12) {
    $13 = $2;
    $14 = $13 + 32 | 0;
    $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
    $16 = ($15 | 0) != 0;
    if ($16) {
     ___assert_fail(2633 | 0, 2535 | 0, 682, 2674 | 0);
    }
   }
   $0 = 0;
   $17 = $0;
   STACKTOP = sp;
   return $17 | 0;
  }
 }
 $0 = 0;
 $17 = $0;
 STACKTOP = sp;
 return $17 | 0;
}

function _SimpleHFilter16($p, $stride, $thresh) {
 $p = $p | 0;
 $stride = $stride | 0;
 $thresh = $thresh | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0;
 var $7 = 0, $8 = 0, $9 = 0, $i = 0, $thresh2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $p;
 $1 = $stride;
 $2 = $thresh;
 $3 = $2;
 $4 = $3 << 1;
 $5 = $4 + 1 | 0;
 $thresh2 = $5;
 $i = 0;
 while (1) {
  $6 = $i;
  $7 = ($6 | 0) < 16;
  if (!$7) {
   break;
  }
  $8 = $0;
  $9 = $i;
  $10 = $1;
  $11 = Math_imul($9, $10) | 0;
  $12 = $8 + $11 | 0;
  $13 = $thresh2;
  $14 = _needs_filter($12, 1, $13) | 0;
  $15 = ($14 | 0) != 0;
  if ($15) {
   $16 = $0;
   $17 = $i;
   $18 = $1;
   $19 = Math_imul($17, $18) | 0;
   $20 = $16 + $19 | 0;
   _do_filter2($20, 1);
  }
  $21 = $i;
  $22 = $21 + 1 | 0;
  $i = $22;
 }
 STACKTOP = sp;
 return;
}

function _DC8uv($dst) {
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $24 = 0, $3 = 0, $4 = 0;
 var $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dc0 = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dst;
 $dc0 = 8;
 $i = 0;
 while (1) {
  $1 = $i;
  $2 = ($1 | 0) < 8;
  if (!$2) {
   break;
  }
  $3 = $i;
  $4 = $3 - 32 | 0;
  $5 = $0;
  $6 = $5 + $4 | 0;
  $7 = SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0;
  $8 = $7 & 255;
  $9 = $i;
  $10 = $9 << 5;
  $11 = -1 + $10 | 0;
  $12 = $0;
  $13 = $12 + $11 | 0;
  $14 = SAFE_HEAP_LOAD($13 >> 0 | 0, 1, 0) | 0 | 0;
  $15 = $14 & 255;
  $16 = $8 + $15 | 0;
  $17 = $dc0;
  $18 = $17 + $16 | 0;
  $dc0 = $18;
  $19 = $i;
  $20 = $19 + 1 | 0;
  $i = $20;
 }
 $21 = $dc0;
 $22 = $21 >> 4;
 $23 = $22 & 255;
 $24 = $0;
 _Put8x8uv($23, $24);
 STACKTOP = sp;
 return;
}

function _VP8CheckSignature($data, $data_size) {
 $data = $data | 0;
 $data_size = $data_size | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $data;
 $1 = $data_size;
 $2 = $1;
 $3 = $2 >>> 0 >= 3;
 if ($3) {
  $4 = $0;
  $5 = SAFE_HEAP_LOAD($4 >> 0 | 0, 1, 0) | 0 | 0;
  $6 = $5 & 255;
  $7 = ($6 | 0) == 157;
  if ($7) {
   $8 = $0;
   $9 = $8 + 1 | 0;
   $10 = SAFE_HEAP_LOAD($9 >> 0 | 0, 1, 0) | 0 | 0;
   $11 = $10 & 255;
   $12 = ($11 | 0) == 1;
   if ($12) {
    $13 = $0;
    $14 = $13 + 2 | 0;
    $15 = SAFE_HEAP_LOAD($14 >> 0 | 0, 1, 0) | 0 | 0;
    $16 = $15 & 255;
    $17 = ($16 | 0) == 42;
    $19 = $17;
   } else {
    $19 = 0;
   }
  } else {
   $19 = 0;
  }
 } else {
  $19 = 0;
 }
 $18 = $19 & 1;
 STACKTOP = sp;
 return $18 | 0;
}

function ___remdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rem = __stackBase__ | 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
 $4$1 = tempRet0;
 $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
 ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
 $10$0 = _i64Subtract((SAFE_HEAP_LOAD($rem | 0, 4, 0) | 0) ^ $1$0, (SAFE_HEAP_LOAD($rem + 4 | 0, 4, 0) | 0) ^ $1$1, $1$0, $1$1) | 0;
 $10$1 = tempRet0;
 STACKTOP = __stackBase__;
 return (tempRet0 = $10$1, $10$0) | 0;
}

function _GetCopyDistance($distance_symbol, $br) {
 $distance_symbol = $distance_symbol | 0;
 $br = $br | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $extra_bits = 0, $offset = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $distance_symbol;
 $2 = $br;
 $3 = $1;
 $4 = ($3 | 0) < 4;
 $5 = $1;
 if ($4) {
  $6 = $5 + 1 | 0;
  $0 = $6;
  $20 = $0;
  STACKTOP = sp;
  return $20 | 0;
 } else {
  $7 = $5 - 2 | 0;
  $8 = $7 >> 1;
  $extra_bits = $8;
  $9 = $1;
  $10 = $9 & 1;
  $11 = 2 + $10 | 0;
  $12 = $extra_bits;
  $13 = $11 << $12;
  $offset = $13;
  $14 = $offset;
  $15 = $2;
  $16 = $extra_bits;
  $17 = _VP8LReadBits($15, $16) | 0;
  $18 = $14 + $17 | 0;
  $19 = $18 + 1 | 0;
  $0 = $19;
  $20 = $0;
  STACKTOP = sp;
  return $20 | 0;
 }
 return 0 | 0;
}

function _DC16($dst) {
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $22 = 0, $23 = 0, $3 = 0, $4 = 0, $5 = 0;
 var $6 = 0, $7 = 0, $8 = 0, $9 = 0, $DC = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dst;
 $DC = 16;
 $j = 0;
 while (1) {
  $1 = $j;
  $2 = ($1 | 0) < 16;
  if (!$2) {
   break;
  }
  $3 = $j;
  $4 = $3 << 5;
  $5 = -1 + $4 | 0;
  $6 = $0;
  $7 = $6 + $5 | 0;
  $8 = SAFE_HEAP_LOAD($7 >> 0 | 0, 1, 0) | 0 | 0;
  $9 = $8 & 255;
  $10 = $j;
  $11 = $10 - 32 | 0;
  $12 = $0;
  $13 = $12 + $11 | 0;
  $14 = SAFE_HEAP_LOAD($13 >> 0 | 0, 1, 0) | 0 | 0;
  $15 = $14 & 255;
  $16 = $9 + $15 | 0;
  $17 = $DC;
  $18 = $17 + $16 | 0;
  $DC = $18;
  $19 = $j;
  $20 = $19 + 1 | 0;
  $j = $20;
 }
 $21 = $DC;
 $22 = $21 >> 5;
 $23 = $0;
 _Put16($22, $23);
 STACKTOP = sp;
 return;
}

function _memcmp($vl, $vr, $n) {
 $vl = $vl | 0;
 $vr = $vr | 0;
 $n = $n | 0;
 var $$03 = 0, $$lcssa = 0, $$lcssa19 = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $l$04 = 0, $r$05 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n | 0) == 0;
 L1 : do {
  if ($0) {
   $11 = 0;
  } else {
   $$03 = $n;
   $l$04 = $vl;
   $r$05 = $vr;
   while (1) {
    $1 = SAFE_HEAP_LOAD($l$04 >> 0 | 0, 1, 0) | 0 | 0;
    $2 = SAFE_HEAP_LOAD($r$05 >> 0 | 0, 1, 0) | 0 | 0;
    $3 = $1 << 24 >> 24 == $2 << 24 >> 24;
    if (!$3) {
     $$lcssa = $1;
     $$lcssa19 = $2;
     break;
    }
    $4 = $$03 + -1 | 0;
    $5 = $l$04 + 1 | 0;
    $6 = $r$05 + 1 | 0;
    $7 = ($4 | 0) == 0;
    if ($7) {
     $11 = 0;
     break L1;
    } else {
     $$03 = $4;
     $l$04 = $5;
     $r$05 = $6;
    }
   }
   $8 = $$lcssa & 255;
   $9 = $$lcssa19 & 255;
   $10 = $8 - $9 | 0;
   $11 = $10;
  }
 } while (0);
 return $11 | 0;
}

function _GetMetaIndex($image, $xsize, $bits, $x, $y) {
 $image = $image | 0;
 $xsize = $xsize | 0;
 $bits = $bits | 0;
 $x = $x | 0;
 $y = $y | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $image;
 $2 = $xsize;
 $3 = $bits;
 $4 = $x;
 $5 = $y;
 $6 = $3;
 $7 = ($6 | 0) == 0;
 if ($7) {
  $0 = 0;
  $20 = $0;
  STACKTOP = sp;
  return $20 | 0;
 } else {
  $8 = $2;
  $9 = $5;
  $10 = $3;
  $11 = $9 >> $10;
  $12 = Math_imul($8, $11) | 0;
  $13 = $4;
  $14 = $3;
  $15 = $13 >> $14;
  $16 = $12 + $15 | 0;
  $17 = $1;
  $18 = $17 + ($16 << 2) | 0;
  $19 = SAFE_HEAP_LOAD($18 | 0, 4, 0) | 0 | 0;
  $0 = $19;
  $20 = $0;
  STACKTOP = sp;
  return $20 | 0;
 }
 return 0 | 0;
}

function _ReplicateValue($table, $step, $end, $code) {
 $table = $table | 0;
 $step = $step | 0;
 $end = $end | 0;
 $code = $code | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $table;
 $1 = $step;
 $2 = $end;
 $3 = $2;
 $4 = $1;
 $5 = ($3 | 0) % ($4 | 0) & -1;
 $6 = ($5 | 0) == 0;
 if (!$6) {
  ___assert_fail(14731 | 0, 14586 | 0, 56, 14747 | 0);
 }
 while (1) {
  $7 = $1;
  $8 = $2;
  $9 = $8 - $7 | 0;
  $2 = $9;
  $10 = $2;
  $11 = $0;
  $12 = $11 + ($10 << 2) | 0;
  {}
  SAFE_HEAP_STORE($12 | 0, SAFE_HEAP_LOAD($code | 0, 2, 0) | 0 | 0 | 0, 2);
  SAFE_HEAP_STORE($12 + 2 | 0, SAFE_HEAP_LOAD($code + 2 | 0, 2, 0) | 0 | 0 | 0, 2);
  $13 = $2;
  $14 = ($13 | 0) > 0;
  if (!$14) {
   break;
  }
 }
 STACKTOP = sp;
 return;
}

function _SimpleVFilter16($p, $stride, $thresh) {
 $p = $p | 0;
 $stride = $stride | 0;
 $thresh = $thresh | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, $i = 0, $thresh2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $p;
 $1 = $stride;
 $2 = $thresh;
 $3 = $2;
 $4 = $3 << 1;
 $5 = $4 + 1 | 0;
 $thresh2 = $5;
 $i = 0;
 while (1) {
  $6 = $i;
  $7 = ($6 | 0) < 16;
  if (!$7) {
   break;
  }
  $8 = $0;
  $9 = $i;
  $10 = $8 + $9 | 0;
  $11 = $1;
  $12 = $thresh2;
  $13 = _needs_filter($10, $11, $12) | 0;
  $14 = ($13 | 0) != 0;
  if ($14) {
   $15 = $0;
   $16 = $i;
   $17 = $15 + $16 | 0;
   $18 = $1;
   _do_filter2($17, $18);
  }
  $19 = $i;
  $20 = $19 + 1 | 0;
  $i = $20;
 }
 STACKTOP = sp;
 return;
}

function _WebPMultARGBRows($ptr, $stride, $width, $num_rows, $inverse) {
 $ptr = $ptr | 0;
 $stride = $stride | 0;
 $width = $width | 0;
 $num_rows = $num_rows | 0;
 $inverse = $inverse | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $n = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $ptr;
 $1 = $stride;
 $2 = $width;
 $3 = $num_rows;
 $4 = $inverse;
 $n = 0;
 while (1) {
  $5 = $n;
  $6 = $3;
  $7 = ($5 | 0) < ($6 | 0);
  if (!$7) {
   break;
  }
  $8 = SAFE_HEAP_LOAD(380 | 0, 4, 0) | 0 | 0;
  $9 = $0;
  $10 = $2;
  $11 = $4;
  FUNCTION_TABLE_viii[(SAFE_FT_MASK($8 | 0, 255 | 0) | 0) & 255]($9, $10, $11);
  $12 = $1;
  $13 = $0;
  $14 = $13 + $12 | 0;
  $0 = $14;
  $15 = $n;
  $16 = $15 + 1 | 0;
  $n = $16;
 }
 STACKTOP = sp;
 return;
}

function _ClearMetadata($hdr) {
 $hdr = $hdr | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $hdr;
 $1 = $0;
 $2 = ($1 | 0) != (0 | 0);
 if ($2) {
  $3 = $0;
  $4 = $3 + 40 | 0;
  $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
  _WebPSafeFree($5);
  $6 = $0;
  $7 = $6 + 52 | 0;
  $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
  _WebPSafeFree($8);
  $9 = $0;
  $10 = $9 + 48 | 0;
  $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
  _VP8LHtreeGroupsFree($11);
  $12 = $0;
  $13 = $12 + 4 | 0;
  _VP8LColorCacheClear($13);
  $14 = $0;
  $15 = $14 + 16 | 0;
  _VP8LColorCacheClear($15);
  $16 = $0;
  _InitMetadata($16);
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(8215 | 0, 7124 | 0, 1255, 8673 | 0);
 }
}

function _WebPRescalerImportRow($wrk, $src) {
 $wrk = $wrk | 0;
 $src = $src | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $wrk;
 $1 = $src;
 $2 = $0;
 $3 = _WebPRescalerInputDone($2) | 0;
 $4 = ($3 | 0) != 0;
 if ($4) {
  ___assert_fail(13056 | 0, 13084 | 0, 161, 13440 | 0);
 }
 $5 = $0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = ($6 | 0) != 0;
 if ($7) {
  $11 = SAFE_HEAP_LOAD(748 | 0, 4, 0) | 0 | 0;
  $12 = $0;
  $13 = $1;
  FUNCTION_TABLE_vii[(SAFE_FT_MASK($11 | 0, 127 | 0) | 0) & 127]($12, $13);
  STACKTOP = sp;
  return;
 } else {
  $8 = SAFE_HEAP_LOAD(744 | 0, 4, 0) | 0 | 0;
  $9 = $0;
  $10 = $1;
  FUNCTION_TABLE_vii[(SAFE_FT_MASK($8 | 0, 127 | 0) | 0) & 127]($9, $10);
  STACKTOP = sp;
  return;
 }
}

function _VFilter8i($u, $v, $stride, $thresh, $ithresh, $hev_thresh) {
 $u = $u | 0;
 $v = $v | 0;
 $stride = $stride | 0;
 $thresh = $thresh | 0;
 $ithresh = $ithresh | 0;
 $hev_thresh = $hev_thresh | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $u;
 $1 = $v;
 $2 = $stride;
 $3 = $thresh;
 $4 = $ithresh;
 $5 = $hev_thresh;
 $6 = $0;
 $7 = $2;
 $8 = $7 << 2;
 $9 = $6 + $8 | 0;
 $10 = $2;
 $11 = $3;
 $12 = $4;
 $13 = $5;
 _FilterLoop24($9, $10, 1, 8, $11, $12, $13);
 $14 = $1;
 $15 = $2;
 $16 = $15 << 2;
 $17 = $14 + $16 | 0;
 $18 = $2;
 $19 = $3;
 $20 = $4;
 $21 = $5;
 _FilterLoop24($17, $18, 1, 8, $19, $20, $21);
 STACKTOP = sp;
 return;
}

function _VP8YuvToRgb367($y, $u, $v, $rgb) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 $rgb = $rgb | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $rgb;
 $4 = $0;
 $5 = $2;
 $6 = _VP8YUVToR368($4, $5) | 0;
 $7 = $6 & 255;
 $8 = $3;
 SAFE_HEAP_STORE($8 >> 0 | 0, $7 | 0, 1);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = _VP8YUVToG371($9, $10, $11) | 0;
 $13 = $12 & 255;
 $14 = $3;
 $15 = $14 + 1 | 0;
 SAFE_HEAP_STORE($15 >> 0 | 0, $13 | 0, 1);
 $16 = $0;
 $17 = $1;
 $18 = _VP8YUVToB372($16, $17) | 0;
 $19 = $18 & 255;
 $20 = $3;
 $21 = $20 + 2 | 0;
 SAFE_HEAP_STORE($21 >> 0 | 0, $19 | 0, 1);
 STACKTOP = sp;
 return;
}

function _VP8YuvToBgr374($y, $u, $v, $bgr) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 $bgr = $bgr | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $bgr;
 $4 = $0;
 $5 = $1;
 $6 = _VP8YUVToB372($4, $5) | 0;
 $7 = $6 & 255;
 $8 = $3;
 SAFE_HEAP_STORE($8 >> 0 | 0, $7 | 0, 1);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = _VP8YUVToG371($9, $10, $11) | 0;
 $13 = $12 & 255;
 $14 = $3;
 $15 = $14 + 1 | 0;
 SAFE_HEAP_STORE($15 >> 0 | 0, $13 | 0, 1);
 $16 = $0;
 $17 = $2;
 $18 = _VP8YUVToR368($16, $17) | 0;
 $19 = $18 & 255;
 $20 = $3;
 $21 = $20 + 2 | 0;
 SAFE_HEAP_STORE($21 >> 0 | 0, $19 | 0, 1);
 STACKTOP = sp;
 return;
}

function _WebPRescaleNeededLines($wrk, $max_num_lines) {
 $wrk = $wrk | 0;
 $max_num_lines = $max_num_lines | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $num_lines = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $wrk;
 $1 = $max_num_lines;
 $2 = $0;
 $3 = $2 + 24 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = $0;
 $6 = $5 + 32 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = $4 + $7 | 0;
 $9 = $8 - 1 | 0;
 $10 = $0;
 $11 = $10 + 32 | 0;
 $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
 $13 = ($9 | 0) / ($12 | 0) & -1;
 $num_lines = $13;
 $14 = $num_lines;
 $15 = $1;
 $16 = ($14 | 0) > ($15 | 0);
 $17 = $1;
 $18 = $num_lines;
 $19 = $16 ? $17 : $18;
 STACKTOP = sp;
 return $19 | 0;
}

function _VP8InitRandom($rg, $dithering) {
 $rg = $rg | 0;
 $dithering = +$dithering;
 var $0 = 0, $1 = 0.0, $10 = 0.0, $11 = 0.0, $12 = 0, $13 = 0.0, $14 = 0.0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0.0, $8 = 0.0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $rg;
 $1 = $dithering;
 $2 = $0;
 $3 = $2 + 8 | 0;
 _memcpy($3 | 0, 1056 | 0, 220) | 0;
 $4 = $0;
 SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
 $5 = $0;
 $6 = $5 + 4 | 0;
 SAFE_HEAP_STORE($6 | 0, 31 | 0, 4);
 $7 = $1;
 $8 = $7;
 $9 = $8 < 0.0;
 if ($9) {
  $18 = 0;
 } else {
  $10 = $1;
  $11 = $10;
  $12 = $11 > 1.0;
  if ($12) {
   $18 = 256;
  } else {
   $13 = $1;
   $14 = 256.0 * $13;
   $15 = ~~$14 >>> 0;
   $18 = $15;
  }
 }
 $16 = $0;
 $17 = $16 + 228 | 0;
 SAFE_HEAP_STORE($17 | 0, $18 | 0, 4);
 STACKTOP = sp;
 return;
}

function _VP8YuvToRgb($y, $u, $v, $rgb) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 $rgb = $rgb | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $rgb;
 $4 = $0;
 $5 = $2;
 $6 = _VP8YUVToR($4, $5) | 0;
 $7 = $6 & 255;
 $8 = $3;
 SAFE_HEAP_STORE($8 >> 0 | 0, $7 | 0, 1);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = _VP8YUVToG($9, $10, $11) | 0;
 $13 = $12 & 255;
 $14 = $3;
 $15 = $14 + 1 | 0;
 SAFE_HEAP_STORE($15 >> 0 | 0, $13 | 0, 1);
 $16 = $0;
 $17 = $1;
 $18 = _VP8YUVToB($16, $17) | 0;
 $19 = $18 & 255;
 $20 = $3;
 $21 = $20 + 2 | 0;
 SAFE_HEAP_STORE($21 >> 0 | 0, $19 | 0, 1);
 STACKTOP = sp;
 return;
}

function _VP8YuvToBgr($y, $u, $v, $bgr) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 $bgr = $bgr | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $21 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0;
 var $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $bgr;
 $4 = $0;
 $5 = $1;
 $6 = _VP8YUVToB($4, $5) | 0;
 $7 = $6 & 255;
 $8 = $3;
 SAFE_HEAP_STORE($8 >> 0 | 0, $7 | 0, 1);
 $9 = $0;
 $10 = $1;
 $11 = $2;
 $12 = _VP8YUVToG($9, $10, $11) | 0;
 $13 = $12 & 255;
 $14 = $3;
 $15 = $14 + 1 | 0;
 SAFE_HEAP_STORE($15 >> 0 | 0, $13 | 0, 1);
 $16 = $0;
 $17 = $2;
 $18 = _VP8YUVToR($16, $17) | 0;
 $19 = $18 & 255;
 $20 = $3;
 $21 = $20 + 2 | 0;
 SAFE_HEAP_STORE($21 >> 0 | 0, $19 | 0, 1);
 STACKTOP = sp;
 return;
}

function _AddPixelsEq($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0;
 var $alpha_and_green = 0, $red_and_blue = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = $3 & -16711936;
 $5 = $1;
 $6 = $5 & -16711936;
 $7 = $4 + $6 | 0;
 $alpha_and_green = $7;
 $8 = $0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $10 = $9 & 16711935;
 $11 = $1;
 $12 = $11 & 16711935;
 $13 = $10 + $12 | 0;
 $red_and_blue = $13;
 $14 = $alpha_and_green;
 $15 = $14 & -16711936;
 $16 = $red_and_blue;
 $17 = $16 & 16711935;
 $18 = $15 | $17;
 $19 = $0;
 SAFE_HEAP_STORE($19 | 0, $18 | 0, 4);
 STACKTOP = sp;
 return;
}

function _DoUVTransform($bits, $src, $dst) {
 $bits = $bits | 0;
 $src = $src | 0;
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $bits;
 $1 = $src;
 $2 = $dst;
 $3 = $0;
 $4 = $3 & 255;
 $5 = ($4 | 0) != 0;
 if (!$5) {
  STACKTOP = sp;
  return;
 }
 $6 = $0;
 $7 = $6 & 170;
 $8 = ($7 | 0) != 0;
 if ($8) {
  $9 = SAFE_HEAP_LOAD(424 | 0, 4, 0) | 0 | 0;
  $10 = $1;
  $11 = $2;
  FUNCTION_TABLE_vii[(SAFE_FT_MASK($9 | 0, 127 | 0) | 0) & 127]($10, $11);
  STACKTOP = sp;
  return;
 } else {
  $12 = SAFE_HEAP_LOAD(432 | 0, 4, 0) | 0 | 0;
  $13 = $1;
  $14 = $2;
  FUNCTION_TABLE_vii[(SAFE_FT_MASK($12 | 0, 127 | 0) | 0) & 127]($13, $14);
  STACKTOP = sp;
  return;
 }
}

function _VFilter16i($p, $stride, $thresh, $ithresh, $hev_thresh) {
 $p = $p | 0;
 $stride = $stride | 0;
 $thresh = $thresh | 0;
 $ithresh = $ithresh | 0;
 $hev_thresh = $hev_thresh | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $p;
 $1 = $stride;
 $2 = $thresh;
 $3 = $ithresh;
 $4 = $hev_thresh;
 $k = 3;
 while (1) {
  $5 = $k;
  $6 = ($5 | 0) > 0;
  if (!$6) {
   break;
  }
  $7 = $1;
  $8 = $7 << 2;
  $9 = $0;
  $10 = $9 + $8 | 0;
  $0 = $10;
  $11 = $0;
  $12 = $1;
  $13 = $2;
  $14 = $3;
  $15 = $4;
  _FilterLoop24($11, $12, 1, 16, $13, $14, $15);
  $16 = $k;
  $17 = $16 + -1 | 0;
  $k = $17;
 }
 STACKTOP = sp;
 return;
}

function _VP8ParseIntraModeRow($br, $dec) {
 $br = $br | 0;
 $dec = $dec | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $mb_x = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $br;
 $1 = $dec;
 $mb_x = 0;
 while (1) {
  $2 = $mb_x;
  $3 = $1;
  $4 = $3 + 288 | 0;
  $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
  $6 = ($2 | 0) < ($5 | 0);
  if (!$6) {
   break;
  }
  $7 = $0;
  $8 = $1;
  $9 = $mb_x;
  _ParseIntraMode($7, $8, $9);
  $10 = $mb_x;
  $11 = $10 + 1 | 0;
  $mb_x = $11;
 }
 $12 = $1;
 $13 = $12 + 12 | 0;
 $14 = $13 + 24 | 0;
 $15 = SAFE_HEAP_LOAD($14 | 0, 4, 0) | 0 | 0;
 $16 = ($15 | 0) != 0;
 $17 = $16 ^ 1;
 $18 = $17 & 1;
 STACKTOP = sp;
 return $18 | 0;
}

function _VP8BitReaderSetBuffer($br, $start, $size) {
 $br = $br | 0;
 $start = $start | 0;
 $size = $size | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $19 = 0, $2 = 0, $20 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0;
 var $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $br;
 $1 = $start;
 $2 = $size;
 $3 = $1;
 $4 = $0;
 $5 = $4 + 12 | 0;
 SAFE_HEAP_STORE($5 | 0, $3 | 0, 4);
 $6 = $1;
 $7 = $2;
 $8 = $6 + $7 | 0;
 $9 = $0;
 $10 = $9 + 16 | 0;
 SAFE_HEAP_STORE($10 | 0, $8 | 0, 4);
 $11 = $2;
 $12 = $11 >>> 0 >= 4;
 $13 = $1;
 $14 = $2;
 $15 = $13 + $14 | 0;
 $16 = $15 + -4 | 0;
 $17 = $16 + 1 | 0;
 $18 = $12 ? $17 : $13;
 $19 = $0;
 $20 = $19 + 20 | 0;
 SAFE_HEAP_STORE($20 | 0, $18 | 0, 4);
 STACKTOP = sp;
 return;
}

function _calloc($n_elements, $elem_size) {
 $n_elements = $n_elements | 0;
 $elem_size = $elem_size | 0;
 var $$ = 0, $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $req$0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = ($n_elements | 0) == 0;
 if ($0) {
  $req$0 = 0;
 } else {
  $1 = Math_imul($elem_size, $n_elements) | 0;
  $2 = $elem_size | $n_elements;
  $3 = $2 >>> 0 > 65535;
  if ($3) {
   $4 = ($1 >>> 0) / ($n_elements >>> 0) & -1;
   $5 = ($4 | 0) == ($elem_size | 0);
   $$ = $5 ? $1 : -1;
   $req$0 = $$;
  } else {
   $req$0 = $1;
  }
 }
 $6 = _malloc($req$0) | 0;
 $7 = ($6 | 0) == (0 | 0);
 if ($7) {
  return $6 | 0;
 }
 $8 = $6 + -4 | 0;
 $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
 $10 = $9 & 3;
 $11 = ($10 | 0) == 0;
 if ($11) {
  return $6 | 0;
 }
 _memset($6 | 0, 0, $req$0 | 0) | 0;
 return $6 | 0;
}

function _WebPIsAlphaMode($mode) {
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, $or$cond5 = 0, $or$cond7 = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $mode;
 $1 = $0;
 $2 = ($1 | 0) == 1;
 $3 = $0;
 $4 = ($3 | 0) == 3;
 $or$cond = $2 | $4;
 $5 = $0;
 $6 = ($5 | 0) == 4;
 $or$cond3 = $or$cond | $6;
 $7 = $0;
 $8 = ($7 | 0) == 5;
 $or$cond5 = $or$cond3 | $8;
 $9 = $0;
 $10 = ($9 | 0) == 12;
 $or$cond7 = $or$cond5 | $10;
 if ($or$cond7) {
  $15 = 1;
  $14 = $15 & 1;
  STACKTOP = sp;
  return $14 | 0;
 }
 $11 = $0;
 $12 = _WebPIsPremultipliedMode($11) | 0;
 $13 = ($12 | 0) != 0;
 $15 = $13;
 $14 = $15 & 1;
 STACKTOP = sp;
 return $14 | 0;
}

function _VP8InitScanline($dec) {
 $dec = $dec | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $left = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $0;
 $2 = $1 + 2256 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = $3 + -2 | 0;
 $left = $4;
 $5 = $left;
 SAFE_HEAP_STORE($5 >> 0 | 0, 0 | 0, 1);
 $6 = $left;
 $7 = $6 + 1 | 0;
 SAFE_HEAP_STORE($7 >> 0 | 0, 0 | 0, 1);
 $8 = $0;
 $9 = $8 + 2248 | 0;
 {}
 SAFE_HEAP_STORE($9 >> 0 | 0, 0 | 0 | 0, 1);
 SAFE_HEAP_STORE($9 + 1 >> 0 | 0, 0 | 0 | 0, 1);
 SAFE_HEAP_STORE($9 + 2 >> 0 | 0, 0 | 0 | 0, 1);
 SAFE_HEAP_STORE($9 + 3 >> 0 | 0, 0 | 0 | 0, 1);
 $10 = $0;
 $11 = $10 + 2296 | 0;
 SAFE_HEAP_STORE($11 | 0, 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function _WebPGetFeaturesInternal($data, $data_size, $features, $version) {
 $data = $data | 0;
 $data_size = $data_size | 0;
 $features = $features | 0;
 $version = $version | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $data;
 $2 = $data_size;
 $3 = $features;
 $4 = $version;
 $5 = $4;
 $6 = $5 >> 8;
 $7 = ($6 | 0) != 2;
 do {
  if ($7) {
   $0 = 2;
  } else {
   $8 = $3;
   $9 = ($8 | 0) == (0 | 0);
   if ($9) {
    $0 = 2;
    break;
   } else {
    $10 = $1;
    $11 = $2;
    $12 = $3;
    $13 = _GetFeatures($10, $11, $12) | 0;
    $0 = $13;
    break;
   }
  }
 } while (0);
 $14 = $0;
 STACKTOP = sp;
 return $14 | 0;
}

function _HFilter16i($p, $stride, $thresh, $ithresh, $hev_thresh) {
 $p = $p | 0;
 $stride = $stride | 0;
 $thresh = $thresh | 0;
 $ithresh = $ithresh | 0;
 $hev_thresh = $hev_thresh | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $p;
 $1 = $stride;
 $2 = $thresh;
 $3 = $ithresh;
 $4 = $hev_thresh;
 $k = 3;
 while (1) {
  $5 = $k;
  $6 = ($5 | 0) > 0;
  if (!$6) {
   break;
  }
  $7 = $0;
  $8 = $7 + 4 | 0;
  $0 = $8;
  $9 = $0;
  $10 = $1;
  $11 = $2;
  $12 = $3;
  $13 = $4;
  _FilterLoop24($9, 1, $10, 16, $11, $12, $13);
  $14 = $k;
  $15 = $14 + -1 | 0;
  $k = $15;
 }
 STACKTOP = sp;
 return;
}

function _HFilter8i($u, $v, $stride, $thresh, $ithresh, $hev_thresh) {
 $u = $u | 0;
 $v = $v | 0;
 $stride = $stride | 0;
 $thresh = $thresh | 0;
 $ithresh = $ithresh | 0;
 $hev_thresh = $hev_thresh | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $u;
 $1 = $v;
 $2 = $stride;
 $3 = $thresh;
 $4 = $ithresh;
 $5 = $hev_thresh;
 $6 = $0;
 $7 = $6 + 4 | 0;
 $8 = $2;
 $9 = $3;
 $10 = $4;
 $11 = $5;
 _FilterLoop24($7, 1, $8, 8, $9, $10, $11);
 $12 = $1;
 $13 = $12 + 4 | 0;
 $14 = $2;
 $15 = $3;
 $16 = $4;
 $17 = $5;
 _FilterLoop24($13, 1, $14, 8, $15, $16, $17);
 STACKTOP = sp;
 return;
}

function _ColorCodeToMultipliers($color_code, $m) {
 $color_code = $color_code | 0;
 $m = $m | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $18 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $color_code;
 $1 = $m;
 $2 = $0;
 $3 = $2 >>> 0;
 $4 = $3 & 255;
 $5 = $4 & 255;
 $6 = $1;
 SAFE_HEAP_STORE($6 >> 0 | 0, $5 | 0, 1);
 $7 = $0;
 $8 = $7 >>> 8;
 $9 = $8 & 255;
 $10 = $9 & 255;
 $11 = $1;
 $12 = $11 + 1 | 0;
 SAFE_HEAP_STORE($12 >> 0 | 0, $10 | 0, 1);
 $13 = $0;
 $14 = $13 >>> 16;
 $15 = $14 & 255;
 $16 = $15 & 255;
 $17 = $1;
 $18 = $17 + 2 | 0;
 SAFE_HEAP_STORE($18 >> 0 | 0, $16 | 0, 1);
 STACKTOP = sp;
 return;
}

function ___divdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
 $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
 $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
 $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
 $4$1 = tempRet0;
 $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
 $7$0 = $2$0 ^ $1$0;
 $7$1 = $2$1 ^ $1$1;
 $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
 $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
 return $10$0 | 0;
}

function copyTempDouble(ptr) {
 ptr = ptr | 0;
 SAFE_HEAP_STORE(tempDoublePtr >> 0 | 0, SAFE_HEAP_LOAD(ptr >> 0 | 0, 1, 0) | 0 | 0, 1);
 SAFE_HEAP_STORE(tempDoublePtr + 1 >> 0 | 0, SAFE_HEAP_LOAD(ptr + 1 >> 0 | 0, 1, 0) | 0 | 0, 1);
 SAFE_HEAP_STORE(tempDoublePtr + 2 >> 0 | 0, SAFE_HEAP_LOAD(ptr + 2 >> 0 | 0, 1, 0) | 0 | 0, 1);
 SAFE_HEAP_STORE(tempDoublePtr + 3 >> 0 | 0, SAFE_HEAP_LOAD(ptr + 3 >> 0 | 0, 1, 0) | 0 | 0, 1);
 SAFE_HEAP_STORE(tempDoublePtr + 4 >> 0 | 0, SAFE_HEAP_LOAD(ptr + 4 >> 0 | 0, 1, 0) | 0 | 0, 1);
 SAFE_HEAP_STORE(tempDoublePtr + 5 >> 0 | 0, SAFE_HEAP_LOAD(ptr + 5 >> 0 | 0, 1, 0) | 0 | 0, 1);
 SAFE_HEAP_STORE(tempDoublePtr + 6 >> 0 | 0, SAFE_HEAP_LOAD(ptr + 6 >> 0 | 0, 1, 0) | 0 | 0, 1);
 SAFE_HEAP_STORE(tempDoublePtr + 7 >> 0 | 0, SAFE_HEAP_LOAD(ptr + 7 >> 0 | 0, 1, 0) | 0 | 0, 1);
}

function _VP8New() {
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dec = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = _WebPSafeCalloc(1, 0, 2368) | 0;
 $dec = $0;
 $1 = $dec;
 $2 = ($1 | 0) != (0 | 0);
 if (!$2) {
  $12 = $dec;
  STACKTOP = sp;
  return $12 | 0;
 }
 $3 = $dec;
 _SetOk($3);
 $4 = _WebPGetWorkerInterface() | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = $dec;
 $7 = $6 + 124 | 0;
 FUNCTION_TABLE_vi[(SAFE_FT_MASK($5 | 0, 255 | 0) | 0) & 255]($7);
 $8 = $dec;
 $9 = $8 + 4 | 0;
 SAFE_HEAP_STORE($9 | 0, 0 | 0, 4);
 $10 = $dec;
 $11 = $10 + 312 | 0;
 SAFE_HEAP_STORE($11 | 0, 1 | 0, 4);
 $12 = $dec;
 STACKTOP = sp;
 return $12 | 0;
}

function _WebPInitDecBufferInternal($buffer, $version) {
 $buffer = $buffer | 0;
 $version = $version | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $buffer;
 $2 = $version;
 $3 = $2;
 $4 = $3 >> 8;
 $5 = ($4 | 0) != 2;
 do {
  if ($5) {
   $0 = 0;
  } else {
   $6 = $1;
   $7 = ($6 | 0) == (0 | 0);
   if ($7) {
    $0 = 0;
    break;
   } else {
    $8 = $1;
    dest = $8;
    stop = dest + 84 | 0;
    do {
     SAFE_HEAP_STORE(dest | 0, 0 | 0 | 0, 4);
     dest = dest + 4 | 0;
    } while ((dest | 0) < (stop | 0));
    $0 = 1;
    break;
   }
  }
 } while (0);
 $9 = $0;
 STACKTOP = sp;
 return $9 | 0;
}

function _DC8uvNoTop($dst) {
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dc0 = 0, $i = 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dst;
 $dc0 = 4;
 $i = 0;
 while (1) {
  $1 = $i;
  $2 = ($1 | 0) < 8;
  if (!$2) {
   break;
  }
  $3 = $i;
  $4 = $3 << 5;
  $5 = -1 + $4 | 0;
  $6 = $0;
  $7 = $6 + $5 | 0;
  $8 = SAFE_HEAP_LOAD($7 >> 0 | 0, 1, 0) | 0 | 0;
  $9 = $8 & 255;
  $10 = $dc0;
  $11 = $10 + $9 | 0;
  $dc0 = $11;
  $12 = $i;
  $13 = $12 + 1 | 0;
  $i = $13;
 }
 $14 = $dc0;
 $15 = $14 >> 3;
 $16 = $15 & 255;
 $17 = $0;
 _Put8x8uv($16, $17);
 STACKTOP = sp;
 return;
}

function _memcpy(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((num | 0) >= 4096) return _emscripten_memcpy_big(dest | 0, src | 0, num | 0) | 0;
 ret = dest | 0;
 if ((dest & 3) == (src & 3)) {
  while (dest & 3) {
   if ((num | 0) == 0) return ret | 0;
   SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 1, 0) | 0 | 0, 1);
   dest = dest + 1 | 0;
   src = src + 1 | 0;
   num = num - 1 | 0;
  }
  while ((num | 0) >= 4) {
   SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 4, 0) | 0 | 0, 4);
   dest = dest + 4 | 0;
   src = src + 4 | 0;
   num = num - 4 | 0;
  }
 }
 while ((num | 0) > 0) {
  SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 1, 0) | 0 | 0, 1);
  dest = dest + 1 | 0;
  src = src + 1 | 0;
  num = num - 1 | 0;
 }
 return ret | 0;
}

function _VP8LCheckSignature($data, $size) {
 $data = $data | 0;
 $size = $size | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $data;
 $1 = $size;
 $2 = $1;
 $3 = $2 >>> 0 >= 5;
 if ($3) {
  $4 = $0;
  $5 = SAFE_HEAP_LOAD($4 >> 0 | 0, 1, 0) | 0 | 0;
  $6 = $5 & 255;
  $7 = ($6 | 0) == 47;
  if ($7) {
   $8 = $0;
   $9 = $8 + 4 | 0;
   $10 = SAFE_HEAP_LOAD($9 >> 0 | 0, 1, 0) | 0 | 0;
   $11 = $10 & 255;
   $12 = $11 >> 5;
   $13 = ($12 | 0) == 0;
   $15 = $13;
  } else {
   $15 = 0;
  }
 } else {
  $15 = 0;
 }
 $14 = $15 & 1;
 STACKTOP = sp;
 return $14 | 0;
}

function _WebPInitYUV444Converters() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD(872 | 0, 4, 0) | 0 | 0;
 $1 = SAFE_HEAP_LOAD(412 | 0, 4, 0) | 0 | 0;
 $2 = ($0 | 0) == ($1 | 0);
 if ($2) {
  return;
 }
 SAFE_HEAP_STORE(816 | 0, 117 | 0, 4);
 SAFE_HEAP_STORE(820 | 0, 118 | 0, 4);
 SAFE_HEAP_STORE(824 | 0, 119 | 0, 4);
 SAFE_HEAP_STORE(828 | 0, 120 | 0, 4);
 SAFE_HEAP_STORE(832 | 0, 121 | 0, 4);
 SAFE_HEAP_STORE(836 | 0, 122 | 0, 4);
 SAFE_HEAP_STORE(840 | 0, 123 | 0, 4);
 SAFE_HEAP_STORE(844 | 0, 118 | 0, 4);
 SAFE_HEAP_STORE(848 | 0, 120 | 0, 4);
 SAFE_HEAP_STORE(852 | 0, 121 | 0, 4);
 SAFE_HEAP_STORE(856 | 0, 122 | 0, 4);
 $3 = SAFE_HEAP_LOAD(412 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE(872 | 0, $3 | 0, 4);
 return;
}

function _VP8LHtreeGroupsNew($num_htree_groups) {
 $num_htree_groups = $num_htree_groups | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $htree_groups = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $num_htree_groups;
 $2 = $1;
 $3 = ($2 | 0) < 0;
 $4 = $3 << 31 >> 31;
 $5 = _WebPSafeMalloc($2, $4, 548) | 0;
 $htree_groups = $5;
 $6 = $htree_groups;
 $7 = ($6 | 0) == (0 | 0);
 if ($7) {
  $0 = 0;
  $11 = $0;
  STACKTOP = sp;
  return $11 | 0;
 }
 $8 = $1;
 $9 = ($8 | 0) <= 65536;
 if (!$9) {
  ___assert_fail(14549 | 0, 14586 | 0, 31, 14613 | 0);
 }
 $10 = $htree_groups;
 $0 = $10;
 $11 = $0;
 STACKTOP = sp;
 return $11 | 0;
}

function _DC8uvNoLeft($dst) {
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $dc0 = 0, $i = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dst;
 $dc0 = 4;
 $i = 0;
 while (1) {
  $1 = $i;
  $2 = ($1 | 0) < 8;
  if (!$2) {
   break;
  }
  $3 = $i;
  $4 = $3 - 32 | 0;
  $5 = $0;
  $6 = $5 + $4 | 0;
  $7 = SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0;
  $8 = $7 & 255;
  $9 = $dc0;
  $10 = $9 + $8 | 0;
  $dc0 = $10;
  $11 = $i;
  $12 = $11 + 1 | 0;
  $i = $12;
 }
 $13 = $dc0;
 $14 = $13 >> 3;
 $15 = $14 & 255;
 $16 = $0;
 _Put8x8uv($15, $16);
 STACKTOP = sp;
 return;
}

function _WebPInitUpsamplers() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD(868 | 0, 4, 0) | 0 | 0;
 $1 = SAFE_HEAP_LOAD(412 | 0, 4, 0) | 0 | 0;
 $2 = ($0 | 0) == ($1 | 0);
 if ($2) {
  return;
 }
 SAFE_HEAP_STORE(764 | 0, 110 | 0, 4);
 SAFE_HEAP_STORE(768 | 0, 111 | 0, 4);
 SAFE_HEAP_STORE(772 | 0, 112 | 0, 4);
 SAFE_HEAP_STORE(776 | 0, 113 | 0, 4);
 SAFE_HEAP_STORE(780 | 0, 114 | 0, 4);
 SAFE_HEAP_STORE(784 | 0, 115 | 0, 4);
 SAFE_HEAP_STORE(788 | 0, 116 | 0, 4);
 SAFE_HEAP_STORE(792 | 0, 111 | 0, 4);
 SAFE_HEAP_STORE(796 | 0, 113 | 0, 4);
 SAFE_HEAP_STORE(800 | 0, 114 | 0, 4);
 SAFE_HEAP_STORE(804 | 0, 115 | 0, 4);
 $3 = SAFE_HEAP_LOAD(412 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE(868 | 0, $3 | 0, 4);
 return;
}

function _VE16($dst) {
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j = 0, dest = 0, label = 0, sp = 0, src = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dst;
 $j = 0;
 while (1) {
  $1 = $j;
  $2 = ($1 | 0) < 16;
  if (!$2) {
   break;
  }
  $3 = $0;
  $4 = $j;
  $5 = $4 << 5;
  $6 = $3 + $5 | 0;
  $7 = $0;
  $8 = $7 + -32 | 0;
  dest = $6;
  src = $8;
  stop = dest + 16 | 0;
  do {
   SAFE_HEAP_STORE(dest >> 0 | 0, SAFE_HEAP_LOAD(src >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
   dest = dest + 1 | 0;
   src = src + 1 | 0;
  } while ((dest | 0) < (stop | 0));
  $9 = $j;
  $10 = $9 + 1 | 0;
  $j = $10;
 }
 STACKTOP = sp;
 return;
}

function _WebPInitSamplers() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD(948 | 0, 4, 0) | 0 | 0;
 $1 = SAFE_HEAP_LOAD(412 | 0, 4, 0) | 0 | 0;
 $2 = ($0 | 0) == ($1 | 0);
 if ($2) {
  return;
 }
 SAFE_HEAP_STORE(876 | 0, 124 | 0, 4);
 SAFE_HEAP_STORE(880 | 0, 125 | 0, 4);
 SAFE_HEAP_STORE(884 | 0, 126 | 0, 4);
 SAFE_HEAP_STORE(888 | 0, 127 | 0, 4);
 SAFE_HEAP_STORE(892 | 0, 128 | 0, 4);
 SAFE_HEAP_STORE(896 | 0, 129 | 0, 4);
 SAFE_HEAP_STORE(900 | 0, 130 | 0, 4);
 SAFE_HEAP_STORE(904 | 0, 125 | 0, 4);
 SAFE_HEAP_STORE(908 | 0, 127 | 0, 4);
 SAFE_HEAP_STORE(912 | 0, 128 | 0, 4);
 SAFE_HEAP_STORE(916 | 0, 129 | 0, 4);
 $3 = SAFE_HEAP_LOAD(412 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE(948 | 0, $3 | 0, 4);
 return;
}

function _VFilter8($u, $v, $stride, $thresh, $ithresh, $hev_thresh) {
 $u = $u | 0;
 $v = $v | 0;
 $stride = $stride | 0;
 $thresh = $thresh | 0;
 $ithresh = $ithresh | 0;
 $hev_thresh = $hev_thresh | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $u;
 $1 = $v;
 $2 = $stride;
 $3 = $thresh;
 $4 = $ithresh;
 $5 = $hev_thresh;
 $6 = $0;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 _FilterLoop26($6, $7, 1, 8, $8, $9, $10);
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 _FilterLoop26($11, $12, 1, 8, $13, $14, $15);
 STACKTOP = sp;
 return;
}

function _HFilter8($u, $v, $stride, $thresh, $ithresh, $hev_thresh) {
 $u = $u | 0;
 $v = $v | 0;
 $stride = $stride | 0;
 $thresh = $thresh | 0;
 $ithresh = $ithresh | 0;
 $hev_thresh = $hev_thresh | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $u;
 $1 = $v;
 $2 = $stride;
 $3 = $thresh;
 $4 = $ithresh;
 $5 = $hev_thresh;
 $6 = $0;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 $10 = $5;
 _FilterLoop26($6, 1, $7, 8, $8, $9, $10);
 $11 = $1;
 $12 = $2;
 $13 = $3;
 $14 = $4;
 $15 = $5;
 _FilterLoop26($11, 1, $12, 8, $13, $14, $15);
 STACKTOP = sp;
 return;
}

function _DC16NoTop($dst) {
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $DC = 0, $j = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dst;
 $DC = 8;
 $j = 0;
 while (1) {
  $1 = $j;
  $2 = ($1 | 0) < 16;
  if (!$2) {
   break;
  }
  $3 = $j;
  $4 = $3 << 5;
  $5 = -1 + $4 | 0;
  $6 = $0;
  $7 = $6 + $5 | 0;
  $8 = SAFE_HEAP_LOAD($7 >> 0 | 0, 1, 0) | 0 | 0;
  $9 = $8 & 255;
  $10 = $DC;
  $11 = $10 + $9 | 0;
  $DC = $11;
  $12 = $j;
  $13 = $12 + 1 | 0;
  $j = $13;
 }
 $14 = $DC;
 $15 = $14 >> 4;
 $16 = $0;
 _Put16($15, $16);
 STACKTOP = sp;
 return;
}

function _DC16NoLeft($dst) {
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $DC = 0, $i = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dst;
 $DC = 8;
 $i = 0;
 while (1) {
  $1 = $i;
  $2 = ($1 | 0) < 16;
  if (!$2) {
   break;
  }
  $3 = $i;
  $4 = $3 - 32 | 0;
  $5 = $0;
  $6 = $5 + $4 | 0;
  $7 = SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0;
  $8 = $7 & 255;
  $9 = $DC;
  $10 = $9 + $8 | 0;
  $DC = $10;
  $11 = $i;
  $12 = $11 + 1 | 0;
  $i = $12;
 }
 $13 = $DC;
 $14 = $13 >> 4;
 $15 = $0;
 _Put16($14, $15);
 STACKTOP = sp;
 return;
}

function _memset(ptr, value, num) {
 ptr = ptr | 0;
 value = value | 0;
 num = num | 0;
 var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
 stop = ptr + num | 0;
 if ((num | 0) >= 20) {
  value = value & 255;
  unaligned = ptr & 3;
  value4 = value | value << 8 | value << 16 | value << 24;
  stop4 = stop & ~3;
  if (unaligned) {
   unaligned = ptr + 4 - unaligned | 0;
   while ((ptr | 0) < (unaligned | 0)) {
    SAFE_HEAP_STORE(ptr | 0, value | 0, 1);
    ptr = ptr + 1 | 0;
   }
  }
  while ((ptr | 0) < (stop4 | 0)) {
   SAFE_HEAP_STORE(ptr | 0, value4 | 0, 4);
   ptr = ptr + 4 | 0;
  }
 }
 while ((ptr | 0) < (stop | 0)) {
  SAFE_HEAP_STORE(ptr | 0, value | 0, 1);
  ptr = ptr + 1 | 0;
 }
 return ptr - num | 0;
}

function _CheckMode($mb_x, $mb_y, $mode) {
 $mb_x = $mb_x | 0;
 $mb_y = $mb_y | 0;
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $mb_x;
 $2 = $mb_y;
 $3 = $mode;
 $4 = $3;
 $5 = ($4 | 0) == 0;
 do {
  if ($5) {
   $6 = $1;
   $7 = ($6 | 0) == 0;
   $8 = $2;
   $9 = ($8 | 0) == 0;
   if ($7) {
    $10 = $9 ? 6 : 5;
    $0 = $10;
    break;
   } else {
    $11 = $9 ? 4 : 0;
    $0 = $11;
    break;
   }
  } else {
   $12 = $3;
   $0 = $12;
  }
 } while (0);
 $13 = $0;
 STACKTOP = sp;
 return $13 | 0;
}

function _VP8LColorCacheLookup($cc, $key) {
 $cc = $cc | 0;
 $key = $key | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $cc;
 $1 = $key;
 $2 = $1;
 $3 = $0;
 $4 = $3 + 8 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = $2 >>> $5;
 $7 = ($6 | 0) == 0;
 if ($7) {
  $8 = $1;
  $9 = $0;
  $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
  $11 = $10 + ($8 << 2) | 0;
  $12 = SAFE_HEAP_LOAD($11 | 0, 4, 0) | 0 | 0;
  STACKTOP = sp;
  return $12 | 0;
 } else {
  ___assert_fail(7725 | 0, 7755 | 0, 35, 7789 | 0);
 }
 return 0 | 0;
}

function _VP8SetError($dec, $error, $msg) {
 $dec = $dec | 0;
 $error = $error | 0;
 $msg = $msg | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $error;
 $2 = $msg;
 $3 = $0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = ($4 | 0) == 0;
 if (!$5) {
  STACKTOP = sp;
  return 0;
 }
 $6 = $1;
 $7 = $0;
 SAFE_HEAP_STORE($7 | 0, $6 | 0, 4);
 $8 = $2;
 $9 = $0;
 $10 = $9 + 8 | 0;
 SAFE_HEAP_STORE($10 | 0, $8 | 0, 4);
 $11 = $0;
 $12 = $11 + 4 | 0;
 SAFE_HEAP_STORE($12 | 0, 0 | 0, 4);
 STACKTOP = sp;
 return 0;
}

function _VP8InitIoInternal($io, $version) {
 $io = $io | 0;
 $version = $version | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $io;
 $2 = $version;
 $3 = $2;
 $4 = $3 >> 8;
 $5 = ($4 | 0) != 2;
 if ($5) {
  $0 = 0;
  $9 = $0;
  STACKTOP = sp;
  return $9 | 0;
 }
 $6 = $1;
 $7 = ($6 | 0) != (0 | 0);
 if ($7) {
  $8 = $1;
  dest = $8;
  stop = dest + 108 | 0;
  do {
   SAFE_HEAP_STORE(dest | 0, 0 | 0 | 0, 4);
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
 }
 $0 = 1;
 $9 = $0;
 STACKTOP = sp;
 return $9 | 0;
}

function _VP8RGBToY($r, $g, $b, $rounding) {
 $r = $r | 0;
 $g = $g | 0;
 $b = $b | 0;
 $rounding = $rounding | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $luma = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $r;
 $1 = $g;
 $2 = $b;
 $3 = $rounding;
 $4 = $0;
 $5 = $4 * 16839 | 0;
 $6 = $1;
 $7 = $6 * 33059 | 0;
 $8 = $5 + $7 | 0;
 $9 = $2;
 $10 = $9 * 6420 | 0;
 $11 = $8 + $10 | 0;
 $luma = $11;
 $12 = $luma;
 $13 = $3;
 $14 = $12 + $13 | 0;
 $15 = $14 + 1048576 | 0;
 $16 = $15 >> 16;
 STACKTOP = sp;
 return $16 | 0;
}

function _GetNextKey($key, $len) {
 $key = $key | 0;
 $len = $len | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $step = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $key;
 $1 = $len;
 $2 = $1;
 $3 = $2 - 1 | 0;
 $4 = 1 << $3;
 $step = $4;
 while (1) {
  $5 = $0;
  $6 = $step;
  $7 = $5 & $6;
  $8 = ($7 | 0) != 0;
  if (!$8) {
   break;
  }
  $9 = $step;
  $10 = $9 >>> 1;
  $step = $10;
 }
 $11 = $0;
 $12 = $step;
 $13 = $12 - 1 | 0;
 $14 = $11 & $13;
 $15 = $step;
 $16 = $14 + $15 | 0;
 STACKTOP = sp;
 return $16 | 0;
}

function _GradientPredictor($a, $b, $c) {
 $a = $a | 0;
 $b = $b | 0;
 $c = $c | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $15 = 0, $16 = 0, $17 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $g = 0, label = 0;
 var sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $c;
 $3 = $0;
 $4 = $3 & 255;
 $5 = $1;
 $6 = $5 & 255;
 $7 = $4 + $6 | 0;
 $8 = $2;
 $9 = $8 & 255;
 $10 = $7 - $9 | 0;
 $g = $10;
 $11 = $g;
 $12 = $11 & -256;
 $13 = ($12 | 0) == 0;
 $14 = $g;
 $15 = ($14 | 0) < 0;
 $16 = $15 ? 0 : 255;
 $17 = $13 ? $14 : $16;
 STACKTOP = sp;
 return $17 | 0;
}

function _VP8InitFrame($dec, $io) {
 $dec = $dec | 0;
 $io = $io | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $dec;
 $2 = $io;
 $3 = $1;
 $4 = _InitThreadContext($3) | 0;
 $5 = ($4 | 0) != 0;
 do {
  if ($5) {
   $6 = $1;
   $7 = _AllocateMemory($6) | 0;
   $8 = ($7 | 0) != 0;
   if ($8) {
    $9 = $1;
    $10 = $2;
    _InitIo($9, $10);
    _VP8DspInit();
    $0 = 1;
    break;
   } else {
    $0 = 0;
    break;
   }
  } else {
   $0 = 0;
  }
 } while (0);
 $11 = $0;
 STACKTOP = sp;
 return $11 | 0;
}

function _SimpleVFilter16i($p, $stride, $thresh) {
 $p = $p | 0;
 $stride = $stride | 0;
 $thresh = $thresh | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $p;
 $1 = $stride;
 $2 = $thresh;
 $k = 3;
 while (1) {
  $3 = $k;
  $4 = ($3 | 0) > 0;
  if (!$4) {
   break;
  }
  $5 = $1;
  $6 = $5 << 2;
  $7 = $0;
  $8 = $7 + $6 | 0;
  $0 = $8;
  $9 = $0;
  $10 = $1;
  $11 = $2;
  _SimpleVFilter16($9, $10, $11);
  $12 = $k;
  $13 = $12 + -1 | 0;
  $k = $13;
 }
 STACKTOP = sp;
 return;
}

function _HorizontalUnfilter($width, $height, $stride, $row, $num_rows, $data) {
 $width = $width | 0;
 $height = $height | 0;
 $stride = $stride | 0;
 $row = $row | 0;
 $num_rows = $num_rows | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $width;
 $1 = $height;
 $2 = $stride;
 $3 = $row;
 $4 = $num_rows;
 $5 = $data;
 $6 = $5;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 _DoHorizontalFilter($6, $7, $8, $9, $10, $11, 1, $12);
 STACKTOP = sp;
 return;
}

function _VerticalUnfilter($width, $height, $stride, $row, $num_rows, $data) {
 $width = $width | 0;
 $height = $height | 0;
 $stride = $stride | 0;
 $row = $row | 0;
 $num_rows = $num_rows | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $width;
 $1 = $height;
 $2 = $stride;
 $3 = $row;
 $4 = $num_rows;
 $5 = $data;
 $6 = $5;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 _DoVerticalFilter($6, $7, $8, $9, $10, $11, 1, $12);
 STACKTOP = sp;
 return;
}

function _GradientUnfilter($width, $height, $stride, $row, $num_rows, $data) {
 $width = $width | 0;
 $height = $height | 0;
 $stride = $stride | 0;
 $row = $row | 0;
 $num_rows = $num_rows | 0;
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $width;
 $1 = $height;
 $2 = $stride;
 $3 = $row;
 $4 = $num_rows;
 $5 = $data;
 $6 = $5;
 $7 = $0;
 $8 = $1;
 $9 = $2;
 $10 = $3;
 $11 = $4;
 $12 = $5;
 _DoGradientFilter($6, $7, $8, $9, $10, $11, 1, $12);
 STACKTOP = sp;
 return;
}

function _End($worker) {
 $worker = $worker | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $worker;
 $1 = $0;
 $2 = $1 + 4 | 0;
 SAFE_HEAP_STORE($2 | 0, 0 | 0, 4);
 $3 = $0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = ($4 | 0) == (0 | 0);
 if (!$5) {
  ___assert_fail(14865 | 0, 14887 | 0, 332, 14913 | 0);
 }
 $6 = $0;
 $7 = $6 + 4 | 0;
 $8 = SAFE_HEAP_LOAD($7 | 0, 4, 0) | 0 | 0;
 $9 = ($8 | 0) == 0;
 if ($9) {
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(14917 | 0, 14887 | 0, 334, 14913 | 0);
 }
}

function _WebPFreeDecBuffer($buffer) {
 $buffer = $buffer | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $buffer;
 $1 = $0;
 $2 = ($1 | 0) != (0 | 0);
 if (!$2) {
  STACKTOP = sp;
  return;
 }
 $3 = $0;
 $4 = $3 + 12 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = ($5 | 0) != 0;
 if (!$6) {
  $7 = $0;
  $8 = $7 + 80 | 0;
  $9 = SAFE_HEAP_LOAD($8 | 0, 4, 0) | 0 | 0;
  _WebPSafeFree($9);
 }
 $10 = $0;
 $11 = $10 + 80 | 0;
 SAFE_HEAP_STORE($11 | 0, 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function _WebPUint32ToMem317($ptr, $val) {
 $ptr = $ptr | 0;
 $val = $val | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = sp;
 $0 = $ptr;
 SAFE_HEAP_STORE($1 | 0, $val | 0, 4);
 $2 = $0;
 {}
 SAFE_HEAP_STORE($2 >> 0 | 0, SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 SAFE_HEAP_STORE($2 + 1 >> 0 | 0, SAFE_HEAP_LOAD($1 + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 SAFE_HEAP_STORE($2 + 2 >> 0 | 0, SAFE_HEAP_LOAD($1 + 2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 SAFE_HEAP_STORE($2 + 3 >> 0 | 0, SAFE_HEAP_LOAD($1 + 3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 STACKTOP = sp;
 return;
}

function _WebPUint32ToMem($ptr, $val) {
 $ptr = $ptr | 0;
 $val = $val | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = sp;
 $0 = $ptr;
 SAFE_HEAP_STORE($1 | 0, $val | 0, 4);
 $2 = $0;
 {}
 SAFE_HEAP_STORE($2 >> 0 | 0, SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 SAFE_HEAP_STORE($2 + 1 >> 0 | 0, SAFE_HEAP_LOAD($1 + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 SAFE_HEAP_STORE($2 + 2 >> 0 | 0, SAFE_HEAP_LOAD($1 + 2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 SAFE_HEAP_STORE($2 + 3 >> 0 | 0, SAFE_HEAP_LOAD($1 + 3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 STACKTOP = sp;
 return;
}

function _NzCodeBits($nz_coeffs, $nz, $dc_nz) {
 $nz_coeffs = $nz_coeffs | 0;
 $nz = $nz | 0;
 $dc_nz = $dc_nz | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $nz_coeffs;
 $1 = $nz;
 $2 = $dc_nz;
 $3 = $0;
 $4 = $3 << 2;
 $0 = $4;
 $5 = $1;
 $6 = ($5 | 0) > 3;
 if ($6) {
  $13 = 3;
 } else {
  $7 = $1;
  $8 = ($7 | 0) > 1;
  $9 = $2;
  $10 = $8 ? 2 : $9;
  $13 = $10;
 }
 $11 = $0;
 $12 = $11 | $13;
 $0 = $12;
 $14 = $0;
 STACKTOP = sp;
 return $14 | 0;
}

function _VP8RGBToU($r, $g, $b, $rounding) {
 $r = $r | 0;
 $g = $g | 0;
 $b = $b | 0;
 $rounding = $rounding | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $u = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $r;
 $1 = $g;
 $2 = $b;
 $3 = $rounding;
 $4 = $0;
 $5 = Math_imul(-9719, $4) | 0;
 $6 = $1;
 $7 = $6 * 19081 | 0;
 $8 = $5 - $7 | 0;
 $9 = $2;
 $10 = $9 * 28800 | 0;
 $11 = $8 + $10 | 0;
 $u = $11;
 $12 = $u;
 $13 = $3;
 $14 = _VP8ClipUV($12, $13) | 0;
 STACKTOP = sp;
 return $14 | 0;
}

function _VP8LColorCacheInsert($cc, $argb) {
 $cc = $cc | 0;
 $argb = $argb | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $key = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $cc;
 $1 = $argb;
 $2 = $1;
 $3 = Math_imul(506832829, $2) | 0;
 $4 = $0;
 $5 = $4 + 4 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = $3 >>> $6;
 $key = $7;
 $8 = $1;
 $9 = $key;
 $10 = $0;
 $11 = SAFE_HEAP_LOAD($10 | 0, 4, 0) | 0 | 0;
 $12 = $11 + ($9 << 2) | 0;
 SAFE_HEAP_STORE($12 | 0, $8 | 0, 4);
 STACKTOP = sp;
 return;
}

function _VP8RGBToV($r, $g, $b, $rounding) {
 $r = $r | 0;
 $g = $g | 0;
 $b = $b | 0;
 $rounding = $rounding | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $14 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $r;
 $1 = $g;
 $2 = $b;
 $3 = $rounding;
 $4 = $0;
 $5 = $4 * 28800 | 0;
 $6 = $1;
 $7 = $6 * 24116 | 0;
 $8 = $5 - $7 | 0;
 $9 = $2;
 $10 = $9 * 4684 | 0;
 $11 = $8 - $10 | 0;
 $v = $11;
 $12 = $v;
 $13 = $3;
 $14 = _VP8ClipUV($12, $13) | 0;
 STACKTOP = sp;
 return $14 | 0;
}

function _HE16($dst) {
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dst;
 $j = 16;
 while (1) {
  $1 = $j;
  $2 = ($1 | 0) > 0;
  if (!$2) {
   break;
  }
  $3 = $0;
  $4 = $0;
  $5 = $4 + -1 | 0;
  $6 = SAFE_HEAP_LOAD($5 >> 0 | 0, 1, 0) | 0 | 0;
  $7 = $6 & 255;
  $8 = $7 & 255;
  _memset($3 | 0, $8 | 0, 16) | 0;
  $9 = $0;
  $10 = $9 + 32 | 0;
  $0 = $10;
  $11 = $j;
  $12 = $11 + -1 | 0;
  $j = $12;
 }
 STACKTOP = sp;
 return;
}

function _Predictor10($left, $top) {
 $left = $left | 0;
 $top = $top | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pred = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $left;
 $1 = $top;
 $2 = $0;
 $3 = $1;
 $4 = $3 + -4 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = $1;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = $1;
 $9 = $8 + 4 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $11 = _Average4($2, $5, $7, $10) | 0;
 $pred = $11;
 $12 = $pred;
 STACKTOP = sp;
 return $12 | 0;
}

function _HE8uv($dst) {
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dst;
 $j = 0;
 while (1) {
  $1 = $j;
  $2 = ($1 | 0) < 8;
  if (!$2) {
   break;
  }
  $3 = $0;
  $4 = $0;
  $5 = $4 + -1 | 0;
  $6 = SAFE_HEAP_LOAD($5 >> 0 | 0, 1, 0) | 0 | 0;
  $7 = $6 & 255;
  $8 = $7 & 255;
  _memset($3 | 0, $8 | 0, 8) | 0;
  $9 = $0;
  $10 = $9 + 32 | 0;
  $0 = $10;
  $11 = $j;
  $12 = $11 + 1 | 0;
  $j = $12;
 }
 STACKTOP = sp;
 return;
}

function _Copy32b($dst, $src) {
 $dst = $dst | 0;
 $src = $src | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dst;
 $1 = $src;
 $2 = $0;
 $3 = $1;
 {}
 SAFE_HEAP_STORE($2 >> 0 | 0, SAFE_HEAP_LOAD($3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 SAFE_HEAP_STORE($2 + 1 >> 0 | 0, SAFE_HEAP_LOAD($3 + 1 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 SAFE_HEAP_STORE($2 + 2 >> 0 | 0, SAFE_HEAP_LOAD($3 + 2 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 SAFE_HEAP_STORE($2 + 3 >> 0 | 0, SAFE_HEAP_LOAD($3 + 3 >> 0 | 0, 1, 0) | 0 | 0 | 0, 1);
 STACKTOP = sp;
 return;
}

function _VP8LPrefetchBits937($br) {
 $br = $br | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $br;
 $1 = $0;
 $2 = $1;
 $3 = $2;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = $2 + 4 | 0;
 $6 = $5;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = $0;
 $9 = $8 + 20 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $11 = $10 & 63;
 $12 = _bitshift64Lshr($4 | 0, $7 | 0, $11 | 0) | 0;
 $13 = tempRet0;
 STACKTOP = sp;
 return $12 | 0;
}

function _SimpleHFilter16i($p, $stride, $thresh) {
 $p = $p | 0;
 $stride = $stride | 0;
 $thresh = $thresh | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $k = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $p;
 $1 = $stride;
 $2 = $thresh;
 $k = 3;
 while (1) {
  $3 = $k;
  $4 = ($3 | 0) > 0;
  if (!$4) {
   break;
  }
  $5 = $0;
  $6 = $5 + 4 | 0;
  $0 = $6;
  $7 = $0;
  $8 = $1;
  $9 = $2;
  _SimpleHFilter16($7, $8, $9);
  $10 = $k;
  $11 = $10 + -1 | 0;
  $k = $11;
 }
 STACKTOP = sp;
 return;
}

function _TransformUV($in, $dst) {
 $in = $in | 0;
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $in;
 $1 = $dst;
 $2 = SAFE_HEAP_LOAD(420 | 0, 4, 0) | 0 | 0;
 $3 = $0;
 $4 = $1;
 FUNCTION_TABLE_viii[(SAFE_FT_MASK($2 | 0, 255 | 0) | 0) & 255]($3, $4, 1);
 $5 = SAFE_HEAP_LOAD(420 | 0, 4, 0) | 0 | 0;
 $6 = $0;
 $7 = $6 + 64 | 0;
 $8 = $1;
 $9 = $8 + 128 | 0;
 FUNCTION_TABLE_viii[(SAFE_FT_MASK($5 | 0, 255 | 0) | 0) & 255]($7, $9, 1);
 STACKTOP = sp;
 return;
}

function _VP8LPrefetchBits($br) {
 $br = $br | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $br;
 $1 = $0;
 $2 = $1;
 $3 = $2;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = $2 + 4 | 0;
 $6 = $5;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = $0;
 $9 = $8 + 20 | 0;
 $10 = SAFE_HEAP_LOAD($9 | 0, 4, 0) | 0 | 0;
 $11 = $10 & 63;
 $12 = _bitshift64Lshr($4 | 0, $7 | 0, $11 | 0) | 0;
 $13 = tempRet0;
 STACKTOP = sp;
 return $12 | 0;
}

function _VP8FiltersInit() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD(636 | 0, 4, 0) | 0 | 0;
 $1 = SAFE_HEAP_LOAD(412 | 0, 4, 0) | 0 | 0;
 $2 = ($0 | 0) == ($1 | 0);
 if ($2) {
  return;
 }
 SAFE_HEAP_STORE(604 | 0, 0 | 0, 4);
 SAFE_HEAP_STORE(608 | 0, 77 | 0, 4);
 SAFE_HEAP_STORE(612 | 0, 78 | 0, 4);
 SAFE_HEAP_STORE(616 | 0, 79 | 0, 4);
 SAFE_HEAP_STORE(620 | 0, 0 | 0, 4);
 SAFE_HEAP_STORE(624 | 0, 80 | 0, 4);
 SAFE_HEAP_STORE(628 | 0, 81 | 0, 4);
 SAFE_HEAP_STORE(632 | 0, 82 | 0, 4);
 $3 = SAFE_HEAP_LOAD(412 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE(636 | 0, $3 | 0, 4);
 return;
}

function _HorizontalFilter($data, $width, $height, $stride, $filtered_data) {
 $data = $data | 0;
 $width = $width | 0;
 $height = $height | 0;
 $stride = $stride | 0;
 $filtered_data = $filtered_data | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $data;
 $1 = $width;
 $2 = $height;
 $3 = $stride;
 $4 = $filtered_data;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $2;
 $10 = $4;
 _DoHorizontalFilter($5, $6, $7, $8, 0, $9, 0, $10);
 STACKTOP = sp;
 return;
}

function _WebPIsPremultipliedMode114($mode) {
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $mode;
 $1 = $0;
 $2 = ($1 | 0) == 7;
 $3 = $0;
 $4 = ($3 | 0) == 8;
 $or$cond = $2 | $4;
 $5 = $0;
 $6 = ($5 | 0) == 9;
 $or$cond3 = $or$cond | $6;
 if ($or$cond3) {
  $10 = 1;
  $9 = $10 & 1;
  STACKTOP = sp;
  return $9 | 0;
 }
 $7 = $0;
 $8 = ($7 | 0) == 10;
 $10 = $8;
 $9 = $10 & 1;
 STACKTOP = sp;
 return $9 | 0;
}

function _VerticalFilter($data, $width, $height, $stride, $filtered_data) {
 $data = $data | 0;
 $width = $width | 0;
 $height = $height | 0;
 $stride = $stride | 0;
 $filtered_data = $filtered_data | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $data;
 $1 = $width;
 $2 = $height;
 $3 = $stride;
 $4 = $filtered_data;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $2;
 $10 = $4;
 _DoVerticalFilter($5, $6, $7, $8, 0, $9, 0, $10);
 STACKTOP = sp;
 return;
}

function _Put8x8uv($value, $dst) {
 $value = $value | 0;
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $value;
 $1 = $dst;
 $j = 0;
 while (1) {
  $2 = $j;
  $3 = ($2 | 0) < 8;
  if (!$3) {
   break;
  }
  $4 = $1;
  $5 = $j;
  $6 = $5 << 5;
  $7 = $4 + $6 | 0;
  $8 = $0;
  $9 = $8 & 255;
  $10 = $9 & 255;
  _memset($7 | 0, $10 | 0, 8) | 0;
  $11 = $j;
  $12 = $11 + 1 | 0;
  $j = $12;
 }
 STACKTOP = sp;
 return;
}

function _GradientFilter($data, $width, $height, $stride, $filtered_data) {
 $data = $data | 0;
 $width = $width | 0;
 $height = $height | 0;
 $stride = $stride | 0;
 $filtered_data = $filtered_data | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $data;
 $1 = $width;
 $2 = $height;
 $3 = $stride;
 $4 = $filtered_data;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $2;
 $10 = $4;
 _DoGradientFilter($5, $6, $7, $8, 0, $9, 0, $10);
 STACKTOP = sp;
 return;
}

function _WebPIsPremultipliedMode($mode) {
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $or$cond = 0, $or$cond3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $mode;
 $1 = $0;
 $2 = ($1 | 0) == 7;
 $3 = $0;
 $4 = ($3 | 0) == 8;
 $or$cond = $2 | $4;
 $5 = $0;
 $6 = ($5 | 0) == 9;
 $or$cond3 = $or$cond | $6;
 if ($or$cond3) {
  $10 = 1;
  $9 = $10 & 1;
  STACKTOP = sp;
  return $9 | 0;
 }
 $7 = $0;
 $8 = ($7 | 0) == 10;
 $10 = $8;
 $9 = $10 & 1;
 STACKTOP = sp;
 return $9 | 0;
}

function _Sync($worker) {
 $worker = $worker | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $worker;
 $1 = $0;
 $2 = $1 + 4 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = $3 >>> 0 <= 1;
 if ($4) {
  $5 = $0;
  $6 = $5 + 20 | 0;
  $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
  $8 = ($7 | 0) != 0;
  $9 = $8 ^ 1;
  $10 = $9 & 1;
  STACKTOP = sp;
  return $10 | 0;
 } else {
  ___assert_fail(14943 | 0, 14887 | 0, 264, 14965 | 0);
 }
 return 0 | 0;
}

function _WebPInitCustomIo($params, $io) {
 $params = $params | 0;
 $io = $io | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $params;
 $1 = $io;
 $2 = $1;
 $3 = $2 + 44 | 0;
 SAFE_HEAP_STORE($3 | 0, 11 | 0, 4);
 $4 = $1;
 $5 = $4 + 48 | 0;
 SAFE_HEAP_STORE($5 | 0, 12 | 0, 4);
 $6 = $1;
 $7 = $6 + 52 | 0;
 SAFE_HEAP_STORE($7 | 0, 13 | 0, 4);
 $8 = $0;
 $9 = $1;
 $10 = $9 + 40 | 0;
 SAFE_HEAP_STORE($10 | 0, $8 | 0, 4);
 STACKTOP = sp;
 return;
}

function _VP8LNew() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $dec = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = _WebPSafeCalloc(1, 0, 272) | 0;
 $dec = $1;
 $2 = $dec;
 $3 = ($2 | 0) == (0 | 0);
 if ($3) {
  $0 = 0;
  $8 = $0;
  STACKTOP = sp;
  return $8 | 0;
 } else {
  $4 = $dec;
  SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
  $5 = $dec;
  $6 = $5 + 4 | 0;
  SAFE_HEAP_STORE($6 | 0, 2 | 0, 4);
  _VP8LDspInit();
  $7 = $dec;
  $0 = $7;
  $8 = $0;
  STACKTOP = sp;
  return $8 | 0;
 }
 return 0 | 0;
}

function _WebPInitAlphaProcessing() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD(408 | 0, 4, 0) | 0 | 0;
 $1 = SAFE_HEAP_LOAD(412 | 0, 4, 0) | 0 | 0;
 $2 = ($0 | 0) == ($1 | 0);
 if ($2) {
  return;
 }
 SAFE_HEAP_STORE(380 | 0, 28 | 0, 4);
 SAFE_HEAP_STORE(384 | 0, 29 | 0, 4);
 SAFE_HEAP_STORE(388 | 0, 30 | 0, 4);
 SAFE_HEAP_STORE(392 | 0, 31 | 0, 4);
 SAFE_HEAP_STORE(396 | 0, 32 | 0, 4);
 SAFE_HEAP_STORE(400 | 0, 33 | 0, 4);
 SAFE_HEAP_STORE(404 | 0, 34 | 0, 4);
 $3 = SAFE_HEAP_LOAD(412 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE(408 | 0, $3 | 0, 4);
 return;
}

function _WebPRescalerExport($rescaler) {
 $rescaler = $rescaler | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $total_exported = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $rescaler;
 $total_exported = 0;
 while (1) {
  $1 = $0;
  $2 = _WebPRescalerHasPendingOutput1038($1) | 0;
  $3 = ($2 | 0) != 0;
  if (!$3) {
   break;
  }
  $4 = $0;
  _WebPRescalerExportRow($4);
  $5 = $total_exported;
  $6 = $5 + 1 | 0;
  $total_exported = $6;
 }
 $7 = $total_exported;
 STACKTOP = sp;
 return $7 | 0;
}

function _VP8YuvToRgba373($y, $u, $v, $rgba) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 $rgba = $rgba | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $rgba;
 $4 = $0;
 $5 = $4 & 255;
 $6 = $1;
 $7 = $6 & 255;
 $8 = $2;
 $9 = $8 & 255;
 $10 = $3;
 _VP8YuvToRgb367($5, $7, $9, $10);
 $11 = $3;
 $12 = $11 + 3 | 0;
 SAFE_HEAP_STORE($12 >> 0 | 0, -1 | 0, 1);
 STACKTOP = sp;
 return;
}

function _VP8YuvToBgra375($y, $u, $v, $bgra) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 $bgra = $bgra | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $bgra;
 $4 = $0;
 $5 = $4 & 255;
 $6 = $1;
 $7 = $6 & 255;
 $8 = $2;
 $9 = $8 & 255;
 $10 = $3;
 _VP8YuvToBgr374($5, $7, $9, $10);
 $11 = $3;
 $12 = $11 + 3 | 0;
 SAFE_HEAP_STORE($12 >> 0 | 0, -1 | 0, 1);
 STACKTOP = sp;
 return;
}

function _VP8YuvToArgb376($y, $u, $v, $argb) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 $argb = $argb | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $argb;
 $4 = $3;
 SAFE_HEAP_STORE($4 >> 0 | 0, -1 | 0, 1);
 $5 = $0;
 $6 = $5 & 255;
 $7 = $1;
 $8 = $7 & 255;
 $9 = $2;
 $10 = $9 & 255;
 $11 = $3;
 $12 = $11 + 1 | 0;
 _VP8YuvToRgb367($6, $8, $10, $12);
 STACKTOP = sp;
 return;
}

function _VP8YuvToRgba($y, $u, $v, $rgba) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 $rgba = $rgba | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $rgba;
 $4 = $0;
 $5 = $4 & 255;
 $6 = $1;
 $7 = $6 & 255;
 $8 = $2;
 $9 = $8 & 255;
 $10 = $3;
 _VP8YuvToRgb($5, $7, $9, $10);
 $11 = $3;
 $12 = $11 + 3 | 0;
 SAFE_HEAP_STORE($12 >> 0 | 0, -1 | 0, 1);
 STACKTOP = sp;
 return;
}

function _VP8YuvToBgra($y, $u, $v, $bgra) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 $bgra = $bgra | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $bgra;
 $4 = $0;
 $5 = $4 & 255;
 $6 = $1;
 $7 = $6 & 255;
 $8 = $2;
 $9 = $8 & 255;
 $10 = $3;
 _VP8YuvToBgr($5, $7, $9, $10);
 $11 = $3;
 $12 = $11 + 3 | 0;
 SAFE_HEAP_STORE($12 >> 0 | 0, -1 | 0, 1);
 STACKTOP = sp;
 return;
}

function _VP8YuvToArgb($y, $u, $v, $argb) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 $argb = $argb | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $argb;
 $4 = $3;
 SAFE_HEAP_STORE($4 >> 0 | 0, -1 | 0, 1);
 $5 = $0;
 $6 = $5 & 255;
 $7 = $1;
 $8 = $7 & 255;
 $9 = $2;
 $10 = $9 & 255;
 $11 = $3;
 $12 = $11 + 1 | 0;
 _VP8YuvToRgb($6, $8, $10, $12);
 STACKTOP = sp;
 return;
}

function _VP8GetValue($br, $bits) {
 $br = $br | 0;
 $bits = $bits | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $br;
 $1 = $bits;
 $v = 0;
 while (1) {
  $2 = $1;
  $3 = $2 + -1 | 0;
  $1 = $3;
  $4 = ($2 | 0) > 0;
  if (!$4) {
   break;
  }
  $5 = $0;
  $6 = _VP8GetBit929($5, 128) | 0;
  $7 = $1;
  $8 = $6 << $7;
  $9 = $v;
  $10 = $9 | $8;
  $v = $10;
 }
 $11 = $v;
 STACKTOP = sp;
 return $11 | 0;
}

function _VP8ClipUV($uv, $rounding) {
 $uv = $uv | 0;
 $rounding = $rounding | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $uv;
 $1 = $rounding;
 $2 = $0;
 $3 = $1;
 $4 = $2 + $3 | 0;
 $5 = $4 + 33554432 | 0;
 $6 = $5 >> 18;
 $0 = $6;
 $7 = $0;
 $8 = $7 & -256;
 $9 = ($8 | 0) == 0;
 $10 = $0;
 $11 = ($10 | 0) < 0;
 $12 = $11 ? 0 : 255;
 $13 = $9 ? $10 : $12;
 STACKTOP = sp;
 return $13 | 0;
}

function _Sub3($a, $b, $c) {
 $a = $a | 0;
 $b = $b | 0;
 $c = $c | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $13 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pa = 0, $pb = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $c;
 $3 = $1;
 $4 = $2;
 $5 = $3 - $4 | 0;
 $pb = $5;
 $6 = $0;
 $7 = $2;
 $8 = $6 - $7 | 0;
 $pa = $8;
 $9 = $pb;
 $10 = Math_abs($9 | 0) | 0;
 $11 = $pa;
 $12 = Math_abs($11 | 0) | 0;
 $13 = $10 - $12 | 0;
 STACKTOP = sp;
 return $13 | 0;
}

function _VP8YUVToG371($y, $u, $v) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $0;
 $4 = _MultHi370($3, 19077) | 0;
 $5 = $1;
 $6 = _MultHi370($5, 6419) | 0;
 $7 = $4 - $6 | 0;
 $8 = $2;
 $9 = _MultHi370($8, 13320) | 0;
 $10 = $7 - $9 | 0;
 $11 = $10 + 8708 | 0;
 $12 = _VP8Clip8369($11) | 0;
 STACKTOP = sp;
 return $12 | 0;
}

function _Mult($x, $mult) {
 $x = $x | 0;
 $mult = $mult | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $v = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $x;
 $1 = $mult;
 $2 = $0;
 $3 = $2 & 255;
 $4 = $1;
 $5 = Math_imul($3, $4) | 0;
 $6 = $5 + 8388608 | 0;
 $7 = $6 >>> 24;
 $v = $7;
 $8 = $v;
 $9 = $8 >>> 0 <= 255;
 if ($9) {
  $10 = $v;
  STACKTOP = sp;
  return $10 | 0;
 } else {
  ___assert_fail(9155 | 0, 9164 | 0, 28, 9198 | 0);
 }
 return 0 | 0;
}

function _Put16($v, $dst) {
 $v = $v | 0;
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $j = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $v;
 $1 = $dst;
 $j = 0;
 while (1) {
  $2 = $j;
  $3 = ($2 | 0) < 16;
  if (!$3) {
   break;
  }
  $4 = $1;
  $5 = $j;
  $6 = $5 << 5;
  $7 = $4 + $6 | 0;
  $8 = $0;
  $9 = $8 & 255;
  _memset($7 | 0, $9 | 0, 16) | 0;
  $10 = $j;
  $11 = $10 + 1 | 0;
  $j = $11;
 }
 STACKTOP = sp;
 return;
}

function _Init($worker) {
 $worker = $worker | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $worker;
 $1 = $0;
 {}
 SAFE_HEAP_STORE($1 | 0, 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($1 + 4 | 0, 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($1 + 8 | 0, 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($1 + 12 | 0, 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($1 + 16 | 0, 0 | 0 | 0, 4);
 SAFE_HEAP_STORE($1 + 20 | 0, 0 | 0 | 0, 4);
 $2 = $0;
 $3 = $2 + 4 | 0;
 SAFE_HEAP_STORE($3 | 0, 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function _VFilter16($p, $stride, $thresh, $ithresh, $hev_thresh) {
 $p = $p | 0;
 $stride = $stride | 0;
 $thresh = $thresh | 0;
 $ithresh = $ithresh | 0;
 $hev_thresh = $hev_thresh | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $p;
 $1 = $stride;
 $2 = $thresh;
 $3 = $ithresh;
 $4 = $hev_thresh;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 _FilterLoop26($5, $6, 1, 16, $7, $8, $9);
 STACKTOP = sp;
 return;
}

function _HFilter16($p, $stride, $thresh, $ithresh, $hev_thresh) {
 $p = $p | 0;
 $stride = $stride | 0;
 $thresh = $thresh | 0;
 $ithresh = $ithresh | 0;
 $hev_thresh = $hev_thresh | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 32 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $p;
 $1 = $stride;
 $2 = $thresh;
 $3 = $ithresh;
 $4 = $hev_thresh;
 $5 = $0;
 $6 = $1;
 $7 = $2;
 $8 = $3;
 $9 = $4;
 _FilterLoop26($5, 1, $6, 16, $7, $8, $9);
 STACKTOP = sp;
 return;
}

function _TransformTwo($in, $dst, $do_two) {
 $in = $in | 0;
 $dst = $dst | 0;
 $do_two = $do_two | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $in;
 $1 = $dst;
 $2 = $do_two;
 $3 = $0;
 $4 = $1;
 _TransformOne($3, $4);
 $5 = $2;
 $6 = ($5 | 0) != 0;
 if (!$6) {
  STACKTOP = sp;
  return;
 }
 $7 = $0;
 $8 = $7 + 32 | 0;
 $9 = $1;
 $10 = $9 + 4 | 0;
 _TransformOne($8, $10);
 STACKTOP = sp;
 return;
}

function _VP8YUVToG($y, $u, $v) {
 $y = $y | 0;
 $u = $u | 0;
 $v = $v | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $12 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $v;
 $3 = $0;
 $4 = _MultHi($3, 19077) | 0;
 $5 = $1;
 $6 = _MultHi($5, 6419) | 0;
 $7 = $4 - $6 | 0;
 $8 = $2;
 $9 = _MultHi($8, 13320) | 0;
 $10 = $7 - $9 | 0;
 $11 = $10 + 8708 | 0;
 $12 = _VP8Clip8($11) | 0;
 STACKTOP = sp;
 return $12 | 0;
}

function _WebPRescalerHasPendingOutput1038($rescaler) {
 $rescaler = $rescaler | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $rescaler;
 $1 = $0;
 $2 = _WebPRescalerOutputDone1039($1) | 0;
 $3 = ($2 | 0) != 0;
 if ($3) {
  $9 = 0;
 } else {
  $4 = $0;
  $5 = $4 + 24 | 0;
  $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
  $7 = ($6 | 0) <= 0;
  $9 = $7;
 }
 $8 = $9 & 1;
 STACKTOP = sp;
 return $8 | 0;
}

function _WebPRescalerHasPendingOutput116($rescaler) {
 $rescaler = $rescaler | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $rescaler;
 $1 = $0;
 $2 = _WebPRescalerOutputDone117($1) | 0;
 $3 = ($2 | 0) != 0;
 if ($3) {
  $9 = 0;
 } else {
  $4 = $0;
  $5 = $4 + 24 | 0;
  $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
  $7 = ($6 | 0) <= 0;
  $9 = $7;
 }
 $8 = $9 & 1;
 STACKTOP = sp;
 return $8 | 0;
}

function _DefaultFeatures($features) {
 $features = $features | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $features;
 $1 = $0;
 $2 = ($1 | 0) != (0 | 0);
 if ($2) {
  $3 = $0;
  dest = $3;
  stop = dest + 40 | 0;
  do {
   SAFE_HEAP_STORE(dest | 0, 0 | 0 | 0, 4);
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(8972 | 0, 8703 | 0, 675, 8989 | 0);
 }
}

function _WebPRescalerHasPendingOutput($rescaler) {
 $rescaler = $rescaler | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $rescaler;
 $1 = $0;
 $2 = _WebPRescalerOutputDone($1) | 0;
 $3 = ($2 | 0) != 0;
 if ($3) {
  $9 = 0;
 } else {
  $4 = $0;
  $5 = $4 + 24 | 0;
  $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
  $7 = ($6 | 0) <= 0;
  $9 = $7;
 }
 $8 = $9 & 1;
 STACKTOP = sp;
 return $8 | 0;
}

function _Predictor13($left, $top) {
 $left = $left | 0;
 $top = $top | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pred = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $left;
 $1 = $top;
 $2 = $0;
 $3 = $1;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = $1;
 $6 = $5 + -4 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = _ClampedAddSubtractHalf($2, $4, $7) | 0;
 $pred = $8;
 $9 = $pred;
 STACKTOP = sp;
 return $9 | 0;
}

function _Predictor12($left, $top) {
 $left = $left | 0;
 $top = $top | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pred = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $left;
 $1 = $top;
 $2 = $0;
 $3 = $1;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = $1;
 $6 = $5 + -4 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = _ClampedAddSubtractFull($2, $4, $7) | 0;
 $pred = $8;
 $9 = $pred;
 STACKTOP = sp;
 return $9 | 0;
}

function ___muldi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
 $x_sroa_0_0_extract_trunc = $a$0;
 $y_sroa_0_0_extract_trunc = $b$0;
 $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
 $1$1 = tempRet0;
 $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
 return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}

function _ALPHDelete($dec) {
 $dec = $dec | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $0;
 $2 = ($1 | 0) != (0 | 0);
 if (!$2) {
  STACKTOP = sp;
  return;
 }
 $3 = $0;
 $4 = $3 + 20 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 _VP8LDelete($5);
 $6 = $0;
 $7 = $6 + 20 | 0;
 SAFE_HEAP_STORE($7 | 0, 0 | 0, 4);
 $8 = $0;
 _WebPSafeFree($8);
 STACKTOP = sp;
 return;
}

function _WebPInitConvertARGBToYUV() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD(952 | 0, 4, 0) | 0 | 0;
 $1 = SAFE_HEAP_LOAD(412 | 0, 4, 0) | 0 | 0;
 $2 = ($0 | 0) == ($1 | 0);
 if ($2) {
  return;
 }
 SAFE_HEAP_STORE(928 | 0, 131 | 0, 4);
 SAFE_HEAP_STORE(932 | 0, 132 | 0, 4);
 SAFE_HEAP_STORE(936 | 0, 133 | 0, 4);
 SAFE_HEAP_STORE(940 | 0, 134 | 0, 4);
 SAFE_HEAP_STORE(944 | 0, 135 | 0, 4);
 $3 = SAFE_HEAP_LOAD(412 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE(952 | 0, $3 | 0, 4);
 return;
}

function _Predictor5($left, $top) {
 $left = $left | 0;
 $top = $top | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pred = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $left;
 $1 = $top;
 $2 = $0;
 $3 = $1;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = $1;
 $6 = $5 + 4 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = _Average3($2, $4, $7) | 0;
 $pred = $8;
 $9 = $pred;
 STACKTOP = sp;
 return $9 | 0;
}

function _Predictor11($left, $top) {
 $left = $left | 0;
 $top = $top | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $pred = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $left;
 $1 = $top;
 $2 = $1;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = $0;
 $5 = $1;
 $6 = $5 + -4 | 0;
 $7 = SAFE_HEAP_LOAD($6 | 0, 4, 0) | 0 | 0;
 $8 = _Select($3, $4, $7) | 0;
 $pred = $8;
 $9 = $pred;
 STACKTOP = sp;
 return $9 | 0;
}

function _InitMetadata($hdr) {
 $hdr = $hdr | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, dest = 0, label = 0, sp = 0, stop = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $hdr;
 $1 = $0;
 $2 = ($1 | 0) != (0 | 0);
 if ($2) {
  $3 = $0;
  dest = $3;
  stop = dest + 56 | 0;
  do {
   SAFE_HEAP_STORE(dest | 0, 0 | 0 | 0, 4);
   dest = dest + 4 | 0;
  } while ((dest | 0) < (stop | 0));
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(8215 | 0, 7124 | 0, 1250, 8227 | 0);
 }
}

function _VP8GetSignedValue($br, $bits) {
 $br = $br | 0;
 $bits = $bits | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, $value = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $br;
 $1 = $bits;
 $2 = $0;
 $3 = $1;
 $4 = _VP8GetValue($2, $3) | 0;
 $value = $4;
 $5 = $0;
 $6 = _VP8Get930($5) | 0;
 $7 = ($6 | 0) != 0;
 $8 = $value;
 $9 = 0 - $8 | 0;
 $10 = $7 ? $9 : $8;
 STACKTOP = sp;
 return $10 | 0;
}

function SAFE_HEAP_LOAD(dest, bytes, unsigned) {
 dest = dest | 0;
 bytes = bytes | 0;
 unsigned = unsigned | 0;
 if ((dest | 0) <= 0) segfault();
 if ((dest + bytes | 0) > (DYNAMICTOP | 0)) segfault();
 if ((bytes | 0) == 4) {
  if (dest & 3) alignfault();
  return HEAP32[dest >> 2] | 0;
 } else if ((bytes | 0) == 1) {
  if (unsigned) {
   return HEAPU8[dest >> 0] | 0;
  } else {
   return HEAP8[dest >> 0] | 0;
  }
 }
 if (dest & 1) alignfault();
 if (unsigned) return HEAPU16[dest >> 1] | 0;
 return HEAP16[dest >> 1] | 0;
}

function _CustomTeardown($io) {
 $io = $io | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $p = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $io;
 $1 = $0;
 $2 = $1 + 40 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $p = $3;
 $4 = $p;
 $5 = $4 + 360 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 _WebPSafeFree($6);
 $7 = $p;
 $8 = $7 + 360 | 0;
 SAFE_HEAP_STORE($8 | 0, 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function _WebPDecodeRGBA($data, $data_size, $width, $height) {
 $data = $data | 0;
 $data_size = $data_size | 0;
 $width = $width | 0;
 $height = $height | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $data;
 $1 = $data_size;
 $2 = $width;
 $3 = $height;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 $8 = _Decode(1, $4, $5, $6, $7, 0) | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function _clip_8b1022($v) {
 $v = $v | 0;
 var $0 = 0, $1 = 0, $10 = 0, $11 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = $1 & -256;
 $3 = ($2 | 0) != 0;
 $4 = $0;
 if ($3) {
  $8 = ($4 | 0) < 0;
  $9 = $8 ? 0 : 255;
  $11 = $9;
 } else {
  $5 = $4 >> 0;
  $6 = $5 & 255;
  $7 = $6 & 255;
  $11 = $7;
 }
 $10 = $11 & 255;
 STACKTOP = sp;
 return $10 | 0;
}

function _Average4($a0, $a1, $a2, $a3) {
 $a0 = $a0 | 0;
 $a1 = $a1 | 0;
 $a2 = $a2 | 0;
 $a3 = $a3 | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $a0;
 $1 = $a1;
 $2 = $a2;
 $3 = $a3;
 $4 = $0;
 $5 = $1;
 $6 = _Average2($4, $5) | 0;
 $7 = $2;
 $8 = $3;
 $9 = _Average2($7, $8) | 0;
 $10 = _Average2($6, $9) | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function _Predictor8($left, $top) {
 $left = $left | 0;
 $top = $top | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $pred = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $left;
 $1 = $top;
 $2 = $1;
 $3 = $2 + -4 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = $1;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = _Average2($4, $6) | 0;
 $pred = $7;
 $8 = $pred;
 STACKTOP = sp;
 return $8 | 0;
}

function _GetLE16($data) {
 $data = $data | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = SAFE_HEAP_LOAD($1 >> 0 | 0, 1, 0) | 0 | 0;
 $3 = $2 & 255;
 $4 = $3 << 0;
 $5 = $0;
 $6 = $5 + 1 | 0;
 $7 = SAFE_HEAP_LOAD($6 >> 0 | 0, 1, 0) | 0 | 0;
 $8 = $7 & 255;
 $9 = $8 << 8;
 $10 = $4 | $9;
 STACKTOP = sp;
 return $10 | 0;
}

function _Predictor9($left, $top) {
 $left = $left | 0;
 $top = $top | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $pred = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $left;
 $1 = $top;
 $2 = $1;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = $1;
 $5 = $4 + 4 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = _Average2($3, $6) | 0;
 $pred = $7;
 $8 = $pred;
 STACKTOP = sp;
 return $8 | 0;
}

function _WebPRescalerOutputDone1039($rescaler) {
 $rescaler = $rescaler | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $rescaler;
 $1 = $0;
 $2 = $1 + 64 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = $0;
 $5 = $4 + 56 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = ($3 | 0) >= ($6 | 0);
 $8 = $7 & 1;
 STACKTOP = sp;
 return $8 | 0;
}

function _WebPRescalerOutputDone334($rescaler) {
 $rescaler = $rescaler | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $rescaler;
 $1 = $0;
 $2 = $1 + 64 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = $0;
 $5 = $4 + 56 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = ($3 | 0) >= ($6 | 0);
 $8 = $7 & 1;
 STACKTOP = sp;
 return $8 | 0;
}

function _WebPRescalerOutputDone117($rescaler) {
 $rescaler = $rescaler | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $rescaler;
 $1 = $0;
 $2 = $1 + 64 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = $0;
 $5 = $4 + 56 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = ($3 | 0) >= ($6 | 0);
 $8 = $7 & 1;
 STACKTOP = sp;
 return $8 | 0;
}

function _WebPRescalerOutputDone($rescaler) {
 $rescaler = $rescaler | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $rescaler;
 $1 = $0;
 $2 = $1 + 64 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = $0;
 $5 = $4 + 56 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = ($3 | 0) >= ($6 | 0);
 $8 = $7 & 1;
 STACKTOP = sp;
 return $8 | 0;
}

function _WebPRescalerInputDone($rescaler) {
 $rescaler = $rescaler | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $rescaler;
 $1 = $0;
 $2 = $1 + 60 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = $0;
 $5 = $4 + 48 | 0;
 $6 = SAFE_HEAP_LOAD($5 | 0, 4, 0) | 0 | 0;
 $7 = ($3 | 0) >= ($6 | 0);
 $8 = $7 & 1;
 STACKTOP = sp;
 return $8 | 0;
}

function _VP8LSetBitPos($br, $val) {
 $br = $br | 0;
 $val = $val | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $br;
 $1 = $val;
 $2 = $1;
 $3 = $0;
 $4 = $3 + 20 | 0;
 SAFE_HEAP_STORE($4 | 0, $2 | 0, 4);
 $5 = $0;
 $6 = _VP8LIsEndOfStream($5) | 0;
 $7 = $0;
 $8 = $7 + 24 | 0;
 SAFE_HEAP_STORE($8 | 0, $6 | 0, 4);
 STACKTOP = sp;
 return;
}

function _WebPRescalerDspInit() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD(760 | 0, 4, 0) | 0 | 0;
 $1 = SAFE_HEAP_LOAD(412 | 0, 4, 0) | 0 | 0;
 $2 = ($0 | 0) == ($1 | 0);
 if ($2) {
  return;
 }
 SAFE_HEAP_STORE(748 | 0, 106 | 0, 4);
 SAFE_HEAP_STORE(744 | 0, 107 | 0, 4);
 SAFE_HEAP_STORE(752 | 0, 108 | 0, 4);
 SAFE_HEAP_STORE(756 | 0, 109 | 0, 4);
 $3 = SAFE_HEAP_LOAD(412 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE(760 | 0, $3 | 0, 4);
 return;
}

function _ApplyAlphaMultiply_16b($rgba4444, $w, $h, $stride) {
 $rgba4444 = $rgba4444 | 0;
 $w = $w | 0;
 $h = $h | 0;
 $stride = $stride | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $rgba4444;
 $1 = $w;
 $2 = $h;
 $3 = $stride;
 $4 = $0;
 $5 = $1;
 $6 = $2;
 $7 = $3;
 _ApplyAlphaMultiply4444($4, $5, $6, $7, 0);
 STACKTOP = sp;
 return;
}

function _clip($v, $M) {
 $v = $v | 0;
 $M = $M | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $v;
 $1 = $M;
 $2 = $0;
 $3 = ($2 | 0) < 0;
 if ($3) {
  $10 = 0;
 } else {
  $4 = $0;
  $5 = $1;
  $6 = ($4 | 0) > ($5 | 0);
  $7 = $1;
  $8 = $0;
  $9 = $6 ? $7 : $8;
  $10 = $9;
 }
 STACKTOP = sp;
 return $10 | 0;
}

function _WebPGetFeatures($data, $data_size, $features) {
 $data = $data | 0;
 $data_size = $data_size | 0;
 $features = $features | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $data;
 $1 = $data_size;
 $2 = $features;
 $3 = $0;
 $4 = $1;
 $5 = $2;
 $6 = _WebPGetFeaturesInternal($3, $4, $5, 520) | 0;
 STACKTOP = sp;
 return $6 | 0;
}

function _VP8LSubSampleSize315($size, $sampling_bits) {
 $size = $size | 0;
 $sampling_bits = $sampling_bits | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $size;
 $1 = $sampling_bits;
 $2 = $0;
 $3 = $1;
 $4 = 1 << $3;
 $5 = $2 + $4 | 0;
 $6 = $5 - 1 | 0;
 $7 = $1;
 $8 = $6 >>> $7;
 STACKTOP = sp;
 return $8 | 0;
}

function _memmove(dest, src, num) {
 dest = dest | 0;
 src = src | 0;
 num = num | 0;
 var ret = 0;
 if ((src | 0) < (dest | 0) & (dest | 0) < (src + num | 0)) {
  ret = dest;
  src = src + num | 0;
  dest = dest + num | 0;
  while ((num | 0) > 0) {
   dest = dest - 1 | 0;
   src = src - 1 | 0;
   num = num - 1 | 0;
   SAFE_HEAP_STORE(dest | 0, SAFE_HEAP_LOAD(src | 0, 1, 0) | 0 | 0, 1);
  }
  dest = ret;
 } else {
  _memcpy(dest, src, num) | 0;
 }
 return dest | 0;
}

function _VP8LSubSampleSize($size, $sampling_bits) {
 $size = $size | 0;
 $sampling_bits = $sampling_bits | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $size;
 $1 = $sampling_bits;
 $2 = $0;
 $3 = $1;
 $4 = 1 << $3;
 $5 = $2 + $4 | 0;
 $6 = $5 - 1 | 0;
 $7 = $1;
 $8 = $6 >>> $7;
 STACKTOP = sp;
 return $8 | 0;
}

function _ColorTransformDelta($color_pred, $color) {
 $color_pred = $color_pred | 0;
 $color = $color | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $color_pred;
 $1 = $color;
 $2 = $0;
 $3 = $2 << 24 >> 24;
 $4 = $1;
 $5 = $4 << 24 >> 24;
 $6 = Math_imul($3, $5) | 0;
 $7 = $6 >>> 5;
 STACKTOP = sp;
 return $7 | 0;
}

function _VP8LDoFillBitWindow($br) {
 $br = $br | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $br;
 $1 = $0;
 $2 = $1 + 20 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = ($3 | 0) >= 32;
 if ($4) {
  $5 = $0;
  _ShiftBytes($5);
  STACKTOP = sp;
  return;
 } else {
  ___assert_fail(14199 | 0, 14032 | 0, 193, 14226 | 0);
 }
}

function _Predictor6($left, $top) {
 $left = $left | 0;
 $top = $top | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $pred = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $left;
 $1 = $top;
 $2 = $0;
 $3 = $1;
 $4 = $3 + -4 | 0;
 $5 = SAFE_HEAP_LOAD($4 | 0, 4, 0) | 0 | 0;
 $6 = _Average2($2, $5) | 0;
 $pred = $6;
 $7 = $pred;
 STACKTOP = sp;
 return $7 | 0;
}

function _GetScale($a, $inverse) {
 $a = $a | 0;
 $inverse = $inverse | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $a;
 $1 = $inverse;
 $2 = $1;
 $3 = ($2 | 0) != 0;
 $4 = $0;
 if ($3) {
  $5 = 4278190080 / ($4 >>> 0) & -1;
  $7 = $5;
 } else {
  $6 = $4 * 65793 | 0;
  $7 = $6;
 }
 STACKTOP = sp;
 return $7 | 0;
}

function _VP8YUVToR368($y, $v) {
 $y = $y | 0;
 $v = $v | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $v;
 $2 = $0;
 $3 = _MultHi370($2, 19077) | 0;
 $4 = $1;
 $5 = _MultHi370($4, 26149) | 0;
 $6 = $3 + $5 | 0;
 $7 = $6 - 14234 | 0;
 $8 = _VP8Clip8369($7) | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function _VP8YUVToB372($y, $u) {
 $y = $y | 0;
 $u = $u | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $0;
 $3 = _MultHi370($2, 19077) | 0;
 $4 = $1;
 $5 = _MultHi370($4, 33050) | 0;
 $6 = $3 + $5 | 0;
 $7 = $6 - 17685 | 0;
 $8 = _VP8Clip8369($7) | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function ___stdio_close($f) {
 $f = $f | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $vararg_buffer = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $vararg_buffer = sp;
 $0 = $f + 60 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 SAFE_HEAP_STORE($vararg_buffer | 0, $1 | 0, 4);
 $2 = ___syscall6(6, $vararg_buffer | 0) | 0;
 $3 = ___syscall_ret($2) | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function _VP8LColorCacheClear($cc) {
 $cc = $cc | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $cc;
 $1 = $0;
 $2 = ($1 | 0) != (0 | 0);
 if (!$2) {
  STACKTOP = sp;
  return;
 }
 $3 = $0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 _WebPSafeFree($4);
 $5 = $0;
 SAFE_HEAP_STORE($5 | 0, 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function _Average2($a0, $a1) {
 $a0 = $a0 | 0;
 $a1 = $a1 | 0;
 var $0 = 0, $1 = 0, $10 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, $9 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $a0;
 $1 = $a1;
 $2 = $0;
 $3 = $1;
 $4 = $2 ^ $3;
 $5 = $4 & -16843010;
 $6 = $5 >>> 1;
 $7 = $0;
 $8 = $1;
 $9 = $7 & $8;
 $10 = $6 + $9 | 0;
 STACKTOP = sp;
 return $10 | 0;
}

function _VP8YUVToR($y, $v) {
 $y = $y | 0;
 $v = $v | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $v;
 $2 = $0;
 $3 = _MultHi($2, 19077) | 0;
 $4 = $1;
 $5 = _MultHi($4, 26149) | 0;
 $6 = $3 + $5 | 0;
 $7 = $6 - 14234 | 0;
 $8 = _VP8Clip8($7) | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function _VP8YUVToB($y, $u) {
 $y = $y | 0;
 $u = $u | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $y;
 $1 = $u;
 $2 = $0;
 $3 = _MultHi($2, 19077) | 0;
 $4 = $1;
 $5 = _MultHi($4, 33050) | 0;
 $6 = $3 + $5 | 0;
 $7 = $6 - 17685 | 0;
 $8 = _VP8Clip8($7) | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function ___muldsi3($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
 $1 = $a & 65535;
 $2 = $b & 65535;
 $3 = Math_imul($2, $1) | 0;
 $6 = $a >>> 16;
 $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
 $11 = $b >>> 16;
 $12 = Math_imul($11, $1) | 0;
 return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}

function _GetLE24($data) {
 $data = $data | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = _GetLE16($1) | 0;
 $3 = $0;
 $4 = $3 + 2 | 0;
 $5 = SAFE_HEAP_LOAD($4 >> 0 | 0, 1, 0) | 0 | 0;
 $6 = $5 & 255;
 $7 = $6 << 16;
 $8 = $2 | $7;
 STACKTOP = sp;
 return $8 | 0;
}

function _ClearTransform($transform) {
 $transform = $transform | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $transform;
 $1 = $0;
 $2 = $1 + 16 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 _WebPSafeFree($3);
 $4 = $0;
 $5 = $4 + 16 | 0;
 SAFE_HEAP_STORE($5 | 0, 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function _Predictor7($left, $top) {
 $left = $left | 0;
 $top = $top | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $pred = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $left;
 $1 = $top;
 $2 = $0;
 $3 = $1;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 $5 = _Average2($2, $4) | 0;
 $pred = $5;
 $6 = $pred;
 STACKTOP = sp;
 return $6 | 0;
}

function _AddSubtractComponentFull($a, $b, $c) {
 $a = $a | 0;
 $b = $b | 0;
 $c = $c | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $c;
 $3 = $0;
 $4 = $1;
 $5 = $3 + $4 | 0;
 $6 = $2;
 $7 = $5 - $6 | 0;
 $8 = _Clip255($7) | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function _AddSubtractComponentHalf($a, $b) {
 $a = $a | 0;
 $b = $b | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $a;
 $1 = $b;
 $2 = $0;
 $3 = $0;
 $4 = $1;
 $5 = $3 - $4 | 0;
 $6 = ($5 | 0) / 2 & -1;
 $7 = $2 + $6 | 0;
 $8 = _Clip255($7) | 0;
 STACKTOP = sp;
 return $8 | 0;
}

function _VP8LFillBitWindow($br) {
 $br = $br | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $br;
 $1 = $0;
 $2 = $1 + 20 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 $4 = ($3 | 0) >= 32;
 if (!$4) {
  STACKTOP = sp;
  return;
 }
 $5 = $0;
 _VP8LDoFillBitWindow($5);
 STACKTOP = sp;
 return;
}

function _llvm_cttz_i32(x) {
 x = x | 0;
 var ret = 0;
 ret = SAFE_HEAP_LOAD(cttz_i8 + (x & 255) | 0, 1, 0) | 0;
 if ((ret | 0) < 8) return ret | 0;
 ret = SAFE_HEAP_LOAD(cttz_i8 + (x >> 8 & 255) | 0, 1, 0) | 0;
 if ((ret | 0) < 8) return ret + 8 | 0;
 ret = SAFE_HEAP_LOAD(cttz_i8 + (x >> 16 & 255) | 0, 1, 0) | 0;
 if ((ret | 0) < 8) return ret + 16 | 0;
 return (SAFE_HEAP_LOAD(cttz_i8 + (x >>> 24) | 0, 1, 0) | 0) + 24 | 0;
}

function copyTempFloat(ptr) {
 ptr = ptr | 0;
 SAFE_HEAP_STORE(tempDoublePtr >> 0 | 0, SAFE_HEAP_LOAD(ptr >> 0 | 0, 1, 0) | 0 | 0, 1);
 SAFE_HEAP_STORE(tempDoublePtr + 1 >> 0 | 0, SAFE_HEAP_LOAD(ptr + 1 >> 0 | 0, 1, 0) | 0 | 0, 1);
 SAFE_HEAP_STORE(tempDoublePtr + 2 >> 0 | 0, SAFE_HEAP_LOAD(ptr + 2 >> 0 | 0, 1, 0) | 0 | 0, 1);
 SAFE_HEAP_STORE(tempDoublePtr + 3 >> 0 | 0, SAFE_HEAP_LOAD(ptr + 3 >> 0 | 0, 1, 0) | 0 | 0, 1);
}

function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $rem = 0, __stackBase__ = 0;
 __stackBase__ = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 $rem = __stackBase__ | 0;
 ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
 STACKTOP = __stackBase__;
 return (tempRet0 = SAFE_HEAP_LOAD($rem + 4 | 0, 4, 0) | 0 | 0, SAFE_HEAP_LOAD($rem | 0, 4, 0) | 0 | 0) | 0;
}

function _Average3($a0, $a1, $a2) {
 $a0 = $a0 | 0;
 $a1 = $a1 | 0;
 $a2 = $a2 | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $a0;
 $1 = $a1;
 $2 = $a2;
 $3 = $0;
 $4 = $2;
 $5 = _Average2($3, $4) | 0;
 $6 = $1;
 $7 = _Average2($5, $6) | 0;
 STACKTOP = sp;
 return $7 | 0;
}

function _VP8Clip8369($v) {
 $v = $v | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = $1 & -16384;
 $3 = ($2 | 0) == 0;
 $4 = $0;
 $5 = $4 >> 6;
 $6 = ($4 | 0) < 0;
 $7 = $6 ? 0 : 255;
 $8 = $3 ? $5 : $7;
 STACKTOP = sp;
 return $8 | 0;
}

function SAFE_HEAP_STORE(dest, value, bytes) {
 dest = dest | 0;
 value = value | 0;
 bytes = bytes | 0;
 if ((dest | 0) <= 0) segfault();
 if ((dest + bytes | 0) > (DYNAMICTOP | 0)) segfault();
 if ((bytes | 0) == 4) {
  if (dest & 3) alignfault();
  HEAP32[dest >> 2] = value;
 } else if ((bytes | 0) == 1) {
  HEAP8[dest >> 0] = value;
 } else {
  if (dest & 1) alignfault();
  HEAP16[dest >> 1] = value;
 }
}

function _IsValidColorspace($webp_csp_mode) {
 $webp_csp_mode = $webp_csp_mode | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $webp_csp_mode;
 $1 = $0;
 $2 = ($1 | 0) >= 0;
 $3 = $0;
 $4 = ($3 | 0) < 13;
 $5 = $2 ? $4 : 0;
 $6 = $5 & 1;
 STACKTOP = sp;
 return $6 | 0;
}

function _VP8Clip8($v) {
 $v = $v | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = $1 & -16384;
 $3 = ($2 | 0) == 0;
 $4 = $0;
 $5 = $4 >> 6;
 $6 = ($4 | 0) < 0;
 $7 = $6 ? 0 : 255;
 $8 = $3 ? $5 : $7;
 STACKTOP = sp;
 return $8 | 0;
}

function _clip_8b($v) {
 $v = $v | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $v;
 $1 = $0;
 $2 = $1 & -256;
 $3 = ($2 | 0) != 0;
 $4 = $0;
 $5 = ($4 | 0) < 0;
 $6 = $5 ? 0 : 255;
 $7 = $3 ? $6 : $4;
 $8 = $7 & 255;
 STACKTOP = sp;
 return $8 | 0;
}

function _Clip255($a) {
 $a = $a | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $1 = $a;
 $2 = $1;
 $3 = $2 >>> 0 < 256;
 $4 = $1;
 if ($3) {
  $0 = $4;
 } else {
  $5 = $4 ^ -1;
  $6 = $5 >>> 24;
  $0 = $6;
 }
 $7 = $0;
 STACKTOP = sp;
 return $7 | 0;
}

function _VP8ResetProba($proba) {
 $proba = $proba | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $proba;
 $1 = $0;
 {}
 SAFE_HEAP_STORE($1 >> 0 | 0, 255 | 0 | 0, 1);
 SAFE_HEAP_STORE($1 + 1 >> 0 | 0, 255 | 0 | 0, 1);
 SAFE_HEAP_STORE($1 + 2 >> 0 | 0, 255 | 0 | 0, 1);
 STACKTOP = sp;
 return;
}

function _GetLE32($data) {
 $data = $data | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $data;
 $1 = $0;
 $2 = _GetLE16($1) | 0;
 $3 = $0;
 $4 = $3 + 2 | 0;
 $5 = _GetLE16($4) | 0;
 $6 = $5 << 16;
 $7 = $2 | $6;
 STACKTOP = sp;
 return $7 | 0;
}

function _multiply($x, $m) {
 $x = $x | 0;
 $m = $m | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $x;
 $1 = $m;
 $2 = $0;
 $3 = $2 & 255;
 $4 = $1;
 $5 = Math_imul($3, $4) | 0;
 $6 = $5 >>> 16;
 $7 = $6 & 255;
 STACKTOP = sp;
 return $7 | 0;
}

function _dither_hi($x) {
 $x = $x | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $x;
 $1 = $0;
 $2 = $1 & 255;
 $3 = $2 & 240;
 $4 = $0;
 $5 = $4 & 255;
 $6 = $5 >> 4;
 $7 = $3 | $6;
 $8 = $7 & 255;
 STACKTOP = sp;
 return $8 | 0;
}

function _dither_lo($x) {
 $x = $x | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, $7 = 0, $8 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $x;
 $1 = $0;
 $2 = $1 & 255;
 $3 = $2 & 15;
 $4 = $0;
 $5 = $4 & 255;
 $6 = $5 << 4;
 $7 = $3 | $6;
 $8 = $7 & 255;
 STACKTOP = sp;
 return $8 | 0;
}

function _GetCopyLength($length_symbol, $br) {
 $length_symbol = $length_symbol | 0;
 $br = $br | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $length_symbol;
 $1 = $br;
 $2 = $0;
 $3 = $1;
 $4 = _GetCopyDistance($2, $3) | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function _VP8LDelete($dec) {
 $dec = $dec | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $0;
 $2 = ($1 | 0) != (0 | 0);
 if (!$2) {
  STACKTOP = sp;
  return;
 }
 $3 = $0;
 _VP8LClear($3);
 $4 = $0;
 _WebPSafeFree($4);
 STACKTOP = sp;
 return;
}

function _VP8LSetEndOfStream($br) {
 $br = $br | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $br;
 $1 = $0;
 $2 = $1 + 24 | 0;
 SAFE_HEAP_STORE($2 | 0, 1 | 0, 4);
 $3 = $0;
 $4 = $3 + 20 | 0;
 SAFE_HEAP_STORE($4 | 0, 0 | 0, 4);
 STACKTOP = sp;
 return;
}

function _VP8Delete($dec) {
 $dec = $dec | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $0;
 $2 = ($1 | 0) != (0 | 0);
 if (!$2) {
  STACKTOP = sp;
  return;
 }
 $3 = $0;
 _VP8Clear($3);
 $4 = $0;
 _WebPSafeFree($4);
 STACKTOP = sp;
 return;
}

function dynCall_viiiiiiiii(index, a1, a2, a3, a4, a5, a6, a7, a8, a9) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 a7 = a7 | 0;
 a8 = a8 | 0;
 a9 = a9 | 0;
 FUNCTION_TABLE_viiiiiiiii[(SAFE_FT_MASK(index | 0, 127 | 0) | 0) & 127](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0, a7 | 0, a8 | 0, a9 | 0);
}

function _VP8LHtreeGroupsFree($htree_groups) {
 $htree_groups = $htree_groups | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $htree_groups;
 $1 = $0;
 $2 = ($1 | 0) != (0 | 0);
 if ($2) {
  $3 = $0;
  _WebPSafeFree($3);
 }
 STACKTOP = sp;
 return;
}

function _Predictor4($left, $top) {
 $left = $left | 0;
 $top = $top | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $left;
 $1 = $top;
 $2 = $1;
 $3 = $2 + -4 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function _Predictor3($left, $top) {
 $left = $left | 0;
 $top = $top | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $left;
 $1 = $top;
 $2 = $1;
 $3 = $2 + 4 | 0;
 $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $4 | 0;
}

function _MultHi370($v, $coeff) {
 $v = $v | 0;
 $coeff = $coeff | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $v;
 $1 = $coeff;
 $2 = $0;
 $3 = $1;
 $4 = Math_imul($2, $3) | 0;
 $5 = $4 >> 8;
 STACKTOP = sp;
 return $5 | 0;
}

function _MultHi($v, $coeff) {
 $v = $v | 0;
 $coeff = $coeff | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $v;
 $1 = $coeff;
 $2 = $0;
 $3 = $1;
 $4 = Math_imul($2, $3) | 0;
 $5 = $4 >> 8;
 STACKTOP = sp;
 return $5 | 0;
}

function ___errno_location() {
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD(1300 | 0, 4, 0) | 0 | 0;
 $1 = ($0 | 0) == (0 | 0);
 if ($1) {
  $$0 = 1348;
 } else {
  $2 = _pthread_self() | 0;
  $3 = $2 + 60 | 0;
  $4 = SAFE_HEAP_LOAD($3 | 0, 4, 0) | 0 | 0;
  $$0 = $4;
 }
 return $$0 | 0;
}

function SAFE_HEAP_STORE_D(dest, value, bytes) {
 dest = dest | 0;
 value = +value;
 bytes = bytes | 0;
 if ((dest | 0) <= 0) segfault();
 if ((dest + bytes | 0) > (DYNAMICTOP | 0)) segfault();
 if ((bytes | 0) == 8) {
  if (dest & 7) alignfault();
  HEAPF64[dest >> 3] = value;
 } else {
  if (dest & 3) alignfault();
  HEAPF32[dest >> 2] = value;
 }
}

function _WebPResetDecParams($params) {
 $params = $params | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $params;
 $1 = $0;
 $2 = ($1 | 0) != (0 | 0);
 if ($2) {
  $3 = $0;
  _memset($3 | 0, 0, 376) | 0;
 }
 STACKTOP = sp;
 return;
}

function _SetOk($dec) {
 $dec = $dec | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dec;
 $1 = $0;
 SAFE_HEAP_STORE($1 | 0, 0 | 0, 4);
 $2 = $0;
 $3 = $2 + 8 | 0;
 SAFE_HEAP_STORE($3 | 0, 6583 | 0, 4);
 STACKTOP = sp;
 return;
}

function _Rotate8b($V) {
 $V = $V | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, $5 = 0, $6 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $V;
 $1 = $0;
 $2 = $1 & 255;
 $3 = $2 << 24;
 $4 = $0;
 $5 = $4 >>> 8;
 $6 = $3 | $5;
 STACKTOP = sp;
 return $6 | 0;
}

function _Predictor2($left, $top) {
 $left = $left | 0;
 $top = $top | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $left;
 $1 = $top;
 $2 = $1;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 STACKTOP = sp;
 return $3 | 0;
}

function _CleanupParams($p) {
 $p = $p | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $p;
 $1 = $0;
 $2 = $1 + 28 | 0;
 $3 = SAFE_HEAP_LOAD($2 | 0, 4, 0) | 0 | 0;
 _WebPSafeFree($3);
 STACKTOP = sp;
 return;
}

function _bitshift64Ashr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 var ander = 0;
 if ((bits | 0) < 32) {
  ander = (1 << bits) - 1 | 0;
  tempRet0 = high >> bits;
  return low >>> bits | (high & ander) << 32 - bits;
 }
 tempRet0 = (high | 0) < 0 ? -1 : 0;
 return high >> bits - 32 | 0;
}

function _VP8GetAlphaValue($val) {
 $val = $val | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, $4 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $val;
 $1 = $0;
 $2 = $1 >>> 8;
 $3 = $2 & 255;
 $4 = $3 & 255;
 STACKTOP = sp;
 return $4 | 0;
}

function SAFE_HEAP_LOAD_D(dest, bytes) {
 dest = dest | 0;
 bytes = bytes | 0;
 if ((dest | 0) <= 0) segfault();
 if ((dest + bytes | 0) > (DYNAMICTOP | 0)) segfault();
 if ((bytes | 0) == 8) {
  if (dest & 7) alignfault();
  return +HEAPF64[dest >> 3];
 }
 if (dest & 3) alignfault();
 return +HEAPF32[dest >> 2];
}

function _WebPInitDecBuffer144($buffer) {
 $buffer = $buffer | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $buffer;
 $1 = $0;
 $2 = _WebPInitDecBufferInternal($1, 520) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function _bitshift64Shl(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 var ander = 0;
 if ((bits | 0) < 32) {
  ander = (1 << bits) - 1 | 0;
  tempRet0 = high << bits | (low & ander << 32 - bits) >>> 32 - bits;
  return low << bits;
 }
 tempRet0 = low << bits - 32;
 return 0;
}

function ___syscall_ret($r) {
 $r = $r | 0;
 var $$0 = 0, $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $r >>> 0 > 4294963200;
 if ($0) {
  $1 = 0 - $r | 0;
  $2 = ___errno_location() | 0;
  SAFE_HEAP_STORE($2 | 0, $1 | 0, 4);
  $$0 = -1;
 } else {
  $$0 = $r;
 }
 return $$0 | 0;
}

function _bitshift64Lshr(low, high, bits) {
 low = low | 0;
 high = high | 0;
 bits = bits | 0;
 var ander = 0;
 if ((bits | 0) < 32) {
  ander = (1 << bits) - 1 | 0;
  tempRet0 = high >>> bits;
  return low >>> bits | (high & ander) << 32 - bits;
 }
 tempRet0 = 0;
 return high >>> bits - 32 | 0;
}

function _WebPIsRGBMode146($mode) {
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $mode;
 $1 = $0;
 $2 = $1 >>> 0 < 11;
 $3 = $2 & 1;
 STACKTOP = sp;
 return $3 | 0;
}

function _WebPIsRGBMode115($mode) {
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $mode;
 $1 = $0;
 $2 = $1 >>> 0 < 11;
 $3 = $2 & 1;
 STACKTOP = sp;
 return $3 | 0;
}

function _WebPIsRGBMode35($mode) {
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $mode;
 $1 = $0;
 $2 = $1 >>> 0 < 11;
 $3 = $2 & 1;
 STACKTOP = sp;
 return $3 | 0;
}

function _WebPIsRGBMode($mode) {
 $mode = $mode | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $mode;
 $1 = $0;
 $2 = $1 >>> 0 < 11;
 $3 = $2 & 1;
 STACKTOP = sp;
 return $3 | 0;
}

function dynCall_iiiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 return FUNCTION_TABLE_iiiiiii[(SAFE_FT_MASK(index | 0, 63 | 0) | 0) & 63](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0) | 0;
}

function _VP8GetARGBIndex($idx) {
 $idx = $idx | 0;
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $idx;
 $1 = $0;
 $2 = $1 >>> 8;
 $3 = $2 & 255;
 STACKTOP = sp;
 return $3 | 0;
}

function _Predictor1($left, $top) {
 $left = $left | 0;
 $top = $top | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $left;
 $1 = $top;
 $2 = $0;
 STACKTOP = sp;
 return $2 | 0;
}

function _VP8InitIo147($io) {
 $io = $io | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $io;
 $1 = $0;
 $2 = _VP8InitIoInternal($1, 520) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function _VP8InitIo104($io) {
 $io = $io | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $io;
 $1 = $0;
 $2 = _VP8InitIoInternal($1, 520) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function dynCall_viiiiii(index, a1, a2, a3, a4, a5, a6) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 a6 = a6 | 0;
 FUNCTION_TABLE_viiiiii[(SAFE_FT_MASK(index | 0, 127 | 0) | 0) & 127](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0, a6 | 0);
}

function _BSwap32938($x) {
 $x = $x | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $x;
 $1 = $0;
 $2 = _llvm_bswap_i32($1 | 0) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function _BSwap32318($x) {
 $x = $x | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $x;
 $1 = $0;
 $2 = _llvm_bswap_i32($1 | 0) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function _VP8Get930($br) {
 $br = $br | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $br;
 $1 = $0;
 $2 = _VP8GetValue($1, 1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function _BSwap3284($x) {
 $x = $x | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $x;
 $1 = $0;
 $2 = _llvm_bswap_i32($1 | 0) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function _VP8Get74($br) {
 $br = $br | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $br;
 $1 = $0;
 $2 = _VP8GetValue($1, 1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function _VP8Get46($br) {
 $br = $br | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $br;
 $1 = $0;
 $2 = _VP8GetValue($1, 1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function _Predictor0($left, $top) {
 $left = $left | 0;
 $top = $top | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $left;
 $1 = $top;
 STACKTOP = sp;
 return -16777216;
}

function _BSwap32($x) {
 $x = $x | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $x;
 $1 = $0;
 $2 = _llvm_bswap_i32($1 | 0) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function _VP8Get($br) {
 $br = $br | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $br;
 $1 = $0;
 $2 = _VP8GetValue($1, 1) | 0;
 STACKTOP = sp;
 return $2 | 0;
}

function _ALPHNew() {
 var $0 = 0, $1 = 0, $dec = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = _WebPSafeCalloc(1, 0, 136) | 0;
 $dec = $0;
 $1 = $dec;
 STACKTOP = sp;
 return $1 | 0;
}

function _DC8uvNoTopLeft($dst) {
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dst;
 $1 = $0;
 _Put8x8uv(-128, $1);
 STACKTOP = sp;
 return;
}

function dynCall_viiiii(index, a1, a2, a3, a4, a5) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 a5 = a5 | 0;
 FUNCTION_TABLE_viiiii[(SAFE_FT_MASK(index | 0, 255 | 0) | 0) & 255](a1 | 0, a2 | 0, a3 | 0, a4 | 0, a5 | 0);
}

function _Launch($worker) {
 $worker = $worker | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $worker;
 $1 = $0;
 _Execute($1);
 STACKTOP = sp;
 return;
}

function _DC16NoTopLeft($dst) {
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dst;
 $1 = $0;
 _Put16(128, $1);
 STACKTOP = sp;
 return;
}

function _TM8uv($dst) {
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dst;
 $1 = $0;
 _TrueMotion($1, 8);
 STACKTOP = sp;
 return;
}

function _TM16($dst) {
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dst;
 $1 = $0;
 _TrueMotion($1, 16);
 STACKTOP = sp;
 return;
}

function runPostSets() {}
function _i64Subtract(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0, h = 0;
 l = a - c >>> 0;
 h = b - d >>> 0;
 h = b - d - (c >>> 0 > a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, l | 0) | 0;
}

function _WebPSafeFree($ptr) {
 $ptr = $ptr | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $ptr;
 $1 = $0;
 _free($1);
 STACKTOP = sp;
 return;
}

function _TM4($dst) {
 $dst = $dst | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $dst;
 $1 = $0;
 _TrueMotion($1, 4);
 STACKTOP = sp;
 return;
}

function _VP8GetAlphaIndex($idx) {
 $idx = $idx | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $idx;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function _VP8GetARGBValue($val) {
 $val = $val | 0;
 var $0 = 0, $1 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 STACKTOP = STACKTOP + 16 | 0;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 $0 = $val;
 $1 = $0;
 STACKTOP = sp;
 return $1 | 0;
}

function _cleanup392($p) {
 $p = $p | 0;
 var $0 = 0, $1 = 0, $2 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = $p + 68 | 0;
 $1 = SAFE_HEAP_LOAD($0 | 0, 4, 0) | 0 | 0;
 $2 = ($1 | 0) == 0;
 if ($2) {
  ___unlockfile($p);
 }
 return;
}

function dynCall_viiii(index, a1, a2, a3, a4) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 a4 = a4 | 0;
 FUNCTION_TABLE_viiii[(SAFE_FT_MASK(index | 0, 255 | 0) | 0) & 255](a1 | 0, a2 | 0, a3 | 0, a4 | 0);
}

function _is_big_endian() {
 var $0 = 0, $1 = 0, $2 = 0, $3 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD(2226 >> 0 | 0, 1, 0) | 0 | 0;
 $1 = $0 & 255;
 $2 = ($1 | 0) != 1;
 $3 = $2 & 1;
 return $3 | 0;
}
function stackAlloc(size) {
 size = size | 0;
 var ret = 0;
 ret = STACKTOP;
 STACKTOP = STACKTOP + size | 0;
 STACKTOP = STACKTOP + 15 & -16;
 if ((STACKTOP | 0) >= (STACK_MAX | 0)) abort();
 return ret | 0;
}

function dynCall_iiii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 return FUNCTION_TABLE_iiii[(SAFE_FT_MASK(index | 0, 255 | 0) | 0) & 255](a1 | 0, a2 | 0, a3 | 0) | 0;
}

function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
 $a$0 = $a$0 | 0;
 $a$1 = $a$1 | 0;
 $b$0 = $b$0 | 0;
 $b$1 = $b$1 | 0;
 var $1$0 = 0;
 $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
 return $1$0 | 0;
}

function b7(p0, p1, p2, p3, p4, p5, p6, p7, p8) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 p6 = p6 | 0;
 p7 = p7 | 0;
 p8 = p8 | 0;
 nullFunc_viiiiiiiii(7);
}

function dynCall_viii(index, a1, a2, a3) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 a3 = a3 | 0;
 FUNCTION_TABLE_viii[(SAFE_FT_MASK(index | 0, 255 | 0) | 0) & 255](a1 | 0, a2 | 0, a3 | 0);
}

function _i64Add(a, b, c, d) {
 a = a | 0;
 b = b | 0;
 c = c | 0;
 d = d | 0;
 var l = 0, h = 0;
 l = a + c >>> 0;
 h = b + d + (l >>> 0 < a >>> 0 | 0) >>> 0;
 return (tempRet0 = h, l | 0) | 0;
}

function dynCall_iii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 return FUNCTION_TABLE_iii[(SAFE_FT_MASK(index | 0, 127 | 0) | 0) & 127](a1 | 0, a2 | 0) | 0;
}

function dynCall_vii(index, a1, a2) {
 index = index | 0;
 a1 = a1 | 0;
 a2 = a2 | 0;
 FUNCTION_TABLE_vii[(SAFE_FT_MASK(index | 0, 127 | 0) | 0) & 127](a1 | 0, a2 | 0);
}

function SAFE_FT_MASK(value, mask) {
 value = value | 0;
 mask = mask | 0;
 var ret = 0;
 ret = value & mask;
 if ((ret | 0) != (value | 0)) ftfault();
 return ret | 0;
}

function b4(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_iiiiiii(4);
 return 0;
}

function establishStackSpace(stackBase, stackMax) {
 stackBase = stackBase | 0;
 stackMax = stackMax | 0;
 STACKTOP = stackBase;
 STACK_MAX = stackMax;
}

function dynCall_ii(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 return FUNCTION_TABLE_ii[(SAFE_FT_MASK(index | 0, 15 | 0) | 0) & 15](a1 | 0) | 0;
}

function setThrew(threw, value) {
 threw = threw | 0;
 value = value | 0;
 if ((__THREW__ | 0) == 0) {
  __THREW__ = threw;
  threwValue = value;
 }
}

function b8(p0, p1, p2, p3, p4, p5) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 p5 = p5 | 0;
 nullFunc_viiiiii(8);
}

function dynCall_vi(index, a1) {
 index = index | 0;
 a1 = a1 | 0;
 FUNCTION_TABLE_vi[(SAFE_FT_MASK(index | 0, 255 | 0) | 0) & 255](a1 | 0);
}

function _getFeaturesHeight() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD(56 | 0, 4, 0) | 0 | 0;
 return $0 | 0;
}

function _getFeaturesWidth() {
 var $0 = 0, label = 0, sp = 0;
 sp = STACKTOP;
 $0 = SAFE_HEAP_LOAD(52 | 0, 4, 0) | 0 | 0;
 return $0 | 0;
}

function _llvm_bswap_i32(x) {
 x = x | 0;
 return (x & 255) << 24 | (x >> 8 & 255) << 16 | (x >> 16 & 255) << 8 | x >>> 24 | 0;
}

function b1(p0, p1, p2, p3, p4) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 p4 = p4 | 0;
 nullFunc_viiiii(1);
}

function b10(p0, p1, p2, p3) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 p3 = p3 | 0;
 nullFunc_viiii(10);
}

function b0(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_iiii(0);
 return 0;
}

function _WebPGetWorkerInterface() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 1276 | 0;
}

function ___unlockfile($f) {
 $f = $f | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}

function ___lockfile($f) {
 $f = $f | 0;
 var label = 0, sp = 0;
 sp = STACKTOP;
 return 0;
}

function b6(p0, p1, p2) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 p2 = p2 | 0;
 nullFunc_viii(6);
}

function _VP8InitClipTables() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}

function b9(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_iii(9);
 return 0;
}

function _VP8YUVInit() {
 var label = 0, sp = 0;
 sp = STACKTOP;
 return;
}

function setDynamicTop(value) {
 value = value | 0;
 DYNAMICTOP = value;
}

function setTempRet0(value) {
 value = value | 0;
 tempRet0 = value;
}

function b3(p0, p1) {
 p0 = p0 | 0;
 p1 = p1 | 0;
 nullFunc_vii(3);
}

function stackRestore(top) {
 top = top | 0;
 STACKTOP = top;
}

function b5(p0) {
 p0 = p0 | 0;
 nullFunc_ii(5);
 return 0;
}

function b2(p0) {
 p0 = p0 | 0;
 nullFunc_vi(2);
}

function getTempRet0() {
 return tempRet0 | 0;
}

function stackSave() {
 return STACKTOP | 0;
}

// EMSCRIPTEN_END_FUNCS
var FUNCTION_TABLE_iiii = [b0,b0,b0,b0,b0,b0,b0,b0,___stdout_write,___stdio_seek,b0,b0,b0,b0,b0,b0,b0,_EmitAlphaRGB,_EmitAlphaYUV,_EmitAlphaRGBA4444,b0,_EmitRescaledAlphaRGB,_ExportAlphaRGBA4444,_ExportAlpha,b0,_EmitRescaledAlphaYUV,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,___stdio_write,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0
,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0,b0];
var FUNCTION_TABLE_viiiii = [b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,_ApplyAlphaMultiply,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_VFilter16,_HFilter16,b1,b1,_VFilter16i,_HFilter16i,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_HorizontalFilter,_VerticalFilter,_GradientFilter,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,_WebPYuv444ToRgbC,_WebPYuv444ToRgbaC
,_WebPYuv444ToBgrC,_WebPYuv444ToBgraC,_WebPYuv444ToArgbC,_WebPYuv444ToRgba4444C,_WebPYuv444ToRgb565C,_YuvToRgbRow,_YuvToRgbaRow,_YuvToBgrRow,_YuvToBgraRow,_YuvToArgbRow,_YuvToRgba4444Row,_YuvToRgb565Row,b1,_WebPConvertARGBToUV_C,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1
,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1,b1];
var FUNCTION_TABLE_vi = [b2,_Init,b2,b2,_Launch,_Execute,_End,b2,b2,b2,b2,b2,b2,_CustomTeardown,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_DC4,_TM4,_VE4,_HE4,_RD4,_VR4
,_LD4,_VL4,_HD4,_HU4,_DC16,_TM16,_VE16,_HE16,_DC16NoTop,_DC16NoLeft,_DC16NoTopLeft,_DC8uv,_TM8uv,_VE8uv,_HE8uv,_DC8uvNoTop,_DC8uvNoLeft,_DC8uvNoTopLeft,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_WebPRescalerExportRowExpandC,_WebPRescalerExportRowShrinkC,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,_cleanup392,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2
,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2,b2];
var FUNCTION_TABLE_vii = [b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,_ExtractAlphaRows,_ProcessRows,b3
,b3,b3,b3,b3,b3,b3,_TransformWHT,b3,_TransformUV,_TransformDC,_TransformDCUV,_TransformAC3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,_VP8LAddGreenToBlueAndRed_C,b3,b3,b3,b3,b3,b3,b3,b3,_WebPRescalerImportRowExpandC,_WebPRescalerImportRowShrinkC,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3,b3
,b3,b3,b3,b3,b3,b3,b3,b3,b3];
var FUNCTION_TABLE_iiiiiii = [b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,_DispatchAlpha,b4,_ExtractAlpha,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4,b4
,b4,b4,b4,b4,b4];
var FUNCTION_TABLE_ii = [b5,b5,_Reset,_Sync,b5,b5,b5,___stdio_close,b5,b5,b5,_CustomPut,_CustomSetup,b5,b5,b5];
var FUNCTION_TABLE_viii = [b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_WebPMultARGBRowC
,b6,b6,b6,b6,b6,b6,b6,_TransformTwo,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_SimpleVFilter16,_SimpleHFilter16,_SimpleVFilter16i,_SimpleHFilter16i,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,_VP8LTransformColorInverse_C,_VP8LConvertBGRAToRGB_C,_VP8LConvertBGRAToRGBA_C,_VP8LConvertBGRAToRGBA4444_C,_VP8LConvertBGRAToRGB565_C,_VP8LConvertBGRAToBGR_C,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,_ConvertARGBToY,b6,_ConvertRGB24ToY,_ConvertBGR24ToY,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6
,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6,b6];
var FUNCTION_TABLE_viiiiiiiii = [b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,b7,_UpsampleRgbLinePair,_UpsampleRgbaLinePair,_UpsampleBgrLinePair,_UpsampleBgraLinePair,_UpsampleArgbLinePair,_UpsampleRgba4444LinePair,_UpsampleRgb565LinePair,b7,b7
,b7,b7,b7,b7,b7,b7,b7,b7,b7];
var FUNCTION_TABLE_viiiiii = [b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,_DispatchAlphaToGreen,b8,b8,b8,b8,b8,b8,b8,b8,b8,_VFilter8,_HFilter8,b8,b8,_VFilter8i,_HFilter8i,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_HorizontalUnfilter,_VerticalUnfilter,_GradientUnfilter,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,_MapARGB,_MapAlpha,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8,b8
,b8,b8,b8,b8,b8,b8,b8,b8,b8];
var FUNCTION_TABLE_iii = [b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_FinishRow,b9,b9,b9,_EmitSampledRGB,_EmitFancyRGB,_EmitYUV,b9,b9,b9,_EmitRescaledRGB,b9,b9,b9,_EmitRescaledYUV,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,_Predictor0,_Predictor1,_Predictor2,_Predictor3,_Predictor4,_Predictor5
,_Predictor6,_Predictor7,_Predictor8,_Predictor9,_Predictor10,_Predictor11,_Predictor12,_Predictor13,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9,b9
,b9,b9,b9,b9,b9,b9,b9,b9,b9];
var FUNCTION_TABLE_viiii = [b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,_WebPMultRowC,b10,_ApplyAlphaMultiply_16b,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,_WebPConvertRGBA32ToUV_C,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10
,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10,b10];

  return { _llvm_bswap_i32: _llvm_bswap_i32, _i64Subtract: _i64Subtract, _initializeWebPDecoding: _initializeWebPDecoding, _fflush: _fflush, _i64Add: _i64Add, _memmove: _memmove, _getFeaturesHeight: _getFeaturesHeight, _decodeWebP: _decodeWebP, _memset: _memset, _malloc: _malloc, _memcpy: _memcpy, _getFeaturesWidth: _getFeaturesWidth, _bitshift64Lshr: _bitshift64Lshr, _free: _free, ___errno_location: ___errno_location, _bitshift64Shl: _bitshift64Shl, runPostSets: runPostSets, _emscripten_replace_memory: _emscripten_replace_memory, stackAlloc: stackAlloc, stackSave: stackSave, stackRestore: stackRestore, establishStackSpace: establishStackSpace, setThrew: setThrew, setTempRet0: setTempRet0, getTempRet0: getTempRet0, setDynamicTop: setDynamicTop, dynCall_iiii: dynCall_iiii, dynCall_viiiii: dynCall_viiiii, dynCall_vi: dynCall_vi, dynCall_vii: dynCall_vii, dynCall_iiiiiii: dynCall_iiiiiii, dynCall_ii: dynCall_ii, dynCall_viii: dynCall_viii, dynCall_viiiiiiiii: dynCall_viiiiiiiii, dynCall_viiiiii: dynCall_viiiiii, dynCall_iii: dynCall_iii, dynCall_viiii: dynCall_viiii };
})
// EMSCRIPTEN_END_ASM
(Module.asmGlobalArg, Module.asmLibraryArg, buffer);
var real__i64Subtract = asm["_i64Subtract"]; asm["_i64Subtract"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Subtract.apply(null, arguments);
};

var real__getFeaturesHeight = asm["_getFeaturesHeight"]; asm["_getFeaturesHeight"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__getFeaturesHeight.apply(null, arguments);
};

var real__fflush = asm["_fflush"]; asm["_fflush"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__fflush.apply(null, arguments);
};

var real__i64Add = asm["_i64Add"]; asm["_i64Add"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__i64Add.apply(null, arguments);
};

var real__memmove = asm["_memmove"]; asm["_memmove"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__memmove.apply(null, arguments);
};

var real__initializeWebPDecoding = asm["_initializeWebPDecoding"]; asm["_initializeWebPDecoding"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__initializeWebPDecoding.apply(null, arguments);
};

var real__decodeWebP = asm["_decodeWebP"]; asm["_decodeWebP"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__decodeWebP.apply(null, arguments);
};

var real__malloc = asm["_malloc"]; asm["_malloc"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__malloc.apply(null, arguments);
};

var real____errno_location = asm["___errno_location"]; asm["___errno_location"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real____errno_location.apply(null, arguments);
};

var real__getFeaturesWidth = asm["_getFeaturesWidth"]; asm["_getFeaturesWidth"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__getFeaturesWidth.apply(null, arguments);
};

var real__bitshift64Lshr = asm["_bitshift64Lshr"]; asm["_bitshift64Lshr"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Lshr.apply(null, arguments);
};

var real__free = asm["_free"]; asm["_free"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__free.apply(null, arguments);
};

var real__llvm_bswap_i32 = asm["_llvm_bswap_i32"]; asm["_llvm_bswap_i32"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__llvm_bswap_i32.apply(null, arguments);
};

var real__bitshift64Shl = asm["_bitshift64Shl"]; asm["_bitshift64Shl"] = function() {
assert(runtimeInitialized, 'you need to wait for the runtime to be ready (e.g. wait for main() to be called)');
assert(!runtimeExited, 'the runtime was exited (use NO_EXIT_RUNTIME to keep it alive after main() exits)');
return real__bitshift64Shl.apply(null, arguments);
};
var _i64Subtract = Module["_i64Subtract"] = asm["_i64Subtract"];
var _getFeaturesHeight = Module["_getFeaturesHeight"] = asm["_getFeaturesHeight"];
var _fflush = Module["_fflush"] = asm["_fflush"];
var runPostSets = Module["runPostSets"] = asm["runPostSets"];
var _i64Add = Module["_i64Add"] = asm["_i64Add"];
var _memmove = Module["_memmove"] = asm["_memmove"];
var _initializeWebPDecoding = Module["_initializeWebPDecoding"] = asm["_initializeWebPDecoding"];
var _decodeWebP = Module["_decodeWebP"] = asm["_decodeWebP"];
var _memset = Module["_memset"] = asm["_memset"];
var _malloc = Module["_malloc"] = asm["_malloc"];
var ___errno_location = Module["___errno_location"] = asm["___errno_location"];
var _memcpy = Module["_memcpy"] = asm["_memcpy"];
var _emscripten_replace_memory = Module["_emscripten_replace_memory"] = asm["_emscripten_replace_memory"];
var _getFeaturesWidth = Module["_getFeaturesWidth"] = asm["_getFeaturesWidth"];
var _bitshift64Lshr = Module["_bitshift64Lshr"] = asm["_bitshift64Lshr"];
var _free = Module["_free"] = asm["_free"];
var _llvm_bswap_i32 = Module["_llvm_bswap_i32"] = asm["_llvm_bswap_i32"];
var _bitshift64Shl = Module["_bitshift64Shl"] = asm["_bitshift64Shl"];
var dynCall_iiii = Module["dynCall_iiii"] = asm["dynCall_iiii"];
var dynCall_viiiii = Module["dynCall_viiiii"] = asm["dynCall_viiiii"];
var dynCall_vi = Module["dynCall_vi"] = asm["dynCall_vi"];
var dynCall_vii = Module["dynCall_vii"] = asm["dynCall_vii"];
var dynCall_iiiiiii = Module["dynCall_iiiiiii"] = asm["dynCall_iiiiiii"];
var dynCall_ii = Module["dynCall_ii"] = asm["dynCall_ii"];
var dynCall_viii = Module["dynCall_viii"] = asm["dynCall_viii"];
var dynCall_viiiiiiiii = Module["dynCall_viiiiiiiii"] = asm["dynCall_viiiiiiiii"];
var dynCall_viiiiii = Module["dynCall_viiiiii"] = asm["dynCall_viiiiii"];
var dynCall_iii = Module["dynCall_iii"] = asm["dynCall_iii"];
var dynCall_viiii = Module["dynCall_viiii"] = asm["dynCall_viiii"];
;

Runtime.stackAlloc = asm['stackAlloc'];
Runtime.stackSave = asm['stackSave'];
Runtime.stackRestore = asm['stackRestore'];
Runtime.establishStackSpace = asm['establishStackSpace'];

Runtime.setDynamicTop = asm['setDynamicTop'];

Runtime.setTempRet0 = asm['setTempRet0'];
Runtime.getTempRet0 = asm['getTempRet0'];



// === Auto-generated postamble setup entry stuff ===


function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun']) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString(Module['thisProgram']), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);


  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    exit(ret, /* implicit = */ true);
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    if (ABORT) return; 

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['onRuntimeInitialized']) Module['onRuntimeInitialized']();

    if (Module['_main'] && shouldRunNow) Module['callMain'](args);

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status, implicit) {
  if (implicit && Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') implicitly called by end of main(), but noExitRuntime, so not exiting the runtime (you can use emscripten_force_exit, if you want to force a true shutdown)');
    return;
  }

  if (Module['noExitRuntime']) {
    Module.printErr('exit(' + status + ') called, but noExitRuntime, so halting execution but not exiting the runtime or preventing further async execution (you can use emscripten_force_exit, if you want to force a true shutdown)');
  } else {

    ABORT = true;
    EXITSTATUS = status;
    STACKTOP = initialStackTop;

    exitRuntime();

    if (Module['onExit']) Module['onExit'](status);
  }

  if (ENVIRONMENT_IS_NODE) {
    // Work around a node.js bug where stdout buffer is not flushed at process exit:
    // Instead of process.exit() directly, wait for stdout flush event.
    // See https://github.com/joyent/node/issues/1669 and https://github.com/kripken/emscripten/issues/2582
    // Workaround is based on https://github.com/RReverser/acorn/commit/50ab143cecc9ed71a2d66f78b4aec3bb2e9844f6
    process['stdout']['once']('drain', function () {
      process['exit'](status);
    });
    console.log(' '); // Make sure to print something to force the drain event to occur, in case the stdout buffer was empty.
    // Work around another node bug where sometimes 'drain' is never fired - make another effort
    // to emit the exit status, after a significant delay (if node hasn't fired drain by then, give up)
    setTimeout(function() {
      process['exit'](status);
    }, 500);
  } else
  if (ENVIRONMENT_IS_SHELL && typeof quit === 'function') {
    quit(status);
  }
  // if we reach here, we must throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

var abortDecorators = [];

function abort(what) {
  if (what !== undefined) {
    Module.print(what);
    Module.printErr(what);
    what = JSON.stringify(what)
  } else {
    what = '';
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  var output = 'abort(' + what + ') at ' + stackTrace() + extra;
  if (abortDecorators) {
    abortDecorators.forEach(function(decorator) {
      output = decorator(output, what);
    });
  }
  throw output;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}







